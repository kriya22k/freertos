
FreeRTOS_ThreadCreation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080056b0  080056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c0  080057c0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080057c0  080057c0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057c0  080057c0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080057c0  080057c0  000157c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080057d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f98  20000080  08005850  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20004018  08005850  00024018  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_line   00017051  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0001bc4a  00000000  00000000  00037107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003777  00000000  00000000  00052d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  000564c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011592e  00000000  00000000  00057ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001488  00000000  00000000  0016d408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005220  00000000  00000000  0016e890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00173ab0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006130  00000000  00000000  00173b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08005698 	.word	0x08005698

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08005698 	.word	0x08005698

08000240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000278 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000244:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000246:	e003      	b.n	8000250 <LoopCopyDataInit>

08000248 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800024a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800024c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800024e:	3104      	adds	r1, #4

08000250 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000254:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000256:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000258:	d3f6      	bcc.n	8000248 <CopyDataInit>
	ldr	r2, =_sbss
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <LoopForever+0x12>)
	b	LoopFillZerobss
 800025c:	e002      	b.n	8000264 <LoopFillZerobss>

0800025e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800025e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000260:	f842 3b04 	str.w	r3, [r2], #4

08000264 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <LoopForever+0x16>)
	cmp	r2, r3
 8000266:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000268:	d3f9      	bcc.n	800025e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800026a:	f000 f9e3 	bl	8000634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f004 fd15 	bl	8004c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000272:	f004 fc0f 	bl	8004a94 <main>

08000276 <LoopForever>:

LoopForever:
    b LoopForever
 8000276:	e7fe      	b.n	8000276 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000278:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800027c:	080057d0 	.word	0x080057d0
	ldr	r0, =_sdata
 8000280:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000284:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8000288:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 800028c:	20004018 	.word	0x20004018

08000290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC1_2_IRQHandler>
	...

08000294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <HAL_MspInit+0x50>)
 800029c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800029e:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <HAL_MspInit+0x50>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6613      	str	r3, [r2, #96]	; 0x60
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <HAL_MspInit+0x50>)
 80002a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <HAL_MspInit+0x50>)
 80002b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002b6:	4a0b      	ldr	r2, [pc, #44]	; (80002e4 <HAL_MspInit+0x50>)
 80002b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002bc:	6593      	str	r3, [r2, #88]	; 0x58
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <HAL_MspInit+0x50>)
 80002c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2107      	movs	r1, #7
 80002ce:	f06f 0001 	mvn.w	r0, #1
 80002d2:	f000 fb83 	bl	80009dc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80002d6:	f000 fe05 	bl	8000ee4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000

080002e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08c      	sub	sp, #48	; 0x30
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80002f0:	2300      	movs	r3, #0
 80002f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 80002f8:	2200      	movs	r2, #0
 80002fa:	6879      	ldr	r1, [r7, #4]
 80002fc:	2031      	movs	r0, #49	; 0x31
 80002fe:	f000 fb6d 	bl	80009dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000302:	2031      	movs	r0, #49	; 0x31
 8000304:	f000 fb84 	bl	8000a10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000308:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <HAL_InitTick+0x9c>)
 800030a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800030c:	4a1d      	ldr	r2, [pc, #116]	; (8000384 <HAL_InitTick+0x9c>)
 800030e:	f043 0310 	orr.w	r3, r3, #16
 8000312:	6593      	str	r3, [r2, #88]	; 0x58
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <HAL_InitTick+0x9c>)
 8000316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000318:	f003 0310 	and.w	r3, r3, #16
 800031c:	60fb      	str	r3, [r7, #12]
 800031e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000320:	f107 0210 	add.w	r2, r7, #16
 8000324:	f107 0314 	add.w	r3, r7, #20
 8000328:	4611      	mov	r1, r2
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fce0 	bl	8001cf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000330:	f001 fcca 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 8000334:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <HAL_InitTick+0xa0>)
 800033a:	fba2 2303 	umull	r2, r3, r2, r3
 800033e:	0c9b      	lsrs	r3, r3, #18
 8000340:	3b01      	subs	r3, #1
 8000342:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <HAL_InitTick+0xa4>)
 8000346:	4a12      	ldr	r2, [pc, #72]	; (8000390 <HAL_InitTick+0xa8>)
 8000348:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <HAL_InitTick+0xa4>)
 800034c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000350:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <HAL_InitTick+0xa4>)
 8000354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000356:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <HAL_InitTick+0xa4>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <HAL_InitTick+0xa4>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000364:	4809      	ldr	r0, [pc, #36]	; (800038c <HAL_InitTick+0xa4>)
 8000366:	f001 fdc5 	bl	8001ef4 <HAL_TIM_Base_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d104      	bne.n	800037a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000370:	4806      	ldr	r0, [pc, #24]	; (800038c <HAL_InitTick+0xa4>)
 8000372:	f001 fe21 	bl	8001fb8 <HAL_TIM_Base_Start_IT>
 8000376:	4603      	mov	r3, r0
 8000378:	e000      	b.n	800037c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800037a:	2301      	movs	r3, #1
}
 800037c:	4618      	mov	r0, r3
 800037e:	3730      	adds	r7, #48	; 0x30
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	431bde83 	.word	0x431bde83
 800038c:	20003f6c 	.word	0x20003f6c
 8000390:	40001000 	.word	0x40001000

08000394 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000398:	4802      	ldr	r0, [pc, #8]	; (80003a4 <TIM6_IRQHandler+0x10>)
 800039a:	f001 fe7d 	bl	8002098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20003f6c 	.word	0x20003f6c

080003a8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <ITM_SendChar+0x48>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <ITM_SendChar+0x48>)
 80003b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003bc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <ITM_SendChar+0x4c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a0c      	ldr	r2, [pc, #48]	; (80003f4 <ITM_SendChar+0x4c>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80003ca:	bf00      	nop
 80003cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0f8      	beq.n	80003cc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	6013      	str	r3, [r2, #0]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000edfc 	.word	0xe000edfc
 80003f4:	e0000e00 	.word	0xe0000e00

080003f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	60f8      	str	r0, [r7, #12]
 8000400:	60b9      	str	r1, [r7, #8]
 8000402:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
 8000408:	e00a      	b.n	8000420 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800040a:	e000      	b.n	800040e <_read+0x16>
 800040c:	bf00      	nop
 800040e:	4601      	mov	r1, r0
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	1c5a      	adds	r2, r3, #1
 8000414:	60ba      	str	r2, [r7, #8]
 8000416:	b2ca      	uxtb	r2, r1
 8000418:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	3301      	adds	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	697a      	ldr	r2, [r7, #20]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	429a      	cmp	r2, r3
 8000426:	dbf0      	blt.n	800040a <_read+0x12>
	}

return len;
 8000428:	687b      	ldr	r3, [r7, #4]
}
 800042a:	4618      	mov	r0, r3
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b086      	sub	sp, #24
 8000436:	af00      	add	r7, sp, #0
 8000438:	60f8      	str	r0, [r7, #12]
 800043a:	60b9      	str	r1, [r7, #8]
 800043c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
 8000442:	e009      	b.n	8000458 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	1c5a      	adds	r2, r3, #1
 8000448:	60ba      	str	r2, [r7, #8]
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ffab 	bl	80003a8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	3301      	adds	r3, #1
 8000456:	617b      	str	r3, [r7, #20]
 8000458:	697a      	ldr	r2, [r7, #20]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	429a      	cmp	r2, r3
 800045e:	dbf1      	blt.n	8000444 <_write+0x12>
	}
	return len;
 8000460:	687b      	ldr	r3, [r7, #4]
}
 8000462:	4618      	mov	r0, r3
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <_close>:

int _close(int file)
{
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
	return -1;
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000476:	4618      	mov	r0, r3
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000492:	605a      	str	r2, [r3, #4]
	return 0;
 8000494:	2300      	movs	r3, #0
}
 8000496:	4618      	mov	r0, r3
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <_isatty>:

int _isatty(int file)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
	return 1;
 80004aa:	2301      	movs	r3, #1
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	607a      	str	r2, [r7, #4]
	return 0;
 80004c4:	2300      	movs	r3, #0
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004dc:	4a14      	ldr	r2, [pc, #80]	; (8000530 <_sbrk+0x5c>)
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <_sbrk+0x60>)
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <_sbrk+0x64>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d102      	bne.n	80004f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <_sbrk+0x64>)
 80004f2:	4a12      	ldr	r2, [pc, #72]	; (800053c <_sbrk+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <_sbrk+0x64>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4413      	add	r3, r2
 80004fe:	693a      	ldr	r2, [r7, #16]
 8000500:	429a      	cmp	r2, r3
 8000502:	d207      	bcs.n	8000514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000504:	f004 fbc4 	bl	8004c90 <__errno>
 8000508:	4603      	mov	r3, r0
 800050a:	220c      	movs	r2, #12
 800050c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800050e:	f04f 33ff 	mov.w	r3, #4294967295
 8000512:	e009      	b.n	8000528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <_sbrk+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <_sbrk+0x64>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4413      	add	r3, r2
 8000522:	4a05      	ldr	r2, [pc, #20]	; (8000538 <_sbrk+0x64>)
 8000524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000526:	68fb      	ldr	r3, [r7, #12]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20030000 	.word	0x20030000
 8000534:	00000800 	.word	0x00000800
 8000538:	2000009c 	.word	0x2000009c
 800053c:	20004018 	.word	0x20004018

08000540 <BSP_LED_Init>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08c      	sub	sp, #48	; 0x30
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
  int32_t          status = BSP_ERROR_NONE;
 800054a:	2300      	movs	r3, #0
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED9)
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d10c      	bne.n	800056e <BSP_LED_Init+0x2e>
  {
    LED9_GPIO_CLK_ENABLE();
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <BSP_LED_Init+0xb0>)
 8000556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000558:	4a25      	ldr	r2, [pc, #148]	; (80005f0 <BSP_LED_Init+0xb0>)
 800055a:	f043 0308 	orr.w	r3, r3, #8
 800055e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000560:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <BSP_LED_Init+0xb0>)
 8000562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000564:	f003 0308 	and.w	r3, r3, #8
 8000568:	617b      	str	r3, [r7, #20]
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	e019      	b.n	80005a2 <BSP_LED_Init+0x62>
  }
  else /* Led = LED10 */
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <BSP_LED_Init+0xb0>)
 8000570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000572:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <BSP_LED_Init+0xb0>)
 8000574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000578:	6593      	str	r3, [r2, #88]	; 0x58
 800057a:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <BSP_LED_Init+0xb0>)
 800057c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800057e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000586:	f000 fc9d 	bl	8000ec4 <HAL_PWREx_EnableVddIO2>
    LED10_GPIO_CLK_ENABLE();
 800058a:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <BSP_LED_Init+0xb0>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <BSP_LED_Init+0xb0>)
 8000590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <BSP_LED_Init+0xb0>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <BSP_LED_Init+0xb4>)
 80005a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005aa:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Pull  = GPIO_PULLUP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b4:	2303      	movs	r3, #3
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <BSP_LED_Init+0xb8>)
 80005bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c0:	f107 0218 	add.w	r2, r7, #24
 80005c4:	4611      	mov	r1, r2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fa30 	bl	8000a2c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <BSP_LED_Init+0xb8>)
 80005d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <BSP_LED_Init+0xb4>)
 80005d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	f000 fba4 	bl	8000d2c <HAL_GPIO_WritePin>

  return status;
 80005e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3730      	adds	r7, #48	; 0x30
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000004 	.word	0x20000004

080005fc <BSP_LED_Toggle>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval BSP error code
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <BSP_LED_Toggle+0x30>)
 800060e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	4906      	ldr	r1, [pc, #24]	; (8000630 <BSP_LED_Toggle+0x34>)
 8000616:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800061a:	4619      	mov	r1, r3
 800061c:	4610      	mov	r0, r2
 800061e:	f000 fb9d 	bl	8000d5c <HAL_GPIO_TogglePin>

  return status;
 8000622:	68fb      	ldr	r3, [r7, #12]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <SystemInit+0x20>)
 800063a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800063e:	4a05      	ldr	r2, [pc, #20]	; (8000654 <SystemInit+0x20>)
 8000640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000658:	b480      	push	{r7}
 800065a:	b087      	sub	sp, #28
 800065c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800065e:	4b4f      	ldr	r3, [pc, #316]	; (800079c <SystemCoreClockUpdate+0x144>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d107      	bne.n	800067a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800066a:	4b4c      	ldr	r3, [pc, #304]	; (800079c <SystemCoreClockUpdate+0x144>)
 800066c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	f003 030f 	and.w	r3, r3, #15
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	e005      	b.n	8000686 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800067a:	4b48      	ldr	r3, [pc, #288]	; (800079c <SystemCoreClockUpdate+0x144>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	091b      	lsrs	r3, r3, #4
 8000680:	f003 030f 	and.w	r3, r3, #15
 8000684:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000686:	4a46      	ldr	r2, [pc, #280]	; (80007a0 <SystemCoreClockUpdate+0x148>)
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800068e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000690:	4b42      	ldr	r3, [pc, #264]	; (800079c <SystemCoreClockUpdate+0x144>)
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f003 030c 	and.w	r3, r3, #12
 8000698:	2b0c      	cmp	r3, #12
 800069a:	d866      	bhi.n	800076a <SystemCoreClockUpdate+0x112>
 800069c:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <SystemCoreClockUpdate+0x4c>)
 800069e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a2:	bf00      	nop
 80006a4:	080006d9 	.word	0x080006d9
 80006a8:	0800076b 	.word	0x0800076b
 80006ac:	0800076b 	.word	0x0800076b
 80006b0:	0800076b 	.word	0x0800076b
 80006b4:	080006e1 	.word	0x080006e1
 80006b8:	0800076b 	.word	0x0800076b
 80006bc:	0800076b 	.word	0x0800076b
 80006c0:	0800076b 	.word	0x0800076b
 80006c4:	080006e9 	.word	0x080006e9
 80006c8:	0800076b 	.word	0x0800076b
 80006cc:	0800076b 	.word	0x0800076b
 80006d0:	0800076b 	.word	0x0800076b
 80006d4:	080006f1 	.word	0x080006f1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80006d8:	4a32      	ldr	r2, [pc, #200]	; (80007a4 <SystemCoreClockUpdate+0x14c>)
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	6013      	str	r3, [r2, #0]
      break;
 80006de:	e048      	b.n	8000772 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80006e0:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <SystemCoreClockUpdate+0x14c>)
 80006e2:	4a31      	ldr	r2, [pc, #196]	; (80007a8 <SystemCoreClockUpdate+0x150>)
 80006e4:	601a      	str	r2, [r3, #0]
      break;
 80006e6:	e044      	b.n	8000772 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <SystemCoreClockUpdate+0x14c>)
 80006ea:	4a2f      	ldr	r2, [pc, #188]	; (80007a8 <SystemCoreClockUpdate+0x150>)
 80006ec:	601a      	str	r2, [r3, #0]
      break;
 80006ee:	e040      	b.n	8000772 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <SystemCoreClockUpdate+0x144>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	f003 0303 	and.w	r3, r3, #3
 80006f8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <SystemCoreClockUpdate+0x144>)
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	091b      	lsrs	r3, r3, #4
 8000700:	f003 030f 	and.w	r3, r3, #15
 8000704:	3301      	adds	r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2b02      	cmp	r3, #2
 800070c:	d003      	beq.n	8000716 <SystemCoreClockUpdate+0xbe>
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d006      	beq.n	8000722 <SystemCoreClockUpdate+0xca>
 8000714:	e00b      	b.n	800072e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000716:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <SystemCoreClockUpdate+0x150>)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	613b      	str	r3, [r7, #16]
          break;
 8000720:	e00b      	b.n	800073a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000722:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemCoreClockUpdate+0x150>)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	613b      	str	r3, [r7, #16]
          break;
 800072c:	e005      	b.n	800073a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800072e:	697a      	ldr	r2, [r7, #20]
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	613b      	str	r3, [r7, #16]
          break;
 8000738:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <SystemCoreClockUpdate+0x144>)
 800073c:	68db      	ldr	r3, [r3, #12]
 800073e:	0a1b      	lsrs	r3, r3, #8
 8000740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	fb02 f303 	mul.w	r3, r2, r3
 800074a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemCoreClockUpdate+0x144>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	0e5b      	lsrs	r3, r3, #25
 8000752:	f003 0303 	and.w	r3, r3, #3
 8000756:	3301      	adds	r3, #1
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	fbb2 f3f3 	udiv	r3, r2, r3
 8000764:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <SystemCoreClockUpdate+0x14c>)
 8000766:	6013      	str	r3, [r2, #0]
      break;
 8000768:	e003      	b.n	8000772 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <SystemCoreClockUpdate+0x14c>)
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	6013      	str	r3, [r2, #0]
      break;
 8000770:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <SystemCoreClockUpdate+0x144>)
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	091b      	lsrs	r3, r3, #4
 8000778:	f003 030f 	and.w	r3, r3, #15
 800077c:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <SystemCoreClockUpdate+0x154>)
 800077e:	5cd3      	ldrb	r3, [r2, r3]
 8000780:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <SystemCoreClockUpdate+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	fa22 f303 	lsr.w	r3, r2, r3
 800078c:	4a05      	ldr	r2, [pc, #20]	; (80007a4 <SystemCoreClockUpdate+0x14c>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	371c      	adds	r7, #28
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40021000 	.word	0x40021000
 80007a0:	0800571c 	.word	0x0800571c
 80007a4:	2000000c 	.word	0x2000000c
 80007a8:	00f42400 	.word	0x00f42400
 80007ac:	08005704 	.word	0x08005704

080007b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80007ba:	2004      	movs	r0, #4
 80007bc:	f000 f903 	bl	80009c6 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80007c0:	f7ff ff4a 	bl	8000658 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fd8f 	bl	80002e8 <HAL_InitTick>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	71fb      	strb	r3, [r7, #7]
 80007d4:	e001      	b.n	80007da <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007d6:	f7ff fd5d 	bl	8000294 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007da:	79fb      	ldrb	r3, [r7, #7]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_IncTick+0x20>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x24>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_IncTick+0x24>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000014 	.word	0x20000014
 8000808:	20003fb8 	.word	0x20003fb8

0800080c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_GetTick+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20003fb8 	.word	0x20003fb8

08000824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800082c:	f7ff ffee 	bl	800080c <HAL_GetTick>
 8000830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800083c:	d005      	beq.n	800084a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <HAL_Delay+0x44>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800084a:	bf00      	nop
 800084c:	f7ff ffde 	bl	800080c <HAL_GetTick>
 8000850:	4602      	mov	r2, r0
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	429a      	cmp	r2, r3
 800085a:	d8f7      	bhi.n	800084c <HAL_Delay+0x28>
  {
  }
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000014 	.word	0x20000014

0800086c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	60d3      	str	r3, [r2, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <__NVIC_GetPriorityGrouping+0x18>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	f003 0307 	and.w	r3, r3, #7
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	db0b      	blt.n	80008fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	f003 021f 	and.w	r2, r3, #31
 80008e8:	4907      	ldr	r1, [pc, #28]	; (8000908 <__NVIC_EnableIRQ+0x38>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	095b      	lsrs	r3, r3, #5
 80008f0:	2001      	movs	r0, #1
 80008f2:	fa00 f202 	lsl.w	r2, r0, r2
 80008f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000e100 	.word	0xe000e100

0800090c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db0a      	blt.n	8000936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	490c      	ldr	r1, [pc, #48]	; (8000958 <__NVIC_SetPriority+0x4c>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	0152      	lsls	r2, r2, #5
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	440b      	add	r3, r1
 8000930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000934:	e00a      	b.n	800094c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4908      	ldr	r1, [pc, #32]	; (800095c <__NVIC_SetPriority+0x50>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 030f 	and.w	r3, r3, #15
 8000942:	3b04      	subs	r3, #4
 8000944:	0152      	lsls	r2, r2, #5
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	440b      	add	r3, r1
 800094a:	761a      	strb	r2, [r3, #24]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000e100 	.word	0xe000e100
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000960:	b480      	push	{r7}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f1c3 0307 	rsb	r3, r3, #7
 800097a:	2b03      	cmp	r3, #3
 800097c:	bf28      	it	cs
 800097e:	2303      	movcs	r3, #3
 8000980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3303      	adds	r3, #3
 8000986:	2b06      	cmp	r3, #6
 8000988:	d902      	bls.n	8000990 <NVIC_EncodePriority+0x30>
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3b04      	subs	r3, #4
 800098e:	e000      	b.n	8000992 <NVIC_EncodePriority+0x32>
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	f04f 32ff 	mov.w	r2, #4294967295
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43da      	mvns	r2, r3
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	401a      	ands	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43d9      	mvns	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	4313      	orrs	r3, r2
         );
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3724      	adds	r7, #36	; 0x24
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ff4c 	bl	800086c <__NVIC_SetPriorityGrouping>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
 80009e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009ea:	f7ff ff63 	bl	80008b4 <__NVIC_GetPriorityGrouping>
 80009ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	68b9      	ldr	r1, [r7, #8]
 80009f4:	6978      	ldr	r0, [r7, #20]
 80009f6:	f7ff ffb3 	bl	8000960 <NVIC_EncodePriority>
 80009fa:	4602      	mov	r2, r0
 80009fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff82 	bl	800090c <__NVIC_SetPriority>
}
 8000a08:	bf00      	nop
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff56 	bl	80008d0 <__NVIC_EnableIRQ>
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a3a:	e158      	b.n	8000cee <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f000 814a 	beq.w	8000ce8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d005      	beq.n	8000a6c <HAL_GPIO_Init+0x40>
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 0303 	and.w	r3, r3, #3
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d130      	bne.n	8000ace <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	f003 0201 	and.w	r2, r3, #1
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d017      	beq.n	8000b0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 0303 	and.w	r3, r3, #3
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d123      	bne.n	8000b5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	08da      	lsrs	r2, r3, #3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3208      	adds	r2, #8
 8000b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	691a      	ldr	r2, [r3, #16]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	f003 0307 	and.w	r3, r3, #7
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	08da      	lsrs	r2, r3, #3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3208      	adds	r2, #8
 8000b58:	6939      	ldr	r1, [r7, #16]
 8000b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0203 	and.w	r2, r3, #3
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f000 80a4 	beq.w	8000ce8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000ba0:	4a5a      	ldr	r2, [pc, #360]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	3318      	adds	r3, #24
 8000ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a52      	ldr	r2, [pc, #328]	; (8000d10 <HAL_GPIO_Init+0x2e4>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d025      	beq.n	8000c18 <HAL_GPIO_Init+0x1ec>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a51      	ldr	r2, [pc, #324]	; (8000d14 <HAL_GPIO_Init+0x2e8>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d01f      	beq.n	8000c14 <HAL_GPIO_Init+0x1e8>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a50      	ldr	r2, [pc, #320]	; (8000d18 <HAL_GPIO_Init+0x2ec>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d019      	beq.n	8000c10 <HAL_GPIO_Init+0x1e4>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a4f      	ldr	r2, [pc, #316]	; (8000d1c <HAL_GPIO_Init+0x2f0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d013      	beq.n	8000c0c <HAL_GPIO_Init+0x1e0>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a4e      	ldr	r2, [pc, #312]	; (8000d20 <HAL_GPIO_Init+0x2f4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d00d      	beq.n	8000c08 <HAL_GPIO_Init+0x1dc>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a4d      	ldr	r2, [pc, #308]	; (8000d24 <HAL_GPIO_Init+0x2f8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d007      	beq.n	8000c04 <HAL_GPIO_Init+0x1d8>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a4c      	ldr	r2, [pc, #304]	; (8000d28 <HAL_GPIO_Init+0x2fc>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d101      	bne.n	8000c00 <HAL_GPIO_Init+0x1d4>
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	e00c      	b.n	8000c1a <HAL_GPIO_Init+0x1ee>
 8000c00:	2307      	movs	r3, #7
 8000c02:	e00a      	b.n	8000c1a <HAL_GPIO_Init+0x1ee>
 8000c04:	2305      	movs	r3, #5
 8000c06:	e008      	b.n	8000c1a <HAL_GPIO_Init+0x1ee>
 8000c08:	2304      	movs	r3, #4
 8000c0a:	e006      	b.n	8000c1a <HAL_GPIO_Init+0x1ee>
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e004      	b.n	8000c1a <HAL_GPIO_Init+0x1ee>
 8000c10:	2302      	movs	r3, #2
 8000c12:	e002      	b.n	8000c1a <HAL_GPIO_Init+0x1ee>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e000      	b.n	8000c1a <HAL_GPIO_Init+0x1ee>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	f002 0203 	and.w	r2, r2, #3
 8000c20:	00d2      	lsls	r2, r2, #3
 8000c22:	4093      	lsls	r3, r2
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000c2a:	4938      	ldr	r1, [pc, #224]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	3318      	adds	r3, #24
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c38:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c5c:	4a2b      	ldr	r2, [pc, #172]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c86:	4a21      	ldr	r2, [pc, #132]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cb2:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	3301      	adds	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f47f ae9f 	bne.w	8000a3c <HAL_GPIO_Init+0x10>
  }
}
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	371c      	adds	r7, #28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	4002f400 	.word	0x4002f400
 8000d10:	42020000 	.word	0x42020000
 8000d14:	42020400 	.word	0x42020400
 8000d18:	42020800 	.word	0x42020800
 8000d1c:	42020c00 	.word	0x42020c00
 8000d20:	42021000 	.word	0x42021000
 8000d24:	42021400 	.word	0x42021400
 8000d28:	42021800 	.word	0x42021800

08000d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d3c:	787b      	ldrb	r3, [r7, #1]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d42:	887a      	ldrh	r2, [r7, #2]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d48:	e002      	b.n	8000d50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d6e:	887a      	ldrh	r2, [r7, #2]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4013      	ands	r3, r2
 8000d74:	041a      	lsls	r2, r3, #16
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43d9      	mvns	r1, r3
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	400b      	ands	r3, r1
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	619a      	str	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e007      	b.n	8000dbe <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f023 0204 	bic.w	r2, r3, #4
 8000db6:	4905      	ldr	r1, [pc, #20]	; (8000dcc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	40030400 	.word	0x40030400

08000dd0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_ICACHE_Enable+0x1c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_ICACHE_Enable+0x1c>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	40030400 	.word	0x40030400

08000df0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <HAL_PWREx_GetVoltageRange+0x18>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40007000 	.word	0x40007000

08000e0c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8000e14:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e1c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8000e1e:	f000 f871 	bl	8000f04 <HAL_PWREx_SMPS_GetEffectiveMode>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e28:	d101      	bne.n	8000e2e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e03e      	b.n	8000eac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e3a:	d101      	bne.n	8000e40 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e035      	b.n	8000eac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d101      	bne.n	8000e4c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	e02f      	b.n	8000eac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000e54:	4917      	ldr	r1, [pc, #92]	; (8000eb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	095b      	lsrs	r3, r3, #5
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	09db      	lsrs	r3, r3, #7
 8000e6a:	2232      	movs	r2, #50	; 0x32
 8000e6c:	fb02 f303 	mul.w	r3, r2, r3
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e7c:	e002      	b.n	8000e84 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e90:	d102      	bne.n	8000e98 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1f2      	bne.n	8000e7e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ea4:	d101      	bne.n	8000eaa <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e000      	b.n	8000eac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40007000 	.word	0x40007000
 8000eb8:	2000000c 	.word	0x2000000c
 8000ebc:	0a7c5ac5 	.word	0x0a7c5ac5
 8000ec0:	cccccccd 	.word	0xcccccccd

08000ec4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed2:	6053      	str	r3, [r2, #4]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40007000 	.word	0x40007000

08000ee4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef2:	6093      	str	r3, [r2, #8]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40007000 	.word	0x40007000

08000f04 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8000f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	e00a      	b.n	8000f38 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d103      	bne.n	8000f34 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8000f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	e001      	b.n	8000f38 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40007000 	.word	0x40007000

08000f4c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f000 bcc2 	b.w	80018e4 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f60:	4ba3      	ldr	r3, [pc, #652]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 030c 	and.w	r3, r3, #12
 8000f68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f6a:	4ba1      	ldr	r3, [pc, #644]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0310 	and.w	r3, r3, #16
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80e9 	beq.w	8001154 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d006      	beq.n	8000f96 <HAL_RCC_OscConfig+0x4a>
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2b0c      	cmp	r3, #12
 8000f8c:	f040 8083 	bne.w	8001096 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d17f      	bne.n	8001096 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f96:	4b96      	ldr	r3, [pc, #600]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x64>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d102      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	f000 bc9a 	b.w	80018e4 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fb4:	4b8e      	ldr	r3, [pc, #568]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d004      	beq.n	8000fca <HAL_RCC_OscConfig+0x7e>
 8000fc0:	4b8b      	ldr	r3, [pc, #556]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fc8:	e005      	b.n	8000fd6 <HAL_RCC_OscConfig+0x8a>
 8000fca:	4b89      	ldr	r3, [pc, #548]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8000fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d224      	bcs.n	8001024 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 feb8 	bl	8001d54 <RCC_SetFlashLatencyFromMSIRange>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	f000 bc7a 	b.w	80018e4 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ff0:	4b7f      	ldr	r3, [pc, #508]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a7e      	ldr	r2, [pc, #504]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b7c      	ldr	r3, [pc, #496]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	4979      	ldr	r1, [pc, #484]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 800100a:	4313      	orrs	r3, r2
 800100c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800100e:	4b78      	ldr	r3, [pc, #480]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	4974      	ldr	r1, [pc, #464]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 800101e:	4313      	orrs	r3, r2
 8001020:	604b      	str	r3, [r1, #4]
 8001022:	e026      	b.n	8001072 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001024:	4b72      	ldr	r3, [pc, #456]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a71      	ldr	r2, [pc, #452]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 800102a:	f043 0308 	orr.w	r3, r3, #8
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b6f      	ldr	r3, [pc, #444]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	496c      	ldr	r1, [pc, #432]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 800103e:	4313      	orrs	r3, r2
 8001040:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001042:	4b6b      	ldr	r3, [pc, #428]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	4967      	ldr	r1, [pc, #412]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8001052:	4313      	orrs	r3, r2
 8001054:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10a      	bne.n	8001072 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fe77 	bl	8001d54 <RCC_SetFlashLatencyFromMSIRange>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	f000 bc39 	b.w	80018e4 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001072:	f000 fe15 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001076:	4603      	mov	r3, r0
 8001078:	4a5e      	ldr	r2, [pc, #376]	; (80011f4 <HAL_RCC_OscConfig+0x2a8>)
 800107a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800107c:	4b5e      	ldr	r3, [pc, #376]	; (80011f8 <HAL_RCC_OscConfig+0x2ac>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f931 	bl	80002e8 <HAL_InitTick>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d060      	beq.n	8001152 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	f000 bc27 	b.w	80018e4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d039      	beq.n	8001112 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800109e:	4b54      	ldr	r3, [pc, #336]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a53      	ldr	r2, [pc, #332]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010aa:	f7ff fbaf 	bl	800080c <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010b0:	e00f      	b.n	80010d2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010b2:	f7ff fbab 	bl	800080c <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d908      	bls.n	80010d2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010c0:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	f000 bc09 	b.w	80018e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0e9      	beq.n	80010b2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010de:	4b44      	ldr	r3, [pc, #272]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a43      	ldr	r2, [pc, #268]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	493e      	ldr	r1, [pc, #248]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010fc:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	4939      	ldr	r1, [pc, #228]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
 8001110:	e020      	b.n	8001154 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001112:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a36      	ldr	r2, [pc, #216]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800111e:	f7ff fb75 	bl	800080c <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001124:	e00e      	b.n	8001144 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001126:	f7ff fb71 	bl	800080c <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d907      	bls.n	8001144 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001134:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e3cf      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1ea      	bne.n	8001126 <HAL_RCC_OscConfig+0x1da>
 8001150:	e000      	b.n	8001154 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001152:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d07e      	beq.n	800125e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d005      	beq.n	8001172 <HAL_RCC_OscConfig+0x226>
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2b0c      	cmp	r3, #12
 800116a:	d10e      	bne.n	800118a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2b03      	cmp	r3, #3
 8001170:	d10b      	bne.n	800118a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d06e      	beq.n	800125c <HAL_RCC_OscConfig+0x310>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d16a      	bne.n	800125c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e3ac      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001192:	d106      	bne.n	80011a2 <HAL_RCC_OscConfig+0x256>
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 800119a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	e01d      	b.n	80011de <HAL_RCC_OscConfig+0x292>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011aa:	d10c      	bne.n	80011c6 <HAL_RCC_OscConfig+0x27a>
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80011b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80011be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	e00b      	b.n	80011de <HAL_RCC_OscConfig+0x292>
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80011cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_RCC_OscConfig+0x2a4>)
 80011d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d020      	beq.n	8001228 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff fb11 	bl	800080c <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ec:	e015      	b.n	800121a <HAL_RCC_OscConfig+0x2ce>
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000
 80011f4:	2000000c 	.word	0x2000000c
 80011f8:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011fc:	f7ff fb06 	bl	800080c <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b64      	cmp	r3, #100	; 0x64
 8001208:	d907      	bls.n	800121a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800120a:	4b9f      	ldr	r3, [pc, #636]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e364      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800121a:	4b9b      	ldr	r3, [pc, #620]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0ea      	beq.n	80011fc <HAL_RCC_OscConfig+0x2b0>
 8001226:	e01a      	b.n	800125e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff faf0 	bl	800080c <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800122e:	e00e      	b.n	800124e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff faec 	bl	800080c <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d907      	bls.n	800124e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800123e:	4b92      	ldr	r3, [pc, #584]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e34a      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800124e:	4b8e      	ldr	r3, [pc, #568]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1ea      	bne.n	8001230 <HAL_RCC_OscConfig+0x2e4>
 800125a:	e000      	b.n	800125e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d06c      	beq.n	8001344 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b04      	cmp	r3, #4
 800126e:	d005      	beq.n	800127c <HAL_RCC_OscConfig+0x330>
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2b0c      	cmp	r3, #12
 8001274:	d119      	bne.n	80012aa <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d116      	bne.n	80012aa <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800127c:	4b82      	ldr	r3, [pc, #520]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_RCC_OscConfig+0x348>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e327      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001294:	4b7c      	ldr	r3, [pc, #496]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	061b      	lsls	r3, r3, #24
 80012a2:	4979      	ldr	r1, [pc, #484]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012a8:	e04c      	b.n	8001344 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d029      	beq.n	8001306 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b2:	4b75      	ldr	r3, [pc, #468]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a74      	ldr	r2, [pc, #464]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 80012b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012be:	f7ff faa5 	bl	800080c <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012c4:	e00e      	b.n	80012e4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c6:	f7ff faa1 	bl	800080c <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d907      	bls.n	80012e4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d4:	4b6c      	ldr	r3, [pc, #432]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e2ff      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012e4:	4b68      	ldr	r3, [pc, #416]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0ea      	beq.n	80012c6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f0:	4b65      	ldr	r3, [pc, #404]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	061b      	lsls	r3, r3, #24
 80012fe:	4962      	ldr	r1, [pc, #392]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
 8001304:	e01e      	b.n	8001344 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001306:	4b60      	ldr	r3, [pc, #384]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a5f      	ldr	r2, [pc, #380]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 800130c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001312:	f7ff fa7b 	bl	800080c <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001318:	e00e      	b.n	8001338 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131a:	f7ff fa77 	bl	800080c <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d907      	bls.n	8001338 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001328:	4b57      	ldr	r3, [pc, #348]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e2d5      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001338:	4b53      	ldr	r3, [pc, #332]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1ea      	bne.n	800131a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	2b00      	cmp	r3, #0
 800134e:	d05f      	beq.n	8001410 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d038      	beq.n	80013ca <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d108      	bne.n	8001372 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001360:	4b49      	ldr	r3, [pc, #292]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 8001362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001366:	4a48      	ldr	r2, [pc, #288]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 8001368:	f023 0310 	bic.w	r3, r3, #16
 800136c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001370:	e007      	b.n	8001382 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001372:	4b45      	ldr	r3, [pc, #276]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 8001374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001378:	4a43      	ldr	r2, [pc, #268]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 800137a:	f043 0310 	orr.w	r3, r3, #16
 800137e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 8001384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001388:	4a3f      	ldr	r2, [pc, #252]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001392:	f7ff fa3b 	bl	800080c <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001398:	e00f      	b.n	80013ba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800139a:	f7ff fa37 	bl	800080c <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b07      	cmp	r3, #7
 80013a6:	d908      	bls.n	80013ba <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013a8:	4b37      	ldr	r3, [pc, #220]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 80013aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e294      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ba:	4b33      	ldr	r3, [pc, #204]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 80013bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0e8      	beq.n	800139a <HAL_RCC_OscConfig+0x44e>
 80013c8:	e022      	b.n	8001410 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ca:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 80013cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d0:	4a2d      	ldr	r2, [pc, #180]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013da:	f7ff fa17 	bl	800080c <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013e0:	e00f      	b.n	8001402 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e2:	f7ff fa13 	bl	800080c <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	d908      	bls.n	8001402 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 80013f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e270      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 8001404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1e8      	bne.n	80013e2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 8131 	beq.w	8001680 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10d      	bne.n	800144a <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6593      	str	r3, [r2, #88]	; 0x58
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_RCC_OscConfig+0x53c>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001446:	2301      	movs	r3, #1
 8001448:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_RCC_OscConfig+0x540>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d122      	bne.n	800149c <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_RCC_OscConfig+0x540>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a0c      	ldr	r2, [pc, #48]	; (800148c <HAL_RCC_OscConfig+0x540>)
 800145c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001462:	f7ff f9d3 	bl	800080c <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001468:	e012      	b.n	8001490 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146a:	f7ff f9cf 	bl	800080c <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d90b      	bls.n	8001490 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <HAL_RCC_OscConfig+0x540>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d105      	bne.n	8001490 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e22d      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
 8001488:	40021000 	.word	0x40021000
 800148c:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001490:	4bb8      	ldr	r3, [pc, #736]	; (8001774 <HAL_RCC_OscConfig+0x828>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0e6      	beq.n	800146a <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01f      	beq.n	80014e8 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d010      	beq.n	80014d6 <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80014b4:	4bb0      	ldr	r3, [pc, #704]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80014b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ba:	4aaf      	ldr	r2, [pc, #700]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80014c4:	4bac      	ldr	r3, [pc, #688]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80014c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ca:	4aab      	ldr	r2, [pc, #684]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014d4:	e018      	b.n	8001508 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80014d6:	4ba8      	ldr	r3, [pc, #672]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80014d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014dc:	4aa6      	ldr	r2, [pc, #664]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014e6:	e00f      	b.n	8001508 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80014e8:	4ba3      	ldr	r3, [pc, #652]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80014ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ee:	4aa2      	ldr	r2, [pc, #648]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80014f8:	4b9f      	ldr	r3, [pc, #636]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80014fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014fe:	4a9e      	ldr	r2, [pc, #632]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 8001500:	f023 0304 	bic.w	r3, r3, #4
 8001504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d068      	beq.n	80015e2 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff f97c 	bl	800080c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001516:	e011      	b.n	800153c <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff f978 	bl	800080c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	; 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d908      	bls.n	800153c <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800152a:	4b93      	ldr	r3, [pc, #588]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 800152c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e1d3      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800153c:	4b8e      	ldr	r3, [pc, #568]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 800153e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0e6      	beq.n	8001518 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001552:	2b00      	cmp	r3, #0
 8001554:	d022      	beq.n	800159c <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001556:	4b88      	ldr	r3, [pc, #544]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 8001558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155c:	4a86      	ldr	r2, [pc, #536]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 800155e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001566:	e011      	b.n	800158c <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff f950 	bl	800080c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d908      	bls.n	800158c <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800157a:	4b7f      	ldr	r3, [pc, #508]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 800157c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e1ab      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800158c:	4b7a      	ldr	r3, [pc, #488]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 800158e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0e6      	beq.n	8001568 <HAL_RCC_OscConfig+0x61c>
 800159a:	e068      	b.n	800166e <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800159c:	4b76      	ldr	r3, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 800159e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a2:	4a75      	ldr	r2, [pc, #468]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80015a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80015ac:	e011      	b.n	80015d2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ae:	f7ff f92d 	bl	800080c <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015bc:	4293      	cmp	r3, r2
 80015be:	d908      	bls.n	80015d2 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80015c0:	4b6d      	ldr	r3, [pc, #436]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e188      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80015d2:	4b69      	ldr	r3, [pc, #420]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80015d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1e6      	bne.n	80015ae <HAL_RCC_OscConfig+0x662>
 80015e0:	e045      	b.n	800166e <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e2:	f7ff f913 	bl	800080c <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015e8:	e011      	b.n	800160e <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7ff f90f 	bl	800080c <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d908      	bls.n	800160e <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015fc:	4b5e      	ldr	r3, [pc, #376]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e16a      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800160e:	4b5a      	ldr	r3, [pc, #360]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 8001610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e6      	bne.n	80015ea <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800161c:	4b56      	ldr	r3, [pc, #344]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 800161e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001626:	2b00      	cmp	r3, #0
 8001628:	d021      	beq.n	800166e <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800162a:	4b53      	ldr	r3, [pc, #332]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 800162c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001630:	4a51      	ldr	r2, [pc, #324]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 8001632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800163a:	e011      	b.n	8001660 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163c:	f7ff f8e6 	bl	800080c <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d908      	bls.n	8001660 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800164e:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 8001650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e141      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001660:	4b45      	ldr	r3, [pc, #276]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1e6      	bne.n	800163c <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800166e:	7ffb      	ldrb	r3, [r7, #31]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d105      	bne.n	8001680 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001674:	4b40      	ldr	r3, [pc, #256]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	4a3f      	ldr	r2, [pc, #252]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 800167a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800167e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0320 	and.w	r3, r3, #32
 8001688:	2b00      	cmp	r3, #0
 800168a:	d04a      	beq.n	8001722 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	2b00      	cmp	r3, #0
 8001692:	d023      	beq.n	80016dc <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001694:	4b38      	ldr	r3, [pc, #224]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 8001696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800169a:	4a37      	ldr	r2, [pc, #220]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a4:	f7ff f8b2 	bl	800080c <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016aa:	e00f      	b.n	80016cc <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ac:	f7ff f8ae 	bl	800080c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d908      	bls.n	80016cc <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80016bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e10b      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80016ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0e8      	beq.n	80016ac <HAL_RCC_OscConfig+0x760>
 80016da:	e022      	b.n	8001722 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016dc:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80016de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016e2:	4a25      	ldr	r2, [pc, #148]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ec:	f7ff f88e 	bl	800080c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016f2:	e00f      	b.n	8001714 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016f4:	f7ff f88a 	bl	800080c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d908      	bls.n	8001714 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 8001704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e0e7      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 8001716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1e8      	bne.n	80016f4 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 80db 	beq.w	80018e2 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b0c      	cmp	r3, #12
 8001736:	f000 8095 	beq.w	8001864 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	2b02      	cmp	r3, #2
 8001740:	d16a      	bne.n	8001818 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 8001748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800174c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff f85d 	bl	800080c <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001754:	e012      	b.n	800177c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001756:	f7ff f859 	bl	800080c <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d90b      	bls.n	800177c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <HAL_RCC_OscConfig+0x82c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e0b7      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
 8001774:	40007000 	.word	0x40007000
 8001778:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800177c:	4b5b      	ldr	r3, [pc, #364]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1e6      	bne.n	8001756 <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001788:	4b58      	ldr	r3, [pc, #352]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <HAL_RCC_OscConfig+0x9a4>)
 800178e:	4013      	ands	r3, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001798:	3a01      	subs	r2, #1
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	4311      	orrs	r1, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017a2:	0212      	lsls	r2, r2, #8
 80017a4:	4311      	orrs	r1, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017aa:	0852      	lsrs	r2, r2, #1
 80017ac:	3a01      	subs	r2, #1
 80017ae:	0552      	lsls	r2, r2, #21
 80017b0:	4311      	orrs	r1, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017b6:	0852      	lsrs	r2, r2, #1
 80017b8:	3a01      	subs	r2, #1
 80017ba:	0652      	lsls	r2, r2, #25
 80017bc:	4311      	orrs	r1, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017c2:	06d2      	lsls	r2, r2, #27
 80017c4:	430a      	orrs	r2, r1
 80017c6:	4949      	ldr	r1, [pc, #292]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017cc:	4b47      	ldr	r3, [pc, #284]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a46      	ldr	r2, [pc, #280]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 80017d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017d8:	4b44      	ldr	r3, [pc, #272]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4a43      	ldr	r2, [pc, #268]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 80017de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff f812 	bl	800080c <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ea:	e00e      	b.n	800180a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff f80e 	bl	800080c <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d907      	bls.n	800180a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fa:	4b3c      	ldr	r3, [pc, #240]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e06c      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0ea      	beq.n	80017ec <HAL_RCC_OscConfig+0x8a0>
 8001816:	e064      	b.n	80018e2 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001818:	4b34      	ldr	r3, [pc, #208]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a33      	ldr	r2, [pc, #204]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 800181e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7fe fff2 	bl	800080c <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182a:	e00e      	b.n	800184a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182c:	f7fe ffee 	bl	800080c <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d907      	bls.n	800184a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183a:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e04c      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1ea      	bne.n	800182c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001856:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	4924      	ldr	r1, [pc, #144]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_RCC_OscConfig+0x9a8>)
 800185e:	4013      	ands	r3, r2
 8001860:	60cb      	str	r3, [r1, #12]
 8001862:	e03e      	b.n	80018e2 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e039      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001870:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <HAL_RCC_OscConfig+0x9a0>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0203 	and.w	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	429a      	cmp	r2, r3
 8001882:	d12c      	bne.n	80018de <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188e:	3b01      	subs	r3, #1
 8001890:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d123      	bne.n	80018de <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d11b      	bne.n	80018de <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d113      	bne.n	80018de <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	3b01      	subs	r3, #1
 80018c4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d109      	bne.n	80018de <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	3b01      	subs	r3, #1
 80018d8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000
 80018f0:	019f800c 	.word	0x019f800c
 80018f4:	feeefffc 	.word	0xfeeefffc

080018f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e11c      	b.n	8001b4a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	4b90      	ldr	r3, [pc, #576]	; (8001b54 <HAL_RCC_ClockConfig+0x25c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d910      	bls.n	8001940 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b8d      	ldr	r3, [pc, #564]	; (8001b54 <HAL_RCC_ClockConfig+0x25c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 020f 	bic.w	r2, r3, #15
 8001926:	498b      	ldr	r1, [pc, #556]	; (8001b54 <HAL_RCC_ClockConfig+0x25c>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b89      	ldr	r3, [pc, #548]	; (8001b54 <HAL_RCC_ClockConfig+0x25c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e104      	b.n	8001b4a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d010      	beq.n	800196e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	4b81      	ldr	r3, [pc, #516]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001958:	429a      	cmp	r2, r3
 800195a:	d908      	bls.n	800196e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b7e      	ldr	r3, [pc, #504]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	497b      	ldr	r1, [pc, #492]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8085 	beq.w	8001a86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b03      	cmp	r3, #3
 8001982:	d11f      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001984:	4b74      	ldr	r3, [pc, #464]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0da      	b.n	8001b4a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001994:	f000 fa42 	bl	8001e1c <RCC_GetSysClockFreqFromPLLSource>
 8001998:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4a6f      	ldr	r2, [pc, #444]	; (8001b5c <HAL_RCC_ClockConfig+0x264>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d947      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80019a2:	4b6d      	ldr	r3, [pc, #436]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d141      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019ae:	4b6a      	ldr	r3, [pc, #424]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019b6:	4a68      	ldr	r2, [pc, #416]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 80019b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e036      	b.n	8001a32 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019cc:	4b62      	ldr	r3, [pc, #392]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d115      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0b6      	b.n	8001b4a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e4:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0aa      	b.n	8001b4a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f4:	4b58      	ldr	r3, [pc, #352]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0a2      	b.n	8001b4a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a04:	f000 f8b0 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4a53      	ldr	r2, [pc, #332]	; (8001b5c <HAL_RCC_ClockConfig+0x264>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d90f      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a12:	4b51      	ldr	r3, [pc, #324]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a1e:	4b4e      	ldr	r3, [pc, #312]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a26:	4a4c      	ldr	r2, [pc, #304]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a32:	4b49      	ldr	r3, [pc, #292]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 0203 	bic.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4946      	ldr	r1, [pc, #280]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a44:	f7fe fee2 	bl	800080c <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	e013      	b.n	8001a74 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7fe fede 	bl	800080c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d90a      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	4b3e      	ldr	r3, [pc, #248]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 020c 	and.w	r2, r3, #12
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e06a      	b.n	8001b4a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a74:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 020c 	and.w	r2, r3, #12
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d1e2      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b80      	cmp	r3, #128	; 0x80
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a8c:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a31      	ldr	r2, [pc, #196]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a96:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d010      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d208      	bcs.n	8001ac6 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4925      	ldr	r1, [pc, #148]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac6:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <HAL_RCC_ClockConfig+0x25c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d210      	bcs.n	8001af6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <HAL_RCC_ClockConfig+0x25c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 020f 	bic.w	r2, r3, #15
 8001adc:	491d      	ldr	r1, [pc, #116]	; (8001b54 <HAL_RCC_ClockConfig+0x25c>)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_RCC_ClockConfig+0x25c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e029      	b.n	8001b4a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d008      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	4912      	ldr	r1, [pc, #72]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d009      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	490a      	ldr	r1, [pc, #40]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b34:	f000 f8b4 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <HAL_RCC_ClockConfig+0x268>)
 8001b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_RCC_ClockConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fbd0 	bl	80002e8 <HAL_InitTick>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	04c4b400 	.word	0x04c4b400
 8001b60:	2000000c 	.word	0x2000000c
 8001b64:	20000010 	.word	0x20000010

08001b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b80:	4b44      	ldr	r3, [pc, #272]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x34>
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	d121      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d11e      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b9c:	4b3d      	ldr	r3, [pc, #244]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d107      	bne.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ba8:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	e005      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bb8:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001bc4:	4a34      	ldr	r2, [pc, #208]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x130>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10d      	bne.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d102      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001be0:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x134>)
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	e004      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x134>)
 8001bee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d146      	bne.n	8001c84 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001bf6:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d003      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0xb4>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d00d      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0xce>
 8001c1a:	e019      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c1c:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x134>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c26:	68d2      	ldr	r2, [r2, #12]
 8001c28:	0a12      	lsrs	r2, r2, #8
 8001c2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
        break;
 8001c34:	e019      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c36:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x134>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c40:	68d2      	ldr	r2, [r2, #12]
 8001c42:	0a12      	lsrs	r2, r2, #8
 8001c44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c48:	fb02 f303 	mul.w	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
        break;
 8001c4e:	e00c      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c5a:	68d2      	ldr	r2, [r2, #12]
 8001c5c:	0a12      	lsrs	r2, r2, #8
 8001c5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
        break;
 8001c68:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	0e5b      	lsrs	r3, r3, #25
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	3301      	adds	r3, #1
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c84:	69bb      	ldr	r3, [r7, #24]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	; 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	0800571c 	.word	0x0800571c
 8001c9c:	00f42400 	.word	0x00f42400

08001ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8001ca4:	f7ff ff60 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_GetHCLKFreq+0x20>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	4903      	ldr	r1, [pc, #12]	; (8001cc4 <HAL_RCC_GetHCLKFreq+0x24>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08005704 	.word	0x08005704

08001cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ccc:	f7ff ffe8 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4903      	ldr	r1, [pc, #12]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08005714 	.word	0x08005714

08001cf0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0203 	and.w	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_RCC_GetClockConfig+0x5c>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HAL_RCC_GetClockConfig+0x5c>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_RCC_GetClockConfig+0x5c>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	08db      	lsrs	r3, r3, #3
 8001d2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <HAL_RCC_GetClockConfig+0x60>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 020f 	and.w	r2, r3, #15
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	601a      	str	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40022000 	.word	0x40022000

08001d54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d60:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d6c:	f7ff f840 	bl	8000df0 <HAL_PWREx_GetVoltageRange>
 8001d70:	6138      	str	r0, [r7, #16]
 8001d72:	e014      	b.n	8001d9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d8c:	f7ff f830 	bl	8000df0 <HAL_PWREx_GetVoltageRange>
 8001d90:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x58>
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001daa:	d10b      	bne.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b80      	cmp	r3, #128	; 0x80
 8001db0:	d919      	bls.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2ba0      	cmp	r3, #160	; 0xa0
 8001db6:	d902      	bls.n	8001dbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001db8:	2302      	movs	r3, #2
 8001dba:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001dbc:	e013      	b.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001dc2:	e010      	b.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b80      	cmp	r3, #128	; 0x80
 8001dc8:	d902      	bls.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dca:	2303      	movs	r3, #3
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e00a      	b.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b80      	cmp	r3, #128	; 0x80
 8001dd4:	d102      	bne.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	e004      	b.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b70      	cmp	r3, #112	; 0x70
 8001de0:	d101      	bne.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de2:	2301      	movs	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 020f 	bic.w	r2, r3, #15
 8001dee:	490a      	ldr	r1, [pc, #40]	; (8001e18 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40022000 	.word	0x40022000

08001e1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e22:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3301      	adds	r3, #1
 8001e38:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d015      	beq.n	8001e6c <RCC_GetSysClockFreqFromPLLSource+0x50>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d839      	bhi.n	8001eba <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d01c      	beq.n	8001e86 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d133      	bne.n	8001eba <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e52:	4a26      	ldr	r2, [pc, #152]	; (8001eec <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	4a23      	ldr	r2, [pc, #140]	; (8001ee8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001e5c:	68d2      	ldr	r2, [r2, #12]
 8001e5e:	0a12      	lsrs	r2, r2, #8
 8001e60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e64:	fb02 f303 	mul.w	r3, r2, r3
 8001e68:	613b      	str	r3, [r7, #16]
      break;
 8001e6a:	e029      	b.n	8001ec0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001e76:	68d2      	ldr	r2, [r2, #12]
 8001e78:	0a12      	lsrs	r2, r2, #8
 8001e7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	613b      	str	r3, [r7, #16]
      break;
 8001e84:	e01c      	b.n	8001ec0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d107      	bne.n	8001ea2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e005      	b.n	8001eae <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8001eae:	4a10      	ldr	r2, [pc, #64]	; (8001ef0 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	613b      	str	r3, [r7, #16]
        break;
 8001eb8:	e002      	b.n	8001ec0 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
      break;
 8001ebe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0e5b      	lsrs	r3, r3, #25
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001eda:	683b      	ldr	r3, [r7, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	371c      	adds	r7, #28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	00f42400 	.word	0x00f42400
 8001ef0:	0800571c 	.word	0x0800571c

08001ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e049      	b.n	8001f9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f841 	bl	8001fa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3304      	adds	r3, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f000 f9f8 	bl	8002328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d001      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e04f      	b.n	8002070 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a23      	ldr	r2, [pc, #140]	; (800207c <HAL_TIM_Base_Start_IT+0xc4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01d      	beq.n	800202e <HAL_TIM_Base_Start_IT+0x76>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffa:	d018      	beq.n	800202e <HAL_TIM_Base_Start_IT+0x76>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1f      	ldr	r2, [pc, #124]	; (8002080 <HAL_TIM_Base_Start_IT+0xc8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_TIM_Base_Start_IT+0x76>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <HAL_TIM_Base_Start_IT+0xcc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00e      	beq.n	800202e <HAL_TIM_Base_Start_IT+0x76>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <HAL_TIM_Base_Start_IT+0xd0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d009      	beq.n	800202e <HAL_TIM_Base_Start_IT+0x76>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1b      	ldr	r2, [pc, #108]	; (800208c <HAL_TIM_Base_Start_IT+0xd4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d004      	beq.n	800202e <HAL_TIM_Base_Start_IT+0x76>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a19      	ldr	r2, [pc, #100]	; (8002090 <HAL_TIM_Base_Start_IT+0xd8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d115      	bne.n	800205a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_TIM_Base_Start_IT+0xdc>)
 8002036:	4013      	ands	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b06      	cmp	r3, #6
 800203e:	d015      	beq.n	800206c <HAL_TIM_Base_Start_IT+0xb4>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002046:	d011      	beq.n	800206c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002058:	e008      	b.n	800206c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e000      	b.n	800206e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40012c00 	.word	0x40012c00
 8002080:	40000400 	.word	0x40000400
 8002084:	40000800 	.word	0x40000800
 8002088:	40000c00 	.word	0x40000c00
 800208c:	40013400 	.word	0x40013400
 8002090:	40014000 	.word	0x40014000
 8002094:	00010007 	.word	0x00010007

08002098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d122      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d11b      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0202 	mvn.w	r2, #2
 80020c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f905 	bl	80022ea <HAL_TIM_IC_CaptureCallback>
 80020e0:	e005      	b.n	80020ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f8f7 	bl	80022d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f908 	bl	80022fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d122      	bne.n	8002148 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b04      	cmp	r3, #4
 800210e:	d11b      	bne.n	8002148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0204 	mvn.w	r2, #4
 8002118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f8db 	bl	80022ea <HAL_TIM_IC_CaptureCallback>
 8002134:	e005      	b.n	8002142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f8cd 	bl	80022d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f8de 	bl	80022fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b08      	cmp	r3, #8
 8002154:	d122      	bne.n	800219c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b08      	cmp	r3, #8
 8002162:	d11b      	bne.n	800219c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0208 	mvn.w	r2, #8
 800216c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2204      	movs	r2, #4
 8002172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f8b1 	bl	80022ea <HAL_TIM_IC_CaptureCallback>
 8002188:	e005      	b.n	8002196 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f8a3 	bl	80022d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f8b4 	bl	80022fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d122      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d11b      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0210 	mvn.w	r2, #16
 80021c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2208      	movs	r2, #8
 80021c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f887 	bl	80022ea <HAL_TIM_IC_CaptureCallback>
 80021dc:	e005      	b.n	80021ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f879 	bl	80022d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f88a 	bl	80022fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d10e      	bne.n	800221c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d107      	bne.n	800221c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0201 	mvn.w	r2, #1
 8002214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f002 fd24 	bl	8004c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002226:	2b80      	cmp	r3, #128	; 0x80
 8002228:	d10e      	bne.n	8002248 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002234:	2b80      	cmp	r3, #128	; 0x80
 8002236:	d107      	bne.n	8002248 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f914 	bl	8002470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002256:	d10e      	bne.n	8002276 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002262:	2b80      	cmp	r3, #128	; 0x80
 8002264:	d107      	bne.n	8002276 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800226e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f907 	bl	8002484 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002280:	2b40      	cmp	r3, #64	; 0x40
 8002282:	d10e      	bne.n	80022a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b40      	cmp	r3, #64	; 0x40
 8002290:	d107      	bne.n	80022a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800229a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f838 	bl	8002312 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d10e      	bne.n	80022ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d107      	bne.n	80022ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f06f 0220 	mvn.w	r2, #32
 80022c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f8c7 	bl	800245c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a40      	ldr	r2, [pc, #256]	; (800243c <TIM_Base_SetConfig+0x114>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002346:	d00f      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a3d      	ldr	r2, [pc, #244]	; (8002440 <TIM_Base_SetConfig+0x118>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00b      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3c      	ldr	r2, [pc, #240]	; (8002444 <TIM_Base_SetConfig+0x11c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d007      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a3b      	ldr	r2, [pc, #236]	; (8002448 <TIM_Base_SetConfig+0x120>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d003      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a3a      	ldr	r2, [pc, #232]	; (800244c <TIM_Base_SetConfig+0x124>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d108      	bne.n	800237a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a2f      	ldr	r2, [pc, #188]	; (800243c <TIM_Base_SetConfig+0x114>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d01f      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002388:	d01b      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a2c      	ldr	r2, [pc, #176]	; (8002440 <TIM_Base_SetConfig+0x118>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d017      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a2b      	ldr	r2, [pc, #172]	; (8002444 <TIM_Base_SetConfig+0x11c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a2a      	ldr	r2, [pc, #168]	; (8002448 <TIM_Base_SetConfig+0x120>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00f      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a29      	ldr	r2, [pc, #164]	; (800244c <TIM_Base_SetConfig+0x124>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00b      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a28      	ldr	r2, [pc, #160]	; (8002450 <TIM_Base_SetConfig+0x128>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d007      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a27      	ldr	r2, [pc, #156]	; (8002454 <TIM_Base_SetConfig+0x12c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d003      	beq.n	80023c2 <TIM_Base_SetConfig+0x9a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a26      	ldr	r2, [pc, #152]	; (8002458 <TIM_Base_SetConfig+0x130>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d108      	bne.n	80023d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a10      	ldr	r2, [pc, #64]	; (800243c <TIM_Base_SetConfig+0x114>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00f      	beq.n	8002420 <TIM_Base_SetConfig+0xf8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <TIM_Base_SetConfig+0x124>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00b      	beq.n	8002420 <TIM_Base_SetConfig+0xf8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a11      	ldr	r2, [pc, #68]	; (8002450 <TIM_Base_SetConfig+0x128>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d007      	beq.n	8002420 <TIM_Base_SetConfig+0xf8>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a10      	ldr	r2, [pc, #64]	; (8002454 <TIM_Base_SetConfig+0x12c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d003      	beq.n	8002420 <TIM_Base_SetConfig+0xf8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a0f      	ldr	r2, [pc, #60]	; (8002458 <TIM_Base_SetConfig+0x130>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d103      	bne.n	8002428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	615a      	str	r2, [r3, #20]
}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40012c00 	.word	0x40012c00
 8002440:	40000400 	.word	0x40000400
 8002444:	40000800 	.word	0x40000800
 8002448:	40000c00 	.word	0x40000c00
 800244c:	40013400 	.word	0x40013400
 8002450:	40014000 	.word	0x40014000
 8002454:	40014400 	.word	0x40014400
 8002458:	40014800 	.word	0x40014800

0800245c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SysTick_Handler+0x1c>)
 800249e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80024a0:	f001 fec6 	bl	8004230 <xTaskGetSchedulerState>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d001      	beq.n	80024ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80024aa:	f000 fb67 	bl	8002b7c <xPortSysTickHandler>
  }
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024be:	f3ef 8305 	mrs	r3, IPSR
 80024c2:	603b      	str	r3, [r7, #0]
  return(result);
 80024c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80024ca:	f06f 0305 	mvn.w	r3, #5
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	e00c      	b.n	80024ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <osKernelInitialize+0x44>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d105      	bne.n	80024e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <osKernelInitialize+0x44>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	e002      	b.n	80024ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80024ec:	687b      	ldr	r3, [r7, #4]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	200000a0 	.word	0x200000a0

08002500 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a07      	ldr	r2, [pc, #28]	; (800252c <vApplicationGetIdleTaskMemory+0x2c>)
 8002510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4a06      	ldr	r2, [pc, #24]	; (8002530 <vApplicationGetIdleTaskMemory+0x30>)
 8002516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251e:	601a      	str	r2, [r3, #0]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	200000a4 	.word	0x200000a4
 8002530:	20000100 	.word	0x20000100

08002534 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4a07      	ldr	r2, [pc, #28]	; (8002560 <vApplicationGetTimerTaskMemory+0x2c>)
 8002544:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4a06      	ldr	r2, [pc, #24]	; (8002564 <vApplicationGetTimerTaskMemory+0x30>)
 800254a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002552:	601a      	str	r2, [r3, #0]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	20000900 	.word	0x20000900
 8002564:	2000095c 	.word	0x2000095c

08002568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8002574:	f001 fad4 	bl	8003b20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002578:	4b4f      	ldr	r3, [pc, #316]	; (80026b8 <pvPortMalloc+0x150>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002580:	f000 f8f8 	bl	8002774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002584:	4b4d      	ldr	r3, [pc, #308]	; (80026bc <pvPortMalloc+0x154>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	f040 8083 	bne.w	8002698 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d015      	beq.n	80025c4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8002598:	2208      	movs	r2, #8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00c      	beq.n	80025c4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f023 0307 	bic.w	r3, r3, #7
 80025b0:	3308      	adds	r3, #8
 80025b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <pvPortMalloc+0x5c>
 80025be:	f000 fbeb 	bl	8002d98 <ulSetInterruptMask>
 80025c2:	e7fe      	b.n	80025c2 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d066      	beq.n	8002698 <pvPortMalloc+0x130>
 80025ca:	4b3d      	ldr	r3, [pc, #244]	; (80026c0 <pvPortMalloc+0x158>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d861      	bhi.n	8002698 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80025d4:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <pvPortMalloc+0x15c>)
 80025d6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80025d8:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <pvPortMalloc+0x15c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025de:	e004      	b.n	80025ea <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d903      	bls.n	80025fc <pvPortMalloc+0x94>
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f1      	bne.n	80025e0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80025fc:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <pvPortMalloc+0x150>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	429a      	cmp	r2, r3
 8002604:	d048      	beq.n	8002698 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2208      	movs	r2, #8
 800260c:	4413      	add	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	1ad2      	subs	r2, r2, r3
 8002620:	2308      	movs	r3, #8
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	429a      	cmp	r2, r3
 8002626:	d917      	bls.n	8002658 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <pvPortMalloc+0xd8>
 800263a:	f000 fbad 	bl	8002d98 <ulSetInterruptMask>
 800263e:	e7fe      	b.n	800263e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	1ad2      	subs	r2, r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002652:	68b8      	ldr	r0, [r7, #8]
 8002654:	f000 f8f0 	bl	8002838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <pvPortMalloc+0x158>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	4a17      	ldr	r2, [pc, #92]	; (80026c0 <pvPortMalloc+0x158>)
 8002664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002666:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <pvPortMalloc+0x158>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <pvPortMalloc+0x160>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d203      	bcs.n	800267a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <pvPortMalloc+0x158>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <pvPortMalloc+0x160>)
 8002678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <pvPortMalloc+0x154>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	431a      	orrs	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <pvPortMalloc+0x164>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	4a0d      	ldr	r2, [pc, #52]	; (80026cc <pvPortMalloc+0x164>)
 8002696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002698:	f001 fa50 	bl	8003b3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <pvPortMalloc+0x144>
 80026a6:	f000 fb77 	bl	8002d98 <ulSetInterruptMask>
 80026aa:	e7fe      	b.n	80026aa <pvPortMalloc+0x142>
	return pvReturn;
 80026ac:	68fb      	ldr	r3, [r7, #12]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2000391c 	.word	0x2000391c
 80026bc:	20003930 	.word	0x20003930
 80026c0:	20003920 	.word	0x20003920
 80026c4:	20003914 	.word	0x20003914
 80026c8:	20003924 	.word	0x20003924
 80026cc:	20003928 	.word	0x20003928

080026d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d03d      	beq.n	800275e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80026e2:	2308      	movs	r3, #8
 80026e4:	425b      	negs	r3, r3
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4413      	add	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <vPortFree+0x98>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d102      	bne.n	8002704 <vPortFree+0x34>
 80026fe:	f000 fb4b 	bl	8002d98 <ulSetInterruptMask>
 8002702:	e7fe      	b.n	8002702 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <vPortFree+0x42>
 800270c:	f000 fb44 	bl	8002d98 <ulSetInterruptMask>
 8002710:	e7fe      	b.n	8002710 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <vPortFree+0x98>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01e      	beq.n	800275e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d11a      	bne.n	800275e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <vPortFree+0x98>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002738:	f001 f9f2 	bl	8003b20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <vPortFree+0x9c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4413      	add	r3, r2
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <vPortFree+0x9c>)
 8002748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800274a:	68b8      	ldr	r0, [r7, #8]
 800274c:	f000 f874 	bl	8002838 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <vPortFree+0xa0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3301      	adds	r3, #1
 8002756:	4a06      	ldr	r2, [pc, #24]	; (8002770 <vPortFree+0xa0>)
 8002758:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800275a:	f001 f9ef 	bl	8003b3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20003930 	.word	0x20003930
 800276c:	20003920 	.word	0x20003920
 8002770:	2000392c 	.word	0x2000392c

08002774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800277a:	f641 73b8 	movw	r3, #8120	; 0x1fb8
 800277e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002780:	4b27      	ldr	r3, [pc, #156]	; (8002820 <prvHeapInit+0xac>)
 8002782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00c      	beq.n	80027a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3307      	adds	r3, #7
 8002792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0307 	bic.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	4a1f      	ldr	r2, [pc, #124]	; (8002820 <prvHeapInit+0xac>)
 80027a4:	4413      	add	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80027ac:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <prvHeapInit+0xb0>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80027b2:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <prvHeapInit+0xb0>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	4413      	add	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80027c0:	2208      	movs	r2, #8
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 0307 	bic.w	r3, r3, #7
 80027ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a15      	ldr	r2, [pc, #84]	; (8002828 <prvHeapInit+0xb4>)
 80027d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <prvHeapInit+0xb4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2200      	movs	r2, #0
 80027dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <prvHeapInit+0xb4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	1ad2      	subs	r2, r2, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <prvHeapInit+0xb4>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <prvHeapInit+0xb8>)
 8002802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a09      	ldr	r2, [pc, #36]	; (8002830 <prvHeapInit+0xbc>)
 800280a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <prvHeapInit+0xc0>)
 800280e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002812:	601a      	str	r2, [r3, #0]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	2000195c 	.word	0x2000195c
 8002824:	20003914 	.word	0x20003914
 8002828:	2000391c 	.word	0x2000391c
 800282c:	20003924 	.word	0x20003924
 8002830:	20003920 	.word	0x20003920
 8002834:	20003930 	.word	0x20003930

08002838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002840:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <prvInsertBlockIntoFreeList+0xac>)
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	e002      	b.n	800284c <prvInsertBlockIntoFreeList+0x14>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	429a      	cmp	r2, r3
 8002854:	d8f7      	bhi.n	8002846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	4413      	add	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	d108      	bne.n	800287a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	441a      	add	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	441a      	add	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d118      	bne.n	80028c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <prvInsertBlockIntoFreeList+0xb0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d00d      	beq.n	80028b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	441a      	add	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e008      	b.n	80028c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <prvInsertBlockIntoFreeList+0xb0>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	e003      	b.n	80028c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d002      	beq.n	80028d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20003914 	.word	0x20003914
 80028e8:	2000391c 	.word	0x2000391c

080028ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f103 0208 	add.w	r2, r3, #8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f04f 32ff 	mov.w	r2, #4294967295
 8002904:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f103 0208 	add.w	r2, r3, #8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f103 0208 	add.w	r2, r3, #8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	601a      	str	r2, [r3, #0]
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d103      	bne.n	80029ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	e00c      	b.n	80029c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3308      	adds	r3, #8
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e002      	b.n	80029bc <vListInsert+0x2e>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d2f6      	bcs.n	80029b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	601a      	str	r2, [r3, #0]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6892      	ldr	r2, [r2, #8]
 8002a16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6852      	ldr	r2, [r2, #4]
 8002a20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d103      	bne.n	8002a34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	1e5a      	subs	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <vPortSetupTimerInterrupt+0x34>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <vPortSetupTimerInterrupt+0x38>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <vPortSetupTimerInterrupt+0x3c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <vPortSetupTimerInterrupt+0x40>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	099b      	lsrs	r3, r3, #6
 8002a70:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <vPortSetupTimerInterrupt+0x44>)
 8002a72:	3b01      	subs	r3, #1
 8002a74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8002a76:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <vPortSetupTimerInterrupt+0x34>)
 8002a78:	2207      	movs	r2, #7
 8002a7a:	601a      	str	r2, [r3, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	e000e010 	.word	0xe000e010
 8002a8c:	e000e018 	.word	0xe000e018
 8002a90:	2000000c 	.word	0x2000000c
 8002a94:	10624dd3 	.word	0x10624dd3
 8002a98:	e000e014 	.word	0xe000e014

08002a9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <prvTaskExitError+0x30>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aae:	d002      	beq.n	8002ab6 <prvTaskExitError+0x1a>
 8002ab0:	f000 f972 	bl	8002d98 <ulSetInterruptMask>
 8002ab4:	e7fe      	b.n	8002ab4 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 8002ab6:	f000 f96f 	bl	8002d98 <ulSetInterruptMask>

	while( ulDummy == 0 )
 8002aba:	bf00      	nop
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0fc      	beq.n	8002abc <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000018 	.word	0x20000018

08002ad0 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if( configENABLE_FPU == 1 )
	static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
	{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
		#endif /* configENABLE_TRUSTZONE */

		/* CP10 = 11 ==> Full access to FPU i.e. both privileged and
		 * unprivileged code should be able to access FPU. CP11 should be
		 * programmed to the same value as CP10. */
		*( portCPACR ) |=	(	( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <prvSetupFPU+0x28>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a07      	ldr	r2, [pc, #28]	; (8002af8 <prvSetupFPU+0x28>)
 8002ada:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ade:	6013      	str	r3, [r2, #0]
							);

		/* ASPEN = 1 ==> Hardware should automatically preserve floating point
		 * context on exception entry and restore on exception return.
		 * LSPEN = 1 ==> Enable lazy context save of FP state. */
		*( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <prvSetupFPU+0x2c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a05      	ldr	r2, [pc, #20]	; (8002afc <prvSetupFPU+0x2c>)
 8002ae6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002aea:	6013      	str	r3, [r2, #0]
	}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000ed88 	.word	0xe000ed88
 8002afc:	e000ef34 	.word	0xe000ef34

08002b00 <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <vPortYield+0x20>)
 8002b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b0a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002b0c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002b10:	f3bf 8f6f 	isb	sy
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000ed04 	.word	0xe000ed04

08002b24 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8002b28:	f000 f936 	bl	8002d98 <ulSetInterruptMask>
	ulCriticalNesting++;
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <vPortEnterCritical+0x20>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3301      	adds	r3, #1
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <vPortEnterCritical+0x20>)
 8002b34:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002b36:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002b3a:	f3bf 8f6f 	isb	sy
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000018 	.word	0x20000018

08002b48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <vPortExitCritical+0x30>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <vPortExitCritical+0x12>
 8002b54:	f000 f920 	bl	8002d98 <ulSetInterruptMask>
 8002b58:	e7fe      	b.n	8002b58 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <vPortExitCritical+0x30>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <vPortExitCritical+0x30>)
 8002b62:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <vPortExitCritical+0x30>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f000 f920 	bl	8002db2 <vClearInterruptMask>
	}
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000018 	.word	0x20000018

08002b7c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b82:	f000 f909 	bl	8002d98 <ulSetInterruptMask>
 8002b86:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002b88:	f001 f876 	bl	8003c78 <xTaskIncrementTick>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <xPortSysTickHandler+0x2c>)
 8002b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b98:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f909 	bl	8002db2 <vClearInterruptMask>
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	e000ed04 	.word	0xe000ed04

08002bac <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3b02      	subs	r3, #2
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 8002bc2:	7afb      	ldrb	r3, [r7, #11]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d104      	bne.n	8002bd2 <vPortSVCHandler_C+0x26>
			#endif /* configENABLE_TRUSTZONE */

			#if( configENABLE_FPU == 1 )
			{
				/* Setup the Floating Point Unit (FPU). */
				prvSetupFPU();
 8002bc8:	f7ff ff82 	bl	8002ad0 <prvSetupFPU>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8002bcc:	f000 f8b8 	bl	8002d40 <vRestoreContextOfFirstTask>
		}
		break;
 8002bd0:	e002      	b.n	8002bd8 <vPortSVCHandler_C+0x2c>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8002bd2:	f000 f8e1 	bl	8002d98 <ulSetInterruptMask>
 8002bd6:	e7fe      	b.n	8002bd6 <vPortSVCHandler_C+0x2a>
		}
	}
}
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3b04      	subs	r3, #4
 8002bf2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bfa:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3b04      	subs	r3, #4
 8002c00:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3b04      	subs	r3, #4
 8002c0c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002c0e:	4a38      	ldr	r2, [pc, #224]	; (8002cf0 <pxPortInitialiseStack+0x110>)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3b04      	subs	r3, #4
 8002c18:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8002c20:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	3b04      	subs	r3, #4
 8002c26:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8002c2e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3b04      	subs	r3, #4
 8002c34:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8002c3c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3b04      	subs	r3, #4
 8002c42:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8002c4a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3b04      	subs	r3, #4
 8002c50:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3b04      	subs	r3, #4
 8002c5c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8002c64:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3b04      	subs	r3, #4
 8002c6a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8002c72:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3b04      	subs	r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8002c80:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3b04      	subs	r3, #4
 8002c86:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8002c8e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3b04      	subs	r3, #4
 8002c94:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8002c9c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3b04      	subs	r3, #4
 8002ca2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8002caa:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3b04      	subs	r3, #4
 8002cb0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8002cb8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	3b04      	subs	r3, #4
 8002cbe:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8002cc6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3b04      	subs	r3, #4
 8002ccc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8002cd4:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3b04      	subs	r3, #4
 8002cda:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	08002a9d 	.word	0x08002a9d

08002cf4 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <xPortStartScheduler+0x38>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0b      	ldr	r2, [pc, #44]	; (8002d2c <xPortStartScheduler+0x38>)
 8002cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d02:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <xPortStartScheduler+0x38>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a08      	ldr	r2, [pc, #32]	; (8002d2c <xPortStartScheduler+0x38>)
 8002d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d0e:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 8002d10:	f7ff fea0 	bl	8002a54 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <xPortStartScheduler+0x3c>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 8002d1a:	f000 f829 	bl	8002d70 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 8002d1e:	f001 f85d 	bl	8003ddc <vTaskSwitchContext>
	prvTaskExitError();
 8002d22:	f7ff febb 	bl	8002a9c <prvTaskExitError>

	/* Should not get here. */
	return 0;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	e000ed20 	.word	0xe000ed20
 8002d30:	20000018 	.word	0x20000018
	...

08002d40 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <pxCurrentTCBConst2>)
 8002d42:	6811      	ldr	r1, [r2, #0]
 8002d44:	6808      	ldr	r0, [r1, #0]
 8002d46:	c806      	ldmia	r0!, {r1, r2}
 8002d48:	f381 880b 	msr	PSPLIM, r1
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	f381 8814 	msr	CONTROL, r1
 8002d52:	3020      	adds	r0, #32
 8002d54:	f380 8809 	msr	PSP, r0
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	4710      	bx	r2
 8002d5e:	bf00      	nop

08002d60 <pxCurrentTCBConst2>:
 8002d60:	20003934 	.word	0x20003934
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
	...

08002d70 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002d70:	4807      	ldr	r0, [pc, #28]	; (8002d90 <xVTORConst>)
 8002d72:	6800      	ldr	r0, [r0, #0]
 8002d74:	6800      	ldr	r0, [r0, #0]
 8002d76:	f380 8808 	msr	MSP, r0
 8002d7a:	b662      	cpsie	i
 8002d7c:	b661      	cpsie	f
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	df02      	svc	2
 8002d88:	bf00      	nop
 8002d8a:	bf00      	nop
 8002d8c:	f3af 8000 	nop.w

08002d90 <xVTORConst>:
 8002d90:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop

08002d98 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002d98:	f3ef 8011 	mrs	r0, BASEPRI
 8002d9c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 8002da0:	f381 8811 	msr	BASEPRI, r1
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dae:	bf00      	nop
 8002db0:	4618      	mov	r0, r3

08002db2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002db2:	f380 8811 	msr	BASEPRI, r0
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 8002dc0:	bf00      	nop
	...

08002dd0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002dd0:	f3ef 8009 	mrs	r0, PSP
 8002dd4:	f01e 0f10 	tst.w	lr, #16
 8002dd8:	bf08      	it	eq
 8002dda:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002dde:	f3ef 820b 	mrs	r2, PSPLIM
 8002de2:	4673      	mov	r3, lr
 8002de4:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8002de8:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <pxCurrentTCBConst>)
 8002dea:	6811      	ldr	r1, [r2, #0]
 8002dec:	6008      	str	r0, [r1, #0]
 8002dee:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8002df2:	f380 8811 	msr	BASEPRI, r0
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	f3bf 8f6f 	isb	sy
 8002dfe:	f000 ffed 	bl	8003ddc <vTaskSwitchContext>
 8002e02:	f04f 0000 	mov.w	r0, #0
 8002e06:	f380 8811 	msr	BASEPRI, r0
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <pxCurrentTCBConst>)
 8002e0c:	6811      	ldr	r1, [r2, #0]
 8002e0e:	6808      	ldr	r0, [r1, #0]
 8002e10:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8002e14:	f013 0f10 	tst.w	r3, #16
 8002e18:	bf08      	it	eq
 8002e1a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e1e:	f382 880b 	msr	PSPLIM, r2
 8002e22:	f380 8809 	msr	PSP, r0
 8002e26:	4718      	bx	r3
 8002e28:	f3af 8000 	nop.w
 8002e2c:	f3af 8000 	nop.w

08002e30 <pxCurrentTCBConst>:
 8002e30:	20003934 	.word	0x20003934
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
	...

08002e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002e40:	f01e 0f04 	tst.w	lr, #4
 8002e44:	bf0c      	ite	eq
 8002e46:	f3ef 8008 	mrseq	r0, MSP
 8002e4a:	f3ef 8009 	mrsne	r0, PSP
 8002e4e:	4904      	ldr	r1, [pc, #16]	; (8002e60 <svchandler_address_const>)
 8002e50:	4708      	bx	r1
 8002e52:	bf00      	nop
 8002e54:	f3af 8000 	nop.w
 8002e58:	f3af 8000 	nop.w
 8002e5c:	f3af 8000 	nop.w

08002e60 <svchandler_address_const>:
 8002e60:	08002bad 	.word	0x08002bad
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop

08002e68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <xQueueGenericReset+0x1a>
 8002e7c:	f7ff ff8c 	bl	8002d98 <ulSetInterruptMask>
 8002e80:	e7fe      	b.n	8002e80 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8002e82:	f7ff fe4f 	bl	8002b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	68f9      	ldr	r1, [r7, #12]
 8002e90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e92:	fb01 f303 	mul.w	r3, r1, r3
 8002e96:	441a      	add	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	68f9      	ldr	r1, [r7, #12]
 8002eb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	441a      	add	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	22ff      	movs	r2, #255	; 0xff
 8002ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10e      	bne.n	8002ef6 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d014      	beq.n	8002f0a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	3310      	adds	r3, #16
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 f80d 	bl	8003f04 <xTaskRemoveFromEventList>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00c      	beq.n	8002f0a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ef0:	f7ff fe06 	bl	8002b00 <vPortYield>
 8002ef4:	e009      	b.n	8002f0a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3310      	adds	r3, #16
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fcf6 	bl	80028ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3324      	adds	r3, #36	; 0x24
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fcf1 	bl	80028ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f0a:	f7ff fe1d 	bl	8002b48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f0e:	2301      	movs	r3, #1
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <xQueueGenericCreateStatic+0x1a>
 8002f2c:	f7ff ff34 	bl	8002d98 <ulSetInterruptMask>
 8002f30:	e7fe      	b.n	8002f30 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <xQueueGenericCreateStatic+0x26>
 8002f38:	f7ff ff2e 	bl	8002d98 <ulSetInterruptMask>
 8002f3c:	e7fe      	b.n	8002f3c <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <xQueueGenericCreateStatic+0x32>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <xQueueGenericCreateStatic+0x36>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <xQueueGenericCreateStatic+0x38>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d102      	bne.n	8002f5a <xQueueGenericCreateStatic+0x42>
 8002f54:	f7ff ff20 	bl	8002d98 <ulSetInterruptMask>
 8002f58:	e7fe      	b.n	8002f58 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <xQueueGenericCreateStatic+0x4e>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <xQueueGenericCreateStatic+0x52>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <xQueueGenericCreateStatic+0x54>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <xQueueGenericCreateStatic+0x5e>
 8002f70:	f7ff ff12 	bl	8002d98 <ulSetInterruptMask>
 8002f74:	e7fe      	b.n	8002f74 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f76:	2350      	movs	r3, #80	; 0x50
 8002f78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b50      	cmp	r3, #80	; 0x50
 8002f7e:	d002      	beq.n	8002f86 <xQueueGenericCreateStatic+0x6e>
 8002f80:	f7ff ff0a 	bl	8002d98 <ulSetInterruptMask>
 8002f84:	e7fe      	b.n	8002f84 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f86:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00d      	beq.n	8002fae <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f9a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f805 	bl	8002fb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002fae:	697b      	ldr	r3, [r7, #20]
	}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d103      	bne.n	8002fd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	e002      	b.n	8002fda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	69b8      	ldr	r0, [r7, #24]
 8002fea:	f7ff ff3d 	bl	8002e68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b08a      	sub	sp, #40	; 0x28
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800300c:	2300      	movs	r3, #0
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <xQueueGenericSend+0x22>
 800301a:	f7ff febd 	bl	8002d98 <ulSetInterruptMask>
 800301e:	e7fe      	b.n	800301e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d103      	bne.n	800302e <xQueueGenericSend+0x30>
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <xQueueGenericSend+0x34>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <xQueueGenericSend+0x36>
 8003032:	2300      	movs	r3, #0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <xQueueGenericSend+0x40>
 8003038:	f7ff feae 	bl	8002d98 <ulSetInterruptMask>
 800303c:	e7fe      	b.n	800303c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d103      	bne.n	800304c <xQueueGenericSend+0x4e>
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <xQueueGenericSend+0x52>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <xQueueGenericSend+0x54>
 8003050:	2300      	movs	r3, #0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d102      	bne.n	800305c <xQueueGenericSend+0x5e>
 8003056:	f7ff fe9f 	bl	8002d98 <ulSetInterruptMask>
 800305a:	e7fe      	b.n	800305a <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800305c:	f001 f8e8 	bl	8004230 <xTaskGetSchedulerState>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d102      	bne.n	800306c <xQueueGenericSend+0x6e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <xQueueGenericSend+0x72>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <xQueueGenericSend+0x74>
 8003070:	2300      	movs	r3, #0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d102      	bne.n	800307c <xQueueGenericSend+0x7e>
 8003076:	f7ff fe8f 	bl	8002d98 <ulSetInterruptMask>
 800307a:	e7fe      	b.n	800307a <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800307c:	f7ff fd52 	bl	8002b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	429a      	cmp	r2, r3
 800308a:	d302      	bcc.n	8003092 <xQueueGenericSend+0x94>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d11d      	bne.n	80030ce <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	6a38      	ldr	r0, [r7, #32]
 8003098:	f000 f9a4 	bl	80033e4 <prvCopyDataToQueue>
 800309c:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	3324      	adds	r3, #36	; 0x24
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 ff2a 	bl	8003f04 <xTaskRemoveFromEventList>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030b6:	f7ff fd23 	bl	8002b00 <vPortYield>
 80030ba:	e004      	b.n	80030c6 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030c2:	f7ff fd1d 	bl	8002b00 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030c6:	f7ff fd3f 	bl	8002b48 <vPortExitCritical>
				return pdPASS;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e05c      	b.n	8003188 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d103      	bne.n	80030dc <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030d4:	f7ff fd38 	bl	8002b48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	e055      	b.n	8003188 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030e2:	f107 0314 	add.w	r3, r7, #20
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 ff68 	bl	8003fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030ec:	2301      	movs	r3, #1
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030f0:	f7ff fd2a 	bl	8002b48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030f4:	f000 fd14 	bl	8003b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030f8:	f7ff fd14 	bl	8002b24 <vPortEnterCritical>
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003102:	b25b      	sxtb	r3, r3
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d103      	bne.n	8003112 <xQueueGenericSend+0x114>
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003118:	b25b      	sxtb	r3, r3
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d103      	bne.n	8003128 <xQueueGenericSend+0x12a>
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003128:	f7ff fd0e 	bl	8002b48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800312c:	1d3a      	adds	r2, r7, #4
 800312e:	f107 0314 	add.w	r3, r7, #20
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f000 ff57 	bl	8003fe8 <xTaskCheckForTimeOut>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d11d      	bne.n	800317c <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003140:	6a38      	ldr	r0, [r7, #32]
 8003142:	f000 fa47 	bl	80035d4 <prvIsQueueFull>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d011      	beq.n	8003170 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	3310      	adds	r3, #16
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fe95 	bl	8003e84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800315a:	6a38      	ldr	r0, [r7, #32]
 800315c:	f000 f9d2 	bl	8003504 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003160:	f000 fcec 	bl	8003b3c <xTaskResumeAll>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d188      	bne.n	800307c <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 800316a:	f7ff fcc9 	bl	8002b00 <vPortYield>
 800316e:	e785      	b.n	800307c <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003170:	6a38      	ldr	r0, [r7, #32]
 8003172:	f000 f9c7 	bl	8003504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003176:	f000 fce1 	bl	8003b3c <xTaskResumeAll>
 800317a:	e77f      	b.n	800307c <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800317c:	6a38      	ldr	r0, [r7, #32]
 800317e:	f000 f9c1 	bl	8003504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003182:	f000 fcdb 	bl	8003b3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003186:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003188:	4618      	mov	r0, r3
 800318a:	3728      	adds	r7, #40	; 0x28
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	; 0x28
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d102      	bne.n	80031ae <xQueueGenericSendFromISR+0x1e>
 80031a8:	f7ff fdf6 	bl	8002d98 <ulSetInterruptMask>
 80031ac:	e7fe      	b.n	80031ac <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d103      	bne.n	80031bc <xQueueGenericSendFromISR+0x2c>
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <xQueueGenericSendFromISR+0x30>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <xQueueGenericSendFromISR+0x32>
 80031c0:	2300      	movs	r3, #0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d102      	bne.n	80031cc <xQueueGenericSendFromISR+0x3c>
 80031c6:	f7ff fde7 	bl	8002d98 <ulSetInterruptMask>
 80031ca:	e7fe      	b.n	80031ca <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d103      	bne.n	80031da <xQueueGenericSendFromISR+0x4a>
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <xQueueGenericSendFromISR+0x4e>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <xQueueGenericSendFromISR+0x50>
 80031de:	2300      	movs	r3, #0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <xQueueGenericSendFromISR+0x5a>
 80031e4:	f7ff fdd8 	bl	8002d98 <ulSetInterruptMask>
 80031e8:	e7fe      	b.n	80031e8 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031ea:	f7ff fdd5 	bl	8002d98 <ulSetInterruptMask>
 80031ee:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d302      	bcc.n	8003202 <xQueueGenericSendFromISR+0x72>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d12d      	bne.n	800325e <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003208:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	6a38      	ldr	r0, [r7, #32]
 8003216:	f000 f8e5 	bl	80033e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800321a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d112      	bne.n	800324a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	d015      	beq.n	8003258 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	3324      	adds	r3, #36	; 0x24
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fe67 	bl	8003f04 <xTaskRemoveFromEventList>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00d      	beq.n	8003258 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	e006      	b.n	8003258 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800324a:	7efb      	ldrb	r3, [r7, #27]
 800324c:	3301      	adds	r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	b25a      	sxtb	r2, r3
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003258:	2301      	movs	r3, #1
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800325c:	e001      	b.n	8003262 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800325e:	2300      	movs	r3, #0
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003262:	69f8      	ldr	r0, [r7, #28]
 8003264:	f7ff fda5 	bl	8002db2 <vClearInterruptMask>

	return xReturn;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800326a:	4618      	mov	r0, r3
 800326c:	3728      	adds	r7, #40	; 0x28
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b08a      	sub	sp, #40	; 0x28
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <xQueueReceive+0x20>
 800328c:	f7ff fd84 	bl	8002d98 <ulSetInterruptMask>
 8003290:	e7fe      	b.n	8003290 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d103      	bne.n	80032a0 <xQueueReceive+0x2e>
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <xQueueReceive+0x32>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <xQueueReceive+0x34>
 80032a4:	2300      	movs	r3, #0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <xQueueReceive+0x3e>
 80032aa:	f7ff fd75 	bl	8002d98 <ulSetInterruptMask>
 80032ae:	e7fe      	b.n	80032ae <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032b0:	f000 ffbe 	bl	8004230 <xTaskGetSchedulerState>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <xQueueReceive+0x4e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <xQueueReceive+0x52>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <xQueueReceive+0x54>
 80032c4:	2300      	movs	r3, #0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d102      	bne.n	80032d0 <xQueueReceive+0x5e>
 80032ca:	f7ff fd65 	bl	8002d98 <ulSetInterruptMask>
 80032ce:	e7fe      	b.n	80032ce <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032d0:	f7ff fc28 	bl	8002b24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d019      	beq.n	8003314 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	6a38      	ldr	r0, [r7, #32]
 80032e4:	f000 f8e8 	bl	80034b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	1e5a      	subs	r2, r3, #1
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d009      	beq.n	800330c <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	3310      	adds	r3, #16
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fe01 	bl	8003f04 <xTaskRemoveFromEventList>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003308:	f7ff fbfa 	bl	8002b00 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800330c:	f7ff fc1c 	bl	8002b48 <vPortExitCritical>
				return pdPASS;
 8003310:	2301      	movs	r3, #1
 8003312:	e063      	b.n	80033dc <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800331a:	f7ff fc15 	bl	8002b48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800331e:	2300      	movs	r3, #0
 8003320:	e05c      	b.n	80033dc <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	2b00      	cmp	r3, #0
 8003326:	d106      	bne.n	8003336 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fe45 	bl	8003fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003332:	2301      	movs	r3, #1
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003336:	f7ff fc07 	bl	8002b48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800333a:	f000 fbf1 	bl	8003b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800333e:	f7ff fbf1 	bl	8002b24 <vPortEnterCritical>
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003348:	b25b      	sxtb	r3, r3
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d103      	bne.n	8003358 <xQueueReceive+0xe6>
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800335e:	b25b      	sxtb	r3, r3
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d103      	bne.n	800336e <xQueueReceive+0xfc>
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800336e:	f7ff fbeb 	bl	8002b48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003372:	1d3a      	adds	r2, r7, #4
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fe34 	bl	8003fe8 <xTaskCheckForTimeOut>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d11d      	bne.n	80033c2 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003386:	6a38      	ldr	r0, [r7, #32]
 8003388:	f000 f90e 	bl	80035a8 <prvIsQueueEmpty>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d011      	beq.n	80033b6 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	3324      	adds	r3, #36	; 0x24
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fd72 	bl	8003e84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033a0:	6a38      	ldr	r0, [r7, #32]
 80033a2:	f000 f8af 	bl	8003504 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033a6:	f000 fbc9 	bl	8003b3c <xTaskResumeAll>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d18f      	bne.n	80032d0 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 80033b0:	f7ff fba6 	bl	8002b00 <vPortYield>
 80033b4:	e78c      	b.n	80032d0 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80033b6:	6a38      	ldr	r0, [r7, #32]
 80033b8:	f000 f8a4 	bl	8003504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033bc:	f000 fbbe 	bl	8003b3c <xTaskResumeAll>
 80033c0:	e786      	b.n	80032d0 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033c2:	6a38      	ldr	r0, [r7, #32]
 80033c4:	f000 f89e 	bl	8003504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033c8:	f000 fbb8 	bl	8003b3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033cc:	6a38      	ldr	r0, [r7, #32]
 80033ce:	f000 f8eb 	bl	80035a8 <prvIsQueueEmpty>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f43f af7b 	beq.w	80032d0 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3728      	adds	r7, #40	; 0x28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10d      	bne.n	800341e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d14d      	bne.n	80034a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 ff2c 	bl	800426c <xTaskPriorityDisinherit>
 8003414:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	e043      	b.n	80034a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d119      	bne.n	8003458 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6858      	ldr	r0, [r3, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	461a      	mov	r2, r3
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	f001 fc58 	bl	8004ce4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	441a      	add	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	d32b      	bcc.n	80034a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	e026      	b.n	80034a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	68d8      	ldr	r0, [r3, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	461a      	mov	r2, r3
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	f001 fc3e 	bl	8004ce4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	425b      	negs	r3, r3
 8003472:	441a      	add	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d207      	bcs.n	8003494 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	425b      	negs	r3, r3
 800348e:	441a      	add	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d105      	bne.n	80034a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80034ae:	697b      	ldr	r3, [r7, #20]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d018      	beq.n	80034fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	441a      	add	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d303      	bcc.n	80034ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68d9      	ldr	r1, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	461a      	mov	r2, r3
 80034f6:	6838      	ldr	r0, [r7, #0]
 80034f8:	f001 fbf4 	bl	8004ce4 <memcpy>
	}
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800350c:	f7ff fb0a 	bl	8002b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003516:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003518:	e011      	b.n	800353e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	2b00      	cmp	r3, #0
 8003520:	d012      	beq.n	8003548 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3324      	adds	r3, #36	; 0x24
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fcec 	bl	8003f04 <xTaskRemoveFromEventList>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003532:	f000 fdab 	bl	800408c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	3b01      	subs	r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800353e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003542:	2b00      	cmp	r3, #0
 8003544:	dce9      	bgt.n	800351a <prvUnlockQueue+0x16>
 8003546:	e000      	b.n	800354a <prvUnlockQueue+0x46>
					break;
 8003548:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	22ff      	movs	r2, #255	; 0xff
 800354e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003552:	f7ff faf9 	bl	8002b48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003556:	f7ff fae5 	bl	8002b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003560:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003562:	e011      	b.n	8003588 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d012      	beq.n	8003592 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3310      	adds	r3, #16
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fcc7 	bl	8003f04 <xTaskRemoveFromEventList>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800357c:	f000 fd86 	bl	800408c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003580:	7bbb      	ldrb	r3, [r7, #14]
 8003582:	3b01      	subs	r3, #1
 8003584:	b2db      	uxtb	r3, r3
 8003586:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800358c:	2b00      	cmp	r3, #0
 800358e:	dce9      	bgt.n	8003564 <prvUnlockQueue+0x60>
 8003590:	e000      	b.n	8003594 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003592:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	22ff      	movs	r2, #255	; 0xff
 8003598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800359c:	f7ff fad4 	bl	8002b48 <vPortExitCritical>
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035b0:	f7ff fab8 	bl	8002b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035bc:	2301      	movs	r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e001      	b.n	80035c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035c6:	f7ff fabf 	bl	8002b48 <vPortExitCritical>

	return xReturn;
 80035ca:	68fb      	ldr	r3, [r7, #12]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035dc:	f7ff faa2 	bl	8002b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d102      	bne.n	80035f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035ec:	2301      	movs	r3, #1
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e001      	b.n	80035f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035f6:	f7ff faa7 	bl	8002b48 <vPortExitCritical>

	return xReturn;
 80035fa:	68fb      	ldr	r3, [r7, #12]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	e014      	b.n	800363e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003614:	4a0f      	ldr	r2, [pc, #60]	; (8003654 <vQueueAddToRegistry+0x50>)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003620:	490c      	ldr	r1, [pc, #48]	; (8003654 <vQueueAddToRegistry+0x50>)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800362a:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <vQueueAddToRegistry+0x50>)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003636:	e006      	b.n	8003646 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3301      	adds	r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b07      	cmp	r3, #7
 8003642:	d9e7      	bls.n	8003614 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20003fbc 	.word	0x20003fbc

08003658 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003668:	f7ff fa5c 	bl	8002b24 <vPortEnterCritical>
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003672:	b25b      	sxtb	r3, r3
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d103      	bne.n	8003682 <vQueueWaitForMessageRestricted+0x2a>
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003688:	b25b      	sxtb	r3, r3
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d103      	bne.n	8003698 <vQueueWaitForMessageRestricted+0x40>
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003698:	f7ff fa56 	bl	8002b48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	3324      	adds	r3, #36	; 0x24
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fc05 	bl	8003ebc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80036b2:	6978      	ldr	r0, [r7, #20]
 80036b4:	f7ff ff26 	bl	8003504 <prvUnlockQueue>
	}
 80036b8:	bf00      	nop
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08c      	sub	sp, #48	; 0x30
 80036c4:	af04      	add	r7, sp, #16
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <xTaskCreateStatic+0x1a>
 80036d4:	f7ff fb60 	bl	8002d98 <ulSetInterruptMask>
 80036d8:	e7fe      	b.n	80036d8 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <xTaskCreateStatic+0x26>
 80036e0:	f7ff fb5a 	bl	8002d98 <ulSetInterruptMask>
 80036e4:	e7fe      	b.n	80036e4 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036e6:	235c      	movs	r3, #92	; 0x5c
 80036e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b5c      	cmp	r3, #92	; 0x5c
 80036ee:	d002      	beq.n	80036f6 <xTaskCreateStatic+0x36>
 80036f0:	f7ff fb52 	bl	8002d98 <ulSetInterruptMask>
 80036f4:	e7fe      	b.n	80036f4 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036f6:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01e      	beq.n	800373c <xTaskCreateStatic+0x7c>
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01b      	beq.n	800373c <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	2202      	movs	r2, #2
 8003712:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003716:	2300      	movs	r3, #0
 8003718:	9303      	str	r3, [sp, #12]
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	9302      	str	r3, [sp, #8]
 800371e:	f107 0318 	add.w	r3, r7, #24
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f850 	bl	80037d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003734:	69f8      	ldr	r0, [r7, #28]
 8003736:	f000 f8d7 	bl	80038e8 <prvAddNewTaskToReadyList>
 800373a:	e001      	b.n	8003740 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003740:	69bb      	ldr	r3, [r7, #24]
	}
 8003742:	4618      	mov	r0, r3
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800374a:	b580      	push	{r7, lr}
 800374c:	b08c      	sub	sp, #48	; 0x30
 800374e:	af04      	add	r7, sp, #16
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe ff02 	bl	8002568 <pvPortMalloc>
 8003764:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00e      	beq.n	800378a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800376c:	205c      	movs	r0, #92	; 0x5c
 800376e:	f7fe fefb 	bl	8002568 <pvPortMalloc>
 8003772:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
 8003780:	e005      	b.n	800378e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003782:	6978      	ldr	r0, [r7, #20]
 8003784:	f7fe ffa4 	bl	80026d0 <vPortFree>
 8003788:	e001      	b.n	800378e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d017      	beq.n	80037c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800379c:	88fa      	ldrh	r2, [r7, #6]
 800379e:	2300      	movs	r3, #0
 80037a0:	9303      	str	r3, [sp, #12]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	9302      	str	r3, [sp, #8]
 80037a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f80e 	bl	80037d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037b8:	69f8      	ldr	r0, [r7, #28]
 80037ba:	f000 f895 	bl	80038e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037be:	2301      	movs	r3, #1
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	e002      	b.n	80037ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037c4:	f04f 33ff 	mov.w	r3, #4294967295
 80037c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037ca:	69bb      	ldr	r3, [r7, #24]
	}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	461a      	mov	r2, r3
 80037ec:	21a5      	movs	r1, #165	; 0xa5
 80037ee:	f001 fa86 	bl	8004cfe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037fc:	3b01      	subs	r3, #1
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f023 0307 	bic.w	r3, r3, #7
 800380a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <prvInitialiseNewTask+0x48>
 8003816:	f7ff fabf 	bl	8002d98 <ulSetInterruptMask>
 800381a:	e7fe      	b.n	800381a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01f      	beq.n	8003862 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e012      	b.n	800384e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	4413      	add	r3, r2
 800382e:	7819      	ldrb	r1, [r3, #0]
 8003830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	4413      	add	r3, r2
 8003836:	3334      	adds	r3, #52	; 0x34
 8003838:	460a      	mov	r2, r1
 800383a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	4413      	add	r3, r2
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d006      	beq.n	8003856 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3301      	adds	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b0f      	cmp	r3, #15
 8003852:	d9e9      	bls.n	8003828 <prvInitialiseNewTask+0x54>
 8003854:	e000      	b.n	8003858 <prvInitialiseNewTask+0x84>
			{
				break;
 8003856:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003860:	e003      	b.n	800386a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	2b37      	cmp	r3, #55	; 0x37
 800386e:	d901      	bls.n	8003874 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003870:	2337      	movs	r3, #55	; 0x37
 8003872:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	6a3a      	ldr	r2, [r7, #32]
 8003878:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387c:	6a3a      	ldr	r2, [r7, #32]
 800387e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	2200      	movs	r2, #0
 8003884:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	3304      	adds	r3, #4
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f84e 	bl	800292c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	3318      	adds	r3, #24
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff f849 	bl	800292c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800389e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	2200      	movs	r2, #0
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	6938      	ldr	r0, [r7, #16]
 80038c8:	f7ff f98a 	bl	8002be0 <pxPortInitialiseStack>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038de:	bf00      	nop
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038f0:	f7ff f918 	bl	8002b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038f4:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <prvAddNewTaskToReadyList+0xb8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	4a29      	ldr	r2, [pc, #164]	; (80039a0 <prvAddNewTaskToReadyList+0xb8>)
 80038fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038fe:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <prvAddNewTaskToReadyList+0xbc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003906:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <prvAddNewTaskToReadyList+0xbc>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800390c:	4b24      	ldr	r3, [pc, #144]	; (80039a0 <prvAddNewTaskToReadyList+0xb8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d110      	bne.n	8003936 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003914:	f000 fbd6 	bl	80040c4 <prvInitialiseTaskLists>
 8003918:	e00d      	b.n	8003936 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800391a:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <prvAddNewTaskToReadyList+0xc0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <prvAddNewTaskToReadyList+0xbc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	429a      	cmp	r2, r3
 800392e:	d802      	bhi.n	8003936 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003930:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <prvAddNewTaskToReadyList+0xbc>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003936:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <prvAddNewTaskToReadyList+0xc4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <prvAddNewTaskToReadyList+0xc4>)
 800393e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003940:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <prvAddNewTaskToReadyList+0xc4>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <prvAddNewTaskToReadyList+0xc8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d903      	bls.n	800395c <prvAddNewTaskToReadyList+0x74>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <prvAddNewTaskToReadyList+0xc8>)
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4a12      	ldr	r2, [pc, #72]	; (80039b4 <prvAddNewTaskToReadyList+0xcc>)
 800396a:	441a      	add	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f7fe ffe7 	bl	8002946 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003978:	f7ff f8e6 	bl	8002b48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <prvAddNewTaskToReadyList+0xc0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <prvAddNewTaskToReadyList+0xbc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	429a      	cmp	r2, r3
 8003990:	d201      	bcs.n	8003996 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003992:	f7ff f8b5 	bl	8002b00 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20003e08 	.word	0x20003e08
 80039a4:	20003934 	.word	0x20003934
 80039a8:	20003e14 	.word	0x20003e14
 80039ac:	20003e24 	.word	0x20003e24
 80039b0:	20003e10 	.word	0x20003e10
 80039b4:	20003938 	.word	0x20003938

080039b8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <eTaskGetState+0x18>
 80039ca:	f7ff f9e5 	bl	8002d98 <ulSetInterruptMask>
 80039ce:	e7fe      	b.n	80039ce <eTaskGetState+0x16>

		if( pxTCB == pxCurrentTCB )
 80039d0:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <eTaskGetState+0xa8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d102      	bne.n	80039e0 <eTaskGetState+0x28>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80039da:	2300      	movs	r3, #0
 80039dc:	77fb      	strb	r3, [r7, #31]
 80039de:	e03a      	b.n	8003a56 <eTaskGetState+0x9e>
		}
		else
		{
			taskENTER_CRITICAL();
 80039e0:	f7ff f8a0 	bl	8002b24 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80039ea:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <eTaskGetState+0xac>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80039f0:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <eTaskGetState+0xb0>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80039f6:	f7ff f8a7 	bl	8002b48 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d003      	beq.n	8003a0a <eTaskGetState+0x52>
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d102      	bne.n	8003a10 <eTaskGetState+0x58>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	77fb      	strb	r3, [r7, #31]
 8003a0e:	e022      	b.n	8003a56 <eTaskGetState+0x9e>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <eTaskGetState+0xb4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d112      	bne.n	8003a3e <eTaskGetState+0x86>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10b      	bne.n	8003a38 <eTaskGetState+0x80>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d102      	bne.n	8003a32 <eTaskGetState+0x7a>
							{
								eReturn = eBlocked;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e011      	b.n	8003a56 <eTaskGetState+0x9e>
							}
							else
							{
								eReturn = eSuspended;
 8003a32:	2303      	movs	r3, #3
 8003a34:	77fb      	strb	r3, [r7, #31]
 8003a36:	e00e      	b.n	8003a56 <eTaskGetState+0x9e>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e00b      	b.n	8003a56 <eTaskGetState+0x9e>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <eTaskGetState+0xb8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d002      	beq.n	8003a4c <eTaskGetState+0x94>
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <eTaskGetState+0x9a>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	77fb      	strb	r3, [r7, #31]
 8003a50:	e001      	b.n	8003a56 <eTaskGetState+0x9e>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003a52:	2301      	movs	r3, #1
 8003a54:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8003a56:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3720      	adds	r7, #32
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20003934 	.word	0x20003934
 8003a64:	20003dc0 	.word	0x20003dc0
 8003a68:	20003dc4 	.word	0x20003dc4
 8003a6c:	20003df4 	.word	0x20003df4
 8003a70:	20003ddc 	.word	0x20003ddc

08003a74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a82:	463a      	mov	r2, r7
 8003a84:	1d39      	adds	r1, r7, #4
 8003a86:	f107 0308 	add.w	r3, r7, #8
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fd38 	bl	8002500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a90:	6839      	ldr	r1, [r7, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	9202      	str	r2, [sp, #8]
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	460a      	mov	r2, r1
 8003aa2:	4919      	ldr	r1, [pc, #100]	; (8003b08 <vTaskStartScheduler+0x94>)
 8003aa4:	4819      	ldr	r0, [pc, #100]	; (8003b0c <vTaskStartScheduler+0x98>)
 8003aa6:	f7ff fe0b 	bl	80036c0 <xTaskCreateStatic>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	4a18      	ldr	r2, [pc, #96]	; (8003b10 <vTaskStartScheduler+0x9c>)
 8003aae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ab0:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <vTaskStartScheduler+0x9c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e001      	b.n	8003ac2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d102      	bne.n	8003ace <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ac8:	f000 fc82 	bl	80043d0 <xTimerCreateTimerTask>
 8003acc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d10e      	bne.n	8003af2 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003ad4:	f7ff f960 	bl	8002d98 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <vTaskStartScheduler+0xa0>)
 8003ada:	f04f 32ff 	mov.w	r2, #4294967295
 8003ade:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <vTaskStartScheduler+0xa4>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <vTaskStartScheduler+0xa8>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003aec:	f7ff f902 	bl	8002cf4 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003af0:	e006      	b.n	8003b00 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d102      	bne.n	8003b00 <vTaskStartScheduler+0x8c>
 8003afa:	f7ff f94d 	bl	8002d98 <ulSetInterruptMask>
 8003afe:	e7fe      	b.n	8003afe <vTaskStartScheduler+0x8a>
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	080056b0 	.word	0x080056b0
 8003b0c:	080040a5 	.word	0x080040a5
 8003b10:	20003e2c 	.word	0x20003e2c
 8003b14:	20003e28 	.word	0x20003e28
 8003b18:	20003e14 	.word	0x20003e14
 8003b1c:	20003e0c 	.word	0x20003e0c

08003b20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b24:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <vTaskSuspendAll+0x18>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	4a03      	ldr	r2, [pc, #12]	; (8003b38 <vTaskSuspendAll+0x18>)
 8003b2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b2e:	bf00      	nop
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	20003e30 	.word	0x20003e30

08003b3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b4a:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <xTaskResumeAll+0xfc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <xTaskResumeAll+0x1c>
 8003b52:	f7ff f921 	bl	8002d98 <ulSetInterruptMask>
 8003b56:	e7fe      	b.n	8003b56 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b58:	f7fe ffe4 	bl	8002b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b5c:	4b36      	ldr	r3, [pc, #216]	; (8003c38 <xTaskResumeAll+0xfc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	4a35      	ldr	r2, [pc, #212]	; (8003c38 <xTaskResumeAll+0xfc>)
 8003b64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b66:	4b34      	ldr	r3, [pc, #208]	; (8003c38 <xTaskResumeAll+0xfc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d15c      	bne.n	8003c28 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b6e:	4b33      	ldr	r3, [pc, #204]	; (8003c3c <xTaskResumeAll+0x100>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d058      	beq.n	8003c28 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b76:	e02f      	b.n	8003bd8 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b78:	4b31      	ldr	r3, [pc, #196]	; (8003c40 <xTaskResumeAll+0x104>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3318      	adds	r3, #24
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fe ff3b 	bl	8002a00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe ff36 	bl	8002a00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <xTaskResumeAll+0x108>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d903      	bls.n	8003ba8 <xTaskResumeAll+0x6c>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	4a27      	ldr	r2, [pc, #156]	; (8003c44 <xTaskResumeAll+0x108>)
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4a24      	ldr	r2, [pc, #144]	; (8003c48 <xTaskResumeAll+0x10c>)
 8003bb6:	441a      	add	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f7fe fec1 	bl	8002946 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc8:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <xTaskResumeAll+0x110>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8003bd2:	4b1f      	ldr	r3, [pc, #124]	; (8003c50 <xTaskResumeAll+0x114>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bd8:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <xTaskResumeAll+0x104>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1cb      	bne.n	8003b78 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003be6:	f000 fb03 	bl	80041f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bea:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <xTaskResumeAll+0x118>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d010      	beq.n	8003c18 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bf6:	f000 f83f 	bl	8003c78 <xTaskIncrementTick>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 8003c00:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <xTaskResumeAll+0x114>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f1      	bne.n	8003bf6 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <xTaskResumeAll+0x118>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <xTaskResumeAll+0x114>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c20:	2301      	movs	r3, #1
 8003c22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c24:	f7fe ff6c 	bl	8002b00 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c28:	f7fe ff8e 	bl	8002b48 <vPortExitCritical>

	return xAlreadyYielded;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20003e30 	.word	0x20003e30
 8003c3c:	20003e08 	.word	0x20003e08
 8003c40:	20003dc8 	.word	0x20003dc8
 8003c44:	20003e10 	.word	0x20003e10
 8003c48:	20003938 	.word	0x20003938
 8003c4c:	20003934 	.word	0x20003934
 8003c50:	20003e1c 	.word	0x20003e1c
 8003c54:	20003e18 	.word	0x20003e18

08003c58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <xTaskGetTickCount+0x1c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c64:	687b      	ldr	r3, [r7, #4]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20003e0c 	.word	0x20003e0c

08003c78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c82:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <xTaskIncrementTick+0x138>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f040 8087 	bne.w	8003d9a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c8c:	4b49      	ldr	r3, [pc, #292]	; (8003db4 <xTaskIncrementTick+0x13c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c94:	4a47      	ldr	r2, [pc, #284]	; (8003db4 <xTaskIncrementTick+0x13c>)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d118      	bne.n	8003cd2 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ca0:	4b45      	ldr	r3, [pc, #276]	; (8003db8 <xTaskIncrementTick+0x140>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <xTaskIncrementTick+0x38>
 8003caa:	f7ff f875 	bl	8002d98 <ulSetInterruptMask>
 8003cae:	e7fe      	b.n	8003cae <xTaskIncrementTick+0x36>
 8003cb0:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <xTaskIncrementTick+0x140>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	4b41      	ldr	r3, [pc, #260]	; (8003dbc <xTaskIncrementTick+0x144>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a3f      	ldr	r2, [pc, #252]	; (8003db8 <xTaskIncrementTick+0x140>)
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	4a3f      	ldr	r2, [pc, #252]	; (8003dbc <xTaskIncrementTick+0x144>)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	4b3e      	ldr	r3, [pc, #248]	; (8003dc0 <xTaskIncrementTick+0x148>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	4a3d      	ldr	r2, [pc, #244]	; (8003dc0 <xTaskIncrementTick+0x148>)
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	f000 fa8f 	bl	80041f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cd2:	4b3c      	ldr	r3, [pc, #240]	; (8003dc4 <xTaskIncrementTick+0x14c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d349      	bcc.n	8003d70 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cdc:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <xTaskIncrementTick+0x140>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce6:	4b37      	ldr	r3, [pc, #220]	; (8003dc4 <xTaskIncrementTick+0x14c>)
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cec:	601a      	str	r2, [r3, #0]
					break;
 8003cee:	e03f      	b.n	8003d70 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf0:	4b31      	ldr	r3, [pc, #196]	; (8003db8 <xTaskIncrementTick+0x140>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d203      	bcs.n	8003d10 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d08:	4a2e      	ldr	r2, [pc, #184]	; (8003dc4 <xTaskIncrementTick+0x14c>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d0e:	e02f      	b.n	8003d70 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe fe73 	bl	8002a00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d004      	beq.n	8003d2c <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	3318      	adds	r3, #24
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fe6a 	bl	8002a00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <xTaskIncrementTick+0x150>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d903      	bls.n	8003d40 <xTaskIncrementTick+0xc8>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	4a22      	ldr	r2, [pc, #136]	; (8003dc8 <xTaskIncrementTick+0x150>)
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4a1f      	ldr	r2, [pc, #124]	; (8003dcc <xTaskIncrementTick+0x154>)
 8003d4e:	441a      	add	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	3304      	adds	r3, #4
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f7fe fdf5 	bl	8002946 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d60:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <xTaskIncrementTick+0x158>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d3b8      	bcc.n	8003cdc <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d6e:	e7b5      	b.n	8003cdc <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d70:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <xTaskIncrementTick+0x158>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d76:	4915      	ldr	r1, [pc, #84]	; (8003dcc <xTaskIncrementTick+0x154>)
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d901      	bls.n	8003d8c <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <xTaskIncrementTick+0x15c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e004      	b.n	8003da4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d9a:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <xTaskIncrementTick+0x160>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	4a0d      	ldr	r2, [pc, #52]	; (8003dd8 <xTaskIncrementTick+0x160>)
 8003da2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003da4:	697b      	ldr	r3, [r7, #20]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20003e30 	.word	0x20003e30
 8003db4:	20003e0c 	.word	0x20003e0c
 8003db8:	20003dc0 	.word	0x20003dc0
 8003dbc:	20003dc4 	.word	0x20003dc4
 8003dc0:	20003e20 	.word	0x20003e20
 8003dc4:	20003e28 	.word	0x20003e28
 8003dc8:	20003e10 	.word	0x20003e10
 8003dcc:	20003938 	.word	0x20003938
 8003dd0:	20003934 	.word	0x20003934
 8003dd4:	20003e1c 	.word	0x20003e1c
 8003dd8:	20003e18 	.word	0x20003e18

08003ddc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003de2:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <vTaskSwitchContext+0x94>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dea:	4b22      	ldr	r3, [pc, #136]	; (8003e74 <vTaskSwitchContext+0x98>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003df0:	e039      	b.n	8003e66 <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 8003df2:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <vTaskSwitchContext+0x98>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003df8:	4b1f      	ldr	r3, [pc, #124]	; (8003e78 <vTaskSwitchContext+0x9c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	607b      	str	r3, [r7, #4]
 8003dfe:	e008      	b.n	8003e12 <vTaskSwitchContext+0x36>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d102      	bne.n	8003e0c <vTaskSwitchContext+0x30>
 8003e06:	f7fe ffc7 	bl	8002d98 <ulSetInterruptMask>
 8003e0a:	e7fe      	b.n	8003e0a <vTaskSwitchContext+0x2e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	491a      	ldr	r1, [pc, #104]	; (8003e7c <vTaskSwitchContext+0xa0>)
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ec      	beq.n	8003e00 <vTaskSwitchContext+0x24>
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4a12      	ldr	r2, [pc, #72]	; (8003e7c <vTaskSwitchContext+0xa0>)
 8003e32:	4413      	add	r3, r2
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	3308      	adds	r3, #8
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d104      	bne.n	8003e56 <vTaskSwitchContext+0x7a>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <vTaskSwitchContext+0xa4>)
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	4a05      	ldr	r2, [pc, #20]	; (8003e78 <vTaskSwitchContext+0x9c>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6013      	str	r3, [r2, #0]
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20003e30 	.word	0x20003e30
 8003e74:	20003e1c 	.word	0x20003e1c
 8003e78:	20003e10 	.word	0x20003e10
 8003e7c:	20003938 	.word	0x20003938
 8003e80:	20003934 	.word	0x20003934

08003e84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <vTaskPlaceOnEventList+0x16>
 8003e94:	f7fe ff80 	bl	8002d98 <ulSetInterruptMask>
 8003e98:	e7fe      	b.n	8003e98 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e9a:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <vTaskPlaceOnEventList+0x34>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3318      	adds	r3, #24
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fe fd73 	bl	800298e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	6838      	ldr	r0, [r7, #0]
 8003eac:	f000 fa3c 	bl	8004328 <prvAddCurrentTaskToDelayedList>
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20003934 	.word	0x20003934

08003ebc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <vTaskPlaceOnEventListRestricted+0x18>
 8003ece:	f7fe ff63 	bl	8002d98 <ulSetInterruptMask>
 8003ed2:	e7fe      	b.n	8003ed2 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <vTaskPlaceOnEventListRestricted+0x44>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3318      	adds	r3, #24
 8003eda:	4619      	mov	r1, r3
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f7fe fd32 	bl	8002946 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 8003ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	68b8      	ldr	r0, [r7, #8]
 8003ef2:	f000 fa19 	bl	8004328 <prvAddCurrentTaskToDelayedList>
	}
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20003934 	.word	0x20003934

08003f04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <xTaskRemoveFromEventList+0x1c>
 8003f1a:	f7fe ff3d 	bl	8002d98 <ulSetInterruptMask>
 8003f1e:	e7fe      	b.n	8003f1e <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	3318      	adds	r3, #24
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe fd6b 	bl	8002a00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <xTaskRemoveFromEventList+0xa0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d11d      	bne.n	8003f6e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fd62 	bl	8002a00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f40:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <xTaskRemoveFromEventList+0xa4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d903      	bls.n	8003f50 <xTaskRemoveFromEventList+0x4c>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <xTaskRemoveFromEventList+0xa4>)
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4a13      	ldr	r2, [pc, #76]	; (8003fac <xTaskRemoveFromEventList+0xa8>)
 8003f5e:	441a      	add	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f7fe fced 	bl	8002946 <vListInsertEnd>
 8003f6c:	e005      	b.n	8003f7a <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	3318      	adds	r3, #24
 8003f72:	4619      	mov	r1, r3
 8003f74:	480e      	ldr	r0, [pc, #56]	; (8003fb0 <xTaskRemoveFromEventList+0xac>)
 8003f76:	f7fe fce6 	bl	8002946 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	; (8003fb4 <xTaskRemoveFromEventList+0xb0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d905      	bls.n	8003f94 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <xTaskRemoveFromEventList+0xb4>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e001      	b.n	8003f98 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003f98:	68fb      	ldr	r3, [r7, #12]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20003e30 	.word	0x20003e30
 8003fa8:	20003e10 	.word	0x20003e10
 8003fac:	20003938 	.word	0x20003938
 8003fb0:	20003dc8 	.word	0x20003dc8
 8003fb4:	20003934 	.word	0x20003934
 8003fb8:	20003e1c 	.word	0x20003e1c

08003fbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <vTaskInternalSetTimeOutState+0x24>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <vTaskInternalSetTimeOutState+0x28>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	605a      	str	r2, [r3, #4]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	20003e20 	.word	0x20003e20
 8003fe4:	20003e0c 	.word	0x20003e0c

08003fe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <xTaskCheckForTimeOut+0x16>
 8003ff8:	f7fe fece 	bl	8002d98 <ulSetInterruptMask>
 8003ffc:	e7fe      	b.n	8003ffc <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <xTaskCheckForTimeOut+0x22>
 8004004:	f7fe fec8 	bl	8002d98 <ulSetInterruptMask>
 8004008:	e7fe      	b.n	8004008 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 800400a:	f7fe fd8b 	bl	8002b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800400e:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <xTaskCheckForTimeOut+0x9c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	d102      	bne.n	800402e <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	e023      	b.n	8004076 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4b15      	ldr	r3, [pc, #84]	; (8004088 <xTaskCheckForTimeOut+0xa0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d007      	beq.n	800404a <xTaskCheckForTimeOut+0x62>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	429a      	cmp	r2, r3
 8004042:	d302      	bcc.n	800404a <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004044:	2301      	movs	r3, #1
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	e015      	b.n	8004076 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	429a      	cmp	r2, r3
 8004052:	d20b      	bcs.n	800406c <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1ad2      	subs	r2, r2, r3
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff ffab 	bl	8003fbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e004      	b.n	8004076 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004072:	2301      	movs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004076:	f7fe fd67 	bl	8002b48 <vPortExitCritical>

	return xReturn;
 800407a:	697b      	ldr	r3, [r7, #20]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20003e0c 	.word	0x20003e0c
 8004088:	20003e20 	.word	0x20003e20

0800408c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004090:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <vTaskMissedYield+0x14>)
 8004092:	2201      	movs	r2, #1
 8004094:	601a      	str	r2, [r3, #0]
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	20003e1c 	.word	0x20003e1c

080040a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040ac:	f000 f84a 	bl	8004144 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040b0:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <prvIdleTask+0x1c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d9f9      	bls.n	80040ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80040b8:	f7fe fd22 	bl	8002b00 <vPortYield>
		prvCheckTasksWaitingTermination();
 80040bc:	e7f6      	b.n	80040ac <prvIdleTask+0x8>
 80040be:	bf00      	nop
 80040c0:	20003938 	.word	0x20003938

080040c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ca:	2300      	movs	r3, #0
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	e00c      	b.n	80040ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4a12      	ldr	r2, [pc, #72]	; (8004124 <prvInitialiseTaskLists+0x60>)
 80040dc:	4413      	add	r3, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe fc04 	bl	80028ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3301      	adds	r3, #1
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b37      	cmp	r3, #55	; 0x37
 80040ee:	d9ef      	bls.n	80040d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040f0:	480d      	ldr	r0, [pc, #52]	; (8004128 <prvInitialiseTaskLists+0x64>)
 80040f2:	f7fe fbfb 	bl	80028ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040f6:	480d      	ldr	r0, [pc, #52]	; (800412c <prvInitialiseTaskLists+0x68>)
 80040f8:	f7fe fbf8 	bl	80028ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040fc:	480c      	ldr	r0, [pc, #48]	; (8004130 <prvInitialiseTaskLists+0x6c>)
 80040fe:	f7fe fbf5 	bl	80028ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004102:	480c      	ldr	r0, [pc, #48]	; (8004134 <prvInitialiseTaskLists+0x70>)
 8004104:	f7fe fbf2 	bl	80028ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004108:	480b      	ldr	r0, [pc, #44]	; (8004138 <prvInitialiseTaskLists+0x74>)
 800410a:	f7fe fbef 	bl	80028ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800410e:	4b0b      	ldr	r3, [pc, #44]	; (800413c <prvInitialiseTaskLists+0x78>)
 8004110:	4a05      	ldr	r2, [pc, #20]	; (8004128 <prvInitialiseTaskLists+0x64>)
 8004112:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004114:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <prvInitialiseTaskLists+0x7c>)
 8004116:	4a05      	ldr	r2, [pc, #20]	; (800412c <prvInitialiseTaskLists+0x68>)
 8004118:	601a      	str	r2, [r3, #0]
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20003938 	.word	0x20003938
 8004128:	20003d98 	.word	0x20003d98
 800412c:	20003dac 	.word	0x20003dac
 8004130:	20003dc8 	.word	0x20003dc8
 8004134:	20003ddc 	.word	0x20003ddc
 8004138:	20003df4 	.word	0x20003df4
 800413c:	20003dc0 	.word	0x20003dc0
 8004140:	20003dc4 	.word	0x20003dc4

08004144 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800414a:	e019      	b.n	8004180 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800414c:	f7fe fcea 	bl	8002b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004150:	4b10      	ldr	r3, [pc, #64]	; (8004194 <prvCheckTasksWaitingTermination+0x50>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe fc4f 	bl	8002a00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004162:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <prvCheckTasksWaitingTermination+0x54>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3b01      	subs	r3, #1
 8004168:	4a0b      	ldr	r2, [pc, #44]	; (8004198 <prvCheckTasksWaitingTermination+0x54>)
 800416a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <prvCheckTasksWaitingTermination+0x58>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3b01      	subs	r3, #1
 8004172:	4a0a      	ldr	r2, [pc, #40]	; (800419c <prvCheckTasksWaitingTermination+0x58>)
 8004174:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004176:	f7fe fce7 	bl	8002b48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f810 	bl	80041a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004180:	4b06      	ldr	r3, [pc, #24]	; (800419c <prvCheckTasksWaitingTermination+0x58>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e1      	bne.n	800414c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20003ddc 	.word	0x20003ddc
 8004198:	20003e08 	.word	0x20003e08
 800419c:	20003df0 	.word	0x20003df0

080041a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d108      	bne.n	80041c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fe fa8a 	bl	80026d0 <vPortFree>
				vPortFree( pxTCB );
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7fe fa87 	bl	80026d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041c2:	e010      	b.n	80041e6 <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d103      	bne.n	80041d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fe fa7e 	bl	80026d0 <vPortFree>
	}
 80041d4:	e007      	b.n	80041e6 <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d002      	beq.n	80041e6 <prvDeleteTCB+0x46>
 80041e0:	f7fe fdda 	bl	8002d98 <ulSetInterruptMask>
 80041e4:	e7fe      	b.n	80041e4 <prvDeleteTCB+0x44>
	}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <prvResetNextTaskUnblockTime+0x38>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d104      	bne.n	800420a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <prvResetNextTaskUnblockTime+0x3c>)
 8004202:	f04f 32ff 	mov.w	r2, #4294967295
 8004206:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004208:	e008      	b.n	800421c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <prvResetNextTaskUnblockTime+0x38>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	4a04      	ldr	r2, [pc, #16]	; (800422c <prvResetNextTaskUnblockTime+0x3c>)
 800421a:	6013      	str	r3, [r2, #0]
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	20003dc0 	.word	0x20003dc0
 800422c:	20003e28 	.word	0x20003e28

08004230 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004236:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <xTaskGetSchedulerState+0x34>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d102      	bne.n	8004244 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800423e:	2301      	movs	r3, #1
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	e008      	b.n	8004256 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004244:	4b08      	ldr	r3, [pc, #32]	; (8004268 <xTaskGetSchedulerState+0x38>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d102      	bne.n	8004252 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800424c:	2302      	movs	r3, #2
 800424e:	607b      	str	r3, [r7, #4]
 8004250:	e001      	b.n	8004256 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004252:	2300      	movs	r3, #0
 8004254:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004256:	687b      	ldr	r3, [r7, #4]
	}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	20003e14 	.word	0x20003e14
 8004268:	20003e30 	.word	0x20003e30

0800426c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d046      	beq.n	8004310 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004282:	4b26      	ldr	r3, [pc, #152]	; (800431c <xTaskPriorityDisinherit+0xb0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	429a      	cmp	r2, r3
 800428a:	d002      	beq.n	8004292 <xTaskPriorityDisinherit+0x26>
 800428c:	f7fe fd84 	bl	8002d98 <ulSetInterruptMask>
 8004290:	e7fe      	b.n	8004290 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004296:	2b00      	cmp	r3, #0
 8004298:	d102      	bne.n	80042a0 <xTaskPriorityDisinherit+0x34>
 800429a:	f7fe fd7d 	bl	8002d98 <ulSetInterruptMask>
 800429e:	e7fe      	b.n	800429e <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a4:	1e5a      	subs	r2, r3, #1
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d02c      	beq.n	8004310 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d128      	bne.n	8004310 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3304      	adds	r3, #4
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fe fb9c 	bl	8002a00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <xTaskPriorityDisinherit+0xb4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d903      	bls.n	80042f0 <xTaskPriorityDisinherit+0x84>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	4a0c      	ldr	r2, [pc, #48]	; (8004320 <xTaskPriorityDisinherit+0xb4>)
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4a09      	ldr	r2, [pc, #36]	; (8004324 <xTaskPriorityDisinherit+0xb8>)
 80042fe:	441a      	add	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f7fe fb1d 	bl	8002946 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800430c:	2301      	movs	r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004310:	68fb      	ldr	r3, [r7, #12]
	}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20003934 	.word	0x20003934
 8004320:	20003e10 	.word	0x20003e10
 8004324:	20003938 	.word	0x20003938

08004328 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004332:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004338:	4b20      	ldr	r3, [pc, #128]	; (80043bc <prvAddCurrentTaskToDelayedList+0x94>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3304      	adds	r3, #4
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe fb5e 	bl	8002a00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d10a      	bne.n	8004362 <prvAddCurrentTaskToDelayedList+0x3a>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004352:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <prvAddCurrentTaskToDelayedList+0x94>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3304      	adds	r3, #4
 8004358:	4619      	mov	r1, r3
 800435a:	4819      	ldr	r0, [pc, #100]	; (80043c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800435c:	f7fe faf3 	bl	8002946 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004360:	e026      	b.n	80043b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4413      	add	r3, r2
 8004368:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800436a:	4b14      	ldr	r3, [pc, #80]	; (80043bc <prvAddCurrentTaskToDelayedList+0x94>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	429a      	cmp	r2, r3
 8004378:	d209      	bcs.n	800438e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <prvAddCurrentTaskToDelayedList+0x94>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3304      	adds	r3, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f7fe fb01 	bl	800298e <vListInsert>
}
 800438c:	e010      	b.n	80043b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800438e:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <prvAddCurrentTaskToDelayedList+0x94>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3304      	adds	r3, #4
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f7fe faf7 	bl	800298e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d202      	bcs.n	80043b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043aa:	4a08      	ldr	r2, [pc, #32]	; (80043cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6013      	str	r3, [r2, #0]
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20003e0c 	.word	0x20003e0c
 80043bc:	20003934 	.word	0x20003934
 80043c0:	20003df4 	.word	0x20003df4
 80043c4:	20003dc4 	.word	0x20003dc4
 80043c8:	20003dc0 	.word	0x20003dc0
 80043cc:	20003e28 	.word	0x20003e28

080043d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80043da:	f000 fb1b 	bl	8004a14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80043de:	4b18      	ldr	r3, [pc, #96]	; (8004440 <xTimerCreateTimerTask+0x70>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d020      	beq.n	8004428 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80043ee:	463a      	mov	r2, r7
 80043f0:	1d39      	adds	r1, r7, #4
 80043f2:	f107 0308 	add.w	r3, r7, #8
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe f89c 	bl	8002534 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80043fc:	6839      	ldr	r1, [r7, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	9202      	str	r2, [sp, #8]
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	2302      	movs	r3, #2
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	2300      	movs	r3, #0
 800440c:	460a      	mov	r2, r1
 800440e:	490d      	ldr	r1, [pc, #52]	; (8004444 <xTimerCreateTimerTask+0x74>)
 8004410:	480d      	ldr	r0, [pc, #52]	; (8004448 <xTimerCreateTimerTask+0x78>)
 8004412:	f7ff f955 	bl	80036c0 <xTaskCreateStatic>
 8004416:	4603      	mov	r3, r0
 8004418:	4a0c      	ldr	r2, [pc, #48]	; (800444c <xTimerCreateTimerTask+0x7c>)
 800441a:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <xTimerCreateTimerTask+0x7c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8004424:	2301      	movs	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <xTimerCreateTimerTask+0x64>
 800442e:	f7fe fcb3 	bl	8002d98 <ulSetInterruptMask>
 8004432:	e7fe      	b.n	8004432 <xTimerCreateTimerTask+0x62>
	return xReturn;
 8004434:	68fb      	ldr	r3, [r7, #12]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20003e64 	.word	0x20003e64
 8004444:	080056b8 	.word	0x080056b8
 8004448:	0800460d 	.word	0x0800460d
 800444c:	20003e68 	.word	0x20003e68

08004450 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af02      	add	r7, sp, #8
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800445e:	202c      	movs	r0, #44	; 0x2c
 8004460:	f7fe f882 	bl	8002568 <pvPortMalloc>
 8004464:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00d      	beq.n	8004488 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f805 	bl	8004492 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004488:	697b      	ldr	r3, [r7, #20]
	}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <prvInitialiseNewTimer+0x1a>
 80044a6:	f7fe fc77 	bl	8002d98 <ulSetInterruptMask>
 80044aa:	e7fe      	b.n	80044aa <prvInitialiseNewTimer+0x18>

	if( pxNewTimer != NULL )
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01e      	beq.n	80044f0 <prvInitialiseNewTimer+0x5e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80044b2:	f000 faaf 	bl	8004a14 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	3304      	adds	r3, #4
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fa2a 	bl	800292c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d008      	beq.n	80044f0 <prvInitialiseNewTimer+0x5e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044e4:	f043 0304 	orr.w	r3, r3, #4
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004506:	2300      	movs	r3, #0
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d102      	bne.n	8004516 <xTimerGenericCommand+0x1e>
 8004510:	f7fe fc42 	bl	8002d98 <ulSetInterruptMask>
 8004514:	e7fe      	b.n	8004514 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004516:	4b1a      	ldr	r3, [pc, #104]	; (8004580 <xTimerGenericCommand+0x88>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d02a      	beq.n	8004574 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b05      	cmp	r3, #5
 800452e:	dc18      	bgt.n	8004562 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004530:	f7ff fe7e 	bl	8004230 <xTaskGetSchedulerState>
 8004534:	4603      	mov	r3, r0
 8004536:	2b02      	cmp	r3, #2
 8004538:	d109      	bne.n	800454e <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800453a:	4b11      	ldr	r3, [pc, #68]	; (8004580 <xTimerGenericCommand+0x88>)
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	f107 0114 	add.w	r1, r7, #20
 8004542:	2300      	movs	r3, #0
 8004544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004546:	f7fe fd5a 	bl	8002ffe <xQueueGenericSend>
 800454a:	6278      	str	r0, [r7, #36]	; 0x24
 800454c:	e012      	b.n	8004574 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <xTimerGenericCommand+0x88>)
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	f107 0114 	add.w	r1, r7, #20
 8004556:	2300      	movs	r3, #0
 8004558:	2200      	movs	r2, #0
 800455a:	f7fe fd50 	bl	8002ffe <xQueueGenericSend>
 800455e:	6278      	str	r0, [r7, #36]	; 0x24
 8004560:	e008      	b.n	8004574 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004562:	4b07      	ldr	r3, [pc, #28]	; (8004580 <xTimerGenericCommand+0x88>)
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	f107 0114 	add.w	r1, r7, #20
 800456a:	2300      	movs	r3, #0
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	f7fe fe0f 	bl	8003190 <xQueueGenericSendFromISR>
 8004572:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004576:	4618      	mov	r0, r3
 8004578:	3728      	adds	r7, #40	; 0x28
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20003e64 	.word	0x20003e64

08004584 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af02      	add	r7, sp, #8
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800458e:	4b1e      	ldr	r3, [pc, #120]	; (8004608 <prvProcessExpiredTimer+0x84>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3304      	adds	r3, #4
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe fa2f 	bl	8002a00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01a      	beq.n	80045e6 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	699a      	ldr	r2, [r3, #24]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	18d1      	adds	r1, r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f8c1 	bl	8004744 <prvInsertTimerInActiveList>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d017      	beq.n	80045f8 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045c8:	2300      	movs	r3, #0
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	2300      	movs	r3, #0
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	2100      	movs	r1, #0
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f7ff ff90 	bl	80044f8 <xTimerGenericCommand>
 80045d8:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10b      	bne.n	80045f8 <prvProcessExpiredTimer+0x74>
 80045e0:	f7fe fbda 	bl	8002d98 <ulSetInterruptMask>
 80045e4:	e7fe      	b.n	80045e4 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	4798      	blx	r3
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20003e5c 	.word	0x20003e5c

0800460c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004614:	f107 0308 	add.w	r3, r7, #8
 8004618:	4618      	mov	r0, r3
 800461a:	f000 f84f 	bl	80046bc <prvGetNextExpireTime>
 800461e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4619      	mov	r1, r3
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f803 	bl	8004630 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800462a:	f000 f8cd 	bl	80047c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800462e:	e7f1      	b.n	8004614 <prvTimerTask+0x8>

08004630 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800463a:	f7ff fa71 	bl	8003b20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800463e:	f107 0308 	add.w	r3, r7, #8
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f85e 	bl	8004704 <prvSampleTimeNow>
 8004648:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d12a      	bne.n	80046a6 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <prvProcessTimerOrBlockTask+0x3c>
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	429a      	cmp	r2, r3
 800465c:	d806      	bhi.n	800466c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800465e:	f7ff fa6d 	bl	8003b3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004662:	68f9      	ldr	r1, [r7, #12]
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff ff8d 	bl	8004584 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800466a:	e01e      	b.n	80046aa <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004672:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <prvProcessTimerOrBlockTask+0x84>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <prvProcessTimerOrBlockTask+0x50>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <prvProcessTimerOrBlockTask+0x52>
 8004680:	2300      	movs	r3, #0
 8004682:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <prvProcessTimerOrBlockTask+0x88>)
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	4619      	mov	r1, r3
 8004692:	f7fe ffe1 	bl	8003658 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004696:	f7ff fa51 	bl	8003b3c <xTaskResumeAll>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d104      	bne.n	80046aa <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80046a0:	f7fe fa2e 	bl	8002b00 <vPortYield>
}
 80046a4:	e001      	b.n	80046aa <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80046a6:	f7ff fa49 	bl	8003b3c <xTaskResumeAll>
}
 80046aa:	bf00      	nop
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20003e60 	.word	0x20003e60
 80046b8:	20003e64 	.word	0x20003e64

080046bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046c4:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <prvGetNextExpireTime+0x44>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <prvGetNextExpireTime+0x16>
 80046ce:	2201      	movs	r2, #1
 80046d0:	e000      	b.n	80046d4 <prvGetNextExpireTime+0x18>
 80046d2:	2200      	movs	r2, #0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <prvGetNextExpireTime+0x44>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	e001      	b.n	80046f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046f0:	68fb      	ldr	r3, [r7, #12]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20003e5c 	.word	0x20003e5c

08004704 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800470c:	f7ff faa4 	bl	8003c58 <xTaskGetTickCount>
 8004710:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <prvSampleTimeNow+0x3c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	429a      	cmp	r2, r3
 800471a:	d205      	bcs.n	8004728 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800471c:	f000 f91e 	bl	800495c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e002      	b.n	800472e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800472e:	4a04      	ldr	r2, [pc, #16]	; (8004740 <prvSampleTimeNow+0x3c>)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004734:	68fb      	ldr	r3, [r7, #12]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20003e6c 	.word	0x20003e6c

08004744 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	429a      	cmp	r2, r3
 8004768:	d812      	bhi.n	8004790 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	429a      	cmp	r2, r3
 8004776:	d302      	bcc.n	800477e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004778:	2301      	movs	r3, #1
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e01b      	b.n	80047b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <prvInsertTimerInActiveList+0x7c>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3304      	adds	r3, #4
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f7fe f900 	bl	800298e <vListInsert>
 800478e:	e012      	b.n	80047b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d206      	bcs.n	80047a6 <prvInsertTimerInActiveList+0x62>
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d302      	bcc.n	80047a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047a0:	2301      	movs	r3, #1
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e007      	b.n	80047b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047a6:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <prvInsertTimerInActiveList+0x80>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4619      	mov	r1, r3
 80047b0:	4610      	mov	r0, r2
 80047b2:	f7fe f8ec 	bl	800298e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047b6:	697b      	ldr	r3, [r7, #20]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20003e60 	.word	0x20003e60
 80047c4:	20003e5c 	.word	0x20003e5c

080047c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08c      	sub	sp, #48	; 0x30
 80047cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047ce:	e0b2      	b.n	8004936 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	da11      	bge.n	80047fa <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047d6:	f107 0308 	add.w	r3, r7, #8
 80047da:	3304      	adds	r3, #4
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <prvProcessReceivedCommands+0x22>
 80047e4:	f7fe fad8 	bl	8002d98 <ulSetInterruptMask>
 80047e8:	e7fe      	b.n	80047e8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f0:	6850      	ldr	r0, [r2, #4]
 80047f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f4:	6892      	ldr	r2, [r2, #8]
 80047f6:	4611      	mov	r1, r2
 80047f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f2c0 8099 	blt.w	8004934 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d004      	beq.n	8004818 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	3304      	adds	r3, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe f8f4 	bl	8002a00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004818:	1d3b      	adds	r3, r7, #4
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff ff72 	bl	8004704 <prvSampleTimeNow>
 8004820:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b09      	cmp	r3, #9
 8004826:	f200 8086 	bhi.w	8004936 <prvProcessReceivedCommands+0x16e>
 800482a:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <prvProcessReceivedCommands+0x68>)
 800482c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004830:	08004859 	.word	0x08004859
 8004834:	08004859 	.word	0x08004859
 8004838:	08004859 	.word	0x08004859
 800483c:	080048bd 	.word	0x080048bd
 8004840:	080048d1 	.word	0x080048d1
 8004844:	0800490b 	.word	0x0800490b
 8004848:	08004859 	.word	0x08004859
 800484c:	08004859 	.word	0x08004859
 8004850:	080048bd 	.word	0x080048bd
 8004854:	080048d1 	.word	0x080048d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	b2da      	uxtb	r2, r3
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	18d1      	adds	r1, r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	6a38      	ldr	r0, [r7, #32]
 8004878:	f7ff ff64 	bl	8004744 <prvInsertTimerInActiveList>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d059      	beq.n	8004936 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	6a38      	ldr	r0, [r7, #32]
 8004888:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d04e      	beq.n	8004936 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	441a      	add	r2, r3
 80048a0:	2300      	movs	r3, #0
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	2300      	movs	r3, #0
 80048a6:	2100      	movs	r1, #0
 80048a8:	6a38      	ldr	r0, [r7, #32]
 80048aa:	f7ff fe25 	bl	80044f8 <xTimerGenericCommand>
 80048ae:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d13f      	bne.n	8004936 <prvProcessReceivedCommands+0x16e>
 80048b6:	f7fe fa6f 	bl	8002d98 <ulSetInterruptMask>
 80048ba:	e7fe      	b.n	80048ba <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80048ce:	e032      	b.n	8004936 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <prvProcessReceivedCommands+0x12e>
 80048f0:	f7fe fa52 	bl	8002d98 <ulSetInterruptMask>
 80048f4:	e7fe      	b.n	80048f4 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	18d1      	adds	r1, r2, r3
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	6a38      	ldr	r0, [r7, #32]
 8004904:	f7ff ff1e 	bl	8004744 <prvInsertTimerInActiveList>
					break;
 8004908:	e015      	b.n	8004936 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d103      	bne.n	8004920 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8004918:	6a38      	ldr	r0, [r7, #32]
 800491a:	f7fd fed9 	bl	80026d0 <vPortFree>
 800491e:	e00a      	b.n	8004936 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	b2da      	uxtb	r2, r3
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004932:	e000      	b.n	8004936 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004934:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004936:	4b08      	ldr	r3, [pc, #32]	; (8004958 <prvProcessReceivedCommands+0x190>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f107 0108 	add.w	r1, r7, #8
 800493e:	2200      	movs	r2, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f7fe fc96 	bl	8003272 <xQueueReceive>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	f47f af41 	bne.w	80047d0 <prvProcessReceivedCommands+0x8>
	}
}
 800494e:	bf00      	nop
 8004950:	bf00      	nop
 8004952:	3728      	adds	r7, #40	; 0x28
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20003e64 	.word	0x20003e64

0800495c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004962:	e040      	b.n	80049e6 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004964:	4b29      	ldr	r3, [pc, #164]	; (8004a0c <prvSwitchTimerLists+0xb0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800496e:	4b27      	ldr	r3, [pc, #156]	; (8004a0c <prvSwitchTimerLists+0xb0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3304      	adds	r3, #4
 800497c:	4618      	mov	r0, r3
 800497e:	f7fe f83f 	bl	8002a00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d026      	beq.n	80049e6 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4413      	add	r3, r2
 80049a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d90e      	bls.n	80049c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049b6:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <prvSwitchTimerLists+0xb0>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3304      	adds	r3, #4
 80049be:	4619      	mov	r1, r3
 80049c0:	4610      	mov	r0, r2
 80049c2:	f7fd ffe4 	bl	800298e <vListInsert>
 80049c6:	e00e      	b.n	80049e6 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049c8:	2300      	movs	r3, #0
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	2300      	movs	r3, #0
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	2100      	movs	r1, #0
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f7ff fd90 	bl	80044f8 <xTimerGenericCommand>
 80049d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d102      	bne.n	80049e6 <prvSwitchTimerLists+0x8a>
 80049e0:	f7fe f9da 	bl	8002d98 <ulSetInterruptMask>
 80049e4:	e7fe      	b.n	80049e4 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049e6:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <prvSwitchTimerLists+0xb0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1b9      	bne.n	8004964 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <prvSwitchTimerLists+0xb0>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049f6:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <prvSwitchTimerLists+0xb4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <prvSwitchTimerLists+0xb0>)
 80049fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049fe:	4a04      	ldr	r2, [pc, #16]	; (8004a10 <prvSwitchTimerLists+0xb4>)
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	6013      	str	r3, [r2, #0]
}
 8004a04:	bf00      	nop
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20003e5c 	.word	0x20003e5c
 8004a10:	20003e60 	.word	0x20003e60

08004a14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a1a:	f7fe f883 	bl	8002b24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a1e:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <prvCheckForValidListAndQueue+0x60>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d120      	bne.n	8004a68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a26:	4814      	ldr	r0, [pc, #80]	; (8004a78 <prvCheckForValidListAndQueue+0x64>)
 8004a28:	f7fd ff60 	bl	80028ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a2c:	4813      	ldr	r0, [pc, #76]	; (8004a7c <prvCheckForValidListAndQueue+0x68>)
 8004a2e:	f7fd ff5d 	bl	80028ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a32:	4b13      	ldr	r3, [pc, #76]	; (8004a80 <prvCheckForValidListAndQueue+0x6c>)
 8004a34:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <prvCheckForValidListAndQueue+0x64>)
 8004a36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a38:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <prvCheckForValidListAndQueue+0x70>)
 8004a3a:	4a10      	ldr	r2, [pc, #64]	; (8004a7c <prvCheckForValidListAndQueue+0x68>)
 8004a3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a3e:	2300      	movs	r3, #0
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <prvCheckForValidListAndQueue+0x74>)
 8004a44:	4a11      	ldr	r2, [pc, #68]	; (8004a8c <prvCheckForValidListAndQueue+0x78>)
 8004a46:	2110      	movs	r1, #16
 8004a48:	200a      	movs	r0, #10
 8004a4a:	f7fe fa65 	bl	8002f18 <xQueueGenericCreateStatic>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <prvCheckForValidListAndQueue+0x60>)
 8004a52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <prvCheckForValidListAndQueue+0x60>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <prvCheckForValidListAndQueue+0x60>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	490b      	ldr	r1, [pc, #44]	; (8004a90 <prvCheckForValidListAndQueue+0x7c>)
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe fdce 	bl	8003604 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a68:	f7fe f86e 	bl	8002b48 <vPortExitCritical>
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20003e64 	.word	0x20003e64
 8004a78:	20003e34 	.word	0x20003e34
 8004a7c:	20003e48 	.word	0x20003e48
 8004a80:	20003e5c 	.word	0x20003e5c
 8004a84:	20003e60 	.word	0x20003e60
 8004a88:	20003f10 	.word	0x20003f10
 8004a8c:	20003e70 	.word	0x20003e70
 8004a90:	080056c0 	.word	0x080056c0

08004a94 <main>:

//#define mainONE_SHOT_TIMER_PERIOD pdMS_TO_TICKS( 3333 )
//#define mainAUTO_RELOAD_TIMER_PERIOD pdMS_TO_TICKS( 1000 )

int main(void)
{
 8004a94:	b590      	push	{r4, r7, lr}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a9a:	f7fb fe89 	bl	80007b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a9e:	f000 f847 	bl	8004b30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize LEDs */
   BSP_LED_Init(LED9);
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f7fb fd4c 	bl	8000540 <BSP_LED_Init>
  //BSP_LED_Init(LED10);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 8004aa8:	f000 f893 	bl	8004bd2 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004aac:	f7fd fd04 	bl	80024b8 <osKernelInitialize>


  BaseType_t xTimer1Started, xTimer2Started;

  xTaskCreate(LED_Thread1, "LED Task", 1024, NULL, 1, &task1_handle);
 8004ab0:	4b18      	ldr	r3, [pc, #96]	; (8004b14 <main+0x80>)
 8004ab2:	9301      	str	r3, [sp, #4]
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004abe:	4916      	ldr	r1, [pc, #88]	; (8004b18 <main+0x84>)
 8004ac0:	4816      	ldr	r0, [pc, #88]	; (8004b1c <main+0x88>)
 8004ac2:	f7fe fe42 	bl	800374a <xTaskCreate>

 // xOneShotTimer = xTimerCreate("OneShot",mainONE_SHOT_TIMER_PERIOD,pdFALSE,0,prvTimerCallback );
  xAutoReloadTimer = xTimerCreate("AutoReload",xHealthyTimerPeriod,pdTRUE,0,prvTimerCallback);
 8004ac6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004aca:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <main+0x8c>)
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	4814      	ldr	r0, [pc, #80]	; (8004b24 <main+0x90>)
 8004ad4:	f7ff fcbc 	bl	8004450 <xTimerCreate>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <main+0x94>)
 8004adc:	6013      	str	r3, [r2, #0]

  if(  xAutoReloadTimer != NULL  )
 8004ade:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <main+0x94>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d014      	beq.n	8004b10 <main+0x7c>
   {
    printf("timers created\n");
 8004ae6:	4811      	ldr	r0, [pc, #68]	; (8004b2c <main+0x98>)
 8004ae8:	f000 f980 	bl	8004dec <puts>
   //xTimer1Started = xTimerStart( xOneShotTimer, 0 );
   xTimer2Started = xTimerStart( xAutoReloadTimer, 0 );
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <main+0x94>)
 8004aee:	681c      	ldr	r4, [r3, #0]
 8004af0:	f7ff f8b2 	bl	8003c58 <xTaskGetTickCount>
 8004af4:	4602      	mov	r2, r0
 8004af6:	2300      	movs	r3, #0
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	2300      	movs	r3, #0
 8004afc:	2101      	movs	r1, #1
 8004afe:	4620      	mov	r0, r4
 8004b00:	f7ff fcfa 	bl	80044f8 <xTimerGenericCommand>
 8004b04:	6078      	str	r0, [r7, #4]

     if( xTimer2Started == pdPASS  )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <main+0x7c>
      {
    	 /* Start the scheduler. */
    	 vTaskStartScheduler();
 8004b0c:	f7fe ffb2 	bl	8003a74 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004b10:	e7fe      	b.n	8004b10 <main+0x7c>
 8004b12:	bf00      	nop
 8004b14:	20004000 	.word	0x20004000
 8004b18:	080056c8 	.word	0x080056c8
 8004b1c:	08004bf9 	.word	0x08004bf9
 8004b20:	08004c19 	.word	0x08004c19
 8004b24:	080056d4 	.word	0x080056d4
 8004b28:	20003ffc 	.word	0x20003ffc
 8004b2c:	080056e0 	.word	0x080056e0

08004b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b098      	sub	sp, #96	; 0x60
 8004b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b36:	f107 0318 	add.w	r3, r7, #24
 8004b3a:	2248      	movs	r2, #72	; 0x48
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 f8dd 	bl	8004cfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b44:	1d3b      	adds	r3, r7, #4
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	605a      	str	r2, [r3, #4]
 8004b4c:	609a      	str	r2, [r3, #8]
 8004b4e:	60da      	str	r2, [r3, #12]
 8004b50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8004b52:	2000      	movs	r0, #0
 8004b54:	f7fc f95a 	bl	8000e0c <HAL_PWREx_ControlVoltageScaling>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004b5e:	f000 f893 	bl	8004c88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004b62:	2310      	movs	r3, #16
 8004b64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004b66:	2301      	movs	r3, #1
 8004b68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004b6e:	2360      	movs	r3, #96	; 0x60
 8004b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b72:	2302      	movs	r3, #2
 8004b74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004b76:	2301      	movs	r3, #1
 8004b78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8004b7e:	2337      	movs	r3, #55	; 0x37
 8004b80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004b82:	2307      	movs	r3, #7
 8004b84:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004b86:	2302      	movs	r3, #2
 8004b88:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b8e:	f107 0318 	add.w	r3, r7, #24
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fc f9da 	bl	8000f4c <HAL_RCC_OscConfig>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004b9e:	f000 f873 	bl	8004c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ba2:	230f      	movs	r3, #15
 8004ba4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	2105      	movs	r1, #5
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fc fe9c 	bl	80018f8 <HAL_RCC_ClockConfig>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004bc6:	f000 f85f 	bl	8004c88 <Error_Handler>
  }
}
 8004bca:	bf00      	nop
 8004bcc:	3760      	adds	r7, #96	; 0x60
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f7fc f8da 	bl	8000d90 <HAL_ICACHE_ConfigAssociativityMode>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8004be2:	f000 f851 	bl	8004c88 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8004be6:	f7fc f8f3 	bl	8000dd0 <HAL_ICACHE_Enable>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8004bf0:	f000 f84a 	bl	8004c88 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8004bf4:	bf00      	nop
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <LED_Thread1>:
  * @param  argument: Not used
  * @retval None
  */

void LED_Thread1(void *argument)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("Task1 is running\n");
 8004c00:	4804      	ldr	r0, [pc, #16]	; (8004c14 <LED_Thread1+0x1c>)
 8004c02:	f000 f8f3 	bl	8004dec <puts>
	  while(1)
    {
      BSP_LED_Toggle(LED9);
 8004c06:	2000      	movs	r0, #0
 8004c08:	f7fb fcf8 	bl	80005fc <BSP_LED_Toggle>
      HAL_Delay(200);
 8004c0c:	20c8      	movs	r0, #200	; 0xc8
 8004c0e:	f7fb fe09 	bl	8000824 <HAL_Delay>
      BSP_LED_Toggle(LED9);
 8004c12:	e7f8      	b.n	8004c06 <LED_Thread1+0xe>
 8004c14:	080056f0 	.word	0x080056f0

08004c18 <prvTimerCallback>:
	  osDelay(1000);
  /* USER CODE END 5 */
}

static void prvTimerCallback( TimerHandle_t xTimer )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	6078      	str	r0, [r7, #4]

static BaseType_t xErrorDetected = pdFALSE;

if( xErrorDetected == pdFALSE )
 8004c20:	4b0e      	ldr	r3, [pc, #56]	; (8004c5c <prvTimerCallback+0x44>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d112      	bne.n	8004c4e <prvTimerCallback+0x36>
	{

	//if( CheckTasksAreRunningWithoutError() == pdFAIL )
		if(eTaskGetState(task1_handle) != eRunning )
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <prvTimerCallback+0x48>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fe fec3 	bl	80039b8 <eTaskGetState>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <prvTimerCallback+0x30>
		{

			xTimerChangePeriod( xTimer, xErrorTimerPeriod, 0 ); /* Do not block when sending this command. */
 8004c38:	22c8      	movs	r2, #200	; 0xc8
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2104      	movs	r1, #4
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff fc58 	bl	80044f8 <xTimerGenericCommand>
		}
		/* Latch that an error has already been detected. */
		xErrorDetected = pdTRUE;
 8004c48:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <prvTimerCallback+0x44>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
	}
BSP_LED_Toggle(LED9);
 8004c4e:	2000      	movs	r0, #0
 8004c50:	f7fb fcd4 	bl	80005fc <BSP_LED_Toggle>
}
 8004c54:	bf00      	nop
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20003f60 	.word	0x20003f60
 8004c60:	20004000 	.word	0x20004000

08004c64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a04      	ldr	r2, [pc, #16]	; (8004c84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d101      	bne.n	8004c7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004c76:	f7fb fdb5 	bl	80007e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40001000 	.word	0x40001000

08004c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
   //USER CODE BEGIN Error_Handler_Debug
   //User can add his own implementation to report the HAL error return state
  while(1)
 8004c8c:	e7fe      	b.n	8004c8c <Error_Handler+0x4>
	...

08004c90 <__errno>:
 8004c90:	4b01      	ldr	r3, [pc, #4]	; (8004c98 <__errno+0x8>)
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	2000001c 	.word	0x2000001c

08004c9c <__libc_init_array>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	4d0d      	ldr	r5, [pc, #52]	; (8004cd4 <__libc_init_array+0x38>)
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	4c0d      	ldr	r4, [pc, #52]	; (8004cd8 <__libc_init_array+0x3c>)
 8004ca4:	1b64      	subs	r4, r4, r5
 8004ca6:	10a4      	asrs	r4, r4, #2
 8004ca8:	42a6      	cmp	r6, r4
 8004caa:	d109      	bne.n	8004cc0 <__libc_init_array+0x24>
 8004cac:	4d0b      	ldr	r5, [pc, #44]	; (8004cdc <__libc_init_array+0x40>)
 8004cae:	2600      	movs	r6, #0
 8004cb0:	4c0b      	ldr	r4, [pc, #44]	; (8004ce0 <__libc_init_array+0x44>)
 8004cb2:	f000 fcf1 	bl	8005698 <_init>
 8004cb6:	1b64      	subs	r4, r4, r5
 8004cb8:	10a4      	asrs	r4, r4, #2
 8004cba:	42a6      	cmp	r6, r4
 8004cbc:	d105      	bne.n	8004cca <__libc_init_array+0x2e>
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc4:	3601      	adds	r6, #1
 8004cc6:	4798      	blx	r3
 8004cc8:	e7ee      	b.n	8004ca8 <__libc_init_array+0xc>
 8004cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cce:	3601      	adds	r6, #1
 8004cd0:	4798      	blx	r3
 8004cd2:	e7f2      	b.n	8004cba <__libc_init_array+0x1e>
 8004cd4:	080057c0 	.word	0x080057c0
 8004cd8:	080057c0 	.word	0x080057c0
 8004cdc:	080057c0 	.word	0x080057c0
 8004ce0:	080057c4 	.word	0x080057c4

08004ce4 <memcpy>:
 8004ce4:	440a      	add	r2, r1
 8004ce6:	1e43      	subs	r3, r0, #1
 8004ce8:	4291      	cmp	r1, r2
 8004cea:	d100      	bne.n	8004cee <memcpy+0xa>
 8004cec:	4770      	bx	lr
 8004cee:	b510      	push	{r4, lr}
 8004cf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cf4:	4291      	cmp	r1, r2
 8004cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cfa:	d1f9      	bne.n	8004cf0 <memcpy+0xc>
 8004cfc:	bd10      	pop	{r4, pc}

08004cfe <memset>:
 8004cfe:	4402      	add	r2, r0
 8004d00:	4603      	mov	r3, r0
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d100      	bne.n	8004d08 <memset+0xa>
 8004d06:	4770      	bx	lr
 8004d08:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0c:	e7f9      	b.n	8004d02 <memset+0x4>
	...

08004d10 <_puts_r>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	460e      	mov	r6, r1
 8004d14:	4605      	mov	r5, r0
 8004d16:	b118      	cbz	r0, 8004d20 <_puts_r+0x10>
 8004d18:	6983      	ldr	r3, [r0, #24]
 8004d1a:	b90b      	cbnz	r3, 8004d20 <_puts_r+0x10>
 8004d1c:	f000 fa46 	bl	80051ac <__sinit>
 8004d20:	69ab      	ldr	r3, [r5, #24]
 8004d22:	68ac      	ldr	r4, [r5, #8]
 8004d24:	b913      	cbnz	r3, 8004d2c <_puts_r+0x1c>
 8004d26:	4628      	mov	r0, r5
 8004d28:	f000 fa40 	bl	80051ac <__sinit>
 8004d2c:	4b2c      	ldr	r3, [pc, #176]	; (8004de0 <_puts_r+0xd0>)
 8004d2e:	429c      	cmp	r4, r3
 8004d30:	d120      	bne.n	8004d74 <_puts_r+0x64>
 8004d32:	686c      	ldr	r4, [r5, #4]
 8004d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d36:	07db      	lsls	r3, r3, #31
 8004d38:	d405      	bmi.n	8004d46 <_puts_r+0x36>
 8004d3a:	89a3      	ldrh	r3, [r4, #12]
 8004d3c:	0598      	lsls	r0, r3, #22
 8004d3e:	d402      	bmi.n	8004d46 <_puts_r+0x36>
 8004d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d42:	f000 fad1 	bl	80052e8 <__retarget_lock_acquire_recursive>
 8004d46:	89a3      	ldrh	r3, [r4, #12]
 8004d48:	0719      	lsls	r1, r3, #28
 8004d4a:	d51d      	bpl.n	8004d88 <_puts_r+0x78>
 8004d4c:	6923      	ldr	r3, [r4, #16]
 8004d4e:	b1db      	cbz	r3, 8004d88 <_puts_r+0x78>
 8004d50:	3e01      	subs	r6, #1
 8004d52:	68a3      	ldr	r3, [r4, #8]
 8004d54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	60a3      	str	r3, [r4, #8]
 8004d5c:	bb39      	cbnz	r1, 8004dae <_puts_r+0x9e>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	da38      	bge.n	8004dd4 <_puts_r+0xc4>
 8004d62:	4622      	mov	r2, r4
 8004d64:	210a      	movs	r1, #10
 8004d66:	4628      	mov	r0, r5
 8004d68:	f000 f848 	bl	8004dfc <__swbuf_r>
 8004d6c:	3001      	adds	r0, #1
 8004d6e:	d011      	beq.n	8004d94 <_puts_r+0x84>
 8004d70:	250a      	movs	r5, #10
 8004d72:	e011      	b.n	8004d98 <_puts_r+0x88>
 8004d74:	4b1b      	ldr	r3, [pc, #108]	; (8004de4 <_puts_r+0xd4>)
 8004d76:	429c      	cmp	r4, r3
 8004d78:	d101      	bne.n	8004d7e <_puts_r+0x6e>
 8004d7a:	68ac      	ldr	r4, [r5, #8]
 8004d7c:	e7da      	b.n	8004d34 <_puts_r+0x24>
 8004d7e:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <_puts_r+0xd8>)
 8004d80:	429c      	cmp	r4, r3
 8004d82:	bf08      	it	eq
 8004d84:	68ec      	ldreq	r4, [r5, #12]
 8004d86:	e7d5      	b.n	8004d34 <_puts_r+0x24>
 8004d88:	4621      	mov	r1, r4
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	f000 f888 	bl	8004ea0 <__swsetup_r>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d0dd      	beq.n	8004d50 <_puts_r+0x40>
 8004d94:	f04f 35ff 	mov.w	r5, #4294967295
 8004d98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d9a:	07da      	lsls	r2, r3, #31
 8004d9c:	d405      	bmi.n	8004daa <_puts_r+0x9a>
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	059b      	lsls	r3, r3, #22
 8004da2:	d402      	bmi.n	8004daa <_puts_r+0x9a>
 8004da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004da6:	f000 faa0 	bl	80052ea <__retarget_lock_release_recursive>
 8004daa:	4628      	mov	r0, r5
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	da04      	bge.n	8004dbc <_puts_r+0xac>
 8004db2:	69a2      	ldr	r2, [r4, #24]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	dc06      	bgt.n	8004dc6 <_puts_r+0xb6>
 8004db8:	290a      	cmp	r1, #10
 8004dba:	d004      	beq.n	8004dc6 <_puts_r+0xb6>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	6022      	str	r2, [r4, #0]
 8004dc2:	7019      	strb	r1, [r3, #0]
 8004dc4:	e7c5      	b.n	8004d52 <_puts_r+0x42>
 8004dc6:	4622      	mov	r2, r4
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f000 f817 	bl	8004dfc <__swbuf_r>
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d1bf      	bne.n	8004d52 <_puts_r+0x42>
 8004dd2:	e7df      	b.n	8004d94 <_puts_r+0x84>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	250a      	movs	r5, #10
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	6022      	str	r2, [r4, #0]
 8004ddc:	701d      	strb	r5, [r3, #0]
 8004dde:	e7db      	b.n	8004d98 <_puts_r+0x88>
 8004de0:	08005780 	.word	0x08005780
 8004de4:	080057a0 	.word	0x080057a0
 8004de8:	08005760 	.word	0x08005760

08004dec <puts>:
 8004dec:	4b02      	ldr	r3, [pc, #8]	; (8004df8 <puts+0xc>)
 8004dee:	4601      	mov	r1, r0
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	f7ff bf8d 	b.w	8004d10 <_puts_r>
 8004df6:	bf00      	nop
 8004df8:	2000001c 	.word	0x2000001c

08004dfc <__swbuf_r>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	460e      	mov	r6, r1
 8004e00:	4614      	mov	r4, r2
 8004e02:	4605      	mov	r5, r0
 8004e04:	b118      	cbz	r0, 8004e0e <__swbuf_r+0x12>
 8004e06:	6983      	ldr	r3, [r0, #24]
 8004e08:	b90b      	cbnz	r3, 8004e0e <__swbuf_r+0x12>
 8004e0a:	f000 f9cf 	bl	80051ac <__sinit>
 8004e0e:	4b21      	ldr	r3, [pc, #132]	; (8004e94 <__swbuf_r+0x98>)
 8004e10:	429c      	cmp	r4, r3
 8004e12:	d12b      	bne.n	8004e6c <__swbuf_r+0x70>
 8004e14:	686c      	ldr	r4, [r5, #4]
 8004e16:	69a3      	ldr	r3, [r4, #24]
 8004e18:	60a3      	str	r3, [r4, #8]
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	071a      	lsls	r2, r3, #28
 8004e1e:	d52f      	bpl.n	8004e80 <__swbuf_r+0x84>
 8004e20:	6923      	ldr	r3, [r4, #16]
 8004e22:	b36b      	cbz	r3, 8004e80 <__swbuf_r+0x84>
 8004e24:	6923      	ldr	r3, [r4, #16]
 8004e26:	b2f6      	uxtb	r6, r6
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	4637      	mov	r7, r6
 8004e2c:	1ac0      	subs	r0, r0, r3
 8004e2e:	6963      	ldr	r3, [r4, #20]
 8004e30:	4283      	cmp	r3, r0
 8004e32:	dc04      	bgt.n	8004e3e <__swbuf_r+0x42>
 8004e34:	4621      	mov	r1, r4
 8004e36:	4628      	mov	r0, r5
 8004e38:	f000 f924 	bl	8005084 <_fflush_r>
 8004e3c:	bb30      	cbnz	r0, 8004e8c <__swbuf_r+0x90>
 8004e3e:	68a3      	ldr	r3, [r4, #8]
 8004e40:	3001      	adds	r0, #1
 8004e42:	3b01      	subs	r3, #1
 8004e44:	60a3      	str	r3, [r4, #8]
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	6022      	str	r2, [r4, #0]
 8004e4c:	701e      	strb	r6, [r3, #0]
 8004e4e:	6963      	ldr	r3, [r4, #20]
 8004e50:	4283      	cmp	r3, r0
 8004e52:	d004      	beq.n	8004e5e <__swbuf_r+0x62>
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	07db      	lsls	r3, r3, #31
 8004e58:	d506      	bpl.n	8004e68 <__swbuf_r+0x6c>
 8004e5a:	2e0a      	cmp	r6, #10
 8004e5c:	d104      	bne.n	8004e68 <__swbuf_r+0x6c>
 8004e5e:	4621      	mov	r1, r4
 8004e60:	4628      	mov	r0, r5
 8004e62:	f000 f90f 	bl	8005084 <_fflush_r>
 8004e66:	b988      	cbnz	r0, 8004e8c <__swbuf_r+0x90>
 8004e68:	4638      	mov	r0, r7
 8004e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <__swbuf_r+0x9c>)
 8004e6e:	429c      	cmp	r4, r3
 8004e70:	d101      	bne.n	8004e76 <__swbuf_r+0x7a>
 8004e72:	68ac      	ldr	r4, [r5, #8]
 8004e74:	e7cf      	b.n	8004e16 <__swbuf_r+0x1a>
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <__swbuf_r+0xa0>)
 8004e78:	429c      	cmp	r4, r3
 8004e7a:	bf08      	it	eq
 8004e7c:	68ec      	ldreq	r4, [r5, #12]
 8004e7e:	e7ca      	b.n	8004e16 <__swbuf_r+0x1a>
 8004e80:	4621      	mov	r1, r4
 8004e82:	4628      	mov	r0, r5
 8004e84:	f000 f80c 	bl	8004ea0 <__swsetup_r>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	d0cb      	beq.n	8004e24 <__swbuf_r+0x28>
 8004e8c:	f04f 37ff 	mov.w	r7, #4294967295
 8004e90:	e7ea      	b.n	8004e68 <__swbuf_r+0x6c>
 8004e92:	bf00      	nop
 8004e94:	08005780 	.word	0x08005780
 8004e98:	080057a0 	.word	0x080057a0
 8004e9c:	08005760 	.word	0x08005760

08004ea0 <__swsetup_r>:
 8004ea0:	4b32      	ldr	r3, [pc, #200]	; (8004f6c <__swsetup_r+0xcc>)
 8004ea2:	b570      	push	{r4, r5, r6, lr}
 8004ea4:	681d      	ldr	r5, [r3, #0]
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	b125      	cbz	r5, 8004eb6 <__swsetup_r+0x16>
 8004eac:	69ab      	ldr	r3, [r5, #24]
 8004eae:	b913      	cbnz	r3, 8004eb6 <__swsetup_r+0x16>
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f000 f97b 	bl	80051ac <__sinit>
 8004eb6:	4b2e      	ldr	r3, [pc, #184]	; (8004f70 <__swsetup_r+0xd0>)
 8004eb8:	429c      	cmp	r4, r3
 8004eba:	d10f      	bne.n	8004edc <__swsetup_r+0x3c>
 8004ebc:	686c      	ldr	r4, [r5, #4]
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ec4:	0719      	lsls	r1, r3, #28
 8004ec6:	d42c      	bmi.n	8004f22 <__swsetup_r+0x82>
 8004ec8:	06dd      	lsls	r5, r3, #27
 8004eca:	d411      	bmi.n	8004ef0 <__swsetup_r+0x50>
 8004ecc:	2309      	movs	r3, #9
 8004ece:	6033      	str	r3, [r6, #0]
 8004ed0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed8:	81a3      	strh	r3, [r4, #12]
 8004eda:	e03e      	b.n	8004f5a <__swsetup_r+0xba>
 8004edc:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <__swsetup_r+0xd4>)
 8004ede:	429c      	cmp	r4, r3
 8004ee0:	d101      	bne.n	8004ee6 <__swsetup_r+0x46>
 8004ee2:	68ac      	ldr	r4, [r5, #8]
 8004ee4:	e7eb      	b.n	8004ebe <__swsetup_r+0x1e>
 8004ee6:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <__swsetup_r+0xd8>)
 8004ee8:	429c      	cmp	r4, r3
 8004eea:	bf08      	it	eq
 8004eec:	68ec      	ldreq	r4, [r5, #12]
 8004eee:	e7e6      	b.n	8004ebe <__swsetup_r+0x1e>
 8004ef0:	0758      	lsls	r0, r3, #29
 8004ef2:	d512      	bpl.n	8004f1a <__swsetup_r+0x7a>
 8004ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ef6:	b141      	cbz	r1, 8004f0a <__swsetup_r+0x6a>
 8004ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004efc:	4299      	cmp	r1, r3
 8004efe:	d002      	beq.n	8004f06 <__swsetup_r+0x66>
 8004f00:	4630      	mov	r0, r6
 8004f02:	f000 fa57 	bl	80053b4 <_free_r>
 8004f06:	2300      	movs	r3, #0
 8004f08:	6363      	str	r3, [r4, #52]	; 0x34
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f10:	81a3      	strh	r3, [r4, #12]
 8004f12:	2300      	movs	r3, #0
 8004f14:	6063      	str	r3, [r4, #4]
 8004f16:	6923      	ldr	r3, [r4, #16]
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	f043 0308 	orr.w	r3, r3, #8
 8004f20:	81a3      	strh	r3, [r4, #12]
 8004f22:	6923      	ldr	r3, [r4, #16]
 8004f24:	b94b      	cbnz	r3, 8004f3a <__swsetup_r+0x9a>
 8004f26:	89a3      	ldrh	r3, [r4, #12]
 8004f28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f30:	d003      	beq.n	8004f3a <__swsetup_r+0x9a>
 8004f32:	4621      	mov	r1, r4
 8004f34:	4630      	mov	r0, r6
 8004f36:	f000 f9fd 	bl	8005334 <__smakebuf_r>
 8004f3a:	89a0      	ldrh	r0, [r4, #12]
 8004f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f40:	f010 0301 	ands.w	r3, r0, #1
 8004f44:	d00a      	beq.n	8004f5c <__swsetup_r+0xbc>
 8004f46:	2300      	movs	r3, #0
 8004f48:	60a3      	str	r3, [r4, #8]
 8004f4a:	6963      	ldr	r3, [r4, #20]
 8004f4c:	425b      	negs	r3, r3
 8004f4e:	61a3      	str	r3, [r4, #24]
 8004f50:	6923      	ldr	r3, [r4, #16]
 8004f52:	b943      	cbnz	r3, 8004f66 <__swsetup_r+0xc6>
 8004f54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f58:	d1ba      	bne.n	8004ed0 <__swsetup_r+0x30>
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	0781      	lsls	r1, r0, #30
 8004f5e:	bf58      	it	pl
 8004f60:	6963      	ldrpl	r3, [r4, #20]
 8004f62:	60a3      	str	r3, [r4, #8]
 8004f64:	e7f4      	b.n	8004f50 <__swsetup_r+0xb0>
 8004f66:	2000      	movs	r0, #0
 8004f68:	e7f7      	b.n	8004f5a <__swsetup_r+0xba>
 8004f6a:	bf00      	nop
 8004f6c:	2000001c 	.word	0x2000001c
 8004f70:	08005780 	.word	0x08005780
 8004f74:	080057a0 	.word	0x080057a0
 8004f78:	08005760 	.word	0x08005760

08004f7c <__sflush_r>:
 8004f7c:	898a      	ldrh	r2, [r1, #12]
 8004f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f82:	4605      	mov	r5, r0
 8004f84:	0710      	lsls	r0, r2, #28
 8004f86:	460c      	mov	r4, r1
 8004f88:	d458      	bmi.n	800503c <__sflush_r+0xc0>
 8004f8a:	684b      	ldr	r3, [r1, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	dc05      	bgt.n	8004f9c <__sflush_r+0x20>
 8004f90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	dc02      	bgt.n	8004f9c <__sflush_r+0x20>
 8004f96:	2000      	movs	r0, #0
 8004f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f9e:	2e00      	cmp	r6, #0
 8004fa0:	d0f9      	beq.n	8004f96 <__sflush_r+0x1a>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fa8:	682f      	ldr	r7, [r5, #0]
 8004faa:	602b      	str	r3, [r5, #0]
 8004fac:	d032      	beq.n	8005014 <__sflush_r+0x98>
 8004fae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	075a      	lsls	r2, r3, #29
 8004fb4:	d505      	bpl.n	8004fc2 <__sflush_r+0x46>
 8004fb6:	6863      	ldr	r3, [r4, #4]
 8004fb8:	1ac0      	subs	r0, r0, r3
 8004fba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fbc:	b10b      	cbz	r3, 8004fc2 <__sflush_r+0x46>
 8004fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fc0:	1ac0      	subs	r0, r0, r3
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fc8:	4628      	mov	r0, r5
 8004fca:	6a21      	ldr	r1, [r4, #32]
 8004fcc:	47b0      	blx	r6
 8004fce:	1c43      	adds	r3, r0, #1
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	d106      	bne.n	8004fe2 <__sflush_r+0x66>
 8004fd4:	6829      	ldr	r1, [r5, #0]
 8004fd6:	291d      	cmp	r1, #29
 8004fd8:	d82c      	bhi.n	8005034 <__sflush_r+0xb8>
 8004fda:	4a29      	ldr	r2, [pc, #164]	; (8005080 <__sflush_r+0x104>)
 8004fdc:	40ca      	lsrs	r2, r1
 8004fde:	07d6      	lsls	r6, r2, #31
 8004fe0:	d528      	bpl.n	8005034 <__sflush_r+0xb8>
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	04d9      	lsls	r1, r3, #19
 8004fe6:	6062      	str	r2, [r4, #4]
 8004fe8:	6922      	ldr	r2, [r4, #16]
 8004fea:	6022      	str	r2, [r4, #0]
 8004fec:	d504      	bpl.n	8004ff8 <__sflush_r+0x7c>
 8004fee:	1c42      	adds	r2, r0, #1
 8004ff0:	d101      	bne.n	8004ff6 <__sflush_r+0x7a>
 8004ff2:	682b      	ldr	r3, [r5, #0]
 8004ff4:	b903      	cbnz	r3, 8004ff8 <__sflush_r+0x7c>
 8004ff6:	6560      	str	r0, [r4, #84]	; 0x54
 8004ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ffa:	602f      	str	r7, [r5, #0]
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	d0ca      	beq.n	8004f96 <__sflush_r+0x1a>
 8005000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005004:	4299      	cmp	r1, r3
 8005006:	d002      	beq.n	800500e <__sflush_r+0x92>
 8005008:	4628      	mov	r0, r5
 800500a:	f000 f9d3 	bl	80053b4 <_free_r>
 800500e:	2000      	movs	r0, #0
 8005010:	6360      	str	r0, [r4, #52]	; 0x34
 8005012:	e7c1      	b.n	8004f98 <__sflush_r+0x1c>
 8005014:	6a21      	ldr	r1, [r4, #32]
 8005016:	2301      	movs	r3, #1
 8005018:	4628      	mov	r0, r5
 800501a:	47b0      	blx	r6
 800501c:	1c41      	adds	r1, r0, #1
 800501e:	d1c7      	bne.n	8004fb0 <__sflush_r+0x34>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0c4      	beq.n	8004fb0 <__sflush_r+0x34>
 8005026:	2b1d      	cmp	r3, #29
 8005028:	d001      	beq.n	800502e <__sflush_r+0xb2>
 800502a:	2b16      	cmp	r3, #22
 800502c:	d101      	bne.n	8005032 <__sflush_r+0xb6>
 800502e:	602f      	str	r7, [r5, #0]
 8005030:	e7b1      	b.n	8004f96 <__sflush_r+0x1a>
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005038:	81a3      	strh	r3, [r4, #12]
 800503a:	e7ad      	b.n	8004f98 <__sflush_r+0x1c>
 800503c:	690f      	ldr	r7, [r1, #16]
 800503e:	2f00      	cmp	r7, #0
 8005040:	d0a9      	beq.n	8004f96 <__sflush_r+0x1a>
 8005042:	0793      	lsls	r3, r2, #30
 8005044:	680e      	ldr	r6, [r1, #0]
 8005046:	600f      	str	r7, [r1, #0]
 8005048:	bf0c      	ite	eq
 800504a:	694b      	ldreq	r3, [r1, #20]
 800504c:	2300      	movne	r3, #0
 800504e:	eba6 0807 	sub.w	r8, r6, r7
 8005052:	608b      	str	r3, [r1, #8]
 8005054:	f1b8 0f00 	cmp.w	r8, #0
 8005058:	dd9d      	ble.n	8004f96 <__sflush_r+0x1a>
 800505a:	4643      	mov	r3, r8
 800505c:	463a      	mov	r2, r7
 800505e:	6a21      	ldr	r1, [r4, #32]
 8005060:	4628      	mov	r0, r5
 8005062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005064:	47b0      	blx	r6
 8005066:	2800      	cmp	r0, #0
 8005068:	dc06      	bgt.n	8005078 <__sflush_r+0xfc>
 800506a:	89a3      	ldrh	r3, [r4, #12]
 800506c:	f04f 30ff 	mov.w	r0, #4294967295
 8005070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005074:	81a3      	strh	r3, [r4, #12]
 8005076:	e78f      	b.n	8004f98 <__sflush_r+0x1c>
 8005078:	4407      	add	r7, r0
 800507a:	eba8 0800 	sub.w	r8, r8, r0
 800507e:	e7e9      	b.n	8005054 <__sflush_r+0xd8>
 8005080:	20400001 	.word	0x20400001

08005084 <_fflush_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	690b      	ldr	r3, [r1, #16]
 8005088:	4605      	mov	r5, r0
 800508a:	460c      	mov	r4, r1
 800508c:	b913      	cbnz	r3, 8005094 <_fflush_r+0x10>
 800508e:	2500      	movs	r5, #0
 8005090:	4628      	mov	r0, r5
 8005092:	bd38      	pop	{r3, r4, r5, pc}
 8005094:	b118      	cbz	r0, 800509e <_fflush_r+0x1a>
 8005096:	6983      	ldr	r3, [r0, #24]
 8005098:	b90b      	cbnz	r3, 800509e <_fflush_r+0x1a>
 800509a:	f000 f887 	bl	80051ac <__sinit>
 800509e:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <_fflush_r+0x6c>)
 80050a0:	429c      	cmp	r4, r3
 80050a2:	d11b      	bne.n	80050dc <_fflush_r+0x58>
 80050a4:	686c      	ldr	r4, [r5, #4]
 80050a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0ef      	beq.n	800508e <_fflush_r+0xa>
 80050ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050b0:	07d0      	lsls	r0, r2, #31
 80050b2:	d404      	bmi.n	80050be <_fflush_r+0x3a>
 80050b4:	0599      	lsls	r1, r3, #22
 80050b6:	d402      	bmi.n	80050be <_fflush_r+0x3a>
 80050b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ba:	f000 f915 	bl	80052e8 <__retarget_lock_acquire_recursive>
 80050be:	4628      	mov	r0, r5
 80050c0:	4621      	mov	r1, r4
 80050c2:	f7ff ff5b 	bl	8004f7c <__sflush_r>
 80050c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050c8:	4605      	mov	r5, r0
 80050ca:	07da      	lsls	r2, r3, #31
 80050cc:	d4e0      	bmi.n	8005090 <_fflush_r+0xc>
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	059b      	lsls	r3, r3, #22
 80050d2:	d4dd      	bmi.n	8005090 <_fflush_r+0xc>
 80050d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050d6:	f000 f908 	bl	80052ea <__retarget_lock_release_recursive>
 80050da:	e7d9      	b.n	8005090 <_fflush_r+0xc>
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <_fflush_r+0x70>)
 80050de:	429c      	cmp	r4, r3
 80050e0:	d101      	bne.n	80050e6 <_fflush_r+0x62>
 80050e2:	68ac      	ldr	r4, [r5, #8]
 80050e4:	e7df      	b.n	80050a6 <_fflush_r+0x22>
 80050e6:	4b04      	ldr	r3, [pc, #16]	; (80050f8 <_fflush_r+0x74>)
 80050e8:	429c      	cmp	r4, r3
 80050ea:	bf08      	it	eq
 80050ec:	68ec      	ldreq	r4, [r5, #12]
 80050ee:	e7da      	b.n	80050a6 <_fflush_r+0x22>
 80050f0:	08005780 	.word	0x08005780
 80050f4:	080057a0 	.word	0x080057a0
 80050f8:	08005760 	.word	0x08005760

080050fc <std>:
 80050fc:	2300      	movs	r3, #0
 80050fe:	b510      	push	{r4, lr}
 8005100:	4604      	mov	r4, r0
 8005102:	6083      	str	r3, [r0, #8]
 8005104:	8181      	strh	r1, [r0, #12]
 8005106:	4619      	mov	r1, r3
 8005108:	6643      	str	r3, [r0, #100]	; 0x64
 800510a:	81c2      	strh	r2, [r0, #14]
 800510c:	2208      	movs	r2, #8
 800510e:	6183      	str	r3, [r0, #24]
 8005110:	e9c0 3300 	strd	r3, r3, [r0]
 8005114:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005118:	305c      	adds	r0, #92	; 0x5c
 800511a:	f7ff fdf0 	bl	8004cfe <memset>
 800511e:	4b05      	ldr	r3, [pc, #20]	; (8005134 <std+0x38>)
 8005120:	6224      	str	r4, [r4, #32]
 8005122:	6263      	str	r3, [r4, #36]	; 0x24
 8005124:	4b04      	ldr	r3, [pc, #16]	; (8005138 <std+0x3c>)
 8005126:	62a3      	str	r3, [r4, #40]	; 0x28
 8005128:	4b04      	ldr	r3, [pc, #16]	; (800513c <std+0x40>)
 800512a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800512c:	4b04      	ldr	r3, [pc, #16]	; (8005140 <std+0x44>)
 800512e:	6323      	str	r3, [r4, #48]	; 0x30
 8005130:	bd10      	pop	{r4, pc}
 8005132:	bf00      	nop
 8005134:	08005529 	.word	0x08005529
 8005138:	0800554b 	.word	0x0800554b
 800513c:	08005583 	.word	0x08005583
 8005140:	080055a7 	.word	0x080055a7

08005144 <_cleanup_r>:
 8005144:	4901      	ldr	r1, [pc, #4]	; (800514c <_cleanup_r+0x8>)
 8005146:	f000 b8af 	b.w	80052a8 <_fwalk_reent>
 800514a:	bf00      	nop
 800514c:	08005085 	.word	0x08005085

08005150 <__sfmoreglue>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	1e4a      	subs	r2, r1, #1
 8005154:	2568      	movs	r5, #104	; 0x68
 8005156:	460e      	mov	r6, r1
 8005158:	4355      	muls	r5, r2
 800515a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800515e:	f000 f979 	bl	8005454 <_malloc_r>
 8005162:	4604      	mov	r4, r0
 8005164:	b140      	cbz	r0, 8005178 <__sfmoreglue+0x28>
 8005166:	2100      	movs	r1, #0
 8005168:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800516c:	e9c0 1600 	strd	r1, r6, [r0]
 8005170:	300c      	adds	r0, #12
 8005172:	60a0      	str	r0, [r4, #8]
 8005174:	f7ff fdc3 	bl	8004cfe <memset>
 8005178:	4620      	mov	r0, r4
 800517a:	bd70      	pop	{r4, r5, r6, pc}

0800517c <__sfp_lock_acquire>:
 800517c:	4801      	ldr	r0, [pc, #4]	; (8005184 <__sfp_lock_acquire+0x8>)
 800517e:	f000 b8b3 	b.w	80052e8 <__retarget_lock_acquire_recursive>
 8005182:	bf00      	nop
 8005184:	20004010 	.word	0x20004010

08005188 <__sfp_lock_release>:
 8005188:	4801      	ldr	r0, [pc, #4]	; (8005190 <__sfp_lock_release+0x8>)
 800518a:	f000 b8ae 	b.w	80052ea <__retarget_lock_release_recursive>
 800518e:	bf00      	nop
 8005190:	20004010 	.word	0x20004010

08005194 <__sinit_lock_acquire>:
 8005194:	4801      	ldr	r0, [pc, #4]	; (800519c <__sinit_lock_acquire+0x8>)
 8005196:	f000 b8a7 	b.w	80052e8 <__retarget_lock_acquire_recursive>
 800519a:	bf00      	nop
 800519c:	2000400b 	.word	0x2000400b

080051a0 <__sinit_lock_release>:
 80051a0:	4801      	ldr	r0, [pc, #4]	; (80051a8 <__sinit_lock_release+0x8>)
 80051a2:	f000 b8a2 	b.w	80052ea <__retarget_lock_release_recursive>
 80051a6:	bf00      	nop
 80051a8:	2000400b 	.word	0x2000400b

080051ac <__sinit>:
 80051ac:	b510      	push	{r4, lr}
 80051ae:	4604      	mov	r4, r0
 80051b0:	f7ff fff0 	bl	8005194 <__sinit_lock_acquire>
 80051b4:	69a3      	ldr	r3, [r4, #24]
 80051b6:	b11b      	cbz	r3, 80051c0 <__sinit+0x14>
 80051b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051bc:	f7ff bff0 	b.w	80051a0 <__sinit_lock_release>
 80051c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051c4:	6523      	str	r3, [r4, #80]	; 0x50
 80051c6:	4620      	mov	r0, r4
 80051c8:	4b12      	ldr	r3, [pc, #72]	; (8005214 <__sinit+0x68>)
 80051ca:	4a13      	ldr	r2, [pc, #76]	; (8005218 <__sinit+0x6c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	62a2      	str	r2, [r4, #40]	; 0x28
 80051d0:	42a3      	cmp	r3, r4
 80051d2:	bf04      	itt	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	61a3      	streq	r3, [r4, #24]
 80051d8:	f000 f820 	bl	800521c <__sfp>
 80051dc:	6060      	str	r0, [r4, #4]
 80051de:	4620      	mov	r0, r4
 80051e0:	f000 f81c 	bl	800521c <__sfp>
 80051e4:	60a0      	str	r0, [r4, #8]
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 f818 	bl	800521c <__sfp>
 80051ec:	2200      	movs	r2, #0
 80051ee:	2104      	movs	r1, #4
 80051f0:	60e0      	str	r0, [r4, #12]
 80051f2:	6860      	ldr	r0, [r4, #4]
 80051f4:	f7ff ff82 	bl	80050fc <std>
 80051f8:	2201      	movs	r2, #1
 80051fa:	2109      	movs	r1, #9
 80051fc:	68a0      	ldr	r0, [r4, #8]
 80051fe:	f7ff ff7d 	bl	80050fc <std>
 8005202:	2202      	movs	r2, #2
 8005204:	2112      	movs	r1, #18
 8005206:	68e0      	ldr	r0, [r4, #12]
 8005208:	f7ff ff78 	bl	80050fc <std>
 800520c:	2301      	movs	r3, #1
 800520e:	61a3      	str	r3, [r4, #24]
 8005210:	e7d2      	b.n	80051b8 <__sinit+0xc>
 8005212:	bf00      	nop
 8005214:	0800575c 	.word	0x0800575c
 8005218:	08005145 	.word	0x08005145

0800521c <__sfp>:
 800521c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521e:	4607      	mov	r7, r0
 8005220:	f7ff ffac 	bl	800517c <__sfp_lock_acquire>
 8005224:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <__sfp+0x84>)
 8005226:	681e      	ldr	r6, [r3, #0]
 8005228:	69b3      	ldr	r3, [r6, #24]
 800522a:	b913      	cbnz	r3, 8005232 <__sfp+0x16>
 800522c:	4630      	mov	r0, r6
 800522e:	f7ff ffbd 	bl	80051ac <__sinit>
 8005232:	3648      	adds	r6, #72	; 0x48
 8005234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005238:	3b01      	subs	r3, #1
 800523a:	d503      	bpl.n	8005244 <__sfp+0x28>
 800523c:	6833      	ldr	r3, [r6, #0]
 800523e:	b30b      	cbz	r3, 8005284 <__sfp+0x68>
 8005240:	6836      	ldr	r6, [r6, #0]
 8005242:	e7f7      	b.n	8005234 <__sfp+0x18>
 8005244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005248:	b9d5      	cbnz	r5, 8005280 <__sfp+0x64>
 800524a:	4b16      	ldr	r3, [pc, #88]	; (80052a4 <__sfp+0x88>)
 800524c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005250:	6665      	str	r5, [r4, #100]	; 0x64
 8005252:	60e3      	str	r3, [r4, #12]
 8005254:	f000 f847 	bl	80052e6 <__retarget_lock_init_recursive>
 8005258:	f7ff ff96 	bl	8005188 <__sfp_lock_release>
 800525c:	2208      	movs	r2, #8
 800525e:	4629      	mov	r1, r5
 8005260:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005264:	6025      	str	r5, [r4, #0]
 8005266:	61a5      	str	r5, [r4, #24]
 8005268:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800526c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005270:	f7ff fd45 	bl	8004cfe <memset>
 8005274:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005278:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800527c:	4620      	mov	r0, r4
 800527e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005280:	3468      	adds	r4, #104	; 0x68
 8005282:	e7d9      	b.n	8005238 <__sfp+0x1c>
 8005284:	2104      	movs	r1, #4
 8005286:	4638      	mov	r0, r7
 8005288:	f7ff ff62 	bl	8005150 <__sfmoreglue>
 800528c:	4604      	mov	r4, r0
 800528e:	6030      	str	r0, [r6, #0]
 8005290:	2800      	cmp	r0, #0
 8005292:	d1d5      	bne.n	8005240 <__sfp+0x24>
 8005294:	f7ff ff78 	bl	8005188 <__sfp_lock_release>
 8005298:	230c      	movs	r3, #12
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	e7ee      	b.n	800527c <__sfp+0x60>
 800529e:	bf00      	nop
 80052a0:	0800575c 	.word	0x0800575c
 80052a4:	ffff0001 	.word	0xffff0001

080052a8 <_fwalk_reent>:
 80052a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052ac:	4606      	mov	r6, r0
 80052ae:	4688      	mov	r8, r1
 80052b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052b4:	2700      	movs	r7, #0
 80052b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052ba:	f1b9 0901 	subs.w	r9, r9, #1
 80052be:	d505      	bpl.n	80052cc <_fwalk_reent+0x24>
 80052c0:	6824      	ldr	r4, [r4, #0]
 80052c2:	2c00      	cmp	r4, #0
 80052c4:	d1f7      	bne.n	80052b6 <_fwalk_reent+0xe>
 80052c6:	4638      	mov	r0, r7
 80052c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052cc:	89ab      	ldrh	r3, [r5, #12]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d907      	bls.n	80052e2 <_fwalk_reent+0x3a>
 80052d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052d6:	3301      	adds	r3, #1
 80052d8:	d003      	beq.n	80052e2 <_fwalk_reent+0x3a>
 80052da:	4629      	mov	r1, r5
 80052dc:	4630      	mov	r0, r6
 80052de:	47c0      	blx	r8
 80052e0:	4307      	orrs	r7, r0
 80052e2:	3568      	adds	r5, #104	; 0x68
 80052e4:	e7e9      	b.n	80052ba <_fwalk_reent+0x12>

080052e6 <__retarget_lock_init_recursive>:
 80052e6:	4770      	bx	lr

080052e8 <__retarget_lock_acquire_recursive>:
 80052e8:	4770      	bx	lr

080052ea <__retarget_lock_release_recursive>:
 80052ea:	4770      	bx	lr

080052ec <__swhatbuf_r>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	460e      	mov	r6, r1
 80052f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f4:	b096      	sub	sp, #88	; 0x58
 80052f6:	4614      	mov	r4, r2
 80052f8:	2900      	cmp	r1, #0
 80052fa:	461d      	mov	r5, r3
 80052fc:	da07      	bge.n	800530e <__swhatbuf_r+0x22>
 80052fe:	2300      	movs	r3, #0
 8005300:	602b      	str	r3, [r5, #0]
 8005302:	89b3      	ldrh	r3, [r6, #12]
 8005304:	061a      	lsls	r2, r3, #24
 8005306:	d410      	bmi.n	800532a <__swhatbuf_r+0x3e>
 8005308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800530c:	e00e      	b.n	800532c <__swhatbuf_r+0x40>
 800530e:	466a      	mov	r2, sp
 8005310:	f000 f970 	bl	80055f4 <_fstat_r>
 8005314:	2800      	cmp	r0, #0
 8005316:	dbf2      	blt.n	80052fe <__swhatbuf_r+0x12>
 8005318:	9a01      	ldr	r2, [sp, #4]
 800531a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800531e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005322:	425a      	negs	r2, r3
 8005324:	415a      	adcs	r2, r3
 8005326:	602a      	str	r2, [r5, #0]
 8005328:	e7ee      	b.n	8005308 <__swhatbuf_r+0x1c>
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	2000      	movs	r0, #0
 800532e:	6023      	str	r3, [r4, #0]
 8005330:	b016      	add	sp, #88	; 0x58
 8005332:	bd70      	pop	{r4, r5, r6, pc}

08005334 <__smakebuf_r>:
 8005334:	898b      	ldrh	r3, [r1, #12]
 8005336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005338:	079d      	lsls	r5, r3, #30
 800533a:	4606      	mov	r6, r0
 800533c:	460c      	mov	r4, r1
 800533e:	d507      	bpl.n	8005350 <__smakebuf_r+0x1c>
 8005340:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	6123      	str	r3, [r4, #16]
 8005348:	2301      	movs	r3, #1
 800534a:	6163      	str	r3, [r4, #20]
 800534c:	b002      	add	sp, #8
 800534e:	bd70      	pop	{r4, r5, r6, pc}
 8005350:	ab01      	add	r3, sp, #4
 8005352:	466a      	mov	r2, sp
 8005354:	f7ff ffca 	bl	80052ec <__swhatbuf_r>
 8005358:	9900      	ldr	r1, [sp, #0]
 800535a:	4605      	mov	r5, r0
 800535c:	4630      	mov	r0, r6
 800535e:	f000 f879 	bl	8005454 <_malloc_r>
 8005362:	b948      	cbnz	r0, 8005378 <__smakebuf_r+0x44>
 8005364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005368:	059a      	lsls	r2, r3, #22
 800536a:	d4ef      	bmi.n	800534c <__smakebuf_r+0x18>
 800536c:	f023 0303 	bic.w	r3, r3, #3
 8005370:	f043 0302 	orr.w	r3, r3, #2
 8005374:	81a3      	strh	r3, [r4, #12]
 8005376:	e7e3      	b.n	8005340 <__smakebuf_r+0xc>
 8005378:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <__smakebuf_r+0x7c>)
 800537a:	62b3      	str	r3, [r6, #40]	; 0x28
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	6020      	str	r0, [r4, #0]
 8005380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005384:	6120      	str	r0, [r4, #16]
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	9b00      	ldr	r3, [sp, #0]
 800538a:	6163      	str	r3, [r4, #20]
 800538c:	9b01      	ldr	r3, [sp, #4]
 800538e:	b15b      	cbz	r3, 80053a8 <__smakebuf_r+0x74>
 8005390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005394:	4630      	mov	r0, r6
 8005396:	f000 f93f 	bl	8005618 <_isatty_r>
 800539a:	b128      	cbz	r0, 80053a8 <__smakebuf_r+0x74>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	89a0      	ldrh	r0, [r4, #12]
 80053aa:	4305      	orrs	r5, r0
 80053ac:	81a5      	strh	r5, [r4, #12]
 80053ae:	e7cd      	b.n	800534c <__smakebuf_r+0x18>
 80053b0:	08005145 	.word	0x08005145

080053b4 <_free_r>:
 80053b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053b6:	2900      	cmp	r1, #0
 80053b8:	d047      	beq.n	800544a <_free_r+0x96>
 80053ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053be:	1f0c      	subs	r4, r1, #4
 80053c0:	9001      	str	r0, [sp, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	bfb8      	it	lt
 80053c6:	18e4      	addlt	r4, r4, r3
 80053c8:	f000 f948 	bl	800565c <__malloc_lock>
 80053cc:	4a20      	ldr	r2, [pc, #128]	; (8005450 <_free_r+0x9c>)
 80053ce:	9801      	ldr	r0, [sp, #4]
 80053d0:	6813      	ldr	r3, [r2, #0]
 80053d2:	4615      	mov	r5, r2
 80053d4:	b933      	cbnz	r3, 80053e4 <_free_r+0x30>
 80053d6:	6063      	str	r3, [r4, #4]
 80053d8:	6014      	str	r4, [r2, #0]
 80053da:	b003      	add	sp, #12
 80053dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053e0:	f000 b942 	b.w	8005668 <__malloc_unlock>
 80053e4:	42a3      	cmp	r3, r4
 80053e6:	d90b      	bls.n	8005400 <_free_r+0x4c>
 80053e8:	6821      	ldr	r1, [r4, #0]
 80053ea:	1862      	adds	r2, r4, r1
 80053ec:	4293      	cmp	r3, r2
 80053ee:	bf02      	ittt	eq
 80053f0:	681a      	ldreq	r2, [r3, #0]
 80053f2:	685b      	ldreq	r3, [r3, #4]
 80053f4:	1852      	addeq	r2, r2, r1
 80053f6:	6063      	str	r3, [r4, #4]
 80053f8:	bf08      	it	eq
 80053fa:	6022      	streq	r2, [r4, #0]
 80053fc:	602c      	str	r4, [r5, #0]
 80053fe:	e7ec      	b.n	80053da <_free_r+0x26>
 8005400:	461a      	mov	r2, r3
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	b10b      	cbz	r3, 800540a <_free_r+0x56>
 8005406:	42a3      	cmp	r3, r4
 8005408:	d9fa      	bls.n	8005400 <_free_r+0x4c>
 800540a:	6811      	ldr	r1, [r2, #0]
 800540c:	1855      	adds	r5, r2, r1
 800540e:	42a5      	cmp	r5, r4
 8005410:	d10b      	bne.n	800542a <_free_r+0x76>
 8005412:	6824      	ldr	r4, [r4, #0]
 8005414:	4421      	add	r1, r4
 8005416:	1854      	adds	r4, r2, r1
 8005418:	6011      	str	r1, [r2, #0]
 800541a:	42a3      	cmp	r3, r4
 800541c:	d1dd      	bne.n	80053da <_free_r+0x26>
 800541e:	681c      	ldr	r4, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4421      	add	r1, r4
 8005424:	6053      	str	r3, [r2, #4]
 8005426:	6011      	str	r1, [r2, #0]
 8005428:	e7d7      	b.n	80053da <_free_r+0x26>
 800542a:	d902      	bls.n	8005432 <_free_r+0x7e>
 800542c:	230c      	movs	r3, #12
 800542e:	6003      	str	r3, [r0, #0]
 8005430:	e7d3      	b.n	80053da <_free_r+0x26>
 8005432:	6825      	ldr	r5, [r4, #0]
 8005434:	1961      	adds	r1, r4, r5
 8005436:	428b      	cmp	r3, r1
 8005438:	bf02      	ittt	eq
 800543a:	6819      	ldreq	r1, [r3, #0]
 800543c:	685b      	ldreq	r3, [r3, #4]
 800543e:	1949      	addeq	r1, r1, r5
 8005440:	6063      	str	r3, [r4, #4]
 8005442:	bf08      	it	eq
 8005444:	6021      	streq	r1, [r4, #0]
 8005446:	6054      	str	r4, [r2, #4]
 8005448:	e7c7      	b.n	80053da <_free_r+0x26>
 800544a:	b003      	add	sp, #12
 800544c:	bd30      	pop	{r4, r5, pc}
 800544e:	bf00      	nop
 8005450:	20003f64 	.word	0x20003f64

08005454 <_malloc_r>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	1ccd      	adds	r5, r1, #3
 8005458:	4606      	mov	r6, r0
 800545a:	f025 0503 	bic.w	r5, r5, #3
 800545e:	3508      	adds	r5, #8
 8005460:	2d0c      	cmp	r5, #12
 8005462:	bf38      	it	cc
 8005464:	250c      	movcc	r5, #12
 8005466:	2d00      	cmp	r5, #0
 8005468:	db01      	blt.n	800546e <_malloc_r+0x1a>
 800546a:	42a9      	cmp	r1, r5
 800546c:	d903      	bls.n	8005476 <_malloc_r+0x22>
 800546e:	230c      	movs	r3, #12
 8005470:	6033      	str	r3, [r6, #0]
 8005472:	2000      	movs	r0, #0
 8005474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005476:	f000 f8f1 	bl	800565c <__malloc_lock>
 800547a:	4921      	ldr	r1, [pc, #132]	; (8005500 <_malloc_r+0xac>)
 800547c:	680a      	ldr	r2, [r1, #0]
 800547e:	4614      	mov	r4, r2
 8005480:	b99c      	cbnz	r4, 80054aa <_malloc_r+0x56>
 8005482:	4f20      	ldr	r7, [pc, #128]	; (8005504 <_malloc_r+0xb0>)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	b923      	cbnz	r3, 8005492 <_malloc_r+0x3e>
 8005488:	4621      	mov	r1, r4
 800548a:	4630      	mov	r0, r6
 800548c:	f000 f83c 	bl	8005508 <_sbrk_r>
 8005490:	6038      	str	r0, [r7, #0]
 8005492:	4629      	mov	r1, r5
 8005494:	4630      	mov	r0, r6
 8005496:	f000 f837 	bl	8005508 <_sbrk_r>
 800549a:	1c43      	adds	r3, r0, #1
 800549c:	d123      	bne.n	80054e6 <_malloc_r+0x92>
 800549e:	230c      	movs	r3, #12
 80054a0:	4630      	mov	r0, r6
 80054a2:	6033      	str	r3, [r6, #0]
 80054a4:	f000 f8e0 	bl	8005668 <__malloc_unlock>
 80054a8:	e7e3      	b.n	8005472 <_malloc_r+0x1e>
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	1b5b      	subs	r3, r3, r5
 80054ae:	d417      	bmi.n	80054e0 <_malloc_r+0x8c>
 80054b0:	2b0b      	cmp	r3, #11
 80054b2:	d903      	bls.n	80054bc <_malloc_r+0x68>
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	441c      	add	r4, r3
 80054b8:	6025      	str	r5, [r4, #0]
 80054ba:	e004      	b.n	80054c6 <_malloc_r+0x72>
 80054bc:	6863      	ldr	r3, [r4, #4]
 80054be:	42a2      	cmp	r2, r4
 80054c0:	bf0c      	ite	eq
 80054c2:	600b      	streq	r3, [r1, #0]
 80054c4:	6053      	strne	r3, [r2, #4]
 80054c6:	4630      	mov	r0, r6
 80054c8:	f000 f8ce 	bl	8005668 <__malloc_unlock>
 80054cc:	f104 000b 	add.w	r0, r4, #11
 80054d0:	1d23      	adds	r3, r4, #4
 80054d2:	f020 0007 	bic.w	r0, r0, #7
 80054d6:	1ac2      	subs	r2, r0, r3
 80054d8:	d0cc      	beq.n	8005474 <_malloc_r+0x20>
 80054da:	1a1b      	subs	r3, r3, r0
 80054dc:	50a3      	str	r3, [r4, r2]
 80054de:	e7c9      	b.n	8005474 <_malloc_r+0x20>
 80054e0:	4622      	mov	r2, r4
 80054e2:	6864      	ldr	r4, [r4, #4]
 80054e4:	e7cc      	b.n	8005480 <_malloc_r+0x2c>
 80054e6:	1cc4      	adds	r4, r0, #3
 80054e8:	f024 0403 	bic.w	r4, r4, #3
 80054ec:	42a0      	cmp	r0, r4
 80054ee:	d0e3      	beq.n	80054b8 <_malloc_r+0x64>
 80054f0:	1a21      	subs	r1, r4, r0
 80054f2:	4630      	mov	r0, r6
 80054f4:	f000 f808 	bl	8005508 <_sbrk_r>
 80054f8:	3001      	adds	r0, #1
 80054fa:	d1dd      	bne.n	80054b8 <_malloc_r+0x64>
 80054fc:	e7cf      	b.n	800549e <_malloc_r+0x4a>
 80054fe:	bf00      	nop
 8005500:	20003f64 	.word	0x20003f64
 8005504:	20003f68 	.word	0x20003f68

08005508 <_sbrk_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	2300      	movs	r3, #0
 800550c:	4d05      	ldr	r5, [pc, #20]	; (8005524 <_sbrk_r+0x1c>)
 800550e:	4604      	mov	r4, r0
 8005510:	4608      	mov	r0, r1
 8005512:	602b      	str	r3, [r5, #0]
 8005514:	f7fa ffde 	bl	80004d4 <_sbrk>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_sbrk_r+0x1a>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	b103      	cbz	r3, 8005522 <_sbrk_r+0x1a>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	20004014 	.word	0x20004014

08005528 <__sread>:
 8005528:	b510      	push	{r4, lr}
 800552a:	460c      	mov	r4, r1
 800552c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005530:	f000 f8a0 	bl	8005674 <_read_r>
 8005534:	2800      	cmp	r0, #0
 8005536:	bfab      	itete	ge
 8005538:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800553a:	89a3      	ldrhlt	r3, [r4, #12]
 800553c:	181b      	addge	r3, r3, r0
 800553e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005542:	bfac      	ite	ge
 8005544:	6563      	strge	r3, [r4, #84]	; 0x54
 8005546:	81a3      	strhlt	r3, [r4, #12]
 8005548:	bd10      	pop	{r4, pc}

0800554a <__swrite>:
 800554a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554e:	461f      	mov	r7, r3
 8005550:	898b      	ldrh	r3, [r1, #12]
 8005552:	4605      	mov	r5, r0
 8005554:	460c      	mov	r4, r1
 8005556:	05db      	lsls	r3, r3, #23
 8005558:	4616      	mov	r6, r2
 800555a:	d505      	bpl.n	8005568 <__swrite+0x1e>
 800555c:	2302      	movs	r3, #2
 800555e:	2200      	movs	r2, #0
 8005560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005564:	f000 f868 	bl	8005638 <_lseek_r>
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	4632      	mov	r2, r6
 800556c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005570:	4628      	mov	r0, r5
 8005572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005576:	81a3      	strh	r3, [r4, #12]
 8005578:	463b      	mov	r3, r7
 800557a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800557e:	f000 b817 	b.w	80055b0 <_write_r>

08005582 <__sseek>:
 8005582:	b510      	push	{r4, lr}
 8005584:	460c      	mov	r4, r1
 8005586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800558a:	f000 f855 	bl	8005638 <_lseek_r>
 800558e:	1c43      	adds	r3, r0, #1
 8005590:	89a3      	ldrh	r3, [r4, #12]
 8005592:	bf15      	itete	ne
 8005594:	6560      	strne	r0, [r4, #84]	; 0x54
 8005596:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800559a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800559e:	81a3      	strheq	r3, [r4, #12]
 80055a0:	bf18      	it	ne
 80055a2:	81a3      	strhne	r3, [r4, #12]
 80055a4:	bd10      	pop	{r4, pc}

080055a6 <__sclose>:
 80055a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055aa:	f000 b813 	b.w	80055d4 <_close_r>
	...

080055b0 <_write_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4604      	mov	r4, r0
 80055b4:	4d06      	ldr	r5, [pc, #24]	; (80055d0 <_write_r+0x20>)
 80055b6:	4608      	mov	r0, r1
 80055b8:	4611      	mov	r1, r2
 80055ba:	2200      	movs	r2, #0
 80055bc:	602a      	str	r2, [r5, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	f7fa ff37 	bl	8000432 <_write>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d102      	bne.n	80055ce <_write_r+0x1e>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	b103      	cbz	r3, 80055ce <_write_r+0x1e>
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	20004014 	.word	0x20004014

080055d4 <_close_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	2300      	movs	r3, #0
 80055d8:	4d05      	ldr	r5, [pc, #20]	; (80055f0 <_close_r+0x1c>)
 80055da:	4604      	mov	r4, r0
 80055dc:	4608      	mov	r0, r1
 80055de:	602b      	str	r3, [r5, #0]
 80055e0:	f7fa ff43 	bl	800046a <_close>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_close_r+0x1a>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_close_r+0x1a>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	20004014 	.word	0x20004014

080055f4 <_fstat_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	2300      	movs	r3, #0
 80055f8:	4d06      	ldr	r5, [pc, #24]	; (8005614 <_fstat_r+0x20>)
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	4611      	mov	r1, r2
 8005600:	602b      	str	r3, [r5, #0]
 8005602:	f7fa ff3e 	bl	8000482 <_fstat>
 8005606:	1c43      	adds	r3, r0, #1
 8005608:	d102      	bne.n	8005610 <_fstat_r+0x1c>
 800560a:	682b      	ldr	r3, [r5, #0]
 800560c:	b103      	cbz	r3, 8005610 <_fstat_r+0x1c>
 800560e:	6023      	str	r3, [r4, #0]
 8005610:	bd38      	pop	{r3, r4, r5, pc}
 8005612:	bf00      	nop
 8005614:	20004014 	.word	0x20004014

08005618 <_isatty_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	2300      	movs	r3, #0
 800561c:	4d05      	ldr	r5, [pc, #20]	; (8005634 <_isatty_r+0x1c>)
 800561e:	4604      	mov	r4, r0
 8005620:	4608      	mov	r0, r1
 8005622:	602b      	str	r3, [r5, #0]
 8005624:	f7fa ff3d 	bl	80004a2 <_isatty>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_isatty_r+0x1a>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	b103      	cbz	r3, 8005632 <_isatty_r+0x1a>
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	20004014 	.word	0x20004014

08005638 <_lseek_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4604      	mov	r4, r0
 800563c:	4d06      	ldr	r5, [pc, #24]	; (8005658 <_lseek_r+0x20>)
 800563e:	4608      	mov	r0, r1
 8005640:	4611      	mov	r1, r2
 8005642:	2200      	movs	r2, #0
 8005644:	602a      	str	r2, [r5, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	f7fa ff36 	bl	80004b8 <_lseek>
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	d102      	bne.n	8005656 <_lseek_r+0x1e>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	b103      	cbz	r3, 8005656 <_lseek_r+0x1e>
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	20004014 	.word	0x20004014

0800565c <__malloc_lock>:
 800565c:	4801      	ldr	r0, [pc, #4]	; (8005664 <__malloc_lock+0x8>)
 800565e:	f7ff be43 	b.w	80052e8 <__retarget_lock_acquire_recursive>
 8005662:	bf00      	nop
 8005664:	2000400c 	.word	0x2000400c

08005668 <__malloc_unlock>:
 8005668:	4801      	ldr	r0, [pc, #4]	; (8005670 <__malloc_unlock+0x8>)
 800566a:	f7ff be3e 	b.w	80052ea <__retarget_lock_release_recursive>
 800566e:	bf00      	nop
 8005670:	2000400c 	.word	0x2000400c

08005674 <_read_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4604      	mov	r4, r0
 8005678:	4d06      	ldr	r5, [pc, #24]	; (8005694 <_read_r+0x20>)
 800567a:	4608      	mov	r0, r1
 800567c:	4611      	mov	r1, r2
 800567e:	2200      	movs	r2, #0
 8005680:	602a      	str	r2, [r5, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	f7fa feb8 	bl	80003f8 <_read>
 8005688:	1c43      	adds	r3, r0, #1
 800568a:	d102      	bne.n	8005692 <_read_r+0x1e>
 800568c:	682b      	ldr	r3, [r5, #0]
 800568e:	b103      	cbz	r3, 8005692 <_read_r+0x1e>
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	bd38      	pop	{r3, r4, r5, pc}
 8005694:	20004014 	.word	0x20004014

08005698 <_init>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	bf00      	nop
 800569c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569e:	bc08      	pop	{r3}
 80056a0:	469e      	mov	lr, r3
 80056a2:	4770      	bx	lr

080056a4 <_fini>:
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a6:	bf00      	nop
 80056a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056aa:	bc08      	pop	{r3}
 80056ac:	469e      	mov	lr, r3
 80056ae:	4770      	bx	lr
