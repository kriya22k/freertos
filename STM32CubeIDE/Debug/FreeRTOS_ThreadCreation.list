
FreeRTOS_ThreadCreation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005778  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005978  08005978  00015978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa0  08005aa0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005aa0  08005aa0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005aa0  08005aa0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005aa0  08005aa0  00015aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005aa8  08005aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f98  20000080  08005b30  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20004018  08005b30  00024018  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_line   00016e8e  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0001b5af  00000000  00000000  00036f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000370d  00000000  00000000  000524f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  00055c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00115918  00000000  00000000  00057210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001488  00000000  00000000  0016cb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004d31  00000000  00000000  0016dfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172ce1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000612c  00000000  00000000  00172d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800595c 	.word	0x0800595c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800595c 	.word	0x0800595c

08000240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000278 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000244:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000246:	e003      	b.n	8000250 <LoopCopyDataInit>

08000248 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800024a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800024c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800024e:	3104      	adds	r1, #4

08000250 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000254:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000256:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000258:	d3f6      	bcc.n	8000248 <CopyDataInit>
	ldr	r2, =_sbss
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <LoopForever+0x12>)
	b	LoopFillZerobss
 800025c:	e002      	b.n	8000264 <LoopFillZerobss>

0800025e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800025e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000260:	f842 3b04 	str.w	r3, [r2], #4

08000264 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <LoopForever+0x16>)
	cmp	r2, r3
 8000266:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000268:	d3f9      	bcc.n	800025e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800026a:	f000 fb3f 	bl	80008ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f004 fe77 	bl	8004f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000272:	f000 f80f 	bl	8000294 <main>

08000276 <LoopForever>:

LoopForever:
    b LoopForever
 8000276:	e7fe      	b.n	8000276 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000278:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800027c:	08005ab0 	.word	0x08005ab0
	ldr	r0, =_sdata
 8000280:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000284:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8000288:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 800028c:	20004018 	.word	0x20004018

08000290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC1_2_IRQHandler>
	...

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fbe5 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029e:	f000 f83b 	bl	8000318 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize LEDs */
  BSP_LED_Init(LED9);
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 fa8c 	bl	80007c0 <BSP_LED_Init>
  BSP_LED_Init(LED10);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 fa89 	bl	80007c0 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 80002ae:	f000 f884 	bl	80003ba <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
 
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002b2:	f002 fa6d 	bl	8002790 <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of THREAD1 */
  //THREAD1Handle = osThreadNew(LED_Thread1, NULL, &THREAD1_attributes);
    status = xTaskCreate(LED_Thread1, "Task1", 200, "Hello World from Task-1", 2, &task1_handle);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	2302      	movs	r3, #2
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <main+0x6c>)
 80002c0:	22c8      	movs	r2, #200	; 0xc8
 80002c2:	4910      	ldr	r1, [pc, #64]	; (8000304 <main+0x70>)
 80002c4:	4810      	ldr	r0, [pc, #64]	; (8000308 <main+0x74>)
 80002c6:	f003 fc40 	bl	8003b4a <xTaskCreate>
 80002ca:	60f8      	str	r0, [r7, #12]

    status1 = xTaskCreate(LED_Thread2, "Task2", 200, "Hello World from Task-2", 10, &task2_handle);
 80002cc:	463b      	mov	r3, r7
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	230a      	movs	r3, #10
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <main+0x78>)
 80002d6:	22c8      	movs	r2, #200	; 0xc8
 80002d8:	490d      	ldr	r1, [pc, #52]	; (8000310 <main+0x7c>)
 80002da:	480e      	ldr	r0, [pc, #56]	; (8000314 <main+0x80>)
 80002dc:	f003 fc35 	bl	8003b4a <xTaskCreate>
 80002e0:	60b8      	str	r0, [r7, #8]
    configASSERT(status == pdPASS);
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d002      	beq.n	80002ee <main+0x5a>
 80002e8:	f002 ff56 	bl	8003198 <ulSetInterruptMask>
 80002ec:	e7fe      	b.n	80002ec <main+0x58>
    configASSERT(status1 == pdPASS);
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d002      	beq.n	80002fa <main+0x66>
 80002f4:	f002 ff50 	bl	8003198 <ulSetInterruptMask>
 80002f8:	e7fe      	b.n	80002f8 <main+0x64>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002fa:	f002 fa6d 	bl	80027d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002fe:	e7fe      	b.n	80002fe <main+0x6a>
 8000300:	08005988 	.word	0x08005988
 8000304:	080059a0 	.word	0x080059a0
 8000308:	080003e1 	.word	0x080003e1
 800030c:	080059a8 	.word	0x080059a8
 8000310:	080059c0 	.word	0x080059c0
 8000314:	0800047d 	.word	0x0800047d

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b098      	sub	sp, #96	; 0x60
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0318 	add.w	r3, r7, #24
 8000322:	2248      	movs	r2, #72	; 0x48
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f004 fe4b 	bl	8004fc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800033a:	2000      	movs	r0, #0
 800033c:	f000 fe9e 	bl	800107c <HAL_PWREx_ControlVoltageScaling>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000346:	f000 f8e1 	bl	800050c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800034a:	2310      	movs	r3, #16
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800034e:	2301      	movs	r3, #1
 8000350:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000352:	2300      	movs	r3, #0
 8000354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000356:	2360      	movs	r3, #96	; 0x60
 8000358:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035a:	2302      	movs	r3, #2
 800035c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800035e:	2301      	movs	r3, #1
 8000360:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000362:	2301      	movs	r3, #1
 8000364:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000366:	2337      	movs	r3, #55	; 0x37
 8000368:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800036a:	2307      	movs	r3, #7
 800036c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800036e:	2302      	movs	r3, #2
 8000370:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000372:	2302      	movs	r3, #2
 8000374:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0318 	add.w	r3, r7, #24
 800037a:	4618      	mov	r0, r3
 800037c:	f000 ff1e 	bl	80011bc <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000386:	f000 f8c1 	bl	800050c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2303      	movs	r3, #3
 8000390:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2105      	movs	r1, #5
 80003a2:	4618      	mov	r0, r3
 80003a4:	f001 fbe0 	bl	8001b68 <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ae:	f000 f8ad 	bl	800050c <Error_Handler>
  }
}
 80003b2:	bf00      	nop
 80003b4:	3760      	adds	r7, #96	; 0x60
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80003be:	2000      	movs	r0, #0
 80003c0:	f000 fe1e 	bl	8001000 <HAL_ICACHE_ConfigAssociativityMode>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80003ca:	f000 f89f 	bl	800050c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003ce:	f000 fe37 	bl	8001040 <HAL_ICACHE_Enable>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003d8:	f000 f898 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}

080003e0 <LED_Thread1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_LED_Thread1 */
void LED_Thread1(void *argument)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint32_t count = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  (void) argument;
  /* Infinite loop */
  for (;;)
  {
    count = osKernelGetTickCount() + 5000;
 80003ec:	f002 fa1a 	bl	8002824 <osKernelGetTickCount>
 80003f0:	4603      	mov	r3, r0
 80003f2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80003f6:	3308      	adds	r3, #8
 80003f8:	60fb      	str	r3, [r7, #12]

    /* Toggle LED9 every 200 ms for 5 s */
    while (count > osKernelGetTickCount())
 80003fa:	e005      	b.n	8000408 <LED_Thread1+0x28>
    {
      BSP_LED_Toggle(LED9);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 fa59 	bl	80008b4 <BSP_LED_Toggle>
      printf("Task1\n");
 8000402:	481a      	ldr	r0, [pc, #104]	; (800046c <LED_Thread1+0x8c>)
 8000404:	f004 fe54 	bl	80050b0 <puts>
    while (count > osKernelGetTickCount())
 8000408:	f002 fa0c 	bl	8002824 <osKernelGetTickCount>
 800040c:	4602      	mov	r2, r0
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	4293      	cmp	r3, r2
 8000412:	d8f3      	bhi.n	80003fc <LED_Thread1+0x1c>
    //  osDelay(500);
    }

    /* Turn off LED9 */
    BSP_LED_Off(LED9);
 8000414:	2000      	movs	r0, #0
 8000416:	f000 fa31 	bl	800087c <BSP_LED_Off>

    /* Suspend Thread 1 */
    OsStatus = osThreadSuspend(THREAD1Handle);
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <LED_Thread1+0x90>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4618      	mov	r0, r3
 8000420:	f002 fa15 	bl	800284e <osThreadSuspend>
 8000424:	4603      	mov	r3, r0
 8000426:	461a      	mov	r2, r3
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <LED_Thread1+0x94>)
 800042a:	601a      	str	r2, [r3, #0]

    count = osKernelGetTickCount() + 5000;
 800042c:	f002 f9fa 	bl	8002824 <osKernelGetTickCount>
 8000430:	4603      	mov	r3, r0
 8000432:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000436:	3308      	adds	r3, #8
 8000438:	60fb      	str	r3, [r7, #12]

    /* Toggle LED9 every 500 ms for 5 s */
    while (count > osKernelGetTickCount())
 800043a:	e006      	b.n	800044a <LED_Thread1+0x6a>
    {
      BSP_LED_Toggle(LED9);
 800043c:	2000      	movs	r0, #0
 800043e:	f000 fa39 	bl	80008b4 <BSP_LED_Toggle>

      osDelay(500);
 8000442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000446:	f002 fa44 	bl	80028d2 <osDelay>
    while (count > osKernelGetTickCount())
 800044a:	f002 f9eb 	bl	8002824 <osKernelGetTickCount>
 800044e:	4602      	mov	r2, r0
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	4293      	cmp	r3, r2
 8000454:	d8f2      	bhi.n	800043c <LED_Thread1+0x5c>
    }

    /* Resume Thread 2*/
    OsStatus = osThreadResume(THREAD2Handle);
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <LED_Thread1+0x98>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f002 fa18 	bl	8002890 <osThreadResume>
 8000460:	4603      	mov	r3, r0
 8000462:	461a      	mov	r2, r3
 8000464:	4b03      	ldr	r3, [pc, #12]	; (8000474 <LED_Thread1+0x94>)
 8000466:	601a      	str	r2, [r3, #0]
    count = osKernelGetTickCount() + 5000;
 8000468:	e7c0      	b.n	80003ec <LED_Thread1+0xc>
 800046a:	bf00      	nop
 800046c:	080059a0 	.word	0x080059a0
 8000470:	20003f6c 	.word	0x20003f6c
 8000474:	2000009c 	.word	0x2000009c
 8000478:	20003f70 	.word	0x20003f70

0800047c <LED_Thread2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_Thread2 */
void LED_Thread2(void *argument)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  uint32_t count;
  (void) argument;
  /* Infinite loop */
  for (;;)
  {
    count = osKernelGetTickCount() + 10000;
 8000484:	f002 f9ce 	bl	8002824 <osKernelGetTickCount>
 8000488:	4603      	mov	r3, r0
 800048a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800048e:	3310      	adds	r3, #16
 8000490:	60fb      	str	r3, [r7, #12]

    /* Toggle LED10 every 500 ms for 10 s */
    while (count > osKernelGetTickCount())
 8000492:	e005      	b.n	80004a0 <LED_Thread2+0x24>
    {
      BSP_LED_Toggle(LED10);
 8000494:	2001      	movs	r0, #1
 8000496:	f000 fa0d 	bl	80008b4 <BSP_LED_Toggle>
     printf("Task2\n");
 800049a:	480f      	ldr	r0, [pc, #60]	; (80004d8 <LED_Thread2+0x5c>)
 800049c:	f004 fe08 	bl	80050b0 <puts>
    while (count > osKernelGetTickCount())
 80004a0:	f002 f9c0 	bl	8002824 <osKernelGetTickCount>
 80004a4:	4602      	mov	r2, r0
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d8f3      	bhi.n	8000494 <LED_Thread2+0x18>
     //osDelay(500);
    }

    /* Turn off LED10 */
    BSP_LED_Off(LED10);
 80004ac:	2001      	movs	r0, #1
 80004ae:	f000 f9e5 	bl	800087c <BSP_LED_Off>

    /* Resume Thread 1 */
    OsStatus = osThreadResume(THREAD1Handle);
 80004b2:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <LED_Thread2+0x60>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f002 f9ea 	bl	8002890 <osThreadResume>
 80004bc:	4603      	mov	r3, r0
 80004be:	461a      	mov	r2, r3
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <LED_Thread2+0x64>)
 80004c2:	601a      	str	r2, [r3, #0]

    /* Suspend Thread 2 */
    OsStatus = osThreadSuspend(THREAD2Handle);
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <LED_Thread2+0x68>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f002 f9c0 	bl	800284e <osThreadSuspend>
 80004ce:	4603      	mov	r3, r0
 80004d0:	461a      	mov	r2, r3
 80004d2:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <LED_Thread2+0x64>)
 80004d4:	601a      	str	r2, [r3, #0]
    count = osKernelGetTickCount() + 10000;
 80004d6:	e7d5      	b.n	8000484 <LED_Thread2+0x8>
 80004d8:	080059c0 	.word	0x080059c0
 80004dc:	20003f6c 	.word	0x20003f6c
 80004e0:	2000009c 	.word	0x2000009c
 80004e4:	20003f70 	.word	0x20003f70

080004e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d101      	bne.n	80004fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004fa:	f000 facf 	bl	8000a9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40001000 	.word	0x40001000

0800050c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x4>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_MspInit+0x50>)
 800051c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800051e:	4a11      	ldr	r2, [pc, #68]	; (8000564 <HAL_MspInit+0x50>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6613      	str	r3, [r2, #96]	; 0x60
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_MspInit+0x50>)
 8000528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_MspInit+0x50>)
 8000534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <HAL_MspInit+0x50>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053c:	6593      	str	r3, [r2, #88]	; 0x58
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <HAL_MspInit+0x50>)
 8000540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2107      	movs	r1, #7
 800054e:	f06f 0001 	mvn.w	r0, #1
 8000552:	f000 fb7b 	bl	8000c4c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000556:	f000 fdfd 	bl	8001154 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08c      	sub	sp, #48	; 0x30
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8000578:	2200      	movs	r2, #0
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	2031      	movs	r0, #49	; 0x31
 800057e:	f000 fb65 	bl	8000c4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000582:	2031      	movs	r0, #49	; 0x31
 8000584:	f000 fb7c 	bl	8000c80 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <HAL_InitTick+0x9c>)
 800058a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058c:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <HAL_InitTick+0x9c>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6593      	str	r3, [r2, #88]	; 0x58
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <HAL_InitTick+0x9c>)
 8000596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005a0:	f107 0210 	add.w	r2, r7, #16
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4611      	mov	r1, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fcd8 	bl	8001f60 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005b0:	f001 fcc2 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 80005b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b8:	4a13      	ldr	r2, [pc, #76]	; (8000608 <HAL_InitTick+0xa0>)
 80005ba:	fba2 2303 	umull	r2, r3, r2, r3
 80005be:	0c9b      	lsrs	r3, r3, #18
 80005c0:	3b01      	subs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <HAL_InitTick+0xa4>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <HAL_InitTick+0xa8>)
 80005c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <HAL_InitTick+0xa4>)
 80005cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <HAL_InitTick+0xa4>)
 80005d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_InitTick+0xa4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <HAL_InitTick+0xa4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <HAL_InitTick+0xa4>)
 80005e6:	f001 fdbd 	bl	8002164 <HAL_TIM_Base_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d104      	bne.n	80005fa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80005f0:	4806      	ldr	r0, [pc, #24]	; (800060c <HAL_InitTick+0xa4>)
 80005f2:	f001 fe19 	bl	8002228 <HAL_TIM_Base_Start_IT>
 80005f6:	4603      	mov	r3, r0
 80005f8:	e000      	b.n	80005fc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3730      	adds	r7, #48	; 0x30
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000
 8000608:	431bde83 	.word	0x431bde83
 800060c:	20003f74 	.word	0x20003f74
 8000610:	40001000 	.word	0x40001000

08000614 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <TIM6_IRQHandler+0x10>)
 800061a:	f001 fe75 	bl	8002308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20003f74 	.word	0x20003f74

08000628 <ITM_SendChar>:
 /*ITM register addresses*/
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <ITM_SendChar+0x48>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <ITM_SendChar+0x48>)
 8000638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800063c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <ITM_SendChar+0x4c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <ITM_SendChar+0x4c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800064a:	bf00      	nop
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0f8      	beq.n	800064c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800065a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	6013      	str	r3, [r2, #0]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000edfc 	.word	0xe000edfc
 8000674:	e0000e00 	.word	0xe0000e00

08000678 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	e00a      	b.n	80006a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800068a:	e000      	b.n	800068e <_read+0x16>
 800068c:	bf00      	nop
 800068e:	4601      	mov	r1, r0
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	60ba      	str	r2, [r7, #8]
 8000696:	b2ca      	uxtb	r2, r1
 8000698:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	3301      	adds	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697a      	ldr	r2, [r7, #20]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	dbf0      	blt.n	800068a <_read+0x12>
  }

  return len;
 80006a8:	687b      	ldr	r3, [r7, #4]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b086      	sub	sp, #24
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e009      	b.n	80006d8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	60ba      	str	r2, [r7, #8]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ffab 	bl	8000628 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbf1      	blt.n	80006c4 <_write+0x12>
  }
  return len;
 80006e0:	687b      	ldr	r3, [r7, #4]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_close>:

int _close(int file)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000712:	605a      	str	r2, [r3, #4]
  return 0;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <_isatty>:

int _isatty(int file)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800075c:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <_sbrk+0x5c>)
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <_sbrk+0x60>)
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <_sbrk+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d102      	bne.n	8000776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <_sbrk+0x64>)
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <_sbrk+0x68>)
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	429a      	cmp	r2, r3
 8000782:	d207      	bcs.n	8000794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000784:	f004 fbe6 	bl	8004f54 <__errno>
 8000788:	4603      	mov	r3, r0
 800078a:	220c      	movs	r2, #12
 800078c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	e009      	b.n	80007a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <_sbrk+0x64>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4413      	add	r3, r2
 80007a2:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <_sbrk+0x64>)
 80007a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20030000 	.word	0x20030000
 80007b4:	00000800 	.word	0x00000800
 80007b8:	200000a0 	.word	0x200000a0
 80007bc:	20004018 	.word	0x20004018

080007c0 <BSP_LED_Init>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  int32_t          status = BSP_ERROR_NONE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED9)
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10c      	bne.n	80007ee <BSP_LED_Init+0x2e>
  {
    LED9_GPIO_CLK_ENABLE();
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <BSP_LED_Init+0xb0>)
 80007d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d8:	4a25      	ldr	r2, [pc, #148]	; (8000870 <BSP_LED_Init+0xb0>)
 80007da:	f043 0308 	orr.w	r3, r3, #8
 80007de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <BSP_LED_Init+0xb0>)
 80007e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	e019      	b.n	8000822 <BSP_LED_Init+0x62>
  }
  else /* Led = LED10 */
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b20      	ldr	r3, [pc, #128]	; (8000870 <BSP_LED_Init+0xb0>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f2:	4a1f      	ldr	r2, [pc, #124]	; (8000870 <BSP_LED_Init+0xb0>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6593      	str	r3, [r2, #88]	; 0x58
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <BSP_LED_Init+0xb0>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000806:	f000 fc95 	bl	8001134 <HAL_PWREx_EnableVddIO2>
    LED10_GPIO_CLK_ENABLE();
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <BSP_LED_Init+0xb0>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a18      	ldr	r2, [pc, #96]	; (8000870 <BSP_LED_Init+0xb0>)
 8000810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <BSP_LED_Init+0xb0>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	4a13      	ldr	r2, [pc, #76]	; (8000874 <BSP_LED_Init+0xb4>)
 8000826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <BSP_LED_Init+0xb8>)
 800083c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000840:	f107 0218 	add.w	r2, r7, #24
 8000844:	4611      	mov	r1, r2
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fa28 	bl	8000c9c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <BSP_LED_Init+0xb8>)
 8000850:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4a07      	ldr	r2, [pc, #28]	; (8000874 <BSP_LED_Init+0xb4>)
 8000858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800085c:	2201      	movs	r2, #1
 800085e:	4619      	mov	r1, r3
 8000860:	f000 fb9c 	bl	8000f9c <HAL_GPIO_WritePin>

  return status;
 8000864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000866:	4618      	mov	r0, r3
 8000868:	3730      	adds	r7, #48	; 0x30
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	20000000 	.word	0x20000000
 8000878:	20000004 	.word	0x20000004

0800087c <BSP_LED_Off>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval BSP error code
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <BSP_LED_Off+0x30>)
 800088e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <BSP_LED_Off+0x34>)
 8000896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800089a:	2201      	movs	r2, #1
 800089c:	4619      	mov	r1, r3
 800089e:	f000 fb7d 	bl	8000f9c <HAL_GPIO_WritePin>

  return status;
 80008a2:	68fb      	ldr	r3, [r7, #12]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000004 	.word	0x20000004
 80008b0:	20000000 	.word	0x20000000

080008b4 <BSP_LED_Toggle>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval BSP error code
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <BSP_LED_Toggle+0x30>)
 80008c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	4906      	ldr	r1, [pc, #24]	; (80008e8 <BSP_LED_Toggle+0x34>)
 80008ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008d2:	4619      	mov	r1, r3
 80008d4:	4610      	mov	r0, r2
 80008d6:	f000 fb79 	bl	8000fcc <HAL_GPIO_TogglePin>

  return status;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000004 	.word	0x20000004
 80008e8:	20000000 	.word	0x20000000

080008ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <SystemInit+0x20>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <SystemInit+0x20>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b087      	sub	sp, #28
 8000914:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000916:	4b4f      	ldr	r3, [pc, #316]	; (8000a54 <SystemCoreClockUpdate+0x144>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	2b00      	cmp	r3, #0
 8000920:	d107      	bne.n	8000932 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000922:	4b4c      	ldr	r3, [pc, #304]	; (8000a54 <SystemCoreClockUpdate+0x144>)
 8000924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	e005      	b.n	800093e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000932:	4b48      	ldr	r3, [pc, #288]	; (8000a54 <SystemCoreClockUpdate+0x144>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	091b      	lsrs	r3, r3, #4
 8000938:	f003 030f 	and.w	r3, r3, #15
 800093c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800093e:	4a46      	ldr	r2, [pc, #280]	; (8000a58 <SystemCoreClockUpdate+0x148>)
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000946:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000948:	4b42      	ldr	r3, [pc, #264]	; (8000a54 <SystemCoreClockUpdate+0x144>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	f003 030c 	and.w	r3, r3, #12
 8000950:	2b0c      	cmp	r3, #12
 8000952:	d866      	bhi.n	8000a22 <SystemCoreClockUpdate+0x112>
 8000954:	a201      	add	r2, pc, #4	; (adr r2, 800095c <SystemCoreClockUpdate+0x4c>)
 8000956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095a:	bf00      	nop
 800095c:	08000991 	.word	0x08000991
 8000960:	08000a23 	.word	0x08000a23
 8000964:	08000a23 	.word	0x08000a23
 8000968:	08000a23 	.word	0x08000a23
 800096c:	08000999 	.word	0x08000999
 8000970:	08000a23 	.word	0x08000a23
 8000974:	08000a23 	.word	0x08000a23
 8000978:	08000a23 	.word	0x08000a23
 800097c:	080009a1 	.word	0x080009a1
 8000980:	08000a23 	.word	0x08000a23
 8000984:	08000a23 	.word	0x08000a23
 8000988:	08000a23 	.word	0x08000a23
 800098c:	080009a9 	.word	0x080009a9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000990:	4a32      	ldr	r2, [pc, #200]	; (8000a5c <SystemCoreClockUpdate+0x14c>)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	6013      	str	r3, [r2, #0]
      break;
 8000996:	e048      	b.n	8000a2a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000998:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <SystemCoreClockUpdate+0x14c>)
 800099a:	4a31      	ldr	r2, [pc, #196]	; (8000a60 <SystemCoreClockUpdate+0x150>)
 800099c:	601a      	str	r2, [r3, #0]
      break;
 800099e:	e044      	b.n	8000a2a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80009a0:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <SystemCoreClockUpdate+0x14c>)
 80009a2:	4a2f      	ldr	r2, [pc, #188]	; (8000a60 <SystemCoreClockUpdate+0x150>)
 80009a4:	601a      	str	r2, [r3, #0]
      break;
 80009a6:	e040      	b.n	8000a2a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80009a8:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <SystemCoreClockUpdate+0x144>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80009b2:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <SystemCoreClockUpdate+0x144>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	091b      	lsrs	r3, r3, #4
 80009b8:	f003 030f 	and.w	r3, r3, #15
 80009bc:	3301      	adds	r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d003      	beq.n	80009ce <SystemCoreClockUpdate+0xbe>
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d006      	beq.n	80009da <SystemCoreClockUpdate+0xca>
 80009cc:	e00b      	b.n	80009e6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80009ce:	4a24      	ldr	r2, [pc, #144]	; (8000a60 <SystemCoreClockUpdate+0x150>)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d6:	613b      	str	r3, [r7, #16]
          break;
 80009d8:	e00b      	b.n	80009f2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80009da:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <SystemCoreClockUpdate+0x150>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	613b      	str	r3, [r7, #16]
          break;
 80009e4:	e005      	b.n	80009f2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ee:	613b      	str	r3, [r7, #16]
          break;
 80009f0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <SystemCoreClockUpdate+0x144>)
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	0a1b      	lsrs	r3, r3, #8
 80009f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	fb02 f303 	mul.w	r3, r2, r3
 8000a02:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <SystemCoreClockUpdate+0x144>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0e5b      	lsrs	r3, r3, #25
 8000a0a:	f003 0303 	and.w	r3, r3, #3
 8000a0e:	3301      	adds	r3, #1
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1c:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <SystemCoreClockUpdate+0x14c>)
 8000a1e:	6013      	str	r3, [r2, #0]
      break;
 8000a20:	e003      	b.n	8000a2a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <SystemCoreClockUpdate+0x14c>)
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	6013      	str	r3, [r2, #0]
      break;
 8000a28:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <SystemCoreClockUpdate+0x144>)
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	091b      	lsrs	r3, r3, #4
 8000a30:	f003 030f 	and.w	r3, r3, #15
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <SystemCoreClockUpdate+0x154>)
 8000a36:	5cd3      	ldrb	r3, [r2, r3]
 8000a38:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <SystemCoreClockUpdate+0x14c>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	fa22 f303 	lsr.w	r3, r2, r3
 8000a44:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <SystemCoreClockUpdate+0x14c>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	371c      	adds	r7, #28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	40021000 	.word	0x40021000
 8000a58:	080059f8 	.word	0x080059f8
 8000a5c:	2000000c 	.word	0x2000000c
 8000a60:	00f42400 	.word	0x00f42400
 8000a64:	080059e0 	.word	0x080059e0

08000a68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000a72:	2004      	movs	r0, #4
 8000a74:	f000 f8df 	bl	8000c36 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000a78:	f7ff ff4a 	bl	8000910 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff fd73 	bl	8000568 <HAL_InitTick>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	e001      	b.n	8000a92 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a8e:	f7ff fd41 	bl	8000514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a92:	79fb      	ldrb	r3, [r7, #7]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x20>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000014 	.word	0x20000014
 8000ac0:	20003fc0 	.word	0x20003fc0

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_GetTick+0x14>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20003fc0 	.word	0x20003fc0

08000adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60d3      	str	r3, [r2, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db0b      	blt.n	8000b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f003 021f 	and.w	r2, r3, #31
 8000b58:	4907      	ldr	r1, [pc, #28]	; (8000b78 <__NVIC_EnableIRQ+0x38>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	2001      	movs	r0, #1
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	; (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0152      	lsls	r2, r2, #5
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	; (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0152      	lsls	r2, r2, #5
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	bf28      	it	cs
 8000bee:	2303      	movcs	r3, #3
 8000bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3303      	adds	r3, #3
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b04      	subs	r3, #4
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	4313      	orrs	r3, r2
         );
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	; 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ff4c 	bl	8000adc <__NVIC_SetPriorityGrouping>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5a:	f7ff ff63 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000c5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	68b9      	ldr	r1, [r7, #8]
 8000c64:	6978      	ldr	r0, [r7, #20]
 8000c66:	f7ff ffb3 	bl	8000bd0 <NVIC_EncodePriority>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff82 	bl	8000b7c <__NVIC_SetPriority>
}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff56 	bl	8000b40 <__NVIC_EnableIRQ>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b087      	sub	sp, #28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000caa:	e158      	b.n	8000f5e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 814a 	beq.w	8000f58 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d005      	beq.n	8000cdc <HAL_GPIO_Init+0x40>
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d130      	bne.n	8000d3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d12:	2201      	movs	r2, #1
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	091b      	lsrs	r3, r3, #4
 8000d28:	f003 0201 	and.w	r2, r3, #1
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d017      	beq.n	8000d7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d123      	bne.n	8000dce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	08da      	lsrs	r2, r3, #3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3208      	adds	r2, #8
 8000d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	6939      	ldr	r1, [r7, #16]
 8000dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0203 	and.w	r2, r3, #3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 80a4 	beq.w	8000f58 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000e10:	4a5a      	ldr	r2, [pc, #360]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	089b      	lsrs	r3, r3, #2
 8000e16:	3318      	adds	r3, #24
 8000e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	220f      	movs	r2, #15
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a52      	ldr	r2, [pc, #328]	; (8000f80 <HAL_GPIO_Init+0x2e4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d025      	beq.n	8000e88 <HAL_GPIO_Init+0x1ec>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a51      	ldr	r2, [pc, #324]	; (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d01f      	beq.n	8000e84 <HAL_GPIO_Init+0x1e8>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a50      	ldr	r2, [pc, #320]	; (8000f88 <HAL_GPIO_Init+0x2ec>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d019      	beq.n	8000e80 <HAL_GPIO_Init+0x1e4>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a4f      	ldr	r2, [pc, #316]	; (8000f8c <HAL_GPIO_Init+0x2f0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d013      	beq.n	8000e7c <HAL_GPIO_Init+0x1e0>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a4e      	ldr	r2, [pc, #312]	; (8000f90 <HAL_GPIO_Init+0x2f4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d00d      	beq.n	8000e78 <HAL_GPIO_Init+0x1dc>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a4d      	ldr	r2, [pc, #308]	; (8000f94 <HAL_GPIO_Init+0x2f8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d007      	beq.n	8000e74 <HAL_GPIO_Init+0x1d8>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a4c      	ldr	r2, [pc, #304]	; (8000f98 <HAL_GPIO_Init+0x2fc>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d101      	bne.n	8000e70 <HAL_GPIO_Init+0x1d4>
 8000e6c:	2306      	movs	r3, #6
 8000e6e:	e00c      	b.n	8000e8a <HAL_GPIO_Init+0x1ee>
 8000e70:	2307      	movs	r3, #7
 8000e72:	e00a      	b.n	8000e8a <HAL_GPIO_Init+0x1ee>
 8000e74:	2305      	movs	r3, #5
 8000e76:	e008      	b.n	8000e8a <HAL_GPIO_Init+0x1ee>
 8000e78:	2304      	movs	r3, #4
 8000e7a:	e006      	b.n	8000e8a <HAL_GPIO_Init+0x1ee>
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e004      	b.n	8000e8a <HAL_GPIO_Init+0x1ee>
 8000e80:	2302      	movs	r3, #2
 8000e82:	e002      	b.n	8000e8a <HAL_GPIO_Init+0x1ee>
 8000e84:	2301      	movs	r3, #1
 8000e86:	e000      	b.n	8000e8a <HAL_GPIO_Init+0x1ee>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	f002 0203 	and.w	r2, r2, #3
 8000e90:	00d2      	lsls	r2, r2, #3
 8000e92:	4093      	lsls	r3, r2
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000e9a:	4938      	ldr	r1, [pc, #224]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	089b      	lsrs	r3, r3, #2
 8000ea0:	3318      	adds	r3, #24
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ea8:	4b34      	ldr	r3, [pc, #208]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ecc:	4a2b      	ldr	r2, [pc, #172]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ef6:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f22:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	fa22 f303 	lsr.w	r3, r2, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f47f ae9f 	bne.w	8000cac <HAL_GPIO_Init+0x10>
  }
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	371c      	adds	r7, #28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	4002f400 	.word	0x4002f400
 8000f80:	42020000 	.word	0x42020000
 8000f84:	42020400 	.word	0x42020400
 8000f88:	42020800 	.word	0x42020800
 8000f8c:	42020c00 	.word	0x42020c00
 8000f90:	42021000 	.word	0x42021000
 8000f94:	42021400 	.word	0x42021400
 8000f98:	42021800 	.word	0x42021800

08000f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	041a      	lsls	r2, r3, #16
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43d9      	mvns	r1, r3
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	400b      	ands	r3, r1
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	619a      	str	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e007      	b.n	800102e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 0204 	bic.w	r2, r3, #4
 8001026:	4905      	ldr	r1, [pc, #20]	; (800103c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4313      	orrs	r3, r2
 800102c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	40030400 	.word	0x40030400

08001040 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_ICACHE_Enable+0x1c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_ICACHE_Enable+0x1c>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40030400 	.word	0x40030400

08001060 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <HAL_PWREx_GetVoltageRange+0x18>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40007000 	.word	0x40007000

0800107c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001084:	4b27      	ldr	r3, [pc, #156]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800108c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800108e:	f000 f871 	bl	8001174 <HAL_PWREx_SMPS_GetEffectiveMode>
 8001092:	4603      	mov	r3, r0
 8001094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001098:	d101      	bne.n	800109e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e03e      	b.n	800111c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010aa:	d101      	bne.n	80010b0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e035      	b.n	800111c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d101      	bne.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e02f      	b.n	800111c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80010c4:	4917      	ldr	r1, [pc, #92]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	095b      	lsrs	r3, r3, #5
 80010d2:	4a16      	ldr	r2, [pc, #88]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	09db      	lsrs	r3, r3, #7
 80010da:	2232      	movs	r2, #50	; 0x32
 80010dc:	fb02 f303 	mul.w	r3, r2, r3
 80010e0:	4a13      	ldr	r2, [pc, #76]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	08db      	lsrs	r3, r3, #3
 80010e8:	3301      	adds	r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ec:	e002      	b.n	80010f4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001100:	d102      	bne.n	8001108 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f2      	bne.n	80010ee <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001114:	d101      	bne.n	800111a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e000      	b.n	800111c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40007000 	.word	0x40007000
 8001128:	2000000c 	.word	0x2000000c
 800112c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001130:	cccccccd 	.word	0xcccccccd

08001134 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_PWREx_EnableVddIO2+0x1c>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <HAL_PWREx_EnableVddIO2+0x1c>)
 800113e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001142:	6053      	str	r3, [r2, #4]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40007000 	.word	0x40007000

08001154 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800115e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001162:	6093      	str	r3, [r2, #8]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40007000 	.word	0x40007000

08001174 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800118a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	e00a      	b.n	80011a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d103      	bne.n	80011a4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800119c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	e001      	b.n	80011a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80011a8:	687b      	ldr	r3, [r7, #4]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40007000 	.word	0x40007000

080011bc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f000 bcc2 	b.w	8001b54 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011d0:	4ba3      	ldr	r3, [pc, #652]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011da:	4ba1      	ldr	r3, [pc, #644]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80e9 	beq.w	80013c4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_RCC_OscConfig+0x4a>
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2b0c      	cmp	r3, #12
 80011fc:	f040 8083 	bne.w	8001306 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d17f      	bne.n	8001306 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001206:	4b96      	ldr	r3, [pc, #600]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <HAL_RCC_OscConfig+0x64>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d102      	bne.n	8001220 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	f000 bc9a 	b.w	8001b54 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001224:	4b8e      	ldr	r3, [pc, #568]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d004      	beq.n	800123a <HAL_RCC_OscConfig+0x7e>
 8001230:	4b8b      	ldr	r3, [pc, #556]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001238:	e005      	b.n	8001246 <HAL_RCC_OscConfig+0x8a>
 800123a:	4b89      	ldr	r3, [pc, #548]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800123c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001240:	091b      	lsrs	r3, r3, #4
 8001242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001246:	4293      	cmp	r3, r2
 8001248:	d224      	bcs.n	8001294 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	4618      	mov	r0, r3
 8001250:	f000 feb8 	bl	8001fc4 <RCC_SetFlashLatencyFromMSIRange>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	f000 bc7a 	b.w	8001b54 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001260:	4b7f      	ldr	r3, [pc, #508]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a7e      	ldr	r2, [pc, #504]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b7c      	ldr	r3, [pc, #496]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	4979      	ldr	r1, [pc, #484]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127e:	4b78      	ldr	r3, [pc, #480]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	4974      	ldr	r1, [pc, #464]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800128e:	4313      	orrs	r3, r2
 8001290:	604b      	str	r3, [r1, #4]
 8001292:	e026      	b.n	80012e2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001294:	4b72      	ldr	r3, [pc, #456]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a71      	ldr	r2, [pc, #452]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b6f      	ldr	r3, [pc, #444]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	496c      	ldr	r1, [pc, #432]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b2:	4b6b      	ldr	r3, [pc, #428]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	4967      	ldr	r1, [pc, #412]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10a      	bne.n	80012e2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fe77 	bl	8001fc4 <RCC_SetFlashLatencyFromMSIRange>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	f000 bc39 	b.w	8001b54 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80012e2:	f000 fe15 	bl	8001f10 <HAL_RCC_GetHCLKFreq>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a5e      	ldr	r2, [pc, #376]	; (8001464 <HAL_RCC_OscConfig+0x2a8>)
 80012ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012ec:	4b5e      	ldr	r3, [pc, #376]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f939 	bl	8000568 <HAL_InitTick>
 80012f6:	4603      	mov	r3, r0
 80012f8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d060      	beq.n	80013c2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	f000 bc27 	b.w	8001b54 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d039      	beq.n	8001382 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800130e:	4b54      	ldr	r3, [pc, #336]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a53      	ldr	r2, [pc, #332]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800131a:	f7ff fbd3 	bl	8000ac4 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001320:	e00f      	b.n	8001342 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001322:	f7ff fbcf 	bl	8000ac4 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d908      	bls.n	8001342 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001330:	4b4b      	ldr	r3, [pc, #300]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	f000 bc09 	b.w	8001b54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001342:	4b47      	ldr	r3, [pc, #284]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0e9      	beq.n	8001322 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134e:	4b44      	ldr	r3, [pc, #272]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a43      	ldr	r2, [pc, #268]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b41      	ldr	r3, [pc, #260]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	493e      	ldr	r1, [pc, #248]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001368:	4313      	orrs	r3, r2
 800136a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800136c:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	4939      	ldr	r1, [pc, #228]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
 8001380:	e020      	b.n	80013c4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a36      	ldr	r2, [pc, #216]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800138e:	f7ff fb99 	bl	8000ac4 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001394:	e00e      	b.n	80013b4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001396:	f7ff fb95 	bl	8000ac4 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d907      	bls.n	80013b4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013a4:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e3cf      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013b4:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1ea      	bne.n	8001396 <HAL_RCC_OscConfig+0x1da>
 80013c0:	e000      	b.n	80013c4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d07e      	beq.n	80014ce <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d005      	beq.n	80013e2 <HAL_RCC_OscConfig+0x226>
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	2b0c      	cmp	r3, #12
 80013da:	d10e      	bne.n	80013fa <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d10b      	bne.n	80013fa <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d06e      	beq.n	80014cc <HAL_RCC_OscConfig+0x310>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d16a      	bne.n	80014cc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e3ac      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x256>
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a15      	ldr	r2, [pc, #84]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800140a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	e01d      	b.n	800144e <HAL_RCC_OscConfig+0x292>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800141a:	d10c      	bne.n	8001436 <HAL_RCC_OscConfig+0x27a>
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001422:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0c      	ldr	r2, [pc, #48]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800142e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e00b      	b.n	800144e <HAL_RCC_OscConfig+0x292>
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 800143c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_RCC_OscConfig+0x2a4>)
 8001448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d020      	beq.n	8001498 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff fb35 	bl	8000ac4 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800145c:	e015      	b.n	800148a <HAL_RCC_OscConfig+0x2ce>
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000
 8001464:	2000000c 	.word	0x2000000c
 8001468:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fb2a 	bl	8000ac4 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d907      	bls.n	800148a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147a:	4b9f      	ldr	r3, [pc, #636]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e364      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148a:	4b9b      	ldr	r3, [pc, #620]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0ea      	beq.n	800146c <HAL_RCC_OscConfig+0x2b0>
 8001496:	e01a      	b.n	80014ce <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fb14 	bl	8000ac4 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800149e:	e00e      	b.n	80014be <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fb10 	bl	8000ac4 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d907      	bls.n	80014be <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ae:	4b92      	ldr	r3, [pc, #584]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e34a      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014be:	4b8e      	ldr	r3, [pc, #568]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1ea      	bne.n	80014a0 <HAL_RCC_OscConfig+0x2e4>
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d06c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d005      	beq.n	80014ec <HAL_RCC_OscConfig+0x330>
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d119      	bne.n	800151a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d116      	bne.n	800151a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ec:	4b82      	ldr	r3, [pc, #520]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_OscConfig+0x348>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e327      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b7c      	ldr	r3, [pc, #496]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	4979      	ldr	r1, [pc, #484]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001518:	e04c      	b.n	80015b4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d029      	beq.n	8001576 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001522:	4b75      	ldr	r3, [pc, #468]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a74      	ldr	r2, [pc, #464]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 8001528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fac9 	bl	8000ac4 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001534:	e00e      	b.n	8001554 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff fac5 	bl	8000ac4 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d907      	bls.n	8001554 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001544:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e2ff      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001554:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0ea      	beq.n	8001536 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	061b      	lsls	r3, r3, #24
 800156e:	4962      	ldr	r1, [pc, #392]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
 8001574:	e01e      	b.n	80015b4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001576:	4b60      	ldr	r3, [pc, #384]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a5f      	ldr	r2, [pc, #380]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 800157c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fa9f 	bl	8000ac4 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001588:	e00e      	b.n	80015a8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fa9b 	bl	8000ac4 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d907      	bls.n	80015a8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001598:	4b57      	ldr	r3, [pc, #348]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e2d5      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a8:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1ea      	bne.n	800158a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d05f      	beq.n	8001680 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d038      	beq.n	800163a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d108      	bne.n	80015e2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80015d0:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 80015d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d6:	4a48      	ldr	r2, [pc, #288]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 80015d8:	f023 0310 	bic.w	r3, r3, #16
 80015dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80015e0:	e007      	b.n	80015f2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80015e2:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 80015e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e8:	4a43      	ldr	r2, [pc, #268]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f2:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 80015f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f8:	4a3f      	ldr	r2, [pc, #252]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001602:	f7ff fa5f 	bl	8000ac4 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001608:	e00f      	b.n	800162a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160a:	f7ff fa5b 	bl	8000ac4 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b07      	cmp	r3, #7
 8001616:	d908      	bls.n	800162a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001618:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 800161a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e294      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162a:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 800162c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0e8      	beq.n	800160a <HAL_RCC_OscConfig+0x44e>
 8001638:	e022      	b.n	8001680 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163a:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 800163c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001640:	4a2d      	ldr	r2, [pc, #180]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164a:	f7ff fa3b 	bl	8000ac4 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001650:	e00f      	b.n	8001672 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff fa37 	bl	8000ac4 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b07      	cmp	r3, #7
 800165e:	d908      	bls.n	8001672 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e270      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 8001674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e8      	bne.n	8001652 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8131 	beq.w	80018f0 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10d      	bne.n	80016ba <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6593      	str	r3, [r2, #88]	; 0x58
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_RCC_OscConfig+0x53c>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_RCC_OscConfig+0x540>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d122      	bne.n	800170c <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <HAL_RCC_OscConfig+0x540>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a0c      	ldr	r2, [pc, #48]	; (80016fc <HAL_RCC_OscConfig+0x540>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff f9f7 	bl	8000ac4 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d8:	e012      	b.n	8001700 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016da:	f7ff f9f3 	bl	8000ac4 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d90b      	bls.n	8001700 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <HAL_RCC_OscConfig+0x540>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e22d      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001700:	4bb8      	ldr	r3, [pc, #736]	; (80019e4 <HAL_RCC_OscConfig+0x828>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0e6      	beq.n	80016da <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01f      	beq.n	8001758 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d010      	beq.n	8001746 <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001724:	4bb0      	ldr	r3, [pc, #704]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 8001726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172a:	4aaf      	ldr	r2, [pc, #700]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001734:	4bac      	ldr	r3, [pc, #688]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	4aab      	ldr	r2, [pc, #684]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001744:	e018      	b.n	8001778 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001746:	4ba8      	ldr	r3, [pc, #672]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 8001748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174c:	4aa6      	ldr	r2, [pc, #664]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001756:	e00f      	b.n	8001778 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001758:	4ba3      	ldr	r3, [pc, #652]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800175a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175e:	4aa2      	ldr	r2, [pc, #648]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001768:	4b9f      	ldr	r3, [pc, #636]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800176a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176e:	4a9e      	ldr	r2, [pc, #632]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 8001770:	f023 0304 	bic.w	r3, r3, #4
 8001774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d068      	beq.n	8001852 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001780:	f7ff f9a0 	bl	8000ac4 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001786:	e011      	b.n	80017ac <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7ff f99c 	bl	8000ac4 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d908      	bls.n	80017ac <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179a:	4b93      	ldr	r3, [pc, #588]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800179c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e1d3      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ac:	4b8e      	ldr	r3, [pc, #568]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 80017ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0e6      	beq.n	8001788 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d022      	beq.n	800180c <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80017c6:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 80017c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017cc:	4a86      	ldr	r2, [pc, #536]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 80017ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80017d6:	e011      	b.n	80017fc <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff f974 	bl	8000ac4 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d908      	bls.n	80017fc <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80017ea:	4b7f      	ldr	r3, [pc, #508]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 80017ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e1ab      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80017fc:	4b7a      	ldr	r3, [pc, #488]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0e6      	beq.n	80017d8 <HAL_RCC_OscConfig+0x61c>
 800180a:	e068      	b.n	80018de <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800180c:	4b76      	ldr	r3, [pc, #472]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001812:	4a75      	ldr	r2, [pc, #468]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 8001814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800181c:	e011      	b.n	8001842 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff f951 	bl	8000ac4 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	f241 3288 	movw	r2, #5000	; 0x1388
 800182c:	4293      	cmp	r3, r2
 800182e:	d908      	bls.n	8001842 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001830:	4b6d      	ldr	r3, [pc, #436]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 8001832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e188      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001842:	4b69      	ldr	r3, [pc, #420]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1e6      	bne.n	800181e <HAL_RCC_OscConfig+0x662>
 8001850:	e045      	b.n	80018de <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff f937 	bl	8000ac4 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001858:	e011      	b.n	800187e <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff f933 	bl	8000ac4 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	; 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d908      	bls.n	800187e <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800186c:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e16a      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800187e:	4b5a      	ldr	r3, [pc, #360]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 8001880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1e6      	bne.n	800185a <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800188c:	4b56      	ldr	r3, [pc, #344]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800188e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	2b00      	cmp	r3, #0
 8001898:	d021      	beq.n	80018de <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800189a:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a0:	4a51      	ldr	r2, [pc, #324]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 80018a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018aa:	e011      	b.n	80018d0 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ac:	f7ff f90a 	bl	8000ac4 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d908      	bls.n	80018d0 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018be:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 80018c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e141      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018d0:	4b45      	ldr	r3, [pc, #276]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1e6      	bne.n	80018ac <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018de:	7ffb      	ldrb	r3, [r7, #31]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d105      	bne.n	80018f0 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e4:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	4a3f      	ldr	r2, [pc, #252]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 80018ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d04a      	beq.n	8001992 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	2b00      	cmp	r3, #0
 8001902:	d023      	beq.n	800194c <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001904:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 8001906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800190a:	4a37      	ldr	r2, [pc, #220]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001914:	f7ff f8d6 	bl	8000ac4 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800191a:	e00f      	b.n	800193c <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800191c:	f7ff f8d2 	bl	8000ac4 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d908      	bls.n	800193c <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800192c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e10b      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800193c:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800193e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0e8      	beq.n	800191c <HAL_RCC_OscConfig+0x760>
 800194a:	e022      	b.n	8001992 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800194e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001952:	4a25      	ldr	r2, [pc, #148]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195c:	f7ff f8b2 	bl	8000ac4 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001962:	e00f      	b.n	8001984 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001964:	f7ff f8ae 	bl	8000ac4 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d908      	bls.n	8001984 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 8001974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e0e7      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 8001986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1e8      	bne.n	8001964 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 80db 	beq.w	8001b52 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b0c      	cmp	r3, #12
 80019a6:	f000 8095 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d16a      	bne.n	8001a88 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 80019b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff f881 	bl	8000ac4 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c4:	e012      	b.n	80019ec <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff f87d 	bl	8000ac4 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d90b      	bls.n	80019ec <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_RCC_OscConfig+0x82c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e0b7      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
 80019e4:	40007000 	.word	0x40007000
 80019e8:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ec:	4b5b      	ldr	r3, [pc, #364]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e6      	bne.n	80019c6 <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f8:	4b58      	ldr	r3, [pc, #352]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	4b58      	ldr	r3, [pc, #352]	; (8001b60 <HAL_RCC_OscConfig+0x9a4>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a08:	3a01      	subs	r2, #1
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a12:	0212      	lsls	r2, r2, #8
 8001a14:	4311      	orrs	r1, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a1a:	0852      	lsrs	r2, r2, #1
 8001a1c:	3a01      	subs	r2, #1
 8001a1e:	0552      	lsls	r2, r2, #21
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a26:	0852      	lsrs	r2, r2, #1
 8001a28:	3a01      	subs	r2, #1
 8001a2a:	0652      	lsls	r2, r2, #25
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a32:	06d2      	lsls	r2, r2, #27
 8001a34:	430a      	orrs	r2, r1
 8001a36:	4949      	ldr	r1, [pc, #292]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3c:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a46      	ldr	r2, [pc, #280]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 8001a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a46:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a48:	4b44      	ldr	r3, [pc, #272]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4a43      	ldr	r2, [pc, #268]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 8001a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff f836 	bl	8000ac4 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5a:	e00e      	b.n	8001a7a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff f832 	bl	8000ac4 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d907      	bls.n	8001a7a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6a:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e06c      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7a:	4b38      	ldr	r3, [pc, #224]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0ea      	beq.n	8001a5c <HAL_RCC_OscConfig+0x8a0>
 8001a86:	e064      	b.n	8001b52 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a88:	4b34      	ldr	r3, [pc, #208]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a33      	ldr	r2, [pc, #204]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 8001a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f816 	bl	8000ac4 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9a:	e00e      	b.n	8001aba <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f812 	bl	8000ac4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d907      	bls.n	8001aba <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e04c      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aba:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ea      	bne.n	8001a9c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ac6:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	4924      	ldr	r1, [pc, #144]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 8001acc:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <HAL_RCC_OscConfig+0x9a8>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60cb      	str	r3, [r1, #12]
 8001ad2:	e03e      	b.n	8001b52 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e039      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <HAL_RCC_OscConfig+0x9a0>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d12c      	bne.n	8001b4e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afe:	3b01      	subs	r3, #1
 8001b00:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d123      	bne.n	8001b4e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b10:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d11b      	bne.n	8001b4e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b20:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d113      	bne.n	8001b4e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	085b      	lsrs	r3, r3, #1
 8001b32:	3b01      	subs	r3, #1
 8001b34:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d109      	bne.n	8001b4e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b44:	085b      	lsrs	r3, r3, #1
 8001b46:	3b01      	subs	r3, #1
 8001b48:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	019f800c 	.word	0x019f800c
 8001b64:	feeefffc 	.word	0xfeeefffc

08001b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e11c      	b.n	8001dba <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b90      	ldr	r3, [pc, #576]	; (8001dc4 <HAL_RCC_ClockConfig+0x25c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d910      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b8d      	ldr	r3, [pc, #564]	; (8001dc4 <HAL_RCC_ClockConfig+0x25c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 020f 	bic.w	r2, r3, #15
 8001b96:	498b      	ldr	r1, [pc, #556]	; (8001dc4 <HAL_RCC_ClockConfig+0x25c>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b89      	ldr	r3, [pc, #548]	; (8001dc4 <HAL_RCC_ClockConfig+0x25c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e104      	b.n	8001dba <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d010      	beq.n	8001bde <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	4b81      	ldr	r3, [pc, #516]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d908      	bls.n	8001bde <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bcc:	4b7e      	ldr	r3, [pc, #504]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	497b      	ldr	r1, [pc, #492]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8085 	beq.w	8001cf6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d11f      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf4:	4b74      	ldr	r3, [pc, #464]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0da      	b.n	8001dba <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c04:	f000 fa42 	bl	800208c <RCC_GetSysClockFreqFromPLLSource>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4a6f      	ldr	r2, [pc, #444]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d947      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c12:	4b6d      	ldr	r3, [pc, #436]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d141      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c1e:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c26:	4a68      	ldr	r2, [pc, #416]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	e036      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3c:	4b62      	ldr	r3, [pc, #392]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d115      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0b6      	b.n	8001dba <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c54:	4b5c      	ldr	r3, [pc, #368]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d109      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0aa      	b.n	8001dba <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c64:	4b58      	ldr	r3, [pc, #352]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0a2      	b.n	8001dba <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c74:	f000 f8b0 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4a53      	ldr	r2, [pc, #332]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d90f      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c82:	4b51      	ldr	r3, [pc, #324]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d109      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c8e:	4b4e      	ldr	r3, [pc, #312]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c96:	4a4c      	ldr	r2, [pc, #304]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ca2:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f023 0203 	bic.w	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	4946      	ldr	r1, [pc, #280]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cb4:	f7fe ff06 	bl	8000ac4 <HAL_GetTick>
 8001cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	e013      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbc:	f7fe ff02 	bl	8000ac4 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d90a      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b3e      	ldr	r3, [pc, #248]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 020c 	and.w	r2, r3, #12
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e06a      	b.n	8001dba <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce4:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 020c 	and.w	r2, r3, #12
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d1e2      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2b80      	cmp	r3, #128	; 0x80
 8001cfa:	d105      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cfc:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4a31      	ldr	r2, [pc, #196]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d06:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d010      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d208      	bcs.n	8001d36 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4925      	ldr	r1, [pc, #148]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <HAL_RCC_ClockConfig+0x25c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d210      	bcs.n	8001d66 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d44:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <HAL_RCC_ClockConfig+0x25c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 020f 	bic.w	r2, r3, #15
 8001d4c:	491d      	ldr	r1, [pc, #116]	; (8001dc4 <HAL_RCC_ClockConfig+0x25c>)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCC_ClockConfig+0x25c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e029      	b.n	8001dba <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d008      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	4912      	ldr	r1, [pc, #72]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d009      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	490a      	ldr	r1, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001da4:	f000 f8b4 	bl	8001f10 <HAL_RCC_GetHCLKFreq>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x268>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_ClockConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbd8 	bl	8000568 <HAL_InitTick>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	04c4b400 	.word	0x04c4b400
 8001dd0:	2000000c 	.word	0x2000000c
 8001dd4:	20000010 	.word	0x20000010

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df0:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x34>
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d121      	bne.n	8001e4a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d11e      	bne.n	8001e4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e0c:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e18:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e005      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e28:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001e34:	4a34      	ldr	r2, [pc, #208]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x130>)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10d      	bne.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e50:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x134>)
 8001e52:	61bb      	str	r3, [r7, #24]
 8001e54:	e004      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x134>)
 8001e5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d146      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e66:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e70:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d003      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0xb4>
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d00d      	beq.n	8001ea6 <HAL_RCC_GetSysClockFreq+0xce>
 8001e8a:	e019      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e8c:	4a1f      	ldr	r2, [pc, #124]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x134>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e96:	68d2      	ldr	r2, [r2, #12]
 8001e98:	0a12      	lsrs	r2, r2, #8
 8001e9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
        break;
 8001ea4:	e019      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ea6:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x134>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001eb0:	68d2      	ldr	r2, [r2, #12]
 8001eb2:	0a12      	lsrs	r2, r2, #8
 8001eb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eb8:	fb02 f303 	mul.w	r3, r2, r3
 8001ebc:	617b      	str	r3, [r7, #20]
        break;
 8001ebe:	e00c      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001eca:	68d2      	ldr	r2, [r2, #12]
 8001ecc:	0a12      	lsrs	r2, r2, #8
 8001ece:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	617b      	str	r3, [r7, #20]
        break;
 8001ed8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	0e5b      	lsrs	r3, r3, #25
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ef4:	69bb      	ldr	r3, [r7, #24]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	080059f8 	.word	0x080059f8
 8001f0c:	00f42400 	.word	0x00f42400

08001f10 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8001f14:	f7ff ff60 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_RCC_GetHCLKFreq+0x20>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	091b      	lsrs	r3, r3, #4
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	4903      	ldr	r1, [pc, #12]	; (8001f34 <HAL_RCC_GetHCLKFreq+0x24>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	080059e0 	.word	0x080059e0

08001f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f3c:	f7ff ffe8 	bl	8001f10 <HAL_RCC_GetHCLKFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4903      	ldr	r1, [pc, #12]	; (8001f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	080059f0 	.word	0x080059f0

08001f60 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_GetClockConfig+0x5c>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0203 	and.w	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_RCC_GetClockConfig+0x5c>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_RCC_GetClockConfig+0x5c>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_GetClockConfig+0x5c>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	08db      	lsrs	r3, r3, #3
 8001f9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <HAL_RCC_GetClockConfig+0x60>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 020f 	and.w	r2, r3, #15
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	601a      	str	r2, [r3, #0]
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40022000 	.word	0x40022000

08001fc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fd0:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fdc:	f7ff f840 	bl	8001060 <HAL_PWREx_GetVoltageRange>
 8001fe0:	6138      	str	r0, [r7, #16]
 8001fe2:	e014      	b.n	800200e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fe4:	4b27      	ldr	r3, [pc, #156]	; (8002084 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	4a26      	ldr	r2, [pc, #152]	; (8002084 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fee:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff0:	4b24      	ldr	r3, [pc, #144]	; (8002084 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ffc:	f7ff f830 	bl	8001060 <HAL_PWREx_GetVoltageRange>
 8002000:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800201a:	d10b      	bne.n	8002034 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b80      	cmp	r3, #128	; 0x80
 8002020:	d919      	bls.n	8002056 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2ba0      	cmp	r3, #160	; 0xa0
 8002026:	d902      	bls.n	800202e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002028:	2302      	movs	r3, #2
 800202a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800202c:	e013      	b.n	8002056 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800202e:	2301      	movs	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002032:	e010      	b.n	8002056 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b80      	cmp	r3, #128	; 0x80
 8002038:	d902      	bls.n	8002040 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800203a:	2303      	movs	r3, #3
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e00a      	b.n	8002056 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b80      	cmp	r3, #128	; 0x80
 8002044:	d102      	bne.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002046:	2302      	movs	r3, #2
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	e004      	b.n	8002056 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b70      	cmp	r3, #112	; 0x70
 8002050:	d101      	bne.n	8002056 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002052:	2301      	movs	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 020f 	bic.w	r2, r3, #15
 800205e:	490a      	ldr	r1, [pc, #40]	; (8002088 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	40022000 	.word	0x40022000

0800208c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002092:	4b31      	ldr	r3, [pc, #196]	; (8002158 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800209c:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3301      	adds	r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d015      	beq.n	80020dc <RCC_GetSysClockFreqFromPLLSource+0x50>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d839      	bhi.n	800212a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d01c      	beq.n	80020f6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d133      	bne.n	800212a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020c2:	4a26      	ldr	r2, [pc, #152]	; (800215c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	4a23      	ldr	r2, [pc, #140]	; (8002158 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80020cc:	68d2      	ldr	r2, [r2, #12]
 80020ce:	0a12      	lsrs	r2, r2, #8
 80020d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020d4:	fb02 f303 	mul.w	r3, r2, r3
 80020d8:	613b      	str	r3, [r7, #16]
      break;
 80020da:	e029      	b.n	8002130 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020dc:	4a1f      	ldr	r2, [pc, #124]	; (800215c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80020e6:	68d2      	ldr	r2, [r2, #12]
 80020e8:	0a12      	lsrs	r2, r2, #8
 80020ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	613b      	str	r3, [r7, #16]
      break;
 80020f4:	e01c      	b.n	8002130 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d107      	bne.n	8002112 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	e005      	b.n	800211e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	091b      	lsrs	r3, r3, #4
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800211e:	4a10      	ldr	r2, [pc, #64]	; (8002160 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002126:	613b      	str	r3, [r7, #16]
        break;
 8002128:	e002      	b.n	8002130 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
      break;
 800212e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0e5b      	lsrs	r3, r3, #25
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	3301      	adds	r3, #1
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800214a:	683b      	ldr	r3, [r7, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	371c      	adds	r7, #28
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	40021000 	.word	0x40021000
 800215c:	00f42400 	.word	0x00f42400
 8002160:	080059f8 	.word	0x080059f8

08002164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e049      	b.n	800220a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f841 	bl	8002212 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3304      	adds	r3, #4
 80021a0:	4619      	mov	r1, r3
 80021a2:	4610      	mov	r0, r2
 80021a4:	f000 f9f8 	bl	8002598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d001      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e04f      	b.n	80022e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a23      	ldr	r2, [pc, #140]	; (80022ec <HAL_TIM_Base_Start_IT+0xc4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01d      	beq.n	800229e <HAL_TIM_Base_Start_IT+0x76>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226a:	d018      	beq.n	800229e <HAL_TIM_Base_Start_IT+0x76>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1f      	ldr	r2, [pc, #124]	; (80022f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_TIM_Base_Start_IT+0x76>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00e      	beq.n	800229e <HAL_TIM_Base_Start_IT+0x76>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d009      	beq.n	800229e <HAL_TIM_Base_Start_IT+0x76>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <HAL_TIM_Base_Start_IT+0xd4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d004      	beq.n	800229e <HAL_TIM_Base_Start_IT+0x76>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_TIM_Base_Start_IT+0xd8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d115      	bne.n	80022ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_TIM_Base_Start_IT+0xdc>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b06      	cmp	r3, #6
 80022ae:	d015      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0xb4>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b6:	d011      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c8:	e008      	b.n	80022dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	e000      	b.n	80022de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40012c00 	.word	0x40012c00
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40000800 	.word	0x40000800
 80022f8:	40000c00 	.word	0x40000c00
 80022fc:	40013400 	.word	0x40013400
 8002300:	40014000 	.word	0x40014000
 8002304:	00010007 	.word	0x00010007

08002308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b02      	cmp	r3, #2
 800231c:	d122      	bne.n	8002364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b02      	cmp	r3, #2
 800232a:	d11b      	bne.n	8002364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0202 	mvn.w	r2, #2
 8002334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f905 	bl	800255a <HAL_TIM_IC_CaptureCallback>
 8002350:	e005      	b.n	800235e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f8f7 	bl	8002546 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f908 	bl	800256e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b04      	cmp	r3, #4
 8002370:	d122      	bne.n	80023b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b04      	cmp	r3, #4
 800237e:	d11b      	bne.n	80023b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0204 	mvn.w	r2, #4
 8002388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2202      	movs	r2, #2
 800238e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f8db 	bl	800255a <HAL_TIM_IC_CaptureCallback>
 80023a4:	e005      	b.n	80023b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f8cd 	bl	8002546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f8de 	bl	800256e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d122      	bne.n	800240c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d11b      	bne.n	800240c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0208 	mvn.w	r2, #8
 80023dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2204      	movs	r2, #4
 80023e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f8b1 	bl	800255a <HAL_TIM_IC_CaptureCallback>
 80023f8:	e005      	b.n	8002406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f8a3 	bl	8002546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f8b4 	bl	800256e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	2b10      	cmp	r3, #16
 8002418:	d122      	bne.n	8002460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b10      	cmp	r3, #16
 8002426:	d11b      	bne.n	8002460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0210 	mvn.w	r2, #16
 8002430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2208      	movs	r2, #8
 8002436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f887 	bl	800255a <HAL_TIM_IC_CaptureCallback>
 800244c:	e005      	b.n	800245a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f879 	bl	8002546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f88a 	bl	800256e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b01      	cmp	r3, #1
 800246c:	d10e      	bne.n	800248c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b01      	cmp	r3, #1
 800247a:	d107      	bne.n	800248c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0201 	mvn.w	r2, #1
 8002484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe f82e 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002496:	2b80      	cmp	r3, #128	; 0x80
 8002498:	d10e      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a4:	2b80      	cmp	r3, #128	; 0x80
 80024a6:	d107      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f914 	bl	80026e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c6:	d10e      	bne.n	80024e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d2:	2b80      	cmp	r3, #128	; 0x80
 80024d4:	d107      	bne.n	80024e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f907 	bl	80026f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f0:	2b40      	cmp	r3, #64	; 0x40
 80024f2:	d10e      	bne.n	8002512 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fe:	2b40      	cmp	r3, #64	; 0x40
 8002500:	d107      	bne.n	8002512 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800250a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f838 	bl	8002582 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b20      	cmp	r3, #32
 800251e:	d10e      	bne.n	800253e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b20      	cmp	r3, #32
 800252c:	d107      	bne.n	800253e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f06f 0220 	mvn.w	r2, #32
 8002536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f8c7 	bl	80026cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a40      	ldr	r2, [pc, #256]	; (80026ac <TIM_Base_SetConfig+0x114>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d013      	beq.n	80025d8 <TIM_Base_SetConfig+0x40>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b6:	d00f      	beq.n	80025d8 <TIM_Base_SetConfig+0x40>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a3d      	ldr	r2, [pc, #244]	; (80026b0 <TIM_Base_SetConfig+0x118>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00b      	beq.n	80025d8 <TIM_Base_SetConfig+0x40>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a3c      	ldr	r2, [pc, #240]	; (80026b4 <TIM_Base_SetConfig+0x11c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d007      	beq.n	80025d8 <TIM_Base_SetConfig+0x40>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a3b      	ldr	r2, [pc, #236]	; (80026b8 <TIM_Base_SetConfig+0x120>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d003      	beq.n	80025d8 <TIM_Base_SetConfig+0x40>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a3a      	ldr	r2, [pc, #232]	; (80026bc <TIM_Base_SetConfig+0x124>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d108      	bne.n	80025ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a2f      	ldr	r2, [pc, #188]	; (80026ac <TIM_Base_SetConfig+0x114>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01f      	beq.n	8002632 <TIM_Base_SetConfig+0x9a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f8:	d01b      	beq.n	8002632 <TIM_Base_SetConfig+0x9a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a2c      	ldr	r2, [pc, #176]	; (80026b0 <TIM_Base_SetConfig+0x118>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d017      	beq.n	8002632 <TIM_Base_SetConfig+0x9a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a2b      	ldr	r2, [pc, #172]	; (80026b4 <TIM_Base_SetConfig+0x11c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <TIM_Base_SetConfig+0x9a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a2a      	ldr	r2, [pc, #168]	; (80026b8 <TIM_Base_SetConfig+0x120>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00f      	beq.n	8002632 <TIM_Base_SetConfig+0x9a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a29      	ldr	r2, [pc, #164]	; (80026bc <TIM_Base_SetConfig+0x124>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00b      	beq.n	8002632 <TIM_Base_SetConfig+0x9a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a28      	ldr	r2, [pc, #160]	; (80026c0 <TIM_Base_SetConfig+0x128>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <TIM_Base_SetConfig+0x9a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <TIM_Base_SetConfig+0x12c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d003      	beq.n	8002632 <TIM_Base_SetConfig+0x9a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a26      	ldr	r2, [pc, #152]	; (80026c8 <TIM_Base_SetConfig+0x130>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d108      	bne.n	8002644 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a10      	ldr	r2, [pc, #64]	; (80026ac <TIM_Base_SetConfig+0x114>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00f      	beq.n	8002690 <TIM_Base_SetConfig+0xf8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a12      	ldr	r2, [pc, #72]	; (80026bc <TIM_Base_SetConfig+0x124>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00b      	beq.n	8002690 <TIM_Base_SetConfig+0xf8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <TIM_Base_SetConfig+0x128>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d007      	beq.n	8002690 <TIM_Base_SetConfig+0xf8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a10      	ldr	r2, [pc, #64]	; (80026c4 <TIM_Base_SetConfig+0x12c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d003      	beq.n	8002690 <TIM_Base_SetConfig+0xf8>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <TIM_Base_SetConfig+0x130>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d103      	bne.n	8002698 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	615a      	str	r2, [r3, #20]
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	40000400 	.word	0x40000400
 80026b4:	40000800 	.word	0x40000800
 80026b8:	40000c00 	.word	0x40000c00
 80026bc:	40013400 	.word	0x40013400
 80026c0:	40014000 	.word	0x40014000
 80026c4:	40014400 	.word	0x40014400
 80026c8:	40014800 	.word	0x40014800

080026cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <__NVIC_SetPriority>:
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	; (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0152      	lsls	r2, r2, #5
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0152      	lsls	r2, r2, #5
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <SysTick_Handler+0x1c>)
 8002762:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002764:	f002 f818 	bl	8004798 <xTaskGetSchedulerState>
 8002768:	4603      	mov	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d001      	beq.n	8002772 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800276e:	f000 fc09 	bl	8002f84 <xPortSysTickHandler>
  }
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	e000e010 	.word	0xe000e010

0800277c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002780:	2100      	movs	r1, #0
 8002782:	f06f 0004 	mvn.w	r0, #4
 8002786:	f7ff ffbf 	bl	8002708 <__NVIC_SetPriority>
#endif
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002796:	f3ef 8305 	mrs	r3, IPSR
 800279a:	603b      	str	r3, [r7, #0]
  return(result);
 800279c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80027a2:	f06f 0305 	mvn.w	r3, #5
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	e00c      	b.n	80027c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <osKernelInitialize+0x44>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d105      	bne.n	80027be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <osKernelInitialize+0x44>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	e002      	b.n	80027c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
 80027c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027c4:	687b      	ldr	r3, [r7, #4]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	200000a4 	.word	0x200000a4

080027d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027de:	f3ef 8305 	mrs	r3, IPSR
 80027e2:	603b      	str	r3, [r7, #0]
  return(result);
 80027e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80027ea:	f06f 0305 	mvn.w	r3, #5
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	e010      	b.n	8002814 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <osKernelStart+0x48>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d109      	bne.n	800280e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80027fa:	f7ff ffbf 	bl	800277c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <osKernelStart+0x48>)
 8002800:	2202      	movs	r2, #2
 8002802:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002804:	f001 fbd8 	bl	8003fb8 <vTaskStartScheduler>
      stat = osOK;
 8002808:	2300      	movs	r3, #0
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	e002      	b.n	8002814 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295
 8002812:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002814:	687b      	ldr	r3, [r7, #4]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	200000a4 	.word	0x200000a4

08002824 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800282a:	f3ef 8305 	mrs	r3, IPSR
 800282e:	603b      	str	r3, [r7, #0]
  return(result);
 8002830:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8002836:	f001 fcc1 	bl	80041bc <xTaskGetTickCountFromISR>
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	e002      	b.n	8002844 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800283e:	f001 fcad 	bl	800419c <xTaskGetTickCount>
 8002842:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8002844:	687b      	ldr	r3, [r7, #4]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800285a:	f3ef 8305 	mrs	r3, IPSR
 800285e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002860:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <osThreadSuspend+0x20>
    stat = osErrorISR;
 8002866:	f06f 0305 	mvn.w	r3, #5
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	e00b      	b.n	8002886 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d103      	bne.n	800287c <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8002874:	f06f 0303 	mvn.w	r3, #3
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	e004      	b.n	8002886 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8002880:	6938      	ldr	r0, [r7, #16]
 8002882:	f001 fabd 	bl	8003e00 <vTaskSuspend>
  }

  return (stat);
 8002886:	697b      	ldr	r3, [r7, #20]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800289c:	f3ef 8305 	mrs	r3, IPSR
 80028a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80028a2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <osThreadResume+0x20>
    stat = osErrorISR;
 80028a8:	f06f 0305 	mvn.w	r3, #5
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e00b      	b.n	80028c8 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d103      	bne.n	80028be <osThreadResume+0x2e>
    stat = osErrorParameter;
 80028b6:	f06f 0303 	mvn.w	r3, #3
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	e004      	b.n	80028c8 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80028c2:	6938      	ldr	r0, [r7, #16]
 80028c4:	f001 fb2a 	bl	8003f1c <vTaskResume>
  }

  return (stat);
 80028c8:	697b      	ldr	r3, [r7, #20]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028da:	f3ef 8305 	mrs	r3, IPSR
 80028de:	60bb      	str	r3, [r7, #8]
  return(result);
 80028e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <osDelay+0x1c>
    stat = osErrorISR;
 80028e6:	f06f 0305 	mvn.w	r3, #5
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e007      	b.n	80028fe <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <osDelay+0x2c>
      vTaskDelay(ticks);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f001 fa5d 	bl	8003db8 <vTaskDelay>
    }
  }

  return (stat);
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a07      	ldr	r2, [pc, #28]	; (8002934 <vApplicationGetIdleTaskMemory+0x2c>)
 8002918:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4a06      	ldr	r2, [pc, #24]	; (8002938 <vApplicationGetIdleTaskMemory+0x30>)
 800291e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002926:	601a      	str	r2, [r3, #0]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	200000a8 	.word	0x200000a8
 8002938:	20000104 	.word	0x20000104

0800293c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a07      	ldr	r2, [pc, #28]	; (8002968 <vApplicationGetTimerTaskMemory+0x2c>)
 800294c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4a06      	ldr	r2, [pc, #24]	; (800296c <vApplicationGetTimerTaskMemory+0x30>)
 8002952:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800295a:	601a      	str	r2, [r3, #0]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	20000904 	.word	0x20000904
 800296c:	20000960 	.word	0x20000960

08002970 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800297c:	f001 fb72 	bl	8004064 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002980:	4b4f      	ldr	r3, [pc, #316]	; (8002ac0 <pvPortMalloc+0x150>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002988:	f000 f8f8 	bl	8002b7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800298c:	4b4d      	ldr	r3, [pc, #308]	; (8002ac4 <pvPortMalloc+0x154>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	f040 8083 	bne.w	8002aa0 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d015      	beq.n	80029cc <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 80029a0:	2208      	movs	r2, #8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00c      	beq.n	80029cc <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f023 0307 	bic.w	r3, r3, #7
 80029b8:	3308      	adds	r3, #8
 80029ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <pvPortMalloc+0x5c>
 80029c6:	f000 fbe7 	bl	8003198 <ulSetInterruptMask>
 80029ca:	e7fe      	b.n	80029ca <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d066      	beq.n	8002aa0 <pvPortMalloc+0x130>
 80029d2:	4b3d      	ldr	r3, [pc, #244]	; (8002ac8 <pvPortMalloc+0x158>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d861      	bhi.n	8002aa0 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80029dc:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <pvPortMalloc+0x15c>)
 80029de:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80029e0:	4b3a      	ldr	r3, [pc, #232]	; (8002acc <pvPortMalloc+0x15c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029e6:	e004      	b.n	80029f2 <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d903      	bls.n	8002a04 <pvPortMalloc+0x94>
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f1      	bne.n	80029e8 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002a04:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <pvPortMalloc+0x150>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d048      	beq.n	8002aa0 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	4413      	add	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	1ad2      	subs	r2, r2, r3
 8002a28:	2308      	movs	r3, #8
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d917      	bls.n	8002a60 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <pvPortMalloc+0xd8>
 8002a42:	f000 fba9 	bl	8003198 <ulSetInterruptMask>
 8002a46:	e7fe      	b.n	8002a46 <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	1ad2      	subs	r2, r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a5a:	68b8      	ldr	r0, [r7, #8]
 8002a5c:	f000 f8f0 	bl	8002c40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <pvPortMalloc+0x158>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <pvPortMalloc+0x158>)
 8002a6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a6e:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <pvPortMalloc+0x158>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <pvPortMalloc+0x160>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d203      	bcs.n	8002a82 <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <pvPortMalloc+0x158>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <pvPortMalloc+0x160>)
 8002a80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <pvPortMalloc+0x154>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <pvPortMalloc+0x164>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ad4 <pvPortMalloc+0x164>)
 8002a9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002aa0:	f001 faee 	bl	8004080 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <pvPortMalloc+0x144>
 8002aae:	f000 fb73 	bl	8003198 <ulSetInterruptMask>
 8002ab2:	e7fe      	b.n	8002ab2 <pvPortMalloc+0x142>
	return pvReturn;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20003920 	.word	0x20003920
 8002ac4:	20003934 	.word	0x20003934
 8002ac8:	20003924 	.word	0x20003924
 8002acc:	20003918 	.word	0x20003918
 8002ad0:	20003928 	.word	0x20003928
 8002ad4:	2000392c 	.word	0x2000392c

08002ad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d03d      	beq.n	8002b66 <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002aea:	2308      	movs	r3, #8
 8002aec:	425b      	negs	r3, r3
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4413      	add	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <vPortFree+0x98>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <vPortFree+0x34>
 8002b06:	f000 fb47 	bl	8003198 <ulSetInterruptMask>
 8002b0a:	e7fe      	b.n	8002b0a <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <vPortFree+0x42>
 8002b14:	f000 fb40 	bl	8003198 <ulSetInterruptMask>
 8002b18:	e7fe      	b.n	8002b18 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <vPortFree+0x98>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01e      	beq.n	8002b66 <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d11a      	bne.n	8002b66 <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <vPortFree+0x98>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002b40:	f001 fa90 	bl	8004064 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <vPortFree+0x9c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <vPortFree+0x9c>)
 8002b50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b52:	68b8      	ldr	r0, [r7, #8]
 8002b54:	f000 f874 	bl	8002c40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002b58:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <vPortFree+0xa0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	4a06      	ldr	r2, [pc, #24]	; (8002b78 <vPortFree+0xa0>)
 8002b60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002b62:	f001 fa8d 	bl	8004080 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20003934 	.word	0x20003934
 8002b74:	20003924 	.word	0x20003924
 8002b78:	20003930 	.word	0x20003930

08002b7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b82:	f641 73b8 	movw	r3, #8120	; 0x1fb8
 8002b86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002b88:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <prvHeapInit+0xac>)
 8002b8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00c      	beq.n	8002bb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3307      	adds	r3, #7
 8002b9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0307 	bic.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	4a1f      	ldr	r2, [pc, #124]	; (8002c28 <prvHeapInit+0xac>)
 8002bac:	4413      	add	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002bb4:	4a1d      	ldr	r2, [pc, #116]	; (8002c2c <prvHeapInit+0xb0>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002bba:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <prvHeapInit+0xb0>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002bc8:	2208      	movs	r2, #8
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0307 	bic.w	r3, r3, #7
 8002bd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <prvHeapInit+0xb4>)
 8002bdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002bde:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <prvHeapInit+0xb4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <prvHeapInit+0xb4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	1ad2      	subs	r2, r2, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <prvHeapInit+0xb4>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <prvHeapInit+0xb8>)
 8002c0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4a09      	ldr	r2, [pc, #36]	; (8002c38 <prvHeapInit+0xbc>)
 8002c12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <prvHeapInit+0xc0>)
 8002c16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c1a:	601a      	str	r2, [r3, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	20001960 	.word	0x20001960
 8002c2c:	20003918 	.word	0x20003918
 8002c30:	20003920 	.word	0x20003920
 8002c34:	20003928 	.word	0x20003928
 8002c38:	20003924 	.word	0x20003924
 8002c3c:	20003934 	.word	0x20003934

08002c40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c48:	4b28      	ldr	r3, [pc, #160]	; (8002cec <prvInsertBlockIntoFreeList+0xac>)
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e002      	b.n	8002c54 <prvInsertBlockIntoFreeList+0x14>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d8f7      	bhi.n	8002c4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4413      	add	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d108      	bne.n	8002c82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	441a      	add	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d118      	bne.n	8002cc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <prvInsertBlockIntoFreeList+0xb0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d00d      	beq.n	8002cbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	441a      	add	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e008      	b.n	8002cd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <prvInsertBlockIntoFreeList+0xb0>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e003      	b.n	8002cd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d002      	beq.n	8002cde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20003918 	.word	0x20003918
 8002cf0:	20003920 	.word	0x20003920

08002cf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f103 0208 	add.w	r2, r3, #8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f103 0208 	add.w	r2, r3, #8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f103 0208 	add.w	r2, r3, #8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	601a      	str	r2, [r3, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d96:	b480      	push	{r7}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d103      	bne.n	8002db6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e00c      	b.n	8002dd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3308      	adds	r3, #8
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	e002      	b.n	8002dc4 <vListInsert+0x2e>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d2f6      	bcs.n	8002dbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	601a      	str	r2, [r3, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6892      	ldr	r2, [r2, #8]
 8002e1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6852      	ldr	r2, [r2, #4]
 8002e28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d103      	bne.n	8002e3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	1e5a      	subs	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <vPortSetupTimerInterrupt+0x34>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <vPortSetupTimerInterrupt+0x38>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <vPortSetupTimerInterrupt+0x3c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <vPortSetupTimerInterrupt+0x40>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	099b      	lsrs	r3, r3, #6
 8002e78:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <vPortSetupTimerInterrupt+0x44>)
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <vPortSetupTimerInterrupt+0x34>)
 8002e80:	2207      	movs	r2, #7
 8002e82:	601a      	str	r2, [r3, #0]
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e010 	.word	0xe000e010
 8002e94:	e000e018 	.word	0xe000e018
 8002e98:	2000000c 	.word	0x2000000c
 8002e9c:	10624dd3 	.word	0x10624dd3
 8002ea0:	e000e014 	.word	0xe000e014

08002ea4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <prvTaskExitError+0x30>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d002      	beq.n	8002ebe <prvTaskExitError+0x1a>
 8002eb8:	f000 f96e 	bl	8003198 <ulSetInterruptMask>
 8002ebc:	e7fe      	b.n	8002ebc <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 8002ebe:	f000 f96b 	bl	8003198 <ulSetInterruptMask>

	while( ulDummy == 0 )
 8002ec2:	bf00      	nop
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0fc      	beq.n	8002ec4 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 8002eca:	bf00      	nop
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000018 	.word	0x20000018

08002ed8 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if( configENABLE_FPU == 1 )
	static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
	{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
		#endif /* configENABLE_TRUSTZONE */

		/* CP10 = 11 ==> Full access to FPU i.e. both privileged and
		 * unprivileged code should be able to access FPU. CP11 should be
		 * programmed to the same value as CP10. */
		*( portCPACR ) |=	(	( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <prvSetupFPU+0x28>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a07      	ldr	r2, [pc, #28]	; (8002f00 <prvSetupFPU+0x28>)
 8002ee2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ee6:	6013      	str	r3, [r2, #0]
							);

		/* ASPEN = 1 ==> Hardware should automatically preserve floating point
		 * context on exception entry and restore on exception return.
		 * LSPEN = 1 ==> Enable lazy context save of FP state. */
		*( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <prvSetupFPU+0x2c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a05      	ldr	r2, [pc, #20]	; (8002f04 <prvSetupFPU+0x2c>)
 8002eee:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002ef2:	6013      	str	r3, [r2, #0]
	}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000ed88 	.word	0xe000ed88
 8002f04:	e000ef34 	.word	0xe000ef34

08002f08 <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <vPortYield+0x20>)
 8002f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f12:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002f14:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002f18:	f3bf 8f6f 	isb	sy
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000ed04 	.word	0xe000ed04

08002f2c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8002f30:	f000 f932 	bl	8003198 <ulSetInterruptMask>
	ulCriticalNesting++;
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <vPortEnterCritical+0x20>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	4a04      	ldr	r2, [pc, #16]	; (8002f4c <vPortEnterCritical+0x20>)
 8002f3c:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002f3e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002f42:	f3bf 8f6f 	isb	sy
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000018 	.word	0x20000018

08002f50 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 8002f54:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <vPortExitCritical+0x30>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <vPortExitCritical+0x12>
 8002f5c:	f000 f91c 	bl	8003198 <ulSetInterruptMask>
 8002f60:	e7fe      	b.n	8002f60 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <vPortExitCritical+0x30>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	4a05      	ldr	r2, [pc, #20]	; (8002f80 <vPortExitCritical+0x30>)
 8002f6a:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <vPortExitCritical+0x30>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 8002f74:	2000      	movs	r0, #0
 8002f76:	f000 f91c 	bl	80031b2 <vClearInterruptMask>
	}
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000018 	.word	0x20000018

08002f84 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f8a:	f000 f905 	bl	8003198 <ulSetInterruptMask>
 8002f8e:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002f90:	f001 f926 	bl	80041e0 <xTaskIncrementTick>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <xPortSysTickHandler+0x2c>)
 8002f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa0:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f905 	bl	80031b2 <vClearInterruptMask>
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	e000ed04 	.word	0xe000ed04

08002fb4 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	3b02      	subs	r3, #2
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 8002fca:	7afb      	ldrb	r3, [r7, #11]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d104      	bne.n	8002fda <vPortSVCHandler_C+0x26>
			#endif /* configENABLE_TRUSTZONE */

			#if( configENABLE_FPU == 1 )
			{
				/* Setup the Floating Point Unit (FPU). */
				prvSetupFPU();
 8002fd0:	f7ff ff82 	bl	8002ed8 <prvSetupFPU>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8002fd4:	f000 f8b4 	bl	8003140 <vRestoreContextOfFirstTask>
		}
		break;
 8002fd8:	e002      	b.n	8002fe0 <vPortSVCHandler_C+0x2c>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8002fda:	f000 f8dd 	bl	8003198 <ulSetInterruptMask>
 8002fde:	e7fe      	b.n	8002fde <vPortSVCHandler_C+0x2a>
		}
	}
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3b04      	subs	r3, #4
 8002ffa:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003002:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3b04      	subs	r3, #4
 8003008:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3b04      	subs	r3, #4
 8003014:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003016:	4a38      	ldr	r2, [pc, #224]	; (80030f8 <pxPortInitialiseStack+0x110>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3b04      	subs	r3, #4
 8003020:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8003028:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3b04      	subs	r3, #4
 800302e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8003036:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3b04      	subs	r3, #4
 800303c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8003044:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3b04      	subs	r3, #4
 800304a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8003052:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	3b04      	subs	r3, #4
 8003058:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3b04      	subs	r3, #4
 8003064:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800306c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3b04      	subs	r3, #4
 8003072:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800307a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3b04      	subs	r3, #4
 8003080:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8003088:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3b04      	subs	r3, #4
 800308e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8003096:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3b04      	subs	r3, #4
 800309c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 80030a4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3b04      	subs	r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 80030b2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	3b04      	subs	r3, #4
 80030b8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 80030c0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3b04      	subs	r3, #4
 80030c6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 80030ce:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3b04      	subs	r3, #4
 80030d4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f06f 0243 	mvn.w	r2, #67	; 0x43
 80030dc:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3b04      	subs	r3, #4
 80030e2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 80030ea:	68fb      	ldr	r3, [r7, #12]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	08002ea5 	.word	0x08002ea5

080030fc <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <xPortStartScheduler+0x38>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0b      	ldr	r2, [pc, #44]	; (8003134 <xPortStartScheduler+0x38>)
 8003106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800310a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <xPortStartScheduler+0x38>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a08      	ldr	r2, [pc, #32]	; (8003134 <xPortStartScheduler+0x38>)
 8003112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003116:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 8003118:	f7ff fea0 	bl	8002e5c <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <xPortStartScheduler+0x3c>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 8003122:	f000 f825 	bl	8003170 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 8003126:	f001 f90d 	bl	8004344 <vTaskSwitchContext>
	prvTaskExitError();
 800312a:	f7ff febb 	bl	8002ea4 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	e000ed20 	.word	0xe000ed20
 8003138:	20000018 	.word	0x20000018
 800313c:	00000000 	.word	0x00000000

08003140 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8003140:	4a07      	ldr	r2, [pc, #28]	; (8003160 <pxCurrentTCBConst2>)
 8003142:	6811      	ldr	r1, [r2, #0]
 8003144:	6808      	ldr	r0, [r1, #0]
 8003146:	c806      	ldmia	r0!, {r1, r2}
 8003148:	f381 880b 	msr	PSPLIM, r1
 800314c:	2102      	movs	r1, #2
 800314e:	f381 8814 	msr	CONTROL, r1
 8003152:	3020      	adds	r0, #32
 8003154:	f380 8809 	msr	PSP, r0
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	4710      	bx	r2
 800315e:	bf00      	nop

08003160 <pxCurrentTCBConst2>:
 8003160:	20003938 	.word	0x20003938
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
	...

08003170 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8003170:	4807      	ldr	r0, [pc, #28]	; (8003190 <xVTORConst>)
 8003172:	6800      	ldr	r0, [r0, #0]
 8003174:	6800      	ldr	r0, [r0, #0]
 8003176:	f380 8808 	msr	MSP, r0
 800317a:	b662      	cpsie	i
 800317c:	b661      	cpsie	f
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	df02      	svc	2
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	f3af 8000 	nop.w

08003190 <xVTORConst>:
 8003190:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop

08003198 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8003198:	f3ef 8011 	mrs	r0, BASEPRI
 800319c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 80031a0:	f381 8811 	msr	BASEPRI, r1
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031ae:	bf00      	nop
 80031b0:	4618      	mov	r0, r3

080031b2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80031b2:	f380 8811 	msr	BASEPRI, r0
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 80031c0:	bf00      	nop
	...

080031d0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80031d0:	f3ef 8009 	mrs	r0, PSP
 80031d4:	f01e 0f10 	tst.w	lr, #16
 80031d8:	bf08      	it	eq
 80031da:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80031de:	f3ef 820b 	mrs	r2, PSPLIM
 80031e2:	4673      	mov	r3, lr
 80031e4:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80031e8:	4a11      	ldr	r2, [pc, #68]	; (8003230 <pxCurrentTCBConst>)
 80031ea:	6811      	ldr	r1, [r2, #0]
 80031ec:	6008      	str	r0, [r1, #0]
 80031ee:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 80031f2:	f380 8811 	msr	BASEPRI, r0
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f001 f8a1 	bl	8004344 <vTaskSwitchContext>
 8003202:	f04f 0000 	mov.w	r0, #0
 8003206:	f380 8811 	msr	BASEPRI, r0
 800320a:	4a09      	ldr	r2, [pc, #36]	; (8003230 <pxCurrentTCBConst>)
 800320c:	6811      	ldr	r1, [r2, #0]
 800320e:	6808      	ldr	r0, [r1, #0]
 8003210:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8003214:	f013 0f10 	tst.w	r3, #16
 8003218:	bf08      	it	eq
 800321a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800321e:	f382 880b 	msr	PSPLIM, r2
 8003222:	f380 8809 	msr	PSP, r0
 8003226:	4718      	bx	r3
 8003228:	f3af 8000 	nop.w
 800322c:	f3af 8000 	nop.w

08003230 <pxCurrentTCBConst>:
 8003230:	20003938 	.word	0x20003938
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
	...

08003240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8003240:	f01e 0f04 	tst.w	lr, #4
 8003244:	bf0c      	ite	eq
 8003246:	f3ef 8008 	mrseq	r0, MSP
 800324a:	f3ef 8009 	mrsne	r0, PSP
 800324e:	4904      	ldr	r1, [pc, #16]	; (8003260 <svchandler_address_const>)
 8003250:	4708      	bx	r1
 8003252:	bf00      	nop
 8003254:	f3af 8000 	nop.w
 8003258:	f3af 8000 	nop.w
 800325c:	f3af 8000 	nop.w

08003260 <svchandler_address_const>:
 8003260:	08002fb5 	.word	0x08002fb5
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop

08003268 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <xQueueGenericReset+0x1a>
 800327c:	f7ff ff8c 	bl	8003198 <ulSetInterruptMask>
 8003280:	e7fe      	b.n	8003280 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8003282:	f7ff fe53 	bl	8002f2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	68f9      	ldr	r1, [r7, #12]
 8003290:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003292:	fb01 f303 	mul.w	r3, r1, r3
 8003296:	441a      	add	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	3b01      	subs	r3, #1
 80032b4:	68f9      	ldr	r1, [r7, #12]
 80032b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	441a      	add	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	22ff      	movs	r2, #255	; 0xff
 80032c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	22ff      	movs	r2, #255	; 0xff
 80032ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10e      	bne.n	80032f6 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d014      	beq.n	800330a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3310      	adds	r3, #16
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 f8c1 	bl	800446c <xTaskRemoveFromEventList>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00c      	beq.n	800330a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032f0:	f7ff fe0a 	bl	8002f08 <vPortYield>
 80032f4:	e009      	b.n	800330a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3310      	adds	r3, #16
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fcfa 	bl	8002cf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3324      	adds	r3, #36	; 0x24
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fcf5 	bl	8002cf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800330a:	f7ff fe21 	bl	8002f50 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800330e:	2301      	movs	r3, #1
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d102      	bne.n	8003332 <xQueueGenericCreateStatic+0x1a>
 800332c:	f7ff ff34 	bl	8003198 <ulSetInterruptMask>
 8003330:	e7fe      	b.n	8003330 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <xQueueGenericCreateStatic+0x26>
 8003338:	f7ff ff2e 	bl	8003198 <ulSetInterruptMask>
 800333c:	e7fe      	b.n	800333c <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <xQueueGenericCreateStatic+0x32>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <xQueueGenericCreateStatic+0x36>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <xQueueGenericCreateStatic+0x38>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <xQueueGenericCreateStatic+0x42>
 8003354:	f7ff ff20 	bl	8003198 <ulSetInterruptMask>
 8003358:	e7fe      	b.n	8003358 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <xQueueGenericCreateStatic+0x4e>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <xQueueGenericCreateStatic+0x52>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <xQueueGenericCreateStatic+0x54>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <xQueueGenericCreateStatic+0x5e>
 8003370:	f7ff ff12 	bl	8003198 <ulSetInterruptMask>
 8003374:	e7fe      	b.n	8003374 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003376:	2350      	movs	r3, #80	; 0x50
 8003378:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b50      	cmp	r3, #80	; 0x50
 800337e:	d002      	beq.n	8003386 <xQueueGenericCreateStatic+0x6e>
 8003380:	f7ff ff0a 	bl	8003198 <ulSetInterruptMask>
 8003384:	e7fe      	b.n	8003384 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003386:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00d      	beq.n	80033ae <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800339a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f805 	bl	80033b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033ae:	697b      	ldr	r3, [r7, #20]
	}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d103      	bne.n	80033d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e002      	b.n	80033da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033e6:	2101      	movs	r1, #1
 80033e8:	69b8      	ldr	r0, [r7, #24]
 80033ea:	f7ff ff3d 	bl	8003268 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b08a      	sub	sp, #40	; 0x28
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800340c:	2300      	movs	r3, #0
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d102      	bne.n	8003420 <xQueueGenericSend+0x22>
 800341a:	f7ff febd 	bl	8003198 <ulSetInterruptMask>
 800341e:	e7fe      	b.n	800341e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <xQueueGenericSend+0x30>
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <xQueueGenericSend+0x34>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <xQueueGenericSend+0x36>
 8003432:	2300      	movs	r3, #0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <xQueueGenericSend+0x40>
 8003438:	f7ff feae 	bl	8003198 <ulSetInterruptMask>
 800343c:	e7fe      	b.n	800343c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d103      	bne.n	800344c <xQueueGenericSend+0x4e>
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <xQueueGenericSend+0x52>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <xQueueGenericSend+0x54>
 8003450:	2300      	movs	r3, #0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <xQueueGenericSend+0x5e>
 8003456:	f7ff fe9f 	bl	8003198 <ulSetInterruptMask>
 800345a:	e7fe      	b.n	800345a <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800345c:	f001 f99c 	bl	8004798 <xTaskGetSchedulerState>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <xQueueGenericSend+0x6e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <xQueueGenericSend+0x72>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <xQueueGenericSend+0x74>
 8003470:	2300      	movs	r3, #0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <xQueueGenericSend+0x7e>
 8003476:	f7ff fe8f 	bl	8003198 <ulSetInterruptMask>
 800347a:	e7fe      	b.n	800347a <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800347c:	f7ff fd56 	bl	8002f2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	429a      	cmp	r2, r3
 800348a:	d302      	bcc.n	8003492 <xQueueGenericSend+0x94>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d11d      	bne.n	80034ce <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	6a38      	ldr	r0, [r7, #32]
 8003498:	f000 f9a4 	bl	80037e4 <prvCopyDataToQueue>
 800349c:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	3324      	adds	r3, #36	; 0x24
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 ffde 	bl	800446c <xTaskRemoveFromEventList>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034b6:	f7ff fd27 	bl	8002f08 <vPortYield>
 80034ba:	e004      	b.n	80034c6 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034c2:	f7ff fd21 	bl	8002f08 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034c6:	f7ff fd43 	bl	8002f50 <vPortExitCritical>
				return pdPASS;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e05c      	b.n	8003588 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034d4:	f7ff fd3c 	bl	8002f50 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	e055      	b.n	8003588 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 f81c 	bl	8004524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034ec:	2301      	movs	r3, #1
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034f0:	f7ff fd2e 	bl	8002f50 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034f4:	f000 fdb6 	bl	8004064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034f8:	f7ff fd18 	bl	8002f2c <vPortEnterCritical>
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003502:	b25b      	sxtb	r3, r3
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d103      	bne.n	8003512 <xQueueGenericSend+0x114>
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003518:	b25b      	sxtb	r3, r3
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d103      	bne.n	8003528 <xQueueGenericSend+0x12a>
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003528:	f7ff fd12 	bl	8002f50 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800352c:	1d3a      	adds	r2, r7, #4
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f001 f80b 	bl	8004550 <xTaskCheckForTimeOut>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d11d      	bne.n	800357c <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003540:	6a38      	ldr	r0, [r7, #32]
 8003542:	f000 fa47 	bl	80039d4 <prvIsQueueFull>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d011      	beq.n	8003570 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	3310      	adds	r3, #16
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f000 ff49 	bl	80043ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800355a:	6a38      	ldr	r0, [r7, #32]
 800355c:	f000 f9d2 	bl	8003904 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003560:	f000 fd8e 	bl	8004080 <xTaskResumeAll>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d188      	bne.n	800347c <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 800356a:	f7ff fccd 	bl	8002f08 <vPortYield>
 800356e:	e785      	b.n	800347c <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003570:	6a38      	ldr	r0, [r7, #32]
 8003572:	f000 f9c7 	bl	8003904 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003576:	f000 fd83 	bl	8004080 <xTaskResumeAll>
 800357a:	e77f      	b.n	800347c <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800357c:	6a38      	ldr	r0, [r7, #32]
 800357e:	f000 f9c1 	bl	8003904 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003582:	f000 fd7d 	bl	8004080 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003586:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003588:	4618      	mov	r0, r3
 800358a:	3728      	adds	r7, #40	; 0x28
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <xQueueGenericSendFromISR+0x1e>
 80035a8:	f7ff fdf6 	bl	8003198 <ulSetInterruptMask>
 80035ac:	e7fe      	b.n	80035ac <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d103      	bne.n	80035bc <xQueueGenericSendFromISR+0x2c>
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <xQueueGenericSendFromISR+0x30>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <xQueueGenericSendFromISR+0x32>
 80035c0:	2300      	movs	r3, #0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d102      	bne.n	80035cc <xQueueGenericSendFromISR+0x3c>
 80035c6:	f7ff fde7 	bl	8003198 <ulSetInterruptMask>
 80035ca:	e7fe      	b.n	80035ca <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d103      	bne.n	80035da <xQueueGenericSendFromISR+0x4a>
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <xQueueGenericSendFromISR+0x4e>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <xQueueGenericSendFromISR+0x50>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d102      	bne.n	80035ea <xQueueGenericSendFromISR+0x5a>
 80035e4:	f7ff fdd8 	bl	8003198 <ulSetInterruptMask>
 80035e8:	e7fe      	b.n	80035e8 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035ea:	f7ff fdd5 	bl	8003198 <ulSetInterruptMask>
 80035ee:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d302      	bcc.n	8003602 <xQueueGenericSendFromISR+0x72>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d12d      	bne.n	800365e <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003608:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	6a38      	ldr	r0, [r7, #32]
 8003616:	f000 f8e5 	bl	80037e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800361a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003622:	d112      	bne.n	800364a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	2b00      	cmp	r3, #0
 800362a:	d015      	beq.n	8003658 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	3324      	adds	r3, #36	; 0x24
 8003630:	4618      	mov	r0, r3
 8003632:	f000 ff1b 	bl	800446c <xTaskRemoveFromEventList>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00d      	beq.n	8003658 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e006      	b.n	8003658 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800364a:	7efb      	ldrb	r3, [r7, #27]
 800364c:	3301      	adds	r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	b25a      	sxtb	r2, r3
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003658:	2301      	movs	r3, #1
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800365c:	e001      	b.n	8003662 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003662:	69f8      	ldr	r0, [r7, #28]
 8003664:	f7ff fda5 	bl	80031b2 <vClearInterruptMask>

	return xReturn;
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800366a:	4618      	mov	r0, r3
 800366c:	3728      	adds	r7, #40	; 0x28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b08a      	sub	sp, #40	; 0x28
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800367e:	2300      	movs	r3, #0
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <xQueueReceive+0x20>
 800368c:	f7ff fd84 	bl	8003198 <ulSetInterruptMask>
 8003690:	e7fe      	b.n	8003690 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d103      	bne.n	80036a0 <xQueueReceive+0x2e>
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <xQueueReceive+0x32>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <xQueueReceive+0x34>
 80036a4:	2300      	movs	r3, #0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d102      	bne.n	80036b0 <xQueueReceive+0x3e>
 80036aa:	f7ff fd75 	bl	8003198 <ulSetInterruptMask>
 80036ae:	e7fe      	b.n	80036ae <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036b0:	f001 f872 	bl	8004798 <xTaskGetSchedulerState>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <xQueueReceive+0x4e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <xQueueReceive+0x52>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <xQueueReceive+0x54>
 80036c4:	2300      	movs	r3, #0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <xQueueReceive+0x5e>
 80036ca:	f7ff fd65 	bl	8003198 <ulSetInterruptMask>
 80036ce:	e7fe      	b.n	80036ce <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036d0:	f7ff fc2c 	bl	8002f2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d019      	beq.n	8003714 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	6a38      	ldr	r0, [r7, #32]
 80036e4:	f000 f8e8 	bl	80038b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	1e5a      	subs	r2, r3, #1
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d009      	beq.n	800370c <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	3310      	adds	r3, #16
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 feb5 	bl	800446c <xTaskRemoveFromEventList>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003708:	f7ff fbfe 	bl	8002f08 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800370c:	f7ff fc20 	bl	8002f50 <vPortExitCritical>
				return pdPASS;
 8003710:	2301      	movs	r3, #1
 8003712:	e063      	b.n	80037dc <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800371a:	f7ff fc19 	bl	8002f50 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800371e:	2300      	movs	r3, #0
 8003720:	e05c      	b.n	80037dc <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	2b00      	cmp	r3, #0
 8003726:	d106      	bne.n	8003736 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fef9 	bl	8004524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003732:	2301      	movs	r3, #1
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003736:	f7ff fc0b 	bl	8002f50 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800373a:	f000 fc93 	bl	8004064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800373e:	f7ff fbf5 	bl	8002f2c <vPortEnterCritical>
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003748:	b25b      	sxtb	r3, r3
 800374a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374e:	d103      	bne.n	8003758 <xQueueReceive+0xe6>
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800375e:	b25b      	sxtb	r3, r3
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d103      	bne.n	800376e <xQueueReceive+0xfc>
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800376e:	f7ff fbef 	bl	8002f50 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003772:	1d3a      	adds	r2, r7, #4
 8003774:	f107 0314 	add.w	r3, r7, #20
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fee8 	bl	8004550 <xTaskCheckForTimeOut>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d11d      	bne.n	80037c2 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003786:	6a38      	ldr	r0, [r7, #32]
 8003788:	f000 f90e 	bl	80039a8 <prvIsQueueEmpty>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d011      	beq.n	80037b6 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	3324      	adds	r3, #36	; 0x24
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4611      	mov	r1, r2
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fe26 	bl	80043ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037a0:	6a38      	ldr	r0, [r7, #32]
 80037a2:	f000 f8af 	bl	8003904 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037a6:	f000 fc6b 	bl	8004080 <xTaskResumeAll>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d18f      	bne.n	80036d0 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 80037b0:	f7ff fbaa 	bl	8002f08 <vPortYield>
 80037b4:	e78c      	b.n	80036d0 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037b6:	6a38      	ldr	r0, [r7, #32]
 80037b8:	f000 f8a4 	bl	8003904 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037bc:	f000 fc60 	bl	8004080 <xTaskResumeAll>
 80037c0:	e786      	b.n	80036d0 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80037c2:	6a38      	ldr	r0, [r7, #32]
 80037c4:	f000 f89e 	bl	8003904 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037c8:	f000 fc5a 	bl	8004080 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037cc:	6a38      	ldr	r0, [r7, #32]
 80037ce:	f000 f8eb 	bl	80039a8 <prvIsQueueEmpty>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f43f af7b 	beq.w	80036d0 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80037da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3728      	adds	r7, #40	; 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d14d      	bne.n	80038a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 ffe0 	bl	80047d4 <xTaskPriorityDisinherit>
 8003814:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	e043      	b.n	80038a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d119      	bne.n	8003858 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6858      	ldr	r0, [r3, #4]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	461a      	mov	r2, r3
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	f001 fbba 	bl	8004fa8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	441a      	add	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	d32b      	bcc.n	80038a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	605a      	str	r2, [r3, #4]
 8003856:	e026      	b.n	80038a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68d8      	ldr	r0, [r3, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	461a      	mov	r2, r3
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	f001 fba0 	bl	8004fa8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	425b      	negs	r3, r3
 8003872:	441a      	add	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d207      	bcs.n	8003894 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	425b      	negs	r3, r3
 800388e:	441a      	add	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d105      	bne.n	80038a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80038ae:	697b      	ldr	r3, [r7, #20]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d018      	beq.n	80038fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	441a      	add	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d303      	bcc.n	80038ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68d9      	ldr	r1, [r3, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	461a      	mov	r2, r3
 80038f6:	6838      	ldr	r0, [r7, #0]
 80038f8:	f001 fb56 	bl	8004fa8 <memcpy>
	}
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800390c:	f7ff fb0e 	bl	8002f2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003916:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003918:	e011      	b.n	800393e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	2b00      	cmp	r3, #0
 8003920:	d012      	beq.n	8003948 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3324      	adds	r3, #36	; 0x24
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fda0 	bl	800446c <xTaskRemoveFromEventList>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003932:	f000 fe5f 	bl	80045f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	3b01      	subs	r3, #1
 800393a:	b2db      	uxtb	r3, r3
 800393c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800393e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	dce9      	bgt.n	800391a <prvUnlockQueue+0x16>
 8003946:	e000      	b.n	800394a <prvUnlockQueue+0x46>
					break;
 8003948:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	22ff      	movs	r2, #255	; 0xff
 800394e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003952:	f7ff fafd 	bl	8002f50 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003956:	f7ff fae9 	bl	8002f2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003960:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003962:	e011      	b.n	8003988 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d012      	beq.n	8003992 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3310      	adds	r3, #16
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fd7b 	bl	800446c <xTaskRemoveFromEventList>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800397c:	f000 fe3a 	bl	80045f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003980:	7bbb      	ldrb	r3, [r7, #14]
 8003982:	3b01      	subs	r3, #1
 8003984:	b2db      	uxtb	r3, r3
 8003986:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800398c:	2b00      	cmp	r3, #0
 800398e:	dce9      	bgt.n	8003964 <prvUnlockQueue+0x60>
 8003990:	e000      	b.n	8003994 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003992:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	22ff      	movs	r2, #255	; 0xff
 8003998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800399c:	f7ff fad8 	bl	8002f50 <vPortExitCritical>
}
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039b0:	f7ff fabc 	bl	8002f2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039bc:	2301      	movs	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e001      	b.n	80039c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039c6:	f7ff fac3 	bl	8002f50 <vPortExitCritical>

	return xReturn;
 80039ca:	68fb      	ldr	r3, [r7, #12]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039dc:	f7ff faa6 	bl	8002f2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d102      	bne.n	80039f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039ec:	2301      	movs	r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	e001      	b.n	80039f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039f6:	f7ff faab 	bl	8002f50 <vPortExitCritical>

	return xReturn;
 80039fa:	68fb      	ldr	r3, [r7, #12]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	e014      	b.n	8003a3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a14:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <vQueueAddToRegistry+0x50>)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10b      	bne.n	8003a38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a20:	490c      	ldr	r1, [pc, #48]	; (8003a54 <vQueueAddToRegistry+0x50>)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <vQueueAddToRegistry+0x50>)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4413      	add	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a36:	e006      	b.n	8003a46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b07      	cmp	r3, #7
 8003a42:	d9e7      	bls.n	8003a14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20003fc4 	.word	0x20003fc4

08003a58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a68:	f7ff fa60 	bl	8002f2c <vPortEnterCritical>
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a72:	b25b      	sxtb	r3, r3
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d103      	bne.n	8003a82 <vQueueWaitForMessageRestricted+0x2a>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a88:	b25b      	sxtb	r3, r3
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d103      	bne.n	8003a98 <vQueueWaitForMessageRestricted+0x40>
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a98:	f7ff fa5a 	bl	8002f50 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3324      	adds	r3, #36	; 0x24
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fcb9 	bl	8004424 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ab2:	6978      	ldr	r0, [r7, #20]
 8003ab4:	f7ff ff26 	bl	8003904 <prvUnlockQueue>
	}
 8003ab8:	bf00      	nop
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08c      	sub	sp, #48	; 0x30
 8003ac4:	af04      	add	r7, sp, #16
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <xTaskCreateStatic+0x1a>
 8003ad4:	f7ff fb60 	bl	8003198 <ulSetInterruptMask>
 8003ad8:	e7fe      	b.n	8003ad8 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <xTaskCreateStatic+0x26>
 8003ae0:	f7ff fb5a 	bl	8003198 <ulSetInterruptMask>
 8003ae4:	e7fe      	b.n	8003ae4 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ae6:	235c      	movs	r3, #92	; 0x5c
 8003ae8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b5c      	cmp	r3, #92	; 0x5c
 8003aee:	d002      	beq.n	8003af6 <xTaskCreateStatic+0x36>
 8003af0:	f7ff fb52 	bl	8003198 <ulSetInterruptMask>
 8003af4:	e7fe      	b.n	8003af4 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003af6:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01e      	beq.n	8003b3c <xTaskCreateStatic+0x7c>
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01b      	beq.n	8003b3c <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b16:	2300      	movs	r3, #0
 8003b18:	9303      	str	r3, [sp, #12]
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	9302      	str	r3, [sp, #8]
 8003b1e:	f107 0318 	add.w	r3, r7, #24
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f850 	bl	8003bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b34:	69f8      	ldr	r0, [r7, #28]
 8003b36:	f000 f8d7 	bl	8003ce8 <prvAddNewTaskToReadyList>
 8003b3a:	e001      	b.n	8003b40 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b40:	69bb      	ldr	r3, [r7, #24]
	}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3720      	adds	r7, #32
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b08c      	sub	sp, #48	; 0x30
 8003b4e:	af04      	add	r7, sp, #16
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	4613      	mov	r3, r2
 8003b58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe ff06 	bl	8002970 <pvPortMalloc>
 8003b64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00e      	beq.n	8003b8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b6c:	205c      	movs	r0, #92	; 0x5c
 8003b6e:	f7fe feff 	bl	8002970 <pvPortMalloc>
 8003b72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b80:	e005      	b.n	8003b8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b82:	6978      	ldr	r0, [r7, #20]
 8003b84:	f7fe ffa8 	bl	8002ad8 <vPortFree>
 8003b88:	e001      	b.n	8003b8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d017      	beq.n	8003bc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b9c:	88fa      	ldrh	r2, [r7, #6]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	9303      	str	r3, [sp, #12]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	9302      	str	r3, [sp, #8]
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f80e 	bl	8003bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bb8:	69f8      	ldr	r0, [r7, #28]
 8003bba:	f000 f895 	bl	8003ce8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	e002      	b.n	8003bca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bca:	69bb      	ldr	r3, [r7, #24]
	}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	461a      	mov	r2, r3
 8003bec:	21a5      	movs	r1, #165	; 0xa5
 8003bee:	f001 f9e8 	bl	8004fc2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f023 0307 	bic.w	r3, r3, #7
 8003c0a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <prvInitialiseNewTask+0x48>
 8003c16:	f7ff fabf 	bl	8003198 <ulSetInterruptMask>
 8003c1a:	e7fe      	b.n	8003c1a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01f      	beq.n	8003c62 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	e012      	b.n	8003c4e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	7819      	ldrb	r1, [r3, #0]
 8003c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	4413      	add	r3, r2
 8003c36:	3334      	adds	r3, #52	; 0x34
 8003c38:	460a      	mov	r2, r1
 8003c3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	4413      	add	r3, r2
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d006      	beq.n	8003c56 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b0f      	cmp	r3, #15
 8003c52:	d9e9      	bls.n	8003c28 <prvInitialiseNewTask+0x54>
 8003c54:	e000      	b.n	8003c58 <prvInitialiseNewTask+0x84>
			{
				break;
 8003c56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c60:	e003      	b.n	8003c6a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	2b37      	cmp	r3, #55	; 0x37
 8003c6e:	d901      	bls.n	8003c74 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c70:	2337      	movs	r3, #55	; 0x37
 8003c72:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	6a3a      	ldr	r2, [r7, #32]
 8003c78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	6a3a      	ldr	r2, [r7, #32]
 8003c7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c82:	2200      	movs	r2, #0
 8003c84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff f852 	bl	8002d34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	3318      	adds	r3, #24
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff f84d 	bl	8002d34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	6938      	ldr	r0, [r7, #16]
 8003cc8:	f7ff f98e 	bl	8002fe8 <pxPortInitialiseStack>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cde:	bf00      	nop
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cf0:	f7ff f91c 	bl	8002f2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cf4:	4b2a      	ldr	r3, [pc, #168]	; (8003da0 <prvAddNewTaskToReadyList+0xb8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	4a29      	ldr	r2, [pc, #164]	; (8003da0 <prvAddNewTaskToReadyList+0xb8>)
 8003cfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cfe:	4b29      	ldr	r3, [pc, #164]	; (8003da4 <prvAddNewTaskToReadyList+0xbc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d06:	4a27      	ldr	r2, [pc, #156]	; (8003da4 <prvAddNewTaskToReadyList+0xbc>)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d0c:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <prvAddNewTaskToReadyList+0xb8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d110      	bne.n	8003d36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d14:	f000 fc8a 	bl	800462c <prvInitialiseTaskLists>
 8003d18:	e00d      	b.n	8003d36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d1a:	4b23      	ldr	r3, [pc, #140]	; (8003da8 <prvAddNewTaskToReadyList+0xc0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <prvAddNewTaskToReadyList+0xbc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d802      	bhi.n	8003d36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d30:	4a1c      	ldr	r2, [pc, #112]	; (8003da4 <prvAddNewTaskToReadyList+0xbc>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d36:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <prvAddNewTaskToReadyList+0xc4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <prvAddNewTaskToReadyList+0xc4>)
 8003d3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d40:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <prvAddNewTaskToReadyList+0xc4>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4c:	4b18      	ldr	r3, [pc, #96]	; (8003db0 <prvAddNewTaskToReadyList+0xc8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d903      	bls.n	8003d5c <prvAddNewTaskToReadyList+0x74>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	4a15      	ldr	r2, [pc, #84]	; (8003db0 <prvAddNewTaskToReadyList+0xc8>)
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <prvAddNewTaskToReadyList+0xcc>)
 8003d6a:	441a      	add	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f7fe ffeb 	bl	8002d4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d78:	f7ff f8ea 	bl	8002f50 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <prvAddNewTaskToReadyList+0xc0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <prvAddNewTaskToReadyList+0xbc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d201      	bcs.n	8003d96 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d92:	f7ff f8b9 	bl	8002f08 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20003e0c 	.word	0x20003e0c
 8003da4:	20003938 	.word	0x20003938
 8003da8:	20003e18 	.word	0x20003e18
 8003dac:	20003e28 	.word	0x20003e28
 8003db0:	20003e14 	.word	0x20003e14
 8003db4:	2000393c 	.word	0x2000393c

08003db8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00f      	beq.n	8003dea <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <vTaskDelay+0x44>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <vTaskDelay+0x20>
 8003dd2:	f7ff f9e1 	bl	8003198 <ulSetInterruptMask>
 8003dd6:	e7fe      	b.n	8003dd6 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8003dd8:	f000 f944 	bl	8004064 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ddc:	2100      	movs	r1, #0
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fd56 	bl	8004890 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003de4:	f000 f94c 	bl	8004080 <xTaskResumeAll>
 8003de8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 8003df0:	f7ff f88a 	bl	8002f08 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20003e34 	.word	0x20003e34

08003e00 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003e08:	f7ff f890 	bl	8002f2c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <vTaskSuspend+0x18>
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <vTaskSuspend+0xb8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	e000      	b.n	8003e1a <vTaskSuspend+0x1a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe fff1 	bl	8002e08 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d004      	beq.n	8003e38 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3318      	adds	r3, #24
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe ffe8 	bl	8002e08 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	481f      	ldr	r0, [pc, #124]	; (8003ebc <vTaskSuspend+0xbc>)
 8003e40:	f7fe ff85 	bl	8002d4e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d103      	bne.n	8003e58 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003e58:	f7ff f87a 	bl	8002f50 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003e5c:	4b18      	ldr	r3, [pc, #96]	; (8003ec0 <vTaskSuspend+0xc0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003e64:	f7ff f862 	bl	8002f2c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003e68:	f000 fc76 	bl	8004758 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003e6c:	f7ff f870 	bl	8002f50 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003e70:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <vTaskSuspend+0xb8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d119      	bne.n	8003eae <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8003e7a:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <vTaskSuspend+0xc0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <vTaskSuspend+0xc4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <vTaskSuspend+0x90>
 8003e8a:	f7ff f985 	bl	8003198 <ulSetInterruptMask>
 8003e8e:	e7fe      	b.n	8003e8e <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8003e90:	f7ff f83a 	bl	8002f08 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e94:	e00b      	b.n	8003eae <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <vTaskSuspend+0xbc>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <vTaskSuspend+0xc8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d103      	bne.n	8003eaa <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <vTaskSuspend+0xb8>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
	}
 8003ea8:	e001      	b.n	8003eae <vTaskSuspend+0xae>
					vTaskSwitchContext();
 8003eaa:	f000 fa4b 	bl	8004344 <vTaskSwitchContext>
	}
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20003938 	.word	0x20003938
 8003ebc:	20003df8 	.word	0x20003df8
 8003ec0:	20003e18 	.word	0x20003e18
 8003ec4:	20003e34 	.word	0x20003e34
 8003ec8:	20003e0c 	.word	0x20003e0c

08003ecc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <prvTaskIsTaskSuspended+0x1c>
 8003ee2:	f7ff f959 	bl	8003198 <ulSetInterruptMask>
 8003ee6:	e7fe      	b.n	8003ee6 <prvTaskIsTaskSuspended+0x1a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <prvTaskIsTaskSuspended+0x48>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d10a      	bne.n	8003f08 <prvTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	4a08      	ldr	r2, [pc, #32]	; (8003f18 <prvTaskIsTaskSuspended+0x4c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d005      	beq.n	8003f08 <prvTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <prvTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f08:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20003df8 	.word	0x20003df8
 8003f18:	20003dcc 	.word	0x20003dcc

08003f1c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d102      	bne.n	8003f34 <vTaskResume+0x18>
 8003f2e:	f7ff f933 	bl	8003198 <ulSetInterruptMask>
 8003f32:	e7fe      	b.n	8003f32 <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <vTaskResume+0x90>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d032      	beq.n	8003fa4 <vTaskResume+0x88>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d02f      	beq.n	8003fa4 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 8003f44:	f7fe fff2 	bl	8002f2c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7ff ffbf 	bl	8003ecc <prvTaskIsTaskSuspended>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d025      	beq.n	8003fa0 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe ff55 	bl	8002e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f62:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <vTaskResume+0x94>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d903      	bls.n	8003f72 <vTaskResume+0x56>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	4a10      	ldr	r2, [pc, #64]	; (8003fb0 <vTaskResume+0x94>)
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <vTaskResume+0x98>)
 8003f80:	441a      	add	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3304      	adds	r3, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	4610      	mov	r0, r2
 8003f8a:	f7fe fee0 	bl	8002d4e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <vTaskResume+0x90>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d301      	bcc.n	8003fa0 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003f9c:	f7fe ffb4 	bl	8002f08 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003fa0:	f7fe ffd6 	bl	8002f50 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20003938 	.word	0x20003938
 8003fb0:	20003e14 	.word	0x20003e14
 8003fb4:	2000393c 	.word	0x2000393c

08003fb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fc6:	463a      	mov	r2, r7
 8003fc8:	1d39      	adds	r1, r7, #4
 8003fca:	f107 0308 	add.w	r3, r7, #8
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe fc9a 	bl	8002908 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003fd4:	6839      	ldr	r1, [r7, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	9202      	str	r2, [sp, #8]
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	460a      	mov	r2, r1
 8003fe6:	4919      	ldr	r1, [pc, #100]	; (800404c <vTaskStartScheduler+0x94>)
 8003fe8:	4819      	ldr	r0, [pc, #100]	; (8004050 <vTaskStartScheduler+0x98>)
 8003fea:	f7ff fd69 	bl	8003ac0 <xTaskCreateStatic>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4a18      	ldr	r2, [pc, #96]	; (8004054 <vTaskStartScheduler+0x9c>)
 8003ff2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ff4:	4b17      	ldr	r3, [pc, #92]	; (8004054 <vTaskStartScheduler+0x9c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	e001      	b.n	8004006 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d102      	bne.n	8004012 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800400c:	f000 fc94 	bl	8004938 <xTimerCreateTimerTask>
 8004010:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d10e      	bne.n	8004036 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004018:	f7ff f8be 	bl	8003198 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800401c:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <vTaskStartScheduler+0xa0>)
 800401e:	f04f 32ff 	mov.w	r2, #4294967295
 8004022:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004024:	4b0d      	ldr	r3, [pc, #52]	; (800405c <vTaskStartScheduler+0xa4>)
 8004026:	2201      	movs	r2, #1
 8004028:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800402a:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <vTaskStartScheduler+0xa8>)
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004030:	f7ff f864 	bl	80030fc <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004034:	e006      	b.n	8004044 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403c:	d102      	bne.n	8004044 <vTaskStartScheduler+0x8c>
 800403e:	f7ff f8ab 	bl	8003198 <ulSetInterruptMask>
 8004042:	e7fe      	b.n	8004042 <vTaskStartScheduler+0x8a>
}
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	080059c8 	.word	0x080059c8
 8004050:	0800460d 	.word	0x0800460d
 8004054:	20003e30 	.word	0x20003e30
 8004058:	20003e2c 	.word	0x20003e2c
 800405c:	20003e18 	.word	0x20003e18
 8004060:	20003e10 	.word	0x20003e10

08004064 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <vTaskSuspendAll+0x18>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3301      	adds	r3, #1
 800406e:	4a03      	ldr	r2, [pc, #12]	; (800407c <vTaskSuspendAll+0x18>)
 8004070:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004072:	bf00      	nop
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	20003e34 	.word	0x20003e34

08004080 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800408e:	4b3b      	ldr	r3, [pc, #236]	; (800417c <xTaskResumeAll+0xfc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <xTaskResumeAll+0x1c>
 8004096:	f7ff f87f 	bl	8003198 <ulSetInterruptMask>
 800409a:	e7fe      	b.n	800409a <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800409c:	f7fe ff46 	bl	8002f2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040a0:	4b36      	ldr	r3, [pc, #216]	; (800417c <xTaskResumeAll+0xfc>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	4a35      	ldr	r2, [pc, #212]	; (800417c <xTaskResumeAll+0xfc>)
 80040a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040aa:	4b34      	ldr	r3, [pc, #208]	; (800417c <xTaskResumeAll+0xfc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d15c      	bne.n	800416c <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040b2:	4b33      	ldr	r3, [pc, #204]	; (8004180 <xTaskResumeAll+0x100>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d058      	beq.n	800416c <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ba:	e02f      	b.n	800411c <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040bc:	4b31      	ldr	r3, [pc, #196]	; (8004184 <xTaskResumeAll+0x104>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3318      	adds	r3, #24
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe fe9d 	bl	8002e08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3304      	adds	r3, #4
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe fe98 	bl	8002e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	4b2a      	ldr	r3, [pc, #168]	; (8004188 <xTaskResumeAll+0x108>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d903      	bls.n	80040ec <xTaskResumeAll+0x6c>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	4a27      	ldr	r2, [pc, #156]	; (8004188 <xTaskResumeAll+0x108>)
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4a24      	ldr	r2, [pc, #144]	; (800418c <xTaskResumeAll+0x10c>)
 80040fa:	441a      	add	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3304      	adds	r3, #4
 8004100:	4619      	mov	r1, r3
 8004102:	4610      	mov	r0, r2
 8004104:	f7fe fe23 	bl	8002d4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	4b20      	ldr	r3, [pc, #128]	; (8004190 <xTaskResumeAll+0x110>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	429a      	cmp	r2, r3
 8004114:	d302      	bcc.n	800411c <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8004116:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <xTaskResumeAll+0x114>)
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <xTaskResumeAll+0x104>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1cb      	bne.n	80040bc <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800412a:	f000 fb15 	bl	8004758 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800412e:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <xTaskResumeAll+0x118>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d010      	beq.n	800415c <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800413a:	f000 f851 	bl	80041e0 <xTaskIncrementTick>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <xTaskResumeAll+0x114>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3b01      	subs	r3, #1
 800414e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f1      	bne.n	800413a <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <xTaskResumeAll+0x118>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800415c:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <xTaskResumeAll+0x114>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004164:	2301      	movs	r3, #1
 8004166:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004168:	f7fe fece 	bl	8002f08 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800416c:	f7fe fef0 	bl	8002f50 <vPortExitCritical>

	return xAlreadyYielded;
 8004170:	68bb      	ldr	r3, [r7, #8]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20003e34 	.word	0x20003e34
 8004180:	20003e0c 	.word	0x20003e0c
 8004184:	20003dcc 	.word	0x20003dcc
 8004188:	20003e14 	.word	0x20003e14
 800418c:	2000393c 	.word	0x2000393c
 8004190:	20003938 	.word	0x20003938
 8004194:	20003e20 	.word	0x20003e20
 8004198:	20003e1c 	.word	0x20003e1c

0800419c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <xTaskGetTickCount+0x1c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041a8:	687b      	ldr	r3, [r7, #4]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20003e10 	.word	0x20003e10

080041bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80041c2:	2300      	movs	r3, #0
 80041c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80041c6:	4b05      	ldr	r3, [pc, #20]	; (80041dc <xTaskGetTickCountFromISR+0x20>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041cc:	683b      	ldr	r3, [r7, #0]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20003e10 	.word	0x20003e10

080041e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ea:	4b4b      	ldr	r3, [pc, #300]	; (8004318 <xTaskIncrementTick+0x138>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f040 8087 	bne.w	8004302 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041f4:	4b49      	ldr	r3, [pc, #292]	; (800431c <xTaskIncrementTick+0x13c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041fc:	4a47      	ldr	r2, [pc, #284]	; (800431c <xTaskIncrementTick+0x13c>)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d118      	bne.n	800423a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004208:	4b45      	ldr	r3, [pc, #276]	; (8004320 <xTaskIncrementTick+0x140>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <xTaskIncrementTick+0x38>
 8004212:	f7fe ffc1 	bl	8003198 <ulSetInterruptMask>
 8004216:	e7fe      	b.n	8004216 <xTaskIncrementTick+0x36>
 8004218:	4b41      	ldr	r3, [pc, #260]	; (8004320 <xTaskIncrementTick+0x140>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	4b41      	ldr	r3, [pc, #260]	; (8004324 <xTaskIncrementTick+0x144>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a3f      	ldr	r2, [pc, #252]	; (8004320 <xTaskIncrementTick+0x140>)
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4a3f      	ldr	r2, [pc, #252]	; (8004324 <xTaskIncrementTick+0x144>)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	4b3e      	ldr	r3, [pc, #248]	; (8004328 <xTaskIncrementTick+0x148>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3301      	adds	r3, #1
 8004232:	4a3d      	ldr	r2, [pc, #244]	; (8004328 <xTaskIncrementTick+0x148>)
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	f000 fa8f 	bl	8004758 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800423a:	4b3c      	ldr	r3, [pc, #240]	; (800432c <xTaskIncrementTick+0x14c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	429a      	cmp	r2, r3
 8004242:	d349      	bcc.n	80042d8 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004244:	4b36      	ldr	r3, [pc, #216]	; (8004320 <xTaskIncrementTick+0x140>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d104      	bne.n	8004258 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800424e:	4b37      	ldr	r3, [pc, #220]	; (800432c <xTaskIncrementTick+0x14c>)
 8004250:	f04f 32ff 	mov.w	r2, #4294967295
 8004254:	601a      	str	r2, [r3, #0]
					break;
 8004256:	e03f      	b.n	80042d8 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004258:	4b31      	ldr	r3, [pc, #196]	; (8004320 <xTaskIncrementTick+0x140>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	429a      	cmp	r2, r3
 800426e:	d203      	bcs.n	8004278 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004270:	4a2e      	ldr	r2, [pc, #184]	; (800432c <xTaskIncrementTick+0x14c>)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004276:	e02f      	b.n	80042d8 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	3304      	adds	r3, #4
 800427c:	4618      	mov	r0, r3
 800427e:	f7fe fdc3 	bl	8002e08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	3318      	adds	r3, #24
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fdba 	bl	8002e08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004298:	4b25      	ldr	r3, [pc, #148]	; (8004330 <xTaskIncrementTick+0x150>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d903      	bls.n	80042a8 <xTaskIncrementTick+0xc8>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	4a22      	ldr	r2, [pc, #136]	; (8004330 <xTaskIncrementTick+0x150>)
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <xTaskIncrementTick+0x154>)
 80042b6:	441a      	add	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f7fe fd45 	bl	8002d4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c8:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <xTaskIncrementTick+0x158>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d3b8      	bcc.n	8004244 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 80042d2:	2301      	movs	r3, #1
 80042d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042d6:	e7b5      	b.n	8004244 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042d8:	4b17      	ldr	r3, [pc, #92]	; (8004338 <xTaskIncrementTick+0x158>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042de:	4915      	ldr	r1, [pc, #84]	; (8004334 <xTaskIncrementTick+0x154>)
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d901      	bls.n	80042f4 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 80042f0:	2301      	movs	r3, #1
 80042f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042f4:	4b11      	ldr	r3, [pc, #68]	; (800433c <xTaskIncrementTick+0x15c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d007      	beq.n	800430c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80042fc:	2301      	movs	r3, #1
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	e004      	b.n	800430c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004302:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <xTaskIncrementTick+0x160>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3301      	adds	r3, #1
 8004308:	4a0d      	ldr	r2, [pc, #52]	; (8004340 <xTaskIncrementTick+0x160>)
 800430a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800430c:	697b      	ldr	r3, [r7, #20]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20003e34 	.word	0x20003e34
 800431c:	20003e10 	.word	0x20003e10
 8004320:	20003dc4 	.word	0x20003dc4
 8004324:	20003dc8 	.word	0x20003dc8
 8004328:	20003e24 	.word	0x20003e24
 800432c:	20003e2c 	.word	0x20003e2c
 8004330:	20003e14 	.word	0x20003e14
 8004334:	2000393c 	.word	0x2000393c
 8004338:	20003938 	.word	0x20003938
 800433c:	20003e20 	.word	0x20003e20
 8004340:	20003e1c 	.word	0x20003e1c

08004344 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800434a:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <vTaskSwitchContext+0x94>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004352:	4b22      	ldr	r3, [pc, #136]	; (80043dc <vTaskSwitchContext+0x98>)
 8004354:	2201      	movs	r2, #1
 8004356:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004358:	e039      	b.n	80043ce <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 800435a:	4b20      	ldr	r3, [pc, #128]	; (80043dc <vTaskSwitchContext+0x98>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004360:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <vTaskSwitchContext+0x9c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	e008      	b.n	800437a <vTaskSwitchContext+0x36>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <vTaskSwitchContext+0x30>
 800436e:	f7fe ff13 	bl	8003198 <ulSetInterruptMask>
 8004372:	e7fe      	b.n	8004372 <vTaskSwitchContext+0x2e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3b01      	subs	r3, #1
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	491a      	ldr	r1, [pc, #104]	; (80043e4 <vTaskSwitchContext+0xa0>)
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0ec      	beq.n	8004368 <vTaskSwitchContext+0x24>
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <vTaskSwitchContext+0xa0>)
 800439a:	4413      	add	r3, r2
 800439c:	603b      	str	r3, [r7, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	3308      	adds	r3, #8
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d104      	bne.n	80043be <vTaskSwitchContext+0x7a>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a08      	ldr	r2, [pc, #32]	; (80043e8 <vTaskSwitchContext+0xa4>)
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4a05      	ldr	r2, [pc, #20]	; (80043e0 <vTaskSwitchContext+0x9c>)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6013      	str	r3, [r2, #0]
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20003e34 	.word	0x20003e34
 80043dc:	20003e20 	.word	0x20003e20
 80043e0:	20003e14 	.word	0x20003e14
 80043e4:	2000393c 	.word	0x2000393c
 80043e8:	20003938 	.word	0x20003938

080043ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <vTaskPlaceOnEventList+0x16>
 80043fc:	f7fe fecc 	bl	8003198 <ulSetInterruptMask>
 8004400:	e7fe      	b.n	8004400 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <vTaskPlaceOnEventList+0x34>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3318      	adds	r3, #24
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fe fcc3 	bl	8002d96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004410:	2101      	movs	r1, #1
 8004412:	6838      	ldr	r0, [r7, #0]
 8004414:	f000 fa3c 	bl	8004890 <prvAddCurrentTaskToDelayedList>
}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20003938 	.word	0x20003938

08004424 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <vTaskPlaceOnEventListRestricted+0x18>
 8004436:	f7fe feaf 	bl	8003198 <ulSetInterruptMask>
 800443a:	e7fe      	b.n	800443a <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <vTaskPlaceOnEventListRestricted+0x44>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3318      	adds	r3, #24
 8004442:	4619      	mov	r1, r3
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f7fe fc82 	bl	8002d4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 8004450:	f04f 33ff 	mov.w	r3, #4294967295
 8004454:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	68b8      	ldr	r0, [r7, #8]
 800445a:	f000 fa19 	bl	8004890 <prvAddCurrentTaskToDelayedList>
	}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20003938 	.word	0x20003938

0800446c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <xTaskRemoveFromEventList+0x1c>
 8004482:	f7fe fe89 	bl	8003198 <ulSetInterruptMask>
 8004486:	e7fe      	b.n	8004486 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	3318      	adds	r3, #24
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe fcbb 	bl	8002e08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004492:	4b1e      	ldr	r3, [pc, #120]	; (800450c <xTaskRemoveFromEventList+0xa0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d11d      	bne.n	80044d6 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	3304      	adds	r3, #4
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe fcb2 	bl	8002e08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a8:	4b19      	ldr	r3, [pc, #100]	; (8004510 <xTaskRemoveFromEventList+0xa4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d903      	bls.n	80044b8 <xTaskRemoveFromEventList+0x4c>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	4a16      	ldr	r2, [pc, #88]	; (8004510 <xTaskRemoveFromEventList+0xa4>)
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4a13      	ldr	r2, [pc, #76]	; (8004514 <xTaskRemoveFromEventList+0xa8>)
 80044c6:	441a      	add	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	3304      	adds	r3, #4
 80044cc:	4619      	mov	r1, r3
 80044ce:	4610      	mov	r0, r2
 80044d0:	f7fe fc3d 	bl	8002d4e <vListInsertEnd>
 80044d4:	e005      	b.n	80044e2 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	3318      	adds	r3, #24
 80044da:	4619      	mov	r1, r3
 80044dc:	480e      	ldr	r0, [pc, #56]	; (8004518 <xTaskRemoveFromEventList+0xac>)
 80044de:	f7fe fc36 	bl	8002d4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e6:	4b0d      	ldr	r3, [pc, #52]	; (800451c <xTaskRemoveFromEventList+0xb0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d905      	bls.n	80044fc <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044f0:	2301      	movs	r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044f4:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <xTaskRemoveFromEventList+0xb4>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	e001      	b.n	8004500 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8004500:	68fb      	ldr	r3, [r7, #12]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20003e34 	.word	0x20003e34
 8004510:	20003e14 	.word	0x20003e14
 8004514:	2000393c 	.word	0x2000393c
 8004518:	20003dcc 	.word	0x20003dcc
 800451c:	20003938 	.word	0x20003938
 8004520:	20003e20 	.word	0x20003e20

08004524 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <vTaskInternalSetTimeOutState+0x24>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <vTaskInternalSetTimeOutState+0x28>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	605a      	str	r2, [r3, #4]
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	20003e24 	.word	0x20003e24
 800454c:	20003e10 	.word	0x20003e10

08004550 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d102      	bne.n	8004566 <xTaskCheckForTimeOut+0x16>
 8004560:	f7fe fe1a 	bl	8003198 <ulSetInterruptMask>
 8004564:	e7fe      	b.n	8004564 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d102      	bne.n	8004572 <xTaskCheckForTimeOut+0x22>
 800456c:	f7fe fe14 	bl	8003198 <ulSetInterruptMask>
 8004570:	e7fe      	b.n	8004570 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8004572:	f7fe fcdb 	bl	8002f2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004576:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <xTaskCheckForTimeOut+0x9c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458e:	d102      	bne.n	8004596 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	e023      	b.n	80045de <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <xTaskCheckForTimeOut+0xa0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d007      	beq.n	80045b2 <xTaskCheckForTimeOut+0x62>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d302      	bcc.n	80045b2 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e015      	b.n	80045de <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d20b      	bcs.n	80045d4 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1ad2      	subs	r2, r2, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ffab 	bl	8004524 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	e004      	b.n	80045de <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045da:	2301      	movs	r3, #1
 80045dc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80045de:	f7fe fcb7 	bl	8002f50 <vPortExitCritical>

	return xReturn;
 80045e2:	697b      	ldr	r3, [r7, #20]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20003e10 	.word	0x20003e10
 80045f0:	20003e24 	.word	0x20003e24

080045f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045f8:	4b03      	ldr	r3, [pc, #12]	; (8004608 <vTaskMissedYield+0x14>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
}
 80045fe:	bf00      	nop
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	20003e20 	.word	0x20003e20

0800460c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004614:	f000 f84a 	bl	80046ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004618:	4b03      	ldr	r3, [pc, #12]	; (8004628 <prvIdleTask+0x1c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d9f9      	bls.n	8004614 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004620:	f7fe fc72 	bl	8002f08 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004624:	e7f6      	b.n	8004614 <prvIdleTask+0x8>
 8004626:	bf00      	nop
 8004628:	2000393c 	.word	0x2000393c

0800462c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004632:	2300      	movs	r3, #0
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	e00c      	b.n	8004652 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4a12      	ldr	r2, [pc, #72]	; (800468c <prvInitialiseTaskLists+0x60>)
 8004644:	4413      	add	r3, r2
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe fb54 	bl	8002cf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3301      	adds	r3, #1
 8004650:	607b      	str	r3, [r7, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b37      	cmp	r3, #55	; 0x37
 8004656:	d9ef      	bls.n	8004638 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004658:	480d      	ldr	r0, [pc, #52]	; (8004690 <prvInitialiseTaskLists+0x64>)
 800465a:	f7fe fb4b 	bl	8002cf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800465e:	480d      	ldr	r0, [pc, #52]	; (8004694 <prvInitialiseTaskLists+0x68>)
 8004660:	f7fe fb48 	bl	8002cf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004664:	480c      	ldr	r0, [pc, #48]	; (8004698 <prvInitialiseTaskLists+0x6c>)
 8004666:	f7fe fb45 	bl	8002cf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800466a:	480c      	ldr	r0, [pc, #48]	; (800469c <prvInitialiseTaskLists+0x70>)
 800466c:	f7fe fb42 	bl	8002cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004670:	480b      	ldr	r0, [pc, #44]	; (80046a0 <prvInitialiseTaskLists+0x74>)
 8004672:	f7fe fb3f 	bl	8002cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <prvInitialiseTaskLists+0x78>)
 8004678:	4a05      	ldr	r2, [pc, #20]	; (8004690 <prvInitialiseTaskLists+0x64>)
 800467a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <prvInitialiseTaskLists+0x7c>)
 800467e:	4a05      	ldr	r2, [pc, #20]	; (8004694 <prvInitialiseTaskLists+0x68>)
 8004680:	601a      	str	r2, [r3, #0]
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	2000393c 	.word	0x2000393c
 8004690:	20003d9c 	.word	0x20003d9c
 8004694:	20003db0 	.word	0x20003db0
 8004698:	20003dcc 	.word	0x20003dcc
 800469c:	20003de0 	.word	0x20003de0
 80046a0:	20003df8 	.word	0x20003df8
 80046a4:	20003dc4 	.word	0x20003dc4
 80046a8:	20003dc8 	.word	0x20003dc8

080046ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046b2:	e019      	b.n	80046e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046b4:	f7fe fc3a 	bl	8002f2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b8:	4b10      	ldr	r3, [pc, #64]	; (80046fc <prvCheckTasksWaitingTermination+0x50>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fe fb9f 	bl	8002e08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046ca:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <prvCheckTasksWaitingTermination+0x54>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <prvCheckTasksWaitingTermination+0x54>)
 80046d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <prvCheckTasksWaitingTermination+0x58>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3b01      	subs	r3, #1
 80046da:	4a0a      	ldr	r2, [pc, #40]	; (8004704 <prvCheckTasksWaitingTermination+0x58>)
 80046dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046de:	f7fe fc37 	bl	8002f50 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f810 	bl	8004708 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <prvCheckTasksWaitingTermination+0x58>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e1      	bne.n	80046b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20003de0 	.word	0x20003de0
 8004700:	20003e0c 	.word	0x20003e0c
 8004704:	20003df4 	.word	0x20003df4

08004708 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004716:	2b00      	cmp	r3, #0
 8004718:	d108      	bne.n	800472c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe f9da 	bl	8002ad8 <vPortFree>
				vPortFree( pxTCB );
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fe f9d7 	bl	8002ad8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800472a:	e010      	b.n	800474e <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004732:	2b01      	cmp	r3, #1
 8004734:	d103      	bne.n	800473e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fe f9ce 	bl	8002ad8 <vPortFree>
	}
 800473c:	e007      	b.n	800474e <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004744:	2b02      	cmp	r3, #2
 8004746:	d002      	beq.n	800474e <prvDeleteTCB+0x46>
 8004748:	f7fe fd26 	bl	8003198 <ulSetInterruptMask>
 800474c:	e7fe      	b.n	800474c <prvDeleteTCB+0x44>
	}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800475e:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <prvResetNextTaskUnblockTime+0x38>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <prvResetNextTaskUnblockTime+0x3c>)
 800476a:	f04f 32ff 	mov.w	r2, #4294967295
 800476e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004770:	e008      	b.n	8004784 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004772:	4b07      	ldr	r3, [pc, #28]	; (8004790 <prvResetNextTaskUnblockTime+0x38>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4a04      	ldr	r2, [pc, #16]	; (8004794 <prvResetNextTaskUnblockTime+0x3c>)
 8004782:	6013      	str	r3, [r2, #0]
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	20003dc4 	.word	0x20003dc4
 8004794:	20003e2c 	.word	0x20003e2c

08004798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800479e:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <xTaskGetSchedulerState+0x34>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047a6:	2301      	movs	r3, #1
 80047a8:	607b      	str	r3, [r7, #4]
 80047aa:	e008      	b.n	80047be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ac:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <xTaskGetSchedulerState+0x38>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047b4:	2302      	movs	r3, #2
 80047b6:	607b      	str	r3, [r7, #4]
 80047b8:	e001      	b.n	80047be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047ba:	2300      	movs	r3, #0
 80047bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047be:	687b      	ldr	r3, [r7, #4]
	}
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	20003e18 	.word	0x20003e18
 80047d0:	20003e34 	.word	0x20003e34

080047d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d046      	beq.n	8004878 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80047ea:	4b26      	ldr	r3, [pc, #152]	; (8004884 <xTaskPriorityDisinherit+0xb0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d002      	beq.n	80047fa <xTaskPriorityDisinherit+0x26>
 80047f4:	f7fe fcd0 	bl	8003198 <ulSetInterruptMask>
 80047f8:	e7fe      	b.n	80047f8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <xTaskPriorityDisinherit+0x34>
 8004802:	f7fe fcc9 	bl	8003198 <ulSetInterruptMask>
 8004806:	e7fe      	b.n	8004806 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480c:	1e5a      	subs	r2, r3, #1
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481a:	429a      	cmp	r2, r3
 800481c:	d02c      	beq.n	8004878 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004822:	2b00      	cmp	r3, #0
 8004824:	d128      	bne.n	8004878 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	3304      	adds	r3, #4
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe faec 	bl	8002e08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <xTaskPriorityDisinherit+0xb4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d903      	bls.n	8004858 <xTaskPriorityDisinherit+0x84>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	4a0c      	ldr	r2, [pc, #48]	; (8004888 <xTaskPriorityDisinherit+0xb4>)
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4a09      	ldr	r2, [pc, #36]	; (800488c <xTaskPriorityDisinherit+0xb8>)
 8004866:	441a      	add	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f7fe fa6d 	bl	8002d4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004874:	2301      	movs	r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004878:	68fb      	ldr	r3, [r7, #12]
	}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20003938 	.word	0x20003938
 8004888:	20003e14 	.word	0x20003e14
 800488c:	2000393c 	.word	0x2000393c

08004890 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800489a:	4b21      	ldr	r3, [pc, #132]	; (8004920 <prvAddCurrentTaskToDelayedList+0x90>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048a0:	4b20      	ldr	r3, [pc, #128]	; (8004924 <prvAddCurrentTaskToDelayedList+0x94>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe faae 	bl	8002e08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d10a      	bne.n	80048ca <prvAddCurrentTaskToDelayedList+0x3a>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048ba:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <prvAddCurrentTaskToDelayedList+0x94>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3304      	adds	r3, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4819      	ldr	r0, [pc, #100]	; (8004928 <prvAddCurrentTaskToDelayedList+0x98>)
 80048c4:	f7fe fa43 	bl	8002d4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048c8:	e026      	b.n	8004918 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4413      	add	r3, r2
 80048d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048d2:	4b14      	ldr	r3, [pc, #80]	; (8004924 <prvAddCurrentTaskToDelayedList+0x94>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d209      	bcs.n	80048f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <prvAddCurrentTaskToDelayedList+0x9c>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <prvAddCurrentTaskToDelayedList+0x94>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3304      	adds	r3, #4
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f7fe fa51 	bl	8002d96 <vListInsert>
}
 80048f4:	e010      	b.n	8004918 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048f6:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <prvAddCurrentTaskToDelayedList+0xa0>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <prvAddCurrentTaskToDelayedList+0x94>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3304      	adds	r3, #4
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f7fe fa47 	bl	8002d96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <prvAddCurrentTaskToDelayedList+0xa4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	429a      	cmp	r2, r3
 8004910:	d202      	bcs.n	8004918 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004912:	4a08      	ldr	r2, [pc, #32]	; (8004934 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	6013      	str	r3, [r2, #0]
}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20003e10 	.word	0x20003e10
 8004924:	20003938 	.word	0x20003938
 8004928:	20003df8 	.word	0x20003df8
 800492c:	20003dc8 	.word	0x20003dc8
 8004930:	20003dc4 	.word	0x20003dc4
 8004934:	20003e2c 	.word	0x20003e2c

08004938 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004942:	f000 fac7 	bl	8004ed4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004946:	4b18      	ldr	r3, [pc, #96]	; (80049a8 <xTimerCreateTimerTask+0x70>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d020      	beq.n	8004990 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004952:	2300      	movs	r3, #0
 8004954:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004956:	463a      	mov	r2, r7
 8004958:	1d39      	adds	r1, r7, #4
 800495a:	f107 0308 	add.w	r3, r7, #8
 800495e:	4618      	mov	r0, r3
 8004960:	f7fd ffec 	bl	800293c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	9202      	str	r2, [sp, #8]
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	2302      	movs	r3, #2
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	2300      	movs	r3, #0
 8004974:	460a      	mov	r2, r1
 8004976:	490d      	ldr	r1, [pc, #52]	; (80049ac <xTimerCreateTimerTask+0x74>)
 8004978:	480d      	ldr	r0, [pc, #52]	; (80049b0 <xTimerCreateTimerTask+0x78>)
 800497a:	f7ff f8a1 	bl	8003ac0 <xTaskCreateStatic>
 800497e:	4603      	mov	r3, r0
 8004980:	4a0c      	ldr	r2, [pc, #48]	; (80049b4 <xTimerCreateTimerTask+0x7c>)
 8004982:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004984:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <xTimerCreateTimerTask+0x7c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800498c:	2301      	movs	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <xTimerCreateTimerTask+0x64>
 8004996:	f7fe fbff 	bl	8003198 <ulSetInterruptMask>
 800499a:	e7fe      	b.n	800499a <xTimerCreateTimerTask+0x62>
	return xReturn;
 800499c:	68fb      	ldr	r3, [r7, #12]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20003e68 	.word	0x20003e68
 80049ac:	080059d0 	.word	0x080059d0
 80049b0:	08004acd 	.word	0x08004acd
 80049b4:	20003e6c 	.word	0x20003e6c

080049b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <xTimerGenericCommand+0x1e>
 80049d0:	f7fe fbe2 	bl	8003198 <ulSetInterruptMask>
 80049d4:	e7fe      	b.n	80049d4 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049d6:	4b1a      	ldr	r3, [pc, #104]	; (8004a40 <xTimerGenericCommand+0x88>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d02a      	beq.n	8004a34 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	dc18      	bgt.n	8004a22 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049f0:	f7ff fed2 	bl	8004798 <xTaskGetSchedulerState>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d109      	bne.n	8004a0e <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049fa:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <xTimerGenericCommand+0x88>)
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	f107 0114 	add.w	r1, r7, #20
 8004a02:	2300      	movs	r3, #0
 8004a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a06:	f7fe fcfa 	bl	80033fe <xQueueGenericSend>
 8004a0a:	6278      	str	r0, [r7, #36]	; 0x24
 8004a0c:	e012      	b.n	8004a34 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a0e:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <xTimerGenericCommand+0x88>)
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	f107 0114 	add.w	r1, r7, #20
 8004a16:	2300      	movs	r3, #0
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f7fe fcf0 	bl	80033fe <xQueueGenericSend>
 8004a1e:	6278      	str	r0, [r7, #36]	; 0x24
 8004a20:	e008      	b.n	8004a34 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a22:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <xTimerGenericCommand+0x88>)
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	f107 0114 	add.w	r1, r7, #20
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	f7fe fdaf 	bl	8003590 <xQueueGenericSendFromISR>
 8004a32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3728      	adds	r7, #40	; 0x28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20003e68 	.word	0x20003e68

08004a44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a4e:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <prvProcessExpiredTimer+0x84>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe f9d3 	bl	8002e08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01a      	beq.n	8004aa6 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	699a      	ldr	r2, [r3, #24]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	18d1      	adds	r1, r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f8c1 	bl	8004c04 <prvInsertTimerInActiveList>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d017      	beq.n	8004ab8 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a88:	2300      	movs	r3, #0
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	2100      	movs	r1, #0
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7ff ff90 	bl	80049b8 <xTimerGenericCommand>
 8004a98:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <prvProcessExpiredTimer+0x74>
 8004aa0:	f7fe fb7a 	bl	8003198 <ulSetInterruptMask>
 8004aa4:	e7fe      	b.n	8004aa4 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aac:	f023 0301 	bic.w	r3, r3, #1
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	4798      	blx	r3
}
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20003e60 	.word	0x20003e60

08004acc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ad4:	f107 0308 	add.w	r3, r7, #8
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 f84f 	bl	8004b7c <prvGetNextExpireTime>
 8004ade:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f803 	bl	8004af0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004aea:	f000 f8cd 	bl	8004c88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004aee:	e7f1      	b.n	8004ad4 <prvTimerTask+0x8>

08004af0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004afa:	f7ff fab3 	bl	8004064 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004afe:	f107 0308 	add.w	r3, r7, #8
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f85e 	bl	8004bc4 <prvSampleTimeNow>
 8004b08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d12a      	bne.n	8004b66 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10a      	bne.n	8004b2c <prvProcessTimerOrBlockTask+0x3c>
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d806      	bhi.n	8004b2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b1e:	f7ff faaf 	bl	8004080 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff ff8d 	bl	8004a44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b2a:	e01e      	b.n	8004b6a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d008      	beq.n	8004b44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <prvProcessTimerOrBlockTask+0x84>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <prvProcessTimerOrBlockTask+0x50>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <prvProcessTimerOrBlockTask+0x52>
 8004b40:	2300      	movs	r3, #0
 8004b42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b44:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <prvProcessTimerOrBlockTask+0x88>)
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	4619      	mov	r1, r3
 8004b52:	f7fe ff81 	bl	8003a58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b56:	f7ff fa93 	bl	8004080 <xTaskResumeAll>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8004b60:	f7fe f9d2 	bl	8002f08 <vPortYield>
}
 8004b64:	e001      	b.n	8004b6a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8004b66:	f7ff fa8b 	bl	8004080 <xTaskResumeAll>
}
 8004b6a:	bf00      	nop
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20003e64 	.word	0x20003e64
 8004b78:	20003e68 	.word	0x20003e68

08004b7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <prvGetNextExpireTime+0x44>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <prvGetNextExpireTime+0x16>
 8004b8e:	2201      	movs	r2, #1
 8004b90:	e000      	b.n	8004b94 <prvGetNextExpireTime+0x18>
 8004b92:	2200      	movs	r2, #0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d105      	bne.n	8004bac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <prvGetNextExpireTime+0x44>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	e001      	b.n	8004bb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20003e60 	.word	0x20003e60

08004bc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004bcc:	f7ff fae6 	bl	800419c <xTaskGetTickCount>
 8004bd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <prvSampleTimeNow+0x3c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d205      	bcs.n	8004be8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004bdc:	f000 f91e 	bl	8004e1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e002      	b.n	8004bee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004bee:	4a04      	ldr	r2, [pc, #16]	; (8004c00 <prvSampleTimeNow+0x3c>)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20003e70 	.word	0x20003e70

08004c04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d812      	bhi.n	8004c50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	1ad2      	subs	r2, r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d302      	bcc.n	8004c3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e01b      	b.n	8004c76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <prvInsertTimerInActiveList+0x7c>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f7fe f8a4 	bl	8002d96 <vListInsert>
 8004c4e:	e012      	b.n	8004c76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d206      	bcs.n	8004c66 <prvInsertTimerInActiveList+0x62>
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d302      	bcc.n	8004c66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	e007      	b.n	8004c76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c66:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <prvInsertTimerInActiveList+0x80>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4610      	mov	r0, r2
 8004c72:	f7fe f890 	bl	8002d96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c76:	697b      	ldr	r3, [r7, #20]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20003e64 	.word	0x20003e64
 8004c84:	20003e60 	.word	0x20003e60

08004c88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08c      	sub	sp, #48	; 0x30
 8004c8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c8e:	e0b2      	b.n	8004df6 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	da11      	bge.n	8004cba <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c96:	f107 0308 	add.w	r3, r7, #8
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <prvProcessReceivedCommands+0x22>
 8004ca4:	f7fe fa78 	bl	8003198 <ulSetInterruptMask>
 8004ca8:	e7fe      	b.n	8004ca8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb0:	6850      	ldr	r0, [r2, #4]
 8004cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb4:	6892      	ldr	r2, [r2, #8]
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f2c0 8099 	blt.w	8004df4 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d004      	beq.n	8004cd8 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe f898 	bl	8002e08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cd8:	1d3b      	adds	r3, r7, #4
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff ff72 	bl	8004bc4 <prvSampleTimeNow>
 8004ce0:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b09      	cmp	r3, #9
 8004ce6:	f200 8086 	bhi.w	8004df6 <prvProcessReceivedCommands+0x16e>
 8004cea:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <prvProcessReceivedCommands+0x68>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d19 	.word	0x08004d19
 8004cf4:	08004d19 	.word	0x08004d19
 8004cf8:	08004d19 	.word	0x08004d19
 8004cfc:	08004d7d 	.word	0x08004d7d
 8004d00:	08004d91 	.word	0x08004d91
 8004d04:	08004dcb 	.word	0x08004dcb
 8004d08:	08004d19 	.word	0x08004d19
 8004d0c:	08004d19 	.word	0x08004d19
 8004d10:	08004d7d 	.word	0x08004d7d
 8004d14:	08004d91 	.word	0x08004d91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	18d1      	adds	r1, r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	6a38      	ldr	r0, [r7, #32]
 8004d38:	f7ff ff64 	bl	8004c04 <prvInsertTimerInActiveList>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d059      	beq.n	8004df6 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	6a38      	ldr	r0, [r7, #32]
 8004d48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d04e      	beq.n	8004df6 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	441a      	add	r2, r3
 8004d60:	2300      	movs	r3, #0
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	2100      	movs	r1, #0
 8004d68:	6a38      	ldr	r0, [r7, #32]
 8004d6a:	f7ff fe25 	bl	80049b8 <xTimerGenericCommand>
 8004d6e:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d13f      	bne.n	8004df6 <prvProcessReceivedCommands+0x16e>
 8004d76:	f7fe fa0f 	bl	8003198 <ulSetInterruptMask>
 8004d7a:	e7fe      	b.n	8004d7a <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d82:	f023 0301 	bic.w	r3, r3, #1
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004d8e:	e032      	b.n	8004df6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <prvProcessReceivedCommands+0x12e>
 8004db0:	f7fe f9f2 	bl	8003198 <ulSetInterruptMask>
 8004db4:	e7fe      	b.n	8004db4 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	18d1      	adds	r1, r2, r3
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	6a38      	ldr	r0, [r7, #32]
 8004dc4:	f7ff ff1e 	bl	8004c04 <prvInsertTimerInActiveList>
					break;
 8004dc8:	e015      	b.n	8004df6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d103      	bne.n	8004de0 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8004dd8:	6a38      	ldr	r0, [r7, #32]
 8004dda:	f7fd fe7d 	bl	8002ad8 <vPortFree>
 8004dde:	e00a      	b.n	8004df6 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004df2:	e000      	b.n	8004df6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004df4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004df6:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <prvProcessReceivedCommands+0x190>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f107 0108 	add.w	r1, r7, #8
 8004dfe:	2200      	movs	r2, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fe fc36 	bl	8003672 <xQueueReceive>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f47f af41 	bne.w	8004c90 <prvProcessReceivedCommands+0x8>
	}
}
 8004e0e:	bf00      	nop
 8004e10:	bf00      	nop
 8004e12:	3728      	adds	r7, #40	; 0x28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	20003e68 	.word	0x20003e68

08004e1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e22:	e040      	b.n	8004ea6 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e24:	4b29      	ldr	r3, [pc, #164]	; (8004ecc <prvSwitchTimerLists+0xb0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e2e:	4b27      	ldr	r3, [pc, #156]	; (8004ecc <prvSwitchTimerLists+0xb0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fd ffe3 	bl	8002e08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d026      	beq.n	8004ea6 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4413      	add	r3, r2
 8004e60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d90e      	bls.n	8004e88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e76:	4b15      	ldr	r3, [pc, #84]	; (8004ecc <prvSwitchTimerLists+0xb0>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f7fd ff88 	bl	8002d96 <vListInsert>
 8004e86:	e00e      	b.n	8004ea6 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e88:	2300      	movs	r3, #0
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	2100      	movs	r1, #0
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff fd90 	bl	80049b8 <xTimerGenericCommand>
 8004e98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d102      	bne.n	8004ea6 <prvSwitchTimerLists+0x8a>
 8004ea0:	f7fe f97a 	bl	8003198 <ulSetInterruptMask>
 8004ea4:	e7fe      	b.n	8004ea4 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ea6:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <prvSwitchTimerLists+0xb0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1b9      	bne.n	8004e24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004eb0:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <prvSwitchTimerLists+0xb0>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <prvSwitchTimerLists+0xb4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a04      	ldr	r2, [pc, #16]	; (8004ecc <prvSwitchTimerLists+0xb0>)
 8004ebc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ebe:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <prvSwitchTimerLists+0xb4>)
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	6013      	str	r3, [r2, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20003e60 	.word	0x20003e60
 8004ed0:	20003e64 	.word	0x20003e64

08004ed4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004eda:	f7fe f827 	bl	8002f2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ede:	4b15      	ldr	r3, [pc, #84]	; (8004f34 <prvCheckForValidListAndQueue+0x60>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d120      	bne.n	8004f28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ee6:	4814      	ldr	r0, [pc, #80]	; (8004f38 <prvCheckForValidListAndQueue+0x64>)
 8004ee8:	f7fd ff04 	bl	8002cf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004eec:	4813      	ldr	r0, [pc, #76]	; (8004f3c <prvCheckForValidListAndQueue+0x68>)
 8004eee:	f7fd ff01 	bl	8002cf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ef2:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <prvCheckForValidListAndQueue+0x6c>)
 8004ef4:	4a10      	ldr	r2, [pc, #64]	; (8004f38 <prvCheckForValidListAndQueue+0x64>)
 8004ef6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ef8:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <prvCheckForValidListAndQueue+0x70>)
 8004efa:	4a10      	ldr	r2, [pc, #64]	; (8004f3c <prvCheckForValidListAndQueue+0x68>)
 8004efc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004efe:	2300      	movs	r3, #0
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <prvCheckForValidListAndQueue+0x74>)
 8004f04:	4a11      	ldr	r2, [pc, #68]	; (8004f4c <prvCheckForValidListAndQueue+0x78>)
 8004f06:	2110      	movs	r1, #16
 8004f08:	200a      	movs	r0, #10
 8004f0a:	f7fe fa05 	bl	8003318 <xQueueGenericCreateStatic>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4a08      	ldr	r2, [pc, #32]	; (8004f34 <prvCheckForValidListAndQueue+0x60>)
 8004f12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f14:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <prvCheckForValidListAndQueue+0x60>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <prvCheckForValidListAndQueue+0x60>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	490b      	ldr	r1, [pc, #44]	; (8004f50 <prvCheckForValidListAndQueue+0x7c>)
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fe fd6e 	bl	8003a04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f28:	f7fe f812 	bl	8002f50 <vPortExitCritical>
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20003e68 	.word	0x20003e68
 8004f38:	20003e38 	.word	0x20003e38
 8004f3c:	20003e4c 	.word	0x20003e4c
 8004f40:	20003e60 	.word	0x20003e60
 8004f44:	20003e64 	.word	0x20003e64
 8004f48:	20003f14 	.word	0x20003f14
 8004f4c:	20003e74 	.word	0x20003e74
 8004f50:	080059d8 	.word	0x080059d8

08004f54 <__errno>:
 8004f54:	4b01      	ldr	r3, [pc, #4]	; (8004f5c <__errno+0x8>)
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	2000001c 	.word	0x2000001c

08004f60 <__libc_init_array>:
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	4d0d      	ldr	r5, [pc, #52]	; (8004f98 <__libc_init_array+0x38>)
 8004f64:	2600      	movs	r6, #0
 8004f66:	4c0d      	ldr	r4, [pc, #52]	; (8004f9c <__libc_init_array+0x3c>)
 8004f68:	1b64      	subs	r4, r4, r5
 8004f6a:	10a4      	asrs	r4, r4, #2
 8004f6c:	42a6      	cmp	r6, r4
 8004f6e:	d109      	bne.n	8004f84 <__libc_init_array+0x24>
 8004f70:	4d0b      	ldr	r5, [pc, #44]	; (8004fa0 <__libc_init_array+0x40>)
 8004f72:	2600      	movs	r6, #0
 8004f74:	4c0b      	ldr	r4, [pc, #44]	; (8004fa4 <__libc_init_array+0x44>)
 8004f76:	f000 fcf1 	bl	800595c <_init>
 8004f7a:	1b64      	subs	r4, r4, r5
 8004f7c:	10a4      	asrs	r4, r4, #2
 8004f7e:	42a6      	cmp	r6, r4
 8004f80:	d105      	bne.n	8004f8e <__libc_init_array+0x2e>
 8004f82:	bd70      	pop	{r4, r5, r6, pc}
 8004f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f88:	3601      	adds	r6, #1
 8004f8a:	4798      	blx	r3
 8004f8c:	e7ee      	b.n	8004f6c <__libc_init_array+0xc>
 8004f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f92:	3601      	adds	r6, #1
 8004f94:	4798      	blx	r3
 8004f96:	e7f2      	b.n	8004f7e <__libc_init_array+0x1e>
 8004f98:	08005aa0 	.word	0x08005aa0
 8004f9c:	08005aa0 	.word	0x08005aa0
 8004fa0:	08005aa0 	.word	0x08005aa0
 8004fa4:	08005aa4 	.word	0x08005aa4

08004fa8 <memcpy>:
 8004fa8:	440a      	add	r2, r1
 8004faa:	1e43      	subs	r3, r0, #1
 8004fac:	4291      	cmp	r1, r2
 8004fae:	d100      	bne.n	8004fb2 <memcpy+0xa>
 8004fb0:	4770      	bx	lr
 8004fb2:	b510      	push	{r4, lr}
 8004fb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fb8:	4291      	cmp	r1, r2
 8004fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fbe:	d1f9      	bne.n	8004fb4 <memcpy+0xc>
 8004fc0:	bd10      	pop	{r4, pc}

08004fc2 <memset>:
 8004fc2:	4402      	add	r2, r0
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d100      	bne.n	8004fcc <memset+0xa>
 8004fca:	4770      	bx	lr
 8004fcc:	f803 1b01 	strb.w	r1, [r3], #1
 8004fd0:	e7f9      	b.n	8004fc6 <memset+0x4>
	...

08004fd4 <_puts_r>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	460e      	mov	r6, r1
 8004fd8:	4605      	mov	r5, r0
 8004fda:	b118      	cbz	r0, 8004fe4 <_puts_r+0x10>
 8004fdc:	6983      	ldr	r3, [r0, #24]
 8004fde:	b90b      	cbnz	r3, 8004fe4 <_puts_r+0x10>
 8004fe0:	f000 fa46 	bl	8005470 <__sinit>
 8004fe4:	69ab      	ldr	r3, [r5, #24]
 8004fe6:	68ac      	ldr	r4, [r5, #8]
 8004fe8:	b913      	cbnz	r3, 8004ff0 <_puts_r+0x1c>
 8004fea:	4628      	mov	r0, r5
 8004fec:	f000 fa40 	bl	8005470 <__sinit>
 8004ff0:	4b2c      	ldr	r3, [pc, #176]	; (80050a4 <_puts_r+0xd0>)
 8004ff2:	429c      	cmp	r4, r3
 8004ff4:	d120      	bne.n	8005038 <_puts_r+0x64>
 8004ff6:	686c      	ldr	r4, [r5, #4]
 8004ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ffa:	07db      	lsls	r3, r3, #31
 8004ffc:	d405      	bmi.n	800500a <_puts_r+0x36>
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	0598      	lsls	r0, r3, #22
 8005002:	d402      	bmi.n	800500a <_puts_r+0x36>
 8005004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005006:	f000 fad1 	bl	80055ac <__retarget_lock_acquire_recursive>
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	0719      	lsls	r1, r3, #28
 800500e:	d51d      	bpl.n	800504c <_puts_r+0x78>
 8005010:	6923      	ldr	r3, [r4, #16]
 8005012:	b1db      	cbz	r3, 800504c <_puts_r+0x78>
 8005014:	3e01      	subs	r6, #1
 8005016:	68a3      	ldr	r3, [r4, #8]
 8005018:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800501c:	3b01      	subs	r3, #1
 800501e:	60a3      	str	r3, [r4, #8]
 8005020:	bb39      	cbnz	r1, 8005072 <_puts_r+0x9e>
 8005022:	2b00      	cmp	r3, #0
 8005024:	da38      	bge.n	8005098 <_puts_r+0xc4>
 8005026:	4622      	mov	r2, r4
 8005028:	210a      	movs	r1, #10
 800502a:	4628      	mov	r0, r5
 800502c:	f000 f848 	bl	80050c0 <__swbuf_r>
 8005030:	3001      	adds	r0, #1
 8005032:	d011      	beq.n	8005058 <_puts_r+0x84>
 8005034:	250a      	movs	r5, #10
 8005036:	e011      	b.n	800505c <_puts_r+0x88>
 8005038:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <_puts_r+0xd4>)
 800503a:	429c      	cmp	r4, r3
 800503c:	d101      	bne.n	8005042 <_puts_r+0x6e>
 800503e:	68ac      	ldr	r4, [r5, #8]
 8005040:	e7da      	b.n	8004ff8 <_puts_r+0x24>
 8005042:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <_puts_r+0xd8>)
 8005044:	429c      	cmp	r4, r3
 8005046:	bf08      	it	eq
 8005048:	68ec      	ldreq	r4, [r5, #12]
 800504a:	e7d5      	b.n	8004ff8 <_puts_r+0x24>
 800504c:	4621      	mov	r1, r4
 800504e:	4628      	mov	r0, r5
 8005050:	f000 f888 	bl	8005164 <__swsetup_r>
 8005054:	2800      	cmp	r0, #0
 8005056:	d0dd      	beq.n	8005014 <_puts_r+0x40>
 8005058:	f04f 35ff 	mov.w	r5, #4294967295
 800505c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800505e:	07da      	lsls	r2, r3, #31
 8005060:	d405      	bmi.n	800506e <_puts_r+0x9a>
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	059b      	lsls	r3, r3, #22
 8005066:	d402      	bmi.n	800506e <_puts_r+0x9a>
 8005068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800506a:	f000 faa0 	bl	80055ae <__retarget_lock_release_recursive>
 800506e:	4628      	mov	r0, r5
 8005070:	bd70      	pop	{r4, r5, r6, pc}
 8005072:	2b00      	cmp	r3, #0
 8005074:	da04      	bge.n	8005080 <_puts_r+0xac>
 8005076:	69a2      	ldr	r2, [r4, #24]
 8005078:	429a      	cmp	r2, r3
 800507a:	dc06      	bgt.n	800508a <_puts_r+0xb6>
 800507c:	290a      	cmp	r1, #10
 800507e:	d004      	beq.n	800508a <_puts_r+0xb6>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	6022      	str	r2, [r4, #0]
 8005086:	7019      	strb	r1, [r3, #0]
 8005088:	e7c5      	b.n	8005016 <_puts_r+0x42>
 800508a:	4622      	mov	r2, r4
 800508c:	4628      	mov	r0, r5
 800508e:	f000 f817 	bl	80050c0 <__swbuf_r>
 8005092:	3001      	adds	r0, #1
 8005094:	d1bf      	bne.n	8005016 <_puts_r+0x42>
 8005096:	e7df      	b.n	8005058 <_puts_r+0x84>
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	250a      	movs	r5, #10
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	6022      	str	r2, [r4, #0]
 80050a0:	701d      	strb	r5, [r3, #0]
 80050a2:	e7db      	b.n	800505c <_puts_r+0x88>
 80050a4:	08005a5c 	.word	0x08005a5c
 80050a8:	08005a7c 	.word	0x08005a7c
 80050ac:	08005a3c 	.word	0x08005a3c

080050b0 <puts>:
 80050b0:	4b02      	ldr	r3, [pc, #8]	; (80050bc <puts+0xc>)
 80050b2:	4601      	mov	r1, r0
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	f7ff bf8d 	b.w	8004fd4 <_puts_r>
 80050ba:	bf00      	nop
 80050bc:	2000001c 	.word	0x2000001c

080050c0 <__swbuf_r>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	460e      	mov	r6, r1
 80050c4:	4614      	mov	r4, r2
 80050c6:	4605      	mov	r5, r0
 80050c8:	b118      	cbz	r0, 80050d2 <__swbuf_r+0x12>
 80050ca:	6983      	ldr	r3, [r0, #24]
 80050cc:	b90b      	cbnz	r3, 80050d2 <__swbuf_r+0x12>
 80050ce:	f000 f9cf 	bl	8005470 <__sinit>
 80050d2:	4b21      	ldr	r3, [pc, #132]	; (8005158 <__swbuf_r+0x98>)
 80050d4:	429c      	cmp	r4, r3
 80050d6:	d12b      	bne.n	8005130 <__swbuf_r+0x70>
 80050d8:	686c      	ldr	r4, [r5, #4]
 80050da:	69a3      	ldr	r3, [r4, #24]
 80050dc:	60a3      	str	r3, [r4, #8]
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	071a      	lsls	r2, r3, #28
 80050e2:	d52f      	bpl.n	8005144 <__swbuf_r+0x84>
 80050e4:	6923      	ldr	r3, [r4, #16]
 80050e6:	b36b      	cbz	r3, 8005144 <__swbuf_r+0x84>
 80050e8:	6923      	ldr	r3, [r4, #16]
 80050ea:	b2f6      	uxtb	r6, r6
 80050ec:	6820      	ldr	r0, [r4, #0]
 80050ee:	4637      	mov	r7, r6
 80050f0:	1ac0      	subs	r0, r0, r3
 80050f2:	6963      	ldr	r3, [r4, #20]
 80050f4:	4283      	cmp	r3, r0
 80050f6:	dc04      	bgt.n	8005102 <__swbuf_r+0x42>
 80050f8:	4621      	mov	r1, r4
 80050fa:	4628      	mov	r0, r5
 80050fc:	f000 f924 	bl	8005348 <_fflush_r>
 8005100:	bb30      	cbnz	r0, 8005150 <__swbuf_r+0x90>
 8005102:	68a3      	ldr	r3, [r4, #8]
 8005104:	3001      	adds	r0, #1
 8005106:	3b01      	subs	r3, #1
 8005108:	60a3      	str	r3, [r4, #8]
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	6022      	str	r2, [r4, #0]
 8005110:	701e      	strb	r6, [r3, #0]
 8005112:	6963      	ldr	r3, [r4, #20]
 8005114:	4283      	cmp	r3, r0
 8005116:	d004      	beq.n	8005122 <__swbuf_r+0x62>
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	07db      	lsls	r3, r3, #31
 800511c:	d506      	bpl.n	800512c <__swbuf_r+0x6c>
 800511e:	2e0a      	cmp	r6, #10
 8005120:	d104      	bne.n	800512c <__swbuf_r+0x6c>
 8005122:	4621      	mov	r1, r4
 8005124:	4628      	mov	r0, r5
 8005126:	f000 f90f 	bl	8005348 <_fflush_r>
 800512a:	b988      	cbnz	r0, 8005150 <__swbuf_r+0x90>
 800512c:	4638      	mov	r0, r7
 800512e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <__swbuf_r+0x9c>)
 8005132:	429c      	cmp	r4, r3
 8005134:	d101      	bne.n	800513a <__swbuf_r+0x7a>
 8005136:	68ac      	ldr	r4, [r5, #8]
 8005138:	e7cf      	b.n	80050da <__swbuf_r+0x1a>
 800513a:	4b09      	ldr	r3, [pc, #36]	; (8005160 <__swbuf_r+0xa0>)
 800513c:	429c      	cmp	r4, r3
 800513e:	bf08      	it	eq
 8005140:	68ec      	ldreq	r4, [r5, #12]
 8005142:	e7ca      	b.n	80050da <__swbuf_r+0x1a>
 8005144:	4621      	mov	r1, r4
 8005146:	4628      	mov	r0, r5
 8005148:	f000 f80c 	bl	8005164 <__swsetup_r>
 800514c:	2800      	cmp	r0, #0
 800514e:	d0cb      	beq.n	80050e8 <__swbuf_r+0x28>
 8005150:	f04f 37ff 	mov.w	r7, #4294967295
 8005154:	e7ea      	b.n	800512c <__swbuf_r+0x6c>
 8005156:	bf00      	nop
 8005158:	08005a5c 	.word	0x08005a5c
 800515c:	08005a7c 	.word	0x08005a7c
 8005160:	08005a3c 	.word	0x08005a3c

08005164 <__swsetup_r>:
 8005164:	4b32      	ldr	r3, [pc, #200]	; (8005230 <__swsetup_r+0xcc>)
 8005166:	b570      	push	{r4, r5, r6, lr}
 8005168:	681d      	ldr	r5, [r3, #0]
 800516a:	4606      	mov	r6, r0
 800516c:	460c      	mov	r4, r1
 800516e:	b125      	cbz	r5, 800517a <__swsetup_r+0x16>
 8005170:	69ab      	ldr	r3, [r5, #24]
 8005172:	b913      	cbnz	r3, 800517a <__swsetup_r+0x16>
 8005174:	4628      	mov	r0, r5
 8005176:	f000 f97b 	bl	8005470 <__sinit>
 800517a:	4b2e      	ldr	r3, [pc, #184]	; (8005234 <__swsetup_r+0xd0>)
 800517c:	429c      	cmp	r4, r3
 800517e:	d10f      	bne.n	80051a0 <__swsetup_r+0x3c>
 8005180:	686c      	ldr	r4, [r5, #4]
 8005182:	89a3      	ldrh	r3, [r4, #12]
 8005184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005188:	0719      	lsls	r1, r3, #28
 800518a:	d42c      	bmi.n	80051e6 <__swsetup_r+0x82>
 800518c:	06dd      	lsls	r5, r3, #27
 800518e:	d411      	bmi.n	80051b4 <__swsetup_r+0x50>
 8005190:	2309      	movs	r3, #9
 8005192:	6033      	str	r3, [r6, #0]
 8005194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	81a3      	strh	r3, [r4, #12]
 800519e:	e03e      	b.n	800521e <__swsetup_r+0xba>
 80051a0:	4b25      	ldr	r3, [pc, #148]	; (8005238 <__swsetup_r+0xd4>)
 80051a2:	429c      	cmp	r4, r3
 80051a4:	d101      	bne.n	80051aa <__swsetup_r+0x46>
 80051a6:	68ac      	ldr	r4, [r5, #8]
 80051a8:	e7eb      	b.n	8005182 <__swsetup_r+0x1e>
 80051aa:	4b24      	ldr	r3, [pc, #144]	; (800523c <__swsetup_r+0xd8>)
 80051ac:	429c      	cmp	r4, r3
 80051ae:	bf08      	it	eq
 80051b0:	68ec      	ldreq	r4, [r5, #12]
 80051b2:	e7e6      	b.n	8005182 <__swsetup_r+0x1e>
 80051b4:	0758      	lsls	r0, r3, #29
 80051b6:	d512      	bpl.n	80051de <__swsetup_r+0x7a>
 80051b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051ba:	b141      	cbz	r1, 80051ce <__swsetup_r+0x6a>
 80051bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051c0:	4299      	cmp	r1, r3
 80051c2:	d002      	beq.n	80051ca <__swsetup_r+0x66>
 80051c4:	4630      	mov	r0, r6
 80051c6:	f000 fa57 	bl	8005678 <_free_r>
 80051ca:	2300      	movs	r3, #0
 80051cc:	6363      	str	r3, [r4, #52]	; 0x34
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051d4:	81a3      	strh	r3, [r4, #12]
 80051d6:	2300      	movs	r3, #0
 80051d8:	6063      	str	r3, [r4, #4]
 80051da:	6923      	ldr	r3, [r4, #16]
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	f043 0308 	orr.w	r3, r3, #8
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	6923      	ldr	r3, [r4, #16]
 80051e8:	b94b      	cbnz	r3, 80051fe <__swsetup_r+0x9a>
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f4:	d003      	beq.n	80051fe <__swsetup_r+0x9a>
 80051f6:	4621      	mov	r1, r4
 80051f8:	4630      	mov	r0, r6
 80051fa:	f000 f9fd 	bl	80055f8 <__smakebuf_r>
 80051fe:	89a0      	ldrh	r0, [r4, #12]
 8005200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005204:	f010 0301 	ands.w	r3, r0, #1
 8005208:	d00a      	beq.n	8005220 <__swsetup_r+0xbc>
 800520a:	2300      	movs	r3, #0
 800520c:	60a3      	str	r3, [r4, #8]
 800520e:	6963      	ldr	r3, [r4, #20]
 8005210:	425b      	negs	r3, r3
 8005212:	61a3      	str	r3, [r4, #24]
 8005214:	6923      	ldr	r3, [r4, #16]
 8005216:	b943      	cbnz	r3, 800522a <__swsetup_r+0xc6>
 8005218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800521c:	d1ba      	bne.n	8005194 <__swsetup_r+0x30>
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	0781      	lsls	r1, r0, #30
 8005222:	bf58      	it	pl
 8005224:	6963      	ldrpl	r3, [r4, #20]
 8005226:	60a3      	str	r3, [r4, #8]
 8005228:	e7f4      	b.n	8005214 <__swsetup_r+0xb0>
 800522a:	2000      	movs	r0, #0
 800522c:	e7f7      	b.n	800521e <__swsetup_r+0xba>
 800522e:	bf00      	nop
 8005230:	2000001c 	.word	0x2000001c
 8005234:	08005a5c 	.word	0x08005a5c
 8005238:	08005a7c 	.word	0x08005a7c
 800523c:	08005a3c 	.word	0x08005a3c

08005240 <__sflush_r>:
 8005240:	898a      	ldrh	r2, [r1, #12]
 8005242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005246:	4605      	mov	r5, r0
 8005248:	0710      	lsls	r0, r2, #28
 800524a:	460c      	mov	r4, r1
 800524c:	d458      	bmi.n	8005300 <__sflush_r+0xc0>
 800524e:	684b      	ldr	r3, [r1, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	dc05      	bgt.n	8005260 <__sflush_r+0x20>
 8005254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005256:	2b00      	cmp	r3, #0
 8005258:	dc02      	bgt.n	8005260 <__sflush_r+0x20>
 800525a:	2000      	movs	r0, #0
 800525c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005262:	2e00      	cmp	r6, #0
 8005264:	d0f9      	beq.n	800525a <__sflush_r+0x1a>
 8005266:	2300      	movs	r3, #0
 8005268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800526c:	682f      	ldr	r7, [r5, #0]
 800526e:	602b      	str	r3, [r5, #0]
 8005270:	d032      	beq.n	80052d8 <__sflush_r+0x98>
 8005272:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	075a      	lsls	r2, r3, #29
 8005278:	d505      	bpl.n	8005286 <__sflush_r+0x46>
 800527a:	6863      	ldr	r3, [r4, #4]
 800527c:	1ac0      	subs	r0, r0, r3
 800527e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005280:	b10b      	cbz	r3, 8005286 <__sflush_r+0x46>
 8005282:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005284:	1ac0      	subs	r0, r0, r3
 8005286:	2300      	movs	r3, #0
 8005288:	4602      	mov	r2, r0
 800528a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800528c:	4628      	mov	r0, r5
 800528e:	6a21      	ldr	r1, [r4, #32]
 8005290:	47b0      	blx	r6
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	d106      	bne.n	80052a6 <__sflush_r+0x66>
 8005298:	6829      	ldr	r1, [r5, #0]
 800529a:	291d      	cmp	r1, #29
 800529c:	d82c      	bhi.n	80052f8 <__sflush_r+0xb8>
 800529e:	4a29      	ldr	r2, [pc, #164]	; (8005344 <__sflush_r+0x104>)
 80052a0:	40ca      	lsrs	r2, r1
 80052a2:	07d6      	lsls	r6, r2, #31
 80052a4:	d528      	bpl.n	80052f8 <__sflush_r+0xb8>
 80052a6:	2200      	movs	r2, #0
 80052a8:	04d9      	lsls	r1, r3, #19
 80052aa:	6062      	str	r2, [r4, #4]
 80052ac:	6922      	ldr	r2, [r4, #16]
 80052ae:	6022      	str	r2, [r4, #0]
 80052b0:	d504      	bpl.n	80052bc <__sflush_r+0x7c>
 80052b2:	1c42      	adds	r2, r0, #1
 80052b4:	d101      	bne.n	80052ba <__sflush_r+0x7a>
 80052b6:	682b      	ldr	r3, [r5, #0]
 80052b8:	b903      	cbnz	r3, 80052bc <__sflush_r+0x7c>
 80052ba:	6560      	str	r0, [r4, #84]	; 0x54
 80052bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052be:	602f      	str	r7, [r5, #0]
 80052c0:	2900      	cmp	r1, #0
 80052c2:	d0ca      	beq.n	800525a <__sflush_r+0x1a>
 80052c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052c8:	4299      	cmp	r1, r3
 80052ca:	d002      	beq.n	80052d2 <__sflush_r+0x92>
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 f9d3 	bl	8005678 <_free_r>
 80052d2:	2000      	movs	r0, #0
 80052d4:	6360      	str	r0, [r4, #52]	; 0x34
 80052d6:	e7c1      	b.n	800525c <__sflush_r+0x1c>
 80052d8:	6a21      	ldr	r1, [r4, #32]
 80052da:	2301      	movs	r3, #1
 80052dc:	4628      	mov	r0, r5
 80052de:	47b0      	blx	r6
 80052e0:	1c41      	adds	r1, r0, #1
 80052e2:	d1c7      	bne.n	8005274 <__sflush_r+0x34>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0c4      	beq.n	8005274 <__sflush_r+0x34>
 80052ea:	2b1d      	cmp	r3, #29
 80052ec:	d001      	beq.n	80052f2 <__sflush_r+0xb2>
 80052ee:	2b16      	cmp	r3, #22
 80052f0:	d101      	bne.n	80052f6 <__sflush_r+0xb6>
 80052f2:	602f      	str	r7, [r5, #0]
 80052f4:	e7b1      	b.n	800525a <__sflush_r+0x1a>
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	e7ad      	b.n	800525c <__sflush_r+0x1c>
 8005300:	690f      	ldr	r7, [r1, #16]
 8005302:	2f00      	cmp	r7, #0
 8005304:	d0a9      	beq.n	800525a <__sflush_r+0x1a>
 8005306:	0793      	lsls	r3, r2, #30
 8005308:	680e      	ldr	r6, [r1, #0]
 800530a:	600f      	str	r7, [r1, #0]
 800530c:	bf0c      	ite	eq
 800530e:	694b      	ldreq	r3, [r1, #20]
 8005310:	2300      	movne	r3, #0
 8005312:	eba6 0807 	sub.w	r8, r6, r7
 8005316:	608b      	str	r3, [r1, #8]
 8005318:	f1b8 0f00 	cmp.w	r8, #0
 800531c:	dd9d      	ble.n	800525a <__sflush_r+0x1a>
 800531e:	4643      	mov	r3, r8
 8005320:	463a      	mov	r2, r7
 8005322:	6a21      	ldr	r1, [r4, #32]
 8005324:	4628      	mov	r0, r5
 8005326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005328:	47b0      	blx	r6
 800532a:	2800      	cmp	r0, #0
 800532c:	dc06      	bgt.n	800533c <__sflush_r+0xfc>
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	f04f 30ff 	mov.w	r0, #4294967295
 8005334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005338:	81a3      	strh	r3, [r4, #12]
 800533a:	e78f      	b.n	800525c <__sflush_r+0x1c>
 800533c:	4407      	add	r7, r0
 800533e:	eba8 0800 	sub.w	r8, r8, r0
 8005342:	e7e9      	b.n	8005318 <__sflush_r+0xd8>
 8005344:	20400001 	.word	0x20400001

08005348 <_fflush_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	690b      	ldr	r3, [r1, #16]
 800534c:	4605      	mov	r5, r0
 800534e:	460c      	mov	r4, r1
 8005350:	b913      	cbnz	r3, 8005358 <_fflush_r+0x10>
 8005352:	2500      	movs	r5, #0
 8005354:	4628      	mov	r0, r5
 8005356:	bd38      	pop	{r3, r4, r5, pc}
 8005358:	b118      	cbz	r0, 8005362 <_fflush_r+0x1a>
 800535a:	6983      	ldr	r3, [r0, #24]
 800535c:	b90b      	cbnz	r3, 8005362 <_fflush_r+0x1a>
 800535e:	f000 f887 	bl	8005470 <__sinit>
 8005362:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <_fflush_r+0x6c>)
 8005364:	429c      	cmp	r4, r3
 8005366:	d11b      	bne.n	80053a0 <_fflush_r+0x58>
 8005368:	686c      	ldr	r4, [r5, #4]
 800536a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0ef      	beq.n	8005352 <_fflush_r+0xa>
 8005372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005374:	07d0      	lsls	r0, r2, #31
 8005376:	d404      	bmi.n	8005382 <_fflush_r+0x3a>
 8005378:	0599      	lsls	r1, r3, #22
 800537a:	d402      	bmi.n	8005382 <_fflush_r+0x3a>
 800537c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800537e:	f000 f915 	bl	80055ac <__retarget_lock_acquire_recursive>
 8005382:	4628      	mov	r0, r5
 8005384:	4621      	mov	r1, r4
 8005386:	f7ff ff5b 	bl	8005240 <__sflush_r>
 800538a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800538c:	4605      	mov	r5, r0
 800538e:	07da      	lsls	r2, r3, #31
 8005390:	d4e0      	bmi.n	8005354 <_fflush_r+0xc>
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	059b      	lsls	r3, r3, #22
 8005396:	d4dd      	bmi.n	8005354 <_fflush_r+0xc>
 8005398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800539a:	f000 f908 	bl	80055ae <__retarget_lock_release_recursive>
 800539e:	e7d9      	b.n	8005354 <_fflush_r+0xc>
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <_fflush_r+0x70>)
 80053a2:	429c      	cmp	r4, r3
 80053a4:	d101      	bne.n	80053aa <_fflush_r+0x62>
 80053a6:	68ac      	ldr	r4, [r5, #8]
 80053a8:	e7df      	b.n	800536a <_fflush_r+0x22>
 80053aa:	4b04      	ldr	r3, [pc, #16]	; (80053bc <_fflush_r+0x74>)
 80053ac:	429c      	cmp	r4, r3
 80053ae:	bf08      	it	eq
 80053b0:	68ec      	ldreq	r4, [r5, #12]
 80053b2:	e7da      	b.n	800536a <_fflush_r+0x22>
 80053b4:	08005a5c 	.word	0x08005a5c
 80053b8:	08005a7c 	.word	0x08005a7c
 80053bc:	08005a3c 	.word	0x08005a3c

080053c0 <std>:
 80053c0:	2300      	movs	r3, #0
 80053c2:	b510      	push	{r4, lr}
 80053c4:	4604      	mov	r4, r0
 80053c6:	6083      	str	r3, [r0, #8]
 80053c8:	8181      	strh	r1, [r0, #12]
 80053ca:	4619      	mov	r1, r3
 80053cc:	6643      	str	r3, [r0, #100]	; 0x64
 80053ce:	81c2      	strh	r2, [r0, #14]
 80053d0:	2208      	movs	r2, #8
 80053d2:	6183      	str	r3, [r0, #24]
 80053d4:	e9c0 3300 	strd	r3, r3, [r0]
 80053d8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053dc:	305c      	adds	r0, #92	; 0x5c
 80053de:	f7ff fdf0 	bl	8004fc2 <memset>
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <std+0x38>)
 80053e4:	6224      	str	r4, [r4, #32]
 80053e6:	6263      	str	r3, [r4, #36]	; 0x24
 80053e8:	4b04      	ldr	r3, [pc, #16]	; (80053fc <std+0x3c>)
 80053ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80053ec:	4b04      	ldr	r3, [pc, #16]	; (8005400 <std+0x40>)
 80053ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053f0:	4b04      	ldr	r3, [pc, #16]	; (8005404 <std+0x44>)
 80053f2:	6323      	str	r3, [r4, #48]	; 0x30
 80053f4:	bd10      	pop	{r4, pc}
 80053f6:	bf00      	nop
 80053f8:	080057ed 	.word	0x080057ed
 80053fc:	0800580f 	.word	0x0800580f
 8005400:	08005847 	.word	0x08005847
 8005404:	0800586b 	.word	0x0800586b

08005408 <_cleanup_r>:
 8005408:	4901      	ldr	r1, [pc, #4]	; (8005410 <_cleanup_r+0x8>)
 800540a:	f000 b8af 	b.w	800556c <_fwalk_reent>
 800540e:	bf00      	nop
 8005410:	08005349 	.word	0x08005349

08005414 <__sfmoreglue>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	1e4a      	subs	r2, r1, #1
 8005418:	2568      	movs	r5, #104	; 0x68
 800541a:	460e      	mov	r6, r1
 800541c:	4355      	muls	r5, r2
 800541e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005422:	f000 f979 	bl	8005718 <_malloc_r>
 8005426:	4604      	mov	r4, r0
 8005428:	b140      	cbz	r0, 800543c <__sfmoreglue+0x28>
 800542a:	2100      	movs	r1, #0
 800542c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005430:	e9c0 1600 	strd	r1, r6, [r0]
 8005434:	300c      	adds	r0, #12
 8005436:	60a0      	str	r0, [r4, #8]
 8005438:	f7ff fdc3 	bl	8004fc2 <memset>
 800543c:	4620      	mov	r0, r4
 800543e:	bd70      	pop	{r4, r5, r6, pc}

08005440 <__sfp_lock_acquire>:
 8005440:	4801      	ldr	r0, [pc, #4]	; (8005448 <__sfp_lock_acquire+0x8>)
 8005442:	f000 b8b3 	b.w	80055ac <__retarget_lock_acquire_recursive>
 8005446:	bf00      	nop
 8005448:	2000400c 	.word	0x2000400c

0800544c <__sfp_lock_release>:
 800544c:	4801      	ldr	r0, [pc, #4]	; (8005454 <__sfp_lock_release+0x8>)
 800544e:	f000 b8ae 	b.w	80055ae <__retarget_lock_release_recursive>
 8005452:	bf00      	nop
 8005454:	2000400c 	.word	0x2000400c

08005458 <__sinit_lock_acquire>:
 8005458:	4801      	ldr	r0, [pc, #4]	; (8005460 <__sinit_lock_acquire+0x8>)
 800545a:	f000 b8a7 	b.w	80055ac <__retarget_lock_acquire_recursive>
 800545e:	bf00      	nop
 8005460:	20004007 	.word	0x20004007

08005464 <__sinit_lock_release>:
 8005464:	4801      	ldr	r0, [pc, #4]	; (800546c <__sinit_lock_release+0x8>)
 8005466:	f000 b8a2 	b.w	80055ae <__retarget_lock_release_recursive>
 800546a:	bf00      	nop
 800546c:	20004007 	.word	0x20004007

08005470 <__sinit>:
 8005470:	b510      	push	{r4, lr}
 8005472:	4604      	mov	r4, r0
 8005474:	f7ff fff0 	bl	8005458 <__sinit_lock_acquire>
 8005478:	69a3      	ldr	r3, [r4, #24]
 800547a:	b11b      	cbz	r3, 8005484 <__sinit+0x14>
 800547c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005480:	f7ff bff0 	b.w	8005464 <__sinit_lock_release>
 8005484:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005488:	6523      	str	r3, [r4, #80]	; 0x50
 800548a:	4620      	mov	r0, r4
 800548c:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <__sinit+0x68>)
 800548e:	4a13      	ldr	r2, [pc, #76]	; (80054dc <__sinit+0x6c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	62a2      	str	r2, [r4, #40]	; 0x28
 8005494:	42a3      	cmp	r3, r4
 8005496:	bf04      	itt	eq
 8005498:	2301      	moveq	r3, #1
 800549a:	61a3      	streq	r3, [r4, #24]
 800549c:	f000 f820 	bl	80054e0 <__sfp>
 80054a0:	6060      	str	r0, [r4, #4]
 80054a2:	4620      	mov	r0, r4
 80054a4:	f000 f81c 	bl	80054e0 <__sfp>
 80054a8:	60a0      	str	r0, [r4, #8]
 80054aa:	4620      	mov	r0, r4
 80054ac:	f000 f818 	bl	80054e0 <__sfp>
 80054b0:	2200      	movs	r2, #0
 80054b2:	2104      	movs	r1, #4
 80054b4:	60e0      	str	r0, [r4, #12]
 80054b6:	6860      	ldr	r0, [r4, #4]
 80054b8:	f7ff ff82 	bl	80053c0 <std>
 80054bc:	2201      	movs	r2, #1
 80054be:	2109      	movs	r1, #9
 80054c0:	68a0      	ldr	r0, [r4, #8]
 80054c2:	f7ff ff7d 	bl	80053c0 <std>
 80054c6:	2202      	movs	r2, #2
 80054c8:	2112      	movs	r1, #18
 80054ca:	68e0      	ldr	r0, [r4, #12]
 80054cc:	f7ff ff78 	bl	80053c0 <std>
 80054d0:	2301      	movs	r3, #1
 80054d2:	61a3      	str	r3, [r4, #24]
 80054d4:	e7d2      	b.n	800547c <__sinit+0xc>
 80054d6:	bf00      	nop
 80054d8:	08005a38 	.word	0x08005a38
 80054dc:	08005409 	.word	0x08005409

080054e0 <__sfp>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	4607      	mov	r7, r0
 80054e4:	f7ff ffac 	bl	8005440 <__sfp_lock_acquire>
 80054e8:	4b1e      	ldr	r3, [pc, #120]	; (8005564 <__sfp+0x84>)
 80054ea:	681e      	ldr	r6, [r3, #0]
 80054ec:	69b3      	ldr	r3, [r6, #24]
 80054ee:	b913      	cbnz	r3, 80054f6 <__sfp+0x16>
 80054f0:	4630      	mov	r0, r6
 80054f2:	f7ff ffbd 	bl	8005470 <__sinit>
 80054f6:	3648      	adds	r6, #72	; 0x48
 80054f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	d503      	bpl.n	8005508 <__sfp+0x28>
 8005500:	6833      	ldr	r3, [r6, #0]
 8005502:	b30b      	cbz	r3, 8005548 <__sfp+0x68>
 8005504:	6836      	ldr	r6, [r6, #0]
 8005506:	e7f7      	b.n	80054f8 <__sfp+0x18>
 8005508:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800550c:	b9d5      	cbnz	r5, 8005544 <__sfp+0x64>
 800550e:	4b16      	ldr	r3, [pc, #88]	; (8005568 <__sfp+0x88>)
 8005510:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005514:	6665      	str	r5, [r4, #100]	; 0x64
 8005516:	60e3      	str	r3, [r4, #12]
 8005518:	f000 f847 	bl	80055aa <__retarget_lock_init_recursive>
 800551c:	f7ff ff96 	bl	800544c <__sfp_lock_release>
 8005520:	2208      	movs	r2, #8
 8005522:	4629      	mov	r1, r5
 8005524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005528:	6025      	str	r5, [r4, #0]
 800552a:	61a5      	str	r5, [r4, #24]
 800552c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005530:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005534:	f7ff fd45 	bl	8004fc2 <memset>
 8005538:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800553c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005540:	4620      	mov	r0, r4
 8005542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005544:	3468      	adds	r4, #104	; 0x68
 8005546:	e7d9      	b.n	80054fc <__sfp+0x1c>
 8005548:	2104      	movs	r1, #4
 800554a:	4638      	mov	r0, r7
 800554c:	f7ff ff62 	bl	8005414 <__sfmoreglue>
 8005550:	4604      	mov	r4, r0
 8005552:	6030      	str	r0, [r6, #0]
 8005554:	2800      	cmp	r0, #0
 8005556:	d1d5      	bne.n	8005504 <__sfp+0x24>
 8005558:	f7ff ff78 	bl	800544c <__sfp_lock_release>
 800555c:	230c      	movs	r3, #12
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	e7ee      	b.n	8005540 <__sfp+0x60>
 8005562:	bf00      	nop
 8005564:	08005a38 	.word	0x08005a38
 8005568:	ffff0001 	.word	0xffff0001

0800556c <_fwalk_reent>:
 800556c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005570:	4606      	mov	r6, r0
 8005572:	4688      	mov	r8, r1
 8005574:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005578:	2700      	movs	r7, #0
 800557a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800557e:	f1b9 0901 	subs.w	r9, r9, #1
 8005582:	d505      	bpl.n	8005590 <_fwalk_reent+0x24>
 8005584:	6824      	ldr	r4, [r4, #0]
 8005586:	2c00      	cmp	r4, #0
 8005588:	d1f7      	bne.n	800557a <_fwalk_reent+0xe>
 800558a:	4638      	mov	r0, r7
 800558c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005590:	89ab      	ldrh	r3, [r5, #12]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d907      	bls.n	80055a6 <_fwalk_reent+0x3a>
 8005596:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800559a:	3301      	adds	r3, #1
 800559c:	d003      	beq.n	80055a6 <_fwalk_reent+0x3a>
 800559e:	4629      	mov	r1, r5
 80055a0:	4630      	mov	r0, r6
 80055a2:	47c0      	blx	r8
 80055a4:	4307      	orrs	r7, r0
 80055a6:	3568      	adds	r5, #104	; 0x68
 80055a8:	e7e9      	b.n	800557e <_fwalk_reent+0x12>

080055aa <__retarget_lock_init_recursive>:
 80055aa:	4770      	bx	lr

080055ac <__retarget_lock_acquire_recursive>:
 80055ac:	4770      	bx	lr

080055ae <__retarget_lock_release_recursive>:
 80055ae:	4770      	bx	lr

080055b0 <__swhatbuf_r>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	460e      	mov	r6, r1
 80055b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b8:	b096      	sub	sp, #88	; 0x58
 80055ba:	4614      	mov	r4, r2
 80055bc:	2900      	cmp	r1, #0
 80055be:	461d      	mov	r5, r3
 80055c0:	da07      	bge.n	80055d2 <__swhatbuf_r+0x22>
 80055c2:	2300      	movs	r3, #0
 80055c4:	602b      	str	r3, [r5, #0]
 80055c6:	89b3      	ldrh	r3, [r6, #12]
 80055c8:	061a      	lsls	r2, r3, #24
 80055ca:	d410      	bmi.n	80055ee <__swhatbuf_r+0x3e>
 80055cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055d0:	e00e      	b.n	80055f0 <__swhatbuf_r+0x40>
 80055d2:	466a      	mov	r2, sp
 80055d4:	f000 f970 	bl	80058b8 <_fstat_r>
 80055d8:	2800      	cmp	r0, #0
 80055da:	dbf2      	blt.n	80055c2 <__swhatbuf_r+0x12>
 80055dc:	9a01      	ldr	r2, [sp, #4]
 80055de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055e6:	425a      	negs	r2, r3
 80055e8:	415a      	adcs	r2, r3
 80055ea:	602a      	str	r2, [r5, #0]
 80055ec:	e7ee      	b.n	80055cc <__swhatbuf_r+0x1c>
 80055ee:	2340      	movs	r3, #64	; 0x40
 80055f0:	2000      	movs	r0, #0
 80055f2:	6023      	str	r3, [r4, #0]
 80055f4:	b016      	add	sp, #88	; 0x58
 80055f6:	bd70      	pop	{r4, r5, r6, pc}

080055f8 <__smakebuf_r>:
 80055f8:	898b      	ldrh	r3, [r1, #12]
 80055fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055fc:	079d      	lsls	r5, r3, #30
 80055fe:	4606      	mov	r6, r0
 8005600:	460c      	mov	r4, r1
 8005602:	d507      	bpl.n	8005614 <__smakebuf_r+0x1c>
 8005604:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	6123      	str	r3, [r4, #16]
 800560c:	2301      	movs	r3, #1
 800560e:	6163      	str	r3, [r4, #20]
 8005610:	b002      	add	sp, #8
 8005612:	bd70      	pop	{r4, r5, r6, pc}
 8005614:	ab01      	add	r3, sp, #4
 8005616:	466a      	mov	r2, sp
 8005618:	f7ff ffca 	bl	80055b0 <__swhatbuf_r>
 800561c:	9900      	ldr	r1, [sp, #0]
 800561e:	4605      	mov	r5, r0
 8005620:	4630      	mov	r0, r6
 8005622:	f000 f879 	bl	8005718 <_malloc_r>
 8005626:	b948      	cbnz	r0, 800563c <__smakebuf_r+0x44>
 8005628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800562c:	059a      	lsls	r2, r3, #22
 800562e:	d4ef      	bmi.n	8005610 <__smakebuf_r+0x18>
 8005630:	f023 0303 	bic.w	r3, r3, #3
 8005634:	f043 0302 	orr.w	r3, r3, #2
 8005638:	81a3      	strh	r3, [r4, #12]
 800563a:	e7e3      	b.n	8005604 <__smakebuf_r+0xc>
 800563c:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <__smakebuf_r+0x7c>)
 800563e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005640:	89a3      	ldrh	r3, [r4, #12]
 8005642:	6020      	str	r0, [r4, #0]
 8005644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005648:	6120      	str	r0, [r4, #16]
 800564a:	81a3      	strh	r3, [r4, #12]
 800564c:	9b00      	ldr	r3, [sp, #0]
 800564e:	6163      	str	r3, [r4, #20]
 8005650:	9b01      	ldr	r3, [sp, #4]
 8005652:	b15b      	cbz	r3, 800566c <__smakebuf_r+0x74>
 8005654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005658:	4630      	mov	r0, r6
 800565a:	f000 f93f 	bl	80058dc <_isatty_r>
 800565e:	b128      	cbz	r0, 800566c <__smakebuf_r+0x74>
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	81a3      	strh	r3, [r4, #12]
 800566c:	89a0      	ldrh	r0, [r4, #12]
 800566e:	4305      	orrs	r5, r0
 8005670:	81a5      	strh	r5, [r4, #12]
 8005672:	e7cd      	b.n	8005610 <__smakebuf_r+0x18>
 8005674:	08005409 	.word	0x08005409

08005678 <_free_r>:
 8005678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800567a:	2900      	cmp	r1, #0
 800567c:	d047      	beq.n	800570e <_free_r+0x96>
 800567e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005682:	1f0c      	subs	r4, r1, #4
 8005684:	9001      	str	r0, [sp, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	bfb8      	it	lt
 800568a:	18e4      	addlt	r4, r4, r3
 800568c:	f000 f948 	bl	8005920 <__malloc_lock>
 8005690:	4a20      	ldr	r2, [pc, #128]	; (8005714 <_free_r+0x9c>)
 8005692:	9801      	ldr	r0, [sp, #4]
 8005694:	6813      	ldr	r3, [r2, #0]
 8005696:	4615      	mov	r5, r2
 8005698:	b933      	cbnz	r3, 80056a8 <_free_r+0x30>
 800569a:	6063      	str	r3, [r4, #4]
 800569c:	6014      	str	r4, [r2, #0]
 800569e:	b003      	add	sp, #12
 80056a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056a4:	f000 b942 	b.w	800592c <__malloc_unlock>
 80056a8:	42a3      	cmp	r3, r4
 80056aa:	d90b      	bls.n	80056c4 <_free_r+0x4c>
 80056ac:	6821      	ldr	r1, [r4, #0]
 80056ae:	1862      	adds	r2, r4, r1
 80056b0:	4293      	cmp	r3, r2
 80056b2:	bf02      	ittt	eq
 80056b4:	681a      	ldreq	r2, [r3, #0]
 80056b6:	685b      	ldreq	r3, [r3, #4]
 80056b8:	1852      	addeq	r2, r2, r1
 80056ba:	6063      	str	r3, [r4, #4]
 80056bc:	bf08      	it	eq
 80056be:	6022      	streq	r2, [r4, #0]
 80056c0:	602c      	str	r4, [r5, #0]
 80056c2:	e7ec      	b.n	800569e <_free_r+0x26>
 80056c4:	461a      	mov	r2, r3
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	b10b      	cbz	r3, 80056ce <_free_r+0x56>
 80056ca:	42a3      	cmp	r3, r4
 80056cc:	d9fa      	bls.n	80056c4 <_free_r+0x4c>
 80056ce:	6811      	ldr	r1, [r2, #0]
 80056d0:	1855      	adds	r5, r2, r1
 80056d2:	42a5      	cmp	r5, r4
 80056d4:	d10b      	bne.n	80056ee <_free_r+0x76>
 80056d6:	6824      	ldr	r4, [r4, #0]
 80056d8:	4421      	add	r1, r4
 80056da:	1854      	adds	r4, r2, r1
 80056dc:	6011      	str	r1, [r2, #0]
 80056de:	42a3      	cmp	r3, r4
 80056e0:	d1dd      	bne.n	800569e <_free_r+0x26>
 80056e2:	681c      	ldr	r4, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	4421      	add	r1, r4
 80056e8:	6053      	str	r3, [r2, #4]
 80056ea:	6011      	str	r1, [r2, #0]
 80056ec:	e7d7      	b.n	800569e <_free_r+0x26>
 80056ee:	d902      	bls.n	80056f6 <_free_r+0x7e>
 80056f0:	230c      	movs	r3, #12
 80056f2:	6003      	str	r3, [r0, #0]
 80056f4:	e7d3      	b.n	800569e <_free_r+0x26>
 80056f6:	6825      	ldr	r5, [r4, #0]
 80056f8:	1961      	adds	r1, r4, r5
 80056fa:	428b      	cmp	r3, r1
 80056fc:	bf02      	ittt	eq
 80056fe:	6819      	ldreq	r1, [r3, #0]
 8005700:	685b      	ldreq	r3, [r3, #4]
 8005702:	1949      	addeq	r1, r1, r5
 8005704:	6063      	str	r3, [r4, #4]
 8005706:	bf08      	it	eq
 8005708:	6021      	streq	r1, [r4, #0]
 800570a:	6054      	str	r4, [r2, #4]
 800570c:	e7c7      	b.n	800569e <_free_r+0x26>
 800570e:	b003      	add	sp, #12
 8005710:	bd30      	pop	{r4, r5, pc}
 8005712:	bf00      	nop
 8005714:	20003f64 	.word	0x20003f64

08005718 <_malloc_r>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	1ccd      	adds	r5, r1, #3
 800571c:	4606      	mov	r6, r0
 800571e:	f025 0503 	bic.w	r5, r5, #3
 8005722:	3508      	adds	r5, #8
 8005724:	2d0c      	cmp	r5, #12
 8005726:	bf38      	it	cc
 8005728:	250c      	movcc	r5, #12
 800572a:	2d00      	cmp	r5, #0
 800572c:	db01      	blt.n	8005732 <_malloc_r+0x1a>
 800572e:	42a9      	cmp	r1, r5
 8005730:	d903      	bls.n	800573a <_malloc_r+0x22>
 8005732:	230c      	movs	r3, #12
 8005734:	6033      	str	r3, [r6, #0]
 8005736:	2000      	movs	r0, #0
 8005738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800573a:	f000 f8f1 	bl	8005920 <__malloc_lock>
 800573e:	4921      	ldr	r1, [pc, #132]	; (80057c4 <_malloc_r+0xac>)
 8005740:	680a      	ldr	r2, [r1, #0]
 8005742:	4614      	mov	r4, r2
 8005744:	b99c      	cbnz	r4, 800576e <_malloc_r+0x56>
 8005746:	4f20      	ldr	r7, [pc, #128]	; (80057c8 <_malloc_r+0xb0>)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	b923      	cbnz	r3, 8005756 <_malloc_r+0x3e>
 800574c:	4621      	mov	r1, r4
 800574e:	4630      	mov	r0, r6
 8005750:	f000 f83c 	bl	80057cc <_sbrk_r>
 8005754:	6038      	str	r0, [r7, #0]
 8005756:	4629      	mov	r1, r5
 8005758:	4630      	mov	r0, r6
 800575a:	f000 f837 	bl	80057cc <_sbrk_r>
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	d123      	bne.n	80057aa <_malloc_r+0x92>
 8005762:	230c      	movs	r3, #12
 8005764:	4630      	mov	r0, r6
 8005766:	6033      	str	r3, [r6, #0]
 8005768:	f000 f8e0 	bl	800592c <__malloc_unlock>
 800576c:	e7e3      	b.n	8005736 <_malloc_r+0x1e>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	1b5b      	subs	r3, r3, r5
 8005772:	d417      	bmi.n	80057a4 <_malloc_r+0x8c>
 8005774:	2b0b      	cmp	r3, #11
 8005776:	d903      	bls.n	8005780 <_malloc_r+0x68>
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	441c      	add	r4, r3
 800577c:	6025      	str	r5, [r4, #0]
 800577e:	e004      	b.n	800578a <_malloc_r+0x72>
 8005780:	6863      	ldr	r3, [r4, #4]
 8005782:	42a2      	cmp	r2, r4
 8005784:	bf0c      	ite	eq
 8005786:	600b      	streq	r3, [r1, #0]
 8005788:	6053      	strne	r3, [r2, #4]
 800578a:	4630      	mov	r0, r6
 800578c:	f000 f8ce 	bl	800592c <__malloc_unlock>
 8005790:	f104 000b 	add.w	r0, r4, #11
 8005794:	1d23      	adds	r3, r4, #4
 8005796:	f020 0007 	bic.w	r0, r0, #7
 800579a:	1ac2      	subs	r2, r0, r3
 800579c:	d0cc      	beq.n	8005738 <_malloc_r+0x20>
 800579e:	1a1b      	subs	r3, r3, r0
 80057a0:	50a3      	str	r3, [r4, r2]
 80057a2:	e7c9      	b.n	8005738 <_malloc_r+0x20>
 80057a4:	4622      	mov	r2, r4
 80057a6:	6864      	ldr	r4, [r4, #4]
 80057a8:	e7cc      	b.n	8005744 <_malloc_r+0x2c>
 80057aa:	1cc4      	adds	r4, r0, #3
 80057ac:	f024 0403 	bic.w	r4, r4, #3
 80057b0:	42a0      	cmp	r0, r4
 80057b2:	d0e3      	beq.n	800577c <_malloc_r+0x64>
 80057b4:	1a21      	subs	r1, r4, r0
 80057b6:	4630      	mov	r0, r6
 80057b8:	f000 f808 	bl	80057cc <_sbrk_r>
 80057bc:	3001      	adds	r0, #1
 80057be:	d1dd      	bne.n	800577c <_malloc_r+0x64>
 80057c0:	e7cf      	b.n	8005762 <_malloc_r+0x4a>
 80057c2:	bf00      	nop
 80057c4:	20003f64 	.word	0x20003f64
 80057c8:	20003f68 	.word	0x20003f68

080057cc <_sbrk_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	2300      	movs	r3, #0
 80057d0:	4d05      	ldr	r5, [pc, #20]	; (80057e8 <_sbrk_r+0x1c>)
 80057d2:	4604      	mov	r4, r0
 80057d4:	4608      	mov	r0, r1
 80057d6:	602b      	str	r3, [r5, #0]
 80057d8:	f7fa ffbc 	bl	8000754 <_sbrk>
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	d102      	bne.n	80057e6 <_sbrk_r+0x1a>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	b103      	cbz	r3, 80057e6 <_sbrk_r+0x1a>
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
 80057e8:	20004010 	.word	0x20004010

080057ec <__sread>:
 80057ec:	b510      	push	{r4, lr}
 80057ee:	460c      	mov	r4, r1
 80057f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f4:	f000 f8a0 	bl	8005938 <_read_r>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	bfab      	itete	ge
 80057fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005800:	181b      	addge	r3, r3, r0
 8005802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005806:	bfac      	ite	ge
 8005808:	6563      	strge	r3, [r4, #84]	; 0x54
 800580a:	81a3      	strhlt	r3, [r4, #12]
 800580c:	bd10      	pop	{r4, pc}

0800580e <__swrite>:
 800580e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005812:	461f      	mov	r7, r3
 8005814:	898b      	ldrh	r3, [r1, #12]
 8005816:	4605      	mov	r5, r0
 8005818:	460c      	mov	r4, r1
 800581a:	05db      	lsls	r3, r3, #23
 800581c:	4616      	mov	r6, r2
 800581e:	d505      	bpl.n	800582c <__swrite+0x1e>
 8005820:	2302      	movs	r3, #2
 8005822:	2200      	movs	r2, #0
 8005824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005828:	f000 f868 	bl	80058fc <_lseek_r>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	4632      	mov	r2, r6
 8005830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005834:	4628      	mov	r0, r5
 8005836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800583a:	81a3      	strh	r3, [r4, #12]
 800583c:	463b      	mov	r3, r7
 800583e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005842:	f000 b817 	b.w	8005874 <_write_r>

08005846 <__sseek>:
 8005846:	b510      	push	{r4, lr}
 8005848:	460c      	mov	r4, r1
 800584a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584e:	f000 f855 	bl	80058fc <_lseek_r>
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	bf15      	itete	ne
 8005858:	6560      	strne	r0, [r4, #84]	; 0x54
 800585a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800585e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005862:	81a3      	strheq	r3, [r4, #12]
 8005864:	bf18      	it	ne
 8005866:	81a3      	strhne	r3, [r4, #12]
 8005868:	bd10      	pop	{r4, pc}

0800586a <__sclose>:
 800586a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800586e:	f000 b813 	b.w	8005898 <_close_r>
	...

08005874 <_write_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	4604      	mov	r4, r0
 8005878:	4d06      	ldr	r5, [pc, #24]	; (8005894 <_write_r+0x20>)
 800587a:	4608      	mov	r0, r1
 800587c:	4611      	mov	r1, r2
 800587e:	2200      	movs	r2, #0
 8005880:	602a      	str	r2, [r5, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	f7fa ff15 	bl	80006b2 <_write>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d102      	bne.n	8005892 <_write_r+0x1e>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	b103      	cbz	r3, 8005892 <_write_r+0x1e>
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	bd38      	pop	{r3, r4, r5, pc}
 8005894:	20004010 	.word	0x20004010

08005898 <_close_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	2300      	movs	r3, #0
 800589c:	4d05      	ldr	r5, [pc, #20]	; (80058b4 <_close_r+0x1c>)
 800589e:	4604      	mov	r4, r0
 80058a0:	4608      	mov	r0, r1
 80058a2:	602b      	str	r3, [r5, #0]
 80058a4:	f7fa ff21 	bl	80006ea <_close>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d102      	bne.n	80058b2 <_close_r+0x1a>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	b103      	cbz	r3, 80058b2 <_close_r+0x1a>
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	20004010 	.word	0x20004010

080058b8 <_fstat_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	2300      	movs	r3, #0
 80058bc:	4d06      	ldr	r5, [pc, #24]	; (80058d8 <_fstat_r+0x20>)
 80058be:	4604      	mov	r4, r0
 80058c0:	4608      	mov	r0, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	602b      	str	r3, [r5, #0]
 80058c6:	f7fa ff1c 	bl	8000702 <_fstat>
 80058ca:	1c43      	adds	r3, r0, #1
 80058cc:	d102      	bne.n	80058d4 <_fstat_r+0x1c>
 80058ce:	682b      	ldr	r3, [r5, #0]
 80058d0:	b103      	cbz	r3, 80058d4 <_fstat_r+0x1c>
 80058d2:	6023      	str	r3, [r4, #0]
 80058d4:	bd38      	pop	{r3, r4, r5, pc}
 80058d6:	bf00      	nop
 80058d8:	20004010 	.word	0x20004010

080058dc <_isatty_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	2300      	movs	r3, #0
 80058e0:	4d05      	ldr	r5, [pc, #20]	; (80058f8 <_isatty_r+0x1c>)
 80058e2:	4604      	mov	r4, r0
 80058e4:	4608      	mov	r0, r1
 80058e6:	602b      	str	r3, [r5, #0]
 80058e8:	f7fa ff1b 	bl	8000722 <_isatty>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	d102      	bne.n	80058f6 <_isatty_r+0x1a>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	b103      	cbz	r3, 80058f6 <_isatty_r+0x1a>
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	bd38      	pop	{r3, r4, r5, pc}
 80058f8:	20004010 	.word	0x20004010

080058fc <_lseek_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	4604      	mov	r4, r0
 8005900:	4d06      	ldr	r5, [pc, #24]	; (800591c <_lseek_r+0x20>)
 8005902:	4608      	mov	r0, r1
 8005904:	4611      	mov	r1, r2
 8005906:	2200      	movs	r2, #0
 8005908:	602a      	str	r2, [r5, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	f7fa ff14 	bl	8000738 <_lseek>
 8005910:	1c43      	adds	r3, r0, #1
 8005912:	d102      	bne.n	800591a <_lseek_r+0x1e>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	b103      	cbz	r3, 800591a <_lseek_r+0x1e>
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	bd38      	pop	{r3, r4, r5, pc}
 800591c:	20004010 	.word	0x20004010

08005920 <__malloc_lock>:
 8005920:	4801      	ldr	r0, [pc, #4]	; (8005928 <__malloc_lock+0x8>)
 8005922:	f7ff be43 	b.w	80055ac <__retarget_lock_acquire_recursive>
 8005926:	bf00      	nop
 8005928:	20004008 	.word	0x20004008

0800592c <__malloc_unlock>:
 800592c:	4801      	ldr	r0, [pc, #4]	; (8005934 <__malloc_unlock+0x8>)
 800592e:	f7ff be3e 	b.w	80055ae <__retarget_lock_release_recursive>
 8005932:	bf00      	nop
 8005934:	20004008 	.word	0x20004008

08005938 <_read_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	4604      	mov	r4, r0
 800593c:	4d06      	ldr	r5, [pc, #24]	; (8005958 <_read_r+0x20>)
 800593e:	4608      	mov	r0, r1
 8005940:	4611      	mov	r1, r2
 8005942:	2200      	movs	r2, #0
 8005944:	602a      	str	r2, [r5, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	f7fa fe96 	bl	8000678 <_read>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d102      	bne.n	8005956 <_read_r+0x1e>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	b103      	cbz	r3, 8005956 <_read_r+0x1e>
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	20004010 	.word	0x20004010

0800595c <_init>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	bf00      	nop
 8005960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005962:	bc08      	pop	{r3}
 8005964:	469e      	mov	lr, r3
 8005966:	4770      	bx	lr

08005968 <_fini>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr
 8005974:	0000      	movs	r0, r0
	...
