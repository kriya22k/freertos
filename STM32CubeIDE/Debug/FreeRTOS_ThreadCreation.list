
FreeRTOS_ThreadCreation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080056d0  080056d0  000156d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005830  08005830  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005830  08005830  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005830  08005830  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005830  08005830  00015830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f98  20000078  080058b8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20004010  080058b8  00024010  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_line   00015aa1  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0001a47f  00000000  00000000  00035b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000332e  00000000  00000000  0004ffce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  00053300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00115497  00000000  00000000  00054818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000013b0  00000000  00000000  00169cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004df5  00000000  00000000  0016b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016fe55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f28  00000000  00000000  0016fea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	080056b8 	.word	0x080056b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	080056b8 	.word	0x080056b8

08000240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000278 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000244:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000246:	e003      	b.n	8000250 <LoopCopyDataInit>

08000248 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800024a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800024c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800024e:	3104      	adds	r1, #4

08000250 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000254:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000256:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000258:	d3f6      	bcc.n	8000248 <CopyDataInit>
	ldr	r2, =_sbss
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <LoopForever+0x12>)
	b	LoopFillZerobss
 800025c:	e002      	b.n	8000264 <LoopFillZerobss>

0800025e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800025e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000260:	f842 3b04 	str.w	r3, [r2], #4

08000264 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <LoopForever+0x16>)
	cmp	r2, r3
 8000266:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000268:	d3f9      	bcc.n	800025e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800026a:	f000 f969 	bl	8000540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f004 fa0f 	bl	8004690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000272:	f004 f92f 	bl	80044d4 <main>

08000276 <LoopForever>:

LoopForever:
    b LoopForever
 8000276:	e7fe      	b.n	8000276 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000278:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800027c:	08005840 	.word	0x08005840
	ldr	r0, =_sdata
 8000280:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000284:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8000288:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 800028c:	20004010 	.word	0x20004010

08000290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC1_2_IRQHandler>
	...

08000294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <HAL_MspInit+0x50>)
 800029c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800029e:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <HAL_MspInit+0x50>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6613      	str	r3, [r2, #96]	; 0x60
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <HAL_MspInit+0x50>)
 80002a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <HAL_MspInit+0x50>)
 80002b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002b6:	4a0b      	ldr	r2, [pc, #44]	; (80002e4 <HAL_MspInit+0x50>)
 80002b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002bc:	6593      	str	r3, [r2, #88]	; 0x58
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <HAL_MspInit+0x50>)
 80002c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2107      	movs	r1, #7
 80002ce:	f06f 0001 	mvn.w	r0, #1
 80002d2:	f000 fae5 	bl	80008a0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80002d6:	f000 fba5 	bl	8000a24 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000

080002e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08c      	sub	sp, #48	; 0x30
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80002f0:	2300      	movs	r3, #0
 80002f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 80002f8:	2200      	movs	r2, #0
 80002fa:	6879      	ldr	r1, [r7, #4]
 80002fc:	2031      	movs	r0, #49	; 0x31
 80002fe:	f000 facf 	bl	80008a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000302:	2031      	movs	r0, #49	; 0x31
 8000304:	f000 fae6 	bl	80008d4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000308:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <HAL_InitTick+0x9c>)
 800030a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800030c:	4a1d      	ldr	r2, [pc, #116]	; (8000384 <HAL_InitTick+0x9c>)
 800030e:	f043 0310 	orr.w	r3, r3, #16
 8000312:	6593      	str	r3, [r2, #88]	; 0x58
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <HAL_InitTick+0x9c>)
 8000316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000318:	f003 0310 	and.w	r3, r3, #16
 800031c:	60fb      	str	r3, [r7, #12]
 800031e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000320:	f107 0210 	add.w	r2, r7, #16
 8000324:	f107 0314 	add.w	r3, r7, #20
 8000328:	4611      	mov	r1, r2
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fa80 	bl	8001830 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000330:	f001 fa6a 	bl	8001808 <HAL_RCC_GetPCLK1Freq>
 8000334:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <HAL_InitTick+0xa0>)
 800033a:	fba2 2303 	umull	r2, r3, r2, r3
 800033e:	0c9b      	lsrs	r3, r3, #18
 8000340:	3b01      	subs	r3, #1
 8000342:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <HAL_InitTick+0xa4>)
 8000346:	4a12      	ldr	r2, [pc, #72]	; (8000390 <HAL_InitTick+0xa8>)
 8000348:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <HAL_InitTick+0xa4>)
 800034c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000350:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <HAL_InitTick+0xa4>)
 8000354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000356:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <HAL_InitTick+0xa4>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <HAL_InitTick+0xa4>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000364:	4809      	ldr	r0, [pc, #36]	; (800038c <HAL_InitTick+0xa4>)
 8000366:	f001 fb65 	bl	8001a34 <HAL_TIM_Base_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d104      	bne.n	800037a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000370:	4806      	ldr	r0, [pc, #24]	; (800038c <HAL_InitTick+0xa4>)
 8000372:	f001 fbc1 	bl	8001af8 <HAL_TIM_Base_Start_IT>
 8000376:	4603      	mov	r3, r0
 8000378:	e000      	b.n	800037c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800037a:	2301      	movs	r3, #1
}
 800037c:	4618      	mov	r0, r3
 800037e:	3730      	adds	r7, #48	; 0x30
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	431bde83 	.word	0x431bde83
 800038c:	20003f60 	.word	0x20003f60
 8000390:	40001000 	.word	0x40001000

08000394 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000398:	4802      	ldr	r0, [pc, #8]	; (80003a4 <TIM6_IRQHandler+0x10>)
 800039a:	f001 fc1d 	bl	8001bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20003f60 	.word	0x20003f60

080003a8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <ITM_SendChar+0x48>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <ITM_SendChar+0x48>)
 80003b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003bc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <ITM_SendChar+0x4c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a0c      	ldr	r2, [pc, #48]	; (80003f4 <ITM_SendChar+0x4c>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80003ca:	bf00      	nop
 80003cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0f8      	beq.n	80003cc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	6013      	str	r3, [r2, #0]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000edfc 	.word	0xe000edfc
 80003f4:	e0000e00 	.word	0xe0000e00

080003f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	60f8      	str	r0, [r7, #12]
 8000400:	60b9      	str	r1, [r7, #8]
 8000402:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
 8000408:	e00a      	b.n	8000420 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800040a:	e000      	b.n	800040e <_read+0x16>
 800040c:	bf00      	nop
 800040e:	4601      	mov	r1, r0
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	1c5a      	adds	r2, r3, #1
 8000414:	60ba      	str	r2, [r7, #8]
 8000416:	b2ca      	uxtb	r2, r1
 8000418:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	3301      	adds	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	697a      	ldr	r2, [r7, #20]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	429a      	cmp	r2, r3
 8000426:	dbf0      	blt.n	800040a <_read+0x12>
	}

return len;
 8000428:	687b      	ldr	r3, [r7, #4]
}
 800042a:	4618      	mov	r0, r3
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b086      	sub	sp, #24
 8000436:	af00      	add	r7, sp, #0
 8000438:	60f8      	str	r0, [r7, #12]
 800043a:	60b9      	str	r1, [r7, #8]
 800043c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
 8000442:	e009      	b.n	8000458 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	1c5a      	adds	r2, r3, #1
 8000448:	60ba      	str	r2, [r7, #8]
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ffab 	bl	80003a8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	3301      	adds	r3, #1
 8000456:	617b      	str	r3, [r7, #20]
 8000458:	697a      	ldr	r2, [r7, #20]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	429a      	cmp	r2, r3
 800045e:	dbf1      	blt.n	8000444 <_write+0x12>
	}
	return len;
 8000460:	687b      	ldr	r3, [r7, #4]
}
 8000462:	4618      	mov	r0, r3
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <_close>:

int _close(int file)
{
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
	return -1;
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000476:	4618      	mov	r0, r3
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000492:	605a      	str	r2, [r3, #4]
	return 0;
 8000494:	2300      	movs	r3, #0
}
 8000496:	4618      	mov	r0, r3
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <_isatty>:

int _isatty(int file)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
	return 1;
 80004aa:	2301      	movs	r3, #1
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	607a      	str	r2, [r7, #4]
	return 0;
 80004c4:	2300      	movs	r3, #0
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004dc:	4a14      	ldr	r2, [pc, #80]	; (8000530 <_sbrk+0x5c>)
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <_sbrk+0x60>)
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <_sbrk+0x64>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d102      	bne.n	80004f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <_sbrk+0x64>)
 80004f2:	4a12      	ldr	r2, [pc, #72]	; (800053c <_sbrk+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <_sbrk+0x64>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4413      	add	r3, r2
 80004fe:	693a      	ldr	r2, [r7, #16]
 8000500:	429a      	cmp	r2, r3
 8000502:	d207      	bcs.n	8000514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000504:	f004 f8be 	bl	8004684 <__errno>
 8000508:	4603      	mov	r3, r0
 800050a:	220c      	movs	r2, #12
 800050c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800050e:	f04f 33ff 	mov.w	r3, #4294967295
 8000512:	e009      	b.n	8000528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <_sbrk+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <_sbrk+0x64>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4413      	add	r3, r2
 8000522:	4a05      	ldr	r2, [pc, #20]	; (8000538 <_sbrk+0x64>)
 8000524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000526:	68fb      	ldr	r3, [r7, #12]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20030000 	.word	0x20030000
 8000534:	00000800 	.word	0x00000800
 8000538:	20000094 	.word	0x20000094
 800053c:	20004010 	.word	0x20004010

08000540 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <SystemInit+0x20>)
 8000546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800054a:	4a05      	ldr	r2, [pc, #20]	; (8000560 <SystemInit+0x20>)
 800054c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b087      	sub	sp, #28
 8000568:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800056a:	4b4f      	ldr	r3, [pc, #316]	; (80006a8 <SystemCoreClockUpdate+0x144>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f003 0308 	and.w	r3, r3, #8
 8000572:	2b00      	cmp	r3, #0
 8000574:	d107      	bne.n	8000586 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000576:	4b4c      	ldr	r3, [pc, #304]	; (80006a8 <SystemCoreClockUpdate+0x144>)
 8000578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800057c:	0a1b      	lsrs	r3, r3, #8
 800057e:	f003 030f 	and.w	r3, r3, #15
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	e005      	b.n	8000592 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000586:	4b48      	ldr	r3, [pc, #288]	; (80006a8 <SystemCoreClockUpdate+0x144>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	091b      	lsrs	r3, r3, #4
 800058c:	f003 030f 	and.w	r3, r3, #15
 8000590:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000592:	4a46      	ldr	r2, [pc, #280]	; (80006ac <SystemCoreClockUpdate+0x148>)
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800059a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800059c:	4b42      	ldr	r3, [pc, #264]	; (80006a8 <SystemCoreClockUpdate+0x144>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	f003 030c 	and.w	r3, r3, #12
 80005a4:	2b0c      	cmp	r3, #12
 80005a6:	d866      	bhi.n	8000676 <SystemCoreClockUpdate+0x112>
 80005a8:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <SystemCoreClockUpdate+0x4c>)
 80005aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ae:	bf00      	nop
 80005b0:	080005e5 	.word	0x080005e5
 80005b4:	08000677 	.word	0x08000677
 80005b8:	08000677 	.word	0x08000677
 80005bc:	08000677 	.word	0x08000677
 80005c0:	080005ed 	.word	0x080005ed
 80005c4:	08000677 	.word	0x08000677
 80005c8:	08000677 	.word	0x08000677
 80005cc:	08000677 	.word	0x08000677
 80005d0:	080005f5 	.word	0x080005f5
 80005d4:	08000677 	.word	0x08000677
 80005d8:	08000677 	.word	0x08000677
 80005dc:	08000677 	.word	0x08000677
 80005e0:	080005fd 	.word	0x080005fd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80005e4:	4a32      	ldr	r2, [pc, #200]	; (80006b0 <SystemCoreClockUpdate+0x14c>)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	6013      	str	r3, [r2, #0]
      break;
 80005ea:	e048      	b.n	800067e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80005ec:	4b30      	ldr	r3, [pc, #192]	; (80006b0 <SystemCoreClockUpdate+0x14c>)
 80005ee:	4a31      	ldr	r2, [pc, #196]	; (80006b4 <SystemCoreClockUpdate+0x150>)
 80005f0:	601a      	str	r2, [r3, #0]
      break;
 80005f2:	e044      	b.n	800067e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80005f4:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <SystemCoreClockUpdate+0x14c>)
 80005f6:	4a2f      	ldr	r2, [pc, #188]	; (80006b4 <SystemCoreClockUpdate+0x150>)
 80005f8:	601a      	str	r2, [r3, #0]
      break;
 80005fa:	e040      	b.n	800067e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <SystemCoreClockUpdate+0x144>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	f003 0303 	and.w	r3, r3, #3
 8000604:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000606:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <SystemCoreClockUpdate+0x144>)
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	091b      	lsrs	r3, r3, #4
 800060c:	f003 030f 	and.w	r3, r3, #15
 8000610:	3301      	adds	r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2b02      	cmp	r3, #2
 8000618:	d003      	beq.n	8000622 <SystemCoreClockUpdate+0xbe>
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b03      	cmp	r3, #3
 800061e:	d006      	beq.n	800062e <SystemCoreClockUpdate+0xca>
 8000620:	e00b      	b.n	800063a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000622:	4a24      	ldr	r2, [pc, #144]	; (80006b4 <SystemCoreClockUpdate+0x150>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	fbb2 f3f3 	udiv	r3, r2, r3
 800062a:	613b      	str	r3, [r7, #16]
          break;
 800062c:	e00b      	b.n	8000646 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800062e:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <SystemCoreClockUpdate+0x150>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	fbb2 f3f3 	udiv	r3, r2, r3
 8000636:	613b      	str	r3, [r7, #16]
          break;
 8000638:	e005      	b.n	8000646 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800063a:	697a      	ldr	r2, [r7, #20]
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000642:	613b      	str	r3, [r7, #16]
          break;
 8000644:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <SystemCoreClockUpdate+0x144>)
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	fb02 f303 	mul.w	r3, r2, r3
 8000656:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <SystemCoreClockUpdate+0x144>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0e5b      	lsrs	r3, r3, #25
 800065e:	f003 0303 	and.w	r3, r3, #3
 8000662:	3301      	adds	r3, #1
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000668:	693a      	ldr	r2, [r7, #16]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000670:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <SystemCoreClockUpdate+0x14c>)
 8000672:	6013      	str	r3, [r2, #0]
      break;
 8000674:	e003      	b.n	800067e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <SystemCoreClockUpdate+0x14c>)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	6013      	str	r3, [r2, #0]
      break;
 800067c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <SystemCoreClockUpdate+0x144>)
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	091b      	lsrs	r3, r3, #4
 8000684:	f003 030f 	and.w	r3, r3, #15
 8000688:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <SystemCoreClockUpdate+0x154>)
 800068a:	5cd3      	ldrb	r3, [r2, r3]
 800068c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <SystemCoreClockUpdate+0x14c>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	fa22 f303 	lsr.w	r3, r2, r3
 8000698:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <SystemCoreClockUpdate+0x14c>)
 800069a:	6013      	str	r3, [r2, #0]
}
 800069c:	bf00      	nop
 800069e:	371c      	adds	r7, #28
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	40021000 	.word	0x40021000
 80006ac:	08005754 	.word	0x08005754
 80006b0:	20000000 	.word	0x20000000
 80006b4:	00f42400 	.word	0x00f42400
 80006b8:	0800573c 	.word	0x0800573c

080006bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006c2:	2300      	movs	r3, #0
 80006c4:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80006c6:	2004      	movs	r0, #4
 80006c8:	f000 f8df 	bl	800088a <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80006cc:	f7ff ff4a 	bl	8000564 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff fe09 	bl	80002e8 <HAL_InitTick>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80006dc:	2301      	movs	r3, #1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	e001      	b.n	80006e6 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006e2:	f7ff fdd7 	bl	8000294 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_IncTick+0x20>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_IncTick+0x24>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <HAL_IncTick+0x24>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000008 	.word	0x20000008
 8000714:	20003fac 	.word	0x20003fac

08000718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return uwTick;
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <HAL_GetTick+0x14>)
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20003fac 	.word	0x20003fac

08000730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <__NVIC_SetPriorityGrouping+0x44>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800074c:	4013      	ands	r3, r2
 800074e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800075c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000762:	4a04      	ldr	r2, [pc, #16]	; (8000774 <__NVIC_SetPriorityGrouping+0x44>)
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	60d3      	str	r3, [r2, #12]
}
 8000768:	bf00      	nop
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <__NVIC_GetPriorityGrouping+0x18>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	0a1b      	lsrs	r3, r3, #8
 8000782:	f003 0307 	and.w	r3, r3, #7
}
 8000786:	4618      	mov	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	db0b      	blt.n	80007be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	f003 021f 	and.w	r2, r3, #31
 80007ac:	4907      	ldr	r1, [pc, #28]	; (80007cc <__NVIC_EnableIRQ+0x38>)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	095b      	lsrs	r3, r3, #5
 80007b4:	2001      	movs	r0, #1
 80007b6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000e100 	.word	0xe000e100

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db0a      	blt.n	80007fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	490c      	ldr	r1, [pc, #48]	; (800081c <__NVIC_SetPriority+0x4c>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	0152      	lsls	r2, r2, #5
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f8:	e00a      	b.n	8000810 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4908      	ldr	r1, [pc, #32]	; (8000820 <__NVIC_SetPriority+0x50>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	3b04      	subs	r3, #4
 8000808:	0152      	lsls	r2, r2, #5
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	440b      	add	r3, r1
 800080e:	761a      	strb	r2, [r3, #24]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f1c3 0307 	rsb	r3, r3, #7
 800083e:	2b03      	cmp	r3, #3
 8000840:	bf28      	it	cs
 8000842:	2303      	movcs	r3, #3
 8000844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3303      	adds	r3, #3
 800084a:	2b06      	cmp	r3, #6
 800084c:	d902      	bls.n	8000854 <NVIC_EncodePriority+0x30>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3b04      	subs	r3, #4
 8000852:	e000      	b.n	8000856 <NVIC_EncodePriority+0x32>
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43da      	mvns	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	401a      	ands	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43d9      	mvns	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	4313      	orrs	r3, r2
         );
}
 800087e:	4618      	mov	r0, r3
 8000880:	3724      	adds	r7, #36	; 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ff4c 	bl	8000730 <__NVIC_SetPriorityGrouping>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008ae:	f7ff ff63 	bl	8000778 <__NVIC_GetPriorityGrouping>
 80008b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	68b9      	ldr	r1, [r7, #8]
 80008b8:	6978      	ldr	r0, [r7, #20]
 80008ba:	f7ff ffb3 	bl	8000824 <NVIC_EncodePriority>
 80008be:	4602      	mov	r2, r0
 80008c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff82 	bl	80007d0 <__NVIC_SetPriority>
}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff56 	bl	8000794 <__NVIC_EnableIRQ>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80008fc:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d002      	beq.n	800090e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
 800090c:	e007      	b.n	800091e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f023 0204 	bic.w	r2, r3, #4
 8000916:	4905      	ldr	r1, [pc, #20]	; (800092c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4313      	orrs	r3, r2
 800091c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	40030400 	.word	0x40030400

08000930 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_ICACHE_Enable+0x1c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <HAL_ICACHE_Enable+0x1c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	40030400 	.word	0x40030400

08000950 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <HAL_PWREx_GetVoltageRange+0x18>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40007000 	.word	0x40007000

0800096c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800097c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800097e:	f000 f861 	bl	8000a44 <HAL_PWREx_SMPS_GetEffectiveMode>
 8000982:	4603      	mov	r3, r0
 8000984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000988:	d101      	bne.n	800098e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e03e      	b.n	8000a0c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800099a:	d101      	bne.n	80009a0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e035      	b.n	8000a0c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80009a0:	68ba      	ldr	r2, [r7, #8]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d101      	bne.n	80009ac <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80009a8:	2300      	movs	r3, #0
 80009aa:	e02f      	b.n	8000a0c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80009b4:	4917      	ldr	r1, [pc, #92]	; (8000a14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	095b      	lsrs	r3, r3, #5
 80009c2:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80009c4:	fba2 2303 	umull	r2, r3, r2, r3
 80009c8:	09db      	lsrs	r3, r3, #7
 80009ca:	2232      	movs	r2, #50	; 0x32
 80009cc:	fb02 f303 	mul.w	r3, r2, r3
 80009d0:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80009d2:	fba2 2303 	umull	r2, r3, r2, r3
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	3301      	adds	r3, #1
 80009da:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80009dc:	e002      	b.n	80009e4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009f0:	d102      	bne.n	80009f8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f2      	bne.n	80009de <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a04:	d101      	bne.n	8000a0a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8000a06:	2303      	movs	r3, #3
 8000a08:	e000      	b.n	8000a0c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40007000 	.word	0x40007000
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	0a7c5ac5 	.word	0x0a7c5ac5
 8000a20:	cccccccd 	.word	0xcccccccd

08000a24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a32:	6093      	str	r3, [r2, #8]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40007000 	.word	0x40007000

08000a44 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8000a4c:	691b      	ldr	r3, [r3, #16]
 8000a4e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8000a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	e00a      	b.n	8000a78 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d103      	bne.n	8000a74 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8000a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	e001      	b.n	8000a78 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40007000 	.word	0x40007000

08000a8c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	f000 bcc2 	b.w	8001424 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000aa0:	4ba3      	ldr	r3, [pc, #652]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	f003 030c 	and.w	r3, r3, #12
 8000aa8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000aaa:	4ba1      	ldr	r3, [pc, #644]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 0310 	and.w	r3, r3, #16
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	f000 80e9 	beq.w	8000c94 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d006      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x4a>
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	2b0c      	cmp	r3, #12
 8000acc:	f040 8083 	bne.w	8000bd6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d17f      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ad6:	4b96      	ldr	r3, [pc, #600]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d006      	beq.n	8000af0 <HAL_RCC_OscConfig+0x64>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f000 bc9a 	b.w	8001424 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000af4:	4b8e      	ldr	r3, [pc, #568]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0308 	and.w	r3, r3, #8
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d004      	beq.n	8000b0a <HAL_RCC_OscConfig+0x7e>
 8000b00:	4b8b      	ldr	r3, [pc, #556]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b08:	e005      	b.n	8000b16 <HAL_RCC_OscConfig+0x8a>
 8000b0a:	4b89      	ldr	r3, [pc, #548]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b10:	091b      	lsrs	r3, r3, #4
 8000b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d224      	bcs.n	8000b64 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 feb8 	bl	8001894 <RCC_SetFlashLatencyFromMSIRange>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	f000 bc7a 	b.w	8001424 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b30:	4b7f      	ldr	r3, [pc, #508]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a7e      	ldr	r2, [pc, #504]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000b36:	f043 0308 	orr.w	r3, r3, #8
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4b7c      	ldr	r3, [pc, #496]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b48:	4979      	ldr	r1, [pc, #484]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b4e:	4b78      	ldr	r3, [pc, #480]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	021b      	lsls	r3, r3, #8
 8000b5c:	4974      	ldr	r1, [pc, #464]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	604b      	str	r3, [r1, #4]
 8000b62:	e026      	b.n	8000bb2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b64:	4b72      	ldr	r3, [pc, #456]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a71      	ldr	r2, [pc, #452]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000b6a:	f043 0308 	orr.w	r3, r3, #8
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b6f      	ldr	r3, [pc, #444]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7c:	496c      	ldr	r1, [pc, #432]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b82:	4b6b      	ldr	r3, [pc, #428]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a1b      	ldr	r3, [r3, #32]
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	4967      	ldr	r1, [pc, #412]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000b92:	4313      	orrs	r3, r2
 8000b94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d10a      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fe77 	bl	8001894 <RCC_SetFlashLatencyFromMSIRange>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	f000 bc39 	b.w	8001424 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000bb2:	f000 fe15 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a5e      	ldr	r2, [pc, #376]	; (8000d34 <HAL_RCC_OscConfig+0x2a8>)
 8000bba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000bbc:	4b5e      	ldr	r3, [pc, #376]	; (8000d38 <HAL_RCC_OscConfig+0x2ac>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fb91 	bl	80002e8 <HAL_InitTick>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d060      	beq.n	8000c92 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	f000 bc27 	b.w	8001424 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d039      	beq.n	8000c52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000bde:	4b54      	ldr	r3, [pc, #336]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a53      	ldr	r2, [pc, #332]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000bea:	f7ff fd95 	bl	8000718 <HAL_GetTick>
 8000bee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000bf0:	e00f      	b.n	8000c12 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000bf2:	f7ff fd91 	bl	8000718 <HAL_GetTick>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d908      	bls.n	8000c12 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c00:	4b4b      	ldr	r3, [pc, #300]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	f000 bc09 	b.w	8001424 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c12:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0e9      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c1e:	4b44      	ldr	r3, [pc, #272]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a43      	ldr	r2, [pc, #268]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	4b41      	ldr	r3, [pc, #260]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c36:	493e      	ldr	r1, [pc, #248]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c3c:	4b3c      	ldr	r3, [pc, #240]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	021b      	lsls	r3, r3, #8
 8000c4a:	4939      	ldr	r1, [pc, #228]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	604b      	str	r3, [r1, #4]
 8000c50:	e020      	b.n	8000c94 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000c52:	4b37      	ldr	r3, [pc, #220]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a36      	ldr	r2, [pc, #216]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c5e:	f7ff fd5b 	bl	8000718 <HAL_GetTick>
 8000c62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c64:	e00e      	b.n	8000c84 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c66:	f7ff fd57 	bl	8000718 <HAL_GetTick>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d907      	bls.n	8000c84 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c74:	4b2e      	ldr	r3, [pc, #184]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8000c80:	2303      	movs	r3, #3
 8000c82:	e3cf      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c84:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1ea      	bne.n	8000c66 <HAL_RCC_OscConfig+0x1da>
 8000c90:	e000      	b.n	8000c94 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d07e      	beq.n	8000d9e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	d005      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x226>
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	2b0c      	cmp	r3, #12
 8000caa:	d10e      	bne.n	8000cca <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d10b      	bne.n	8000cca <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d06e      	beq.n	8000d9c <HAL_RCC_OscConfig+0x310>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d16a      	bne.n	8000d9c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e3ac      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd2:	d106      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x256>
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	e01d      	b.n	8000d1e <HAL_RCC_OscConfig+0x292>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cea:	d10c      	bne.n	8000d06 <HAL_RCC_OscConfig+0x27a>
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	e00b      	b.n	8000d1e <HAL_RCC_OscConfig+0x292>
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <HAL_RCC_OscConfig+0x2a4>)
 8000d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d020      	beq.n	8000d68 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d26:	f7ff fcf7 	bl	8000718 <HAL_GetTick>
 8000d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d2c:	e015      	b.n	8000d5a <HAL_RCC_OscConfig+0x2ce>
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fcec 	bl	8000718 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b64      	cmp	r3, #100	; 0x64
 8000d48:	d907      	bls.n	8000d5a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d4a:	4b9f      	ldr	r3, [pc, #636]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e364      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d5a:	4b9b      	ldr	r3, [pc, #620]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0ea      	beq.n	8000d3c <HAL_RCC_OscConfig+0x2b0>
 8000d66:	e01a      	b.n	8000d9e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d68:	f7ff fcd6 	bl	8000718 <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d6e:	e00e      	b.n	8000d8e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d70:	f7ff fcd2 	bl	8000718 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b64      	cmp	r3, #100	; 0x64
 8000d7c:	d907      	bls.n	8000d8e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d7e:	4b92      	ldr	r3, [pc, #584]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e34a      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d8e:	4b8e      	ldr	r3, [pc, #568]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1ea      	bne.n	8000d70 <HAL_RCC_OscConfig+0x2e4>
 8000d9a:	e000      	b.n	8000d9e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d06c      	beq.n	8000e84 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	d005      	beq.n	8000dbc <HAL_RCC_OscConfig+0x330>
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	2b0c      	cmp	r3, #12
 8000db4:	d119      	bne.n	8000dea <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d116      	bne.n	8000dea <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000dbc:	4b82      	ldr	r3, [pc, #520]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d005      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x348>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e327      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd4:	4b7c      	ldr	r3, [pc, #496]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	061b      	lsls	r3, r3, #24
 8000de2:	4979      	ldr	r1, [pc, #484]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000de4:	4313      	orrs	r3, r2
 8000de6:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000de8:	e04c      	b.n	8000e84 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d029      	beq.n	8000e46 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df2:	4b75      	ldr	r3, [pc, #468]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a74      	ldr	r2, [pc, #464]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dfe:	f7ff fc8b 	bl	8000718 <HAL_GetTick>
 8000e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e04:	e00e      	b.n	8000e24 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e06:	f7ff fc87 	bl	8000718 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d907      	bls.n	8000e24 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e14:	4b6c      	ldr	r3, [pc, #432]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e2ff      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e24:	4b68      	ldr	r3, [pc, #416]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0ea      	beq.n	8000e06 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e30:	4b65      	ldr	r3, [pc, #404]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	061b      	lsls	r3, r3, #24
 8000e3e:	4962      	ldr	r1, [pc, #392]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
 8000e44:	e01e      	b.n	8000e84 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e46:	4b60      	ldr	r3, [pc, #384]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a5f      	ldr	r2, [pc, #380]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e52:	f7ff fc61 	bl	8000718 <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e58:	e00e      	b.n	8000e78 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e5a:	f7ff fc5d 	bl	8000718 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d907      	bls.n	8000e78 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e68:	4b57      	ldr	r3, [pc, #348]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e2d5      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e78:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1ea      	bne.n	8000e5a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d05f      	beq.n	8000f50 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d038      	beq.n	8000f0a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d108      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8000ea0:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea6:	4a48      	ldr	r2, [pc, #288]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000ea8:	f023 0310 	bic.w	r3, r3, #16
 8000eac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000eb0:	e007      	b.n	8000ec2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8000eb2:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eb8:	4a43      	ldr	r2, [pc, #268]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ec2:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ec8:	4a3f      	ldr	r2, [pc, #252]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fc21 	bl	8000718 <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ed8:	e00f      	b.n	8000efa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eda:	f7ff fc1d 	bl	8000718 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b07      	cmp	r3, #7
 8000ee6:	d908      	bls.n	8000efa <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ee8:	4b37      	ldr	r3, [pc, #220]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e294      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0e8      	beq.n	8000eda <HAL_RCC_OscConfig+0x44e>
 8000f08:	e022      	b.n	8000f50 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f10:	4a2d      	ldr	r2, [pc, #180]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000f12:	f023 0301 	bic.w	r3, r3, #1
 8000f16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fbfd 	bl	8000718 <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f20:	e00f      	b.n	8000f42 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f22:	f7ff fbf9 	bl	8000718 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b07      	cmp	r3, #7
 8000f2e:	d908      	bls.n	8000f42 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e270      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1e8      	bne.n	8000f22 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 8131 	beq.w	80011c0 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10d      	bne.n	8000f8a <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	4a15      	ldr	r2, [pc, #84]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_RCC_OscConfig+0x53c>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f86:	2301      	movs	r3, #1
 8000f88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <HAL_RCC_OscConfig+0x540>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d122      	bne.n	8000fdc <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HAL_RCC_OscConfig+0x540>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a0c      	ldr	r2, [pc, #48]	; (8000fcc <HAL_RCC_OscConfig+0x540>)
 8000f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fa2:	f7ff fbb9 	bl	8000718 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fa8:	e012      	b.n	8000fd0 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000faa:	f7ff fbb5 	bl	8000718 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d90b      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <HAL_RCC_OscConfig+0x540>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d105      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e22d      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fd0:	4bb8      	ldr	r3, [pc, #736]	; (80012b4 <HAL_RCC_OscConfig+0x828>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0e6      	beq.n	8000faa <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d01f      	beq.n	8001028 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d010      	beq.n	8001016 <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000ff4:	4bb0      	ldr	r3, [pc, #704]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8000ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ffa:	4aaf      	ldr	r2, [pc, #700]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001004:	4bac      	ldr	r3, [pc, #688]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800100a:	4aab      	ldr	r2, [pc, #684]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001014:	e018      	b.n	8001048 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001016:	4ba8      	ldr	r3, [pc, #672]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800101c:	4aa6      	ldr	r2, [pc, #664]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001026:	e00f      	b.n	8001048 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001028:	4ba3      	ldr	r3, [pc, #652]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800102a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800102e:	4aa2      	ldr	r2, [pc, #648]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001038:	4b9f      	ldr	r3, [pc, #636]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800103a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800103e:	4a9e      	ldr	r2, [pc, #632]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001040:	f023 0304 	bic.w	r3, r3, #4
 8001044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d068      	beq.n	8001122 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001050:	f7ff fb62 	bl	8000718 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001056:	e011      	b.n	800107c <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001058:	f7ff fb5e 	bl	8000718 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	f241 3288 	movw	r2, #5000	; 0x1388
 8001066:	4293      	cmp	r3, r2
 8001068:	d908      	bls.n	800107c <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800106a:	4b93      	ldr	r3, [pc, #588]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800106c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e1d3      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800107c:	4b8e      	ldr	r3, [pc, #568]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800107e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0e6      	beq.n	8001058 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	2b00      	cmp	r3, #0
 8001094:	d022      	beq.n	80010dc <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001096:	4b88      	ldr	r3, [pc, #544]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800109c:	4a86      	ldr	r2, [pc, #536]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800109e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80010a6:	e011      	b.n	80010cc <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a8:	f7ff fb36 	bl	8000718 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d908      	bls.n	80010cc <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80010ba:	4b7f      	ldr	r3, [pc, #508]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 80010bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e1ab      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80010cc:	4b7a      	ldr	r3, [pc, #488]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 80010ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0e6      	beq.n	80010a8 <HAL_RCC_OscConfig+0x61c>
 80010da:	e068      	b.n	80011ae <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80010dc:	4b76      	ldr	r3, [pc, #472]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 80010de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010e2:	4a75      	ldr	r2, [pc, #468]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 80010e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80010ec:	e011      	b.n	8001112 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ee:	f7ff fb13 	bl	8000718 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d908      	bls.n	8001112 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001100:	4b6d      	ldr	r3, [pc, #436]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e188      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001112:	4b69      	ldr	r3, [pc, #420]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1e6      	bne.n	80010ee <HAL_RCC_OscConfig+0x662>
 8001120:	e045      	b.n	80011ae <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001122:	f7ff faf9 	bl	8000718 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001128:	e011      	b.n	800114e <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800112a:	f7ff faf5 	bl	8000718 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	f241 3288 	movw	r2, #5000	; 0x1388
 8001138:	4293      	cmp	r3, r2
 800113a:	d908      	bls.n	800114e <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800113c:	4b5e      	ldr	r3, [pc, #376]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800113e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e16a      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800114e:	4b5a      	ldr	r3, [pc, #360]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1e6      	bne.n	800112a <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800115c:	4b56      	ldr	r3, [pc, #344]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800115e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	2b00      	cmp	r3, #0
 8001168:	d021      	beq.n	80011ae <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800116a:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800116c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001170:	4a51      	ldr	r2, [pc, #324]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800117a:	e011      	b.n	80011a0 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117c:	f7ff facc 	bl	8000718 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	f241 3288 	movw	r2, #5000	; 0x1388
 800118a:	4293      	cmp	r3, r2
 800118c:	d908      	bls.n	80011a0 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800118e:	4b4a      	ldr	r3, [pc, #296]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e141      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80011a0:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 80011a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1e6      	bne.n	800117c <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d105      	bne.n	80011c0 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b4:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 80011b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b8:	4a3f      	ldr	r2, [pc, #252]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 80011ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0320 	and.w	r3, r3, #32
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d04a      	beq.n	8001262 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d023      	beq.n	800121c <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011d4:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 80011d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011da:	4a37      	ldr	r2, [pc, #220]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e4:	f7ff fa98 	bl	8000718 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011ea:	e00f      	b.n	800120c <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011ec:	f7ff fa94 	bl	8000718 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d908      	bls.n	800120c <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011fa:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 80011fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e10b      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800120c:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800120e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0e8      	beq.n	80011ec <HAL_RCC_OscConfig+0x760>
 800121a:	e022      	b.n	8001262 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800121e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001222:	4a25      	ldr	r2, [pc, #148]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800122c:	f7ff fa74 	bl	8000718 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001232:	e00f      	b.n	8001254 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001234:	f7ff fa70 	bl	8000718 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d908      	bls.n	8001254 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e0e7      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001256:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1e8      	bne.n	8001234 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 80db 	beq.w	8001422 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 030c 	and.w	r3, r3, #12
 8001274:	2b0c      	cmp	r3, #12
 8001276:	f000 8095 	beq.w	80013a4 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	2b02      	cmp	r3, #2
 8001280:	d16a      	bne.n	8001358 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001288:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800128c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128e:	f7ff fa43 	bl	8000718 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001294:	e012      	b.n	80012bc <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001296:	f7ff fa3f 	bl	8000718 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d90b      	bls.n	80012bc <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e0b7      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
 80012b4:	40007000 	.word	0x40007000
 80012b8:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012bc:	4b5b      	ldr	r3, [pc, #364]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1e6      	bne.n	8001296 <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c8:	4b58      	ldr	r3, [pc, #352]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	4b58      	ldr	r3, [pc, #352]	; (8001430 <HAL_RCC_OscConfig+0x9a4>)
 80012ce:	4013      	ands	r3, r2
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012d8:	3a01      	subs	r2, #1
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	4311      	orrs	r1, r2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012e2:	0212      	lsls	r2, r2, #8
 80012e4:	4311      	orrs	r1, r2
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012ea:	0852      	lsrs	r2, r2, #1
 80012ec:	3a01      	subs	r2, #1
 80012ee:	0552      	lsls	r2, r2, #21
 80012f0:	4311      	orrs	r1, r2
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80012f6:	0852      	lsrs	r2, r2, #1
 80012f8:	3a01      	subs	r2, #1
 80012fa:	0652      	lsls	r2, r2, #25
 80012fc:	4311      	orrs	r1, r2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001302:	06d2      	lsls	r2, r2, #27
 8001304:	430a      	orrs	r2, r1
 8001306:	4949      	ldr	r1, [pc, #292]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 8001308:	4313      	orrs	r3, r2
 800130a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800130c:	4b47      	ldr	r3, [pc, #284]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a46      	ldr	r2, [pc, #280]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 8001312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001316:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001318:	4b44      	ldr	r3, [pc, #272]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4a43      	ldr	r2, [pc, #268]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 800131e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001322:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff f9f8 	bl	8000718 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800132a:	e00e      	b.n	800134a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132c:	f7ff f9f4 	bl	8000718 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d907      	bls.n	800134a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800133a:	4b3c      	ldr	r3, [pc, #240]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e06c      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800134a:	4b38      	ldr	r3, [pc, #224]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0ea      	beq.n	800132c <HAL_RCC_OscConfig+0x8a0>
 8001356:	e064      	b.n	8001422 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001358:	4b34      	ldr	r3, [pc, #208]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a33      	ldr	r2, [pc, #204]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 800135e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7ff f9d8 	bl	8000718 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800136a:	e00e      	b.n	800138a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff f9d4 	bl	8000718 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d907      	bls.n	800138a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e04c      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1ea      	bne.n	800136c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	4924      	ldr	r1, [pc, #144]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 800139c:	4b25      	ldr	r3, [pc, #148]	; (8001434 <HAL_RCC_OscConfig+0x9a8>)
 800139e:	4013      	ands	r3, r2
 80013a0:	60cb      	str	r3, [r1, #12]
 80013a2:	e03e      	b.n	8001422 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e039      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_RCC_OscConfig+0x9a0>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0203 	and.w	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d12c      	bne.n	800141e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ce:	3b01      	subs	r3, #1
 80013d0:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d123      	bne.n	800141e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e0:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d11b      	bne.n	800141e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d113      	bne.n	800141e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	085b      	lsrs	r3, r3, #1
 8001402:	3b01      	subs	r3, #1
 8001404:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001406:	429a      	cmp	r2, r3
 8001408:	d109      	bne.n	800141e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001414:	085b      	lsrs	r3, r3, #1
 8001416:	3b01      	subs	r3, #1
 8001418:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800141a:	429a      	cmp	r2, r3
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40021000 	.word	0x40021000
 8001430:	019f800c 	.word	0x019f800c
 8001434:	feeefffc 	.word	0xfeeefffc

08001438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e11c      	b.n	800168a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001450:	4b90      	ldr	r3, [pc, #576]	; (8001694 <HAL_RCC_ClockConfig+0x25c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d910      	bls.n	8001480 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	4b8d      	ldr	r3, [pc, #564]	; (8001694 <HAL_RCC_ClockConfig+0x25c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 020f 	bic.w	r2, r3, #15
 8001466:	498b      	ldr	r1, [pc, #556]	; (8001694 <HAL_RCC_ClockConfig+0x25c>)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800146e:	4b89      	ldr	r3, [pc, #548]	; (8001694 <HAL_RCC_ClockConfig+0x25c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d001      	beq.n	8001480 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e104      	b.n	800168a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d010      	beq.n	80014ae <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	4b81      	ldr	r3, [pc, #516]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001498:	429a      	cmp	r2, r3
 800149a:	d908      	bls.n	80014ae <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149c:	4b7e      	ldr	r3, [pc, #504]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	497b      	ldr	r1, [pc, #492]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8085 	beq.w	80015c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d11f      	bne.n	8001504 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c4:	4b74      	ldr	r3, [pc, #464]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0da      	b.n	800168a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80014d4:	f000 fa42 	bl	800195c <RCC_GetSysClockFreqFromPLLSource>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4a6f      	ldr	r2, [pc, #444]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d947      	bls.n	8001572 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80014e2:	4b6d      	ldr	r3, [pc, #436]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d141      	bne.n	8001572 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014ee:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014f6:	4a68      	ldr	r2, [pc, #416]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 80014f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	e036      	b.n	8001572 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d107      	bne.n	800151c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150c:	4b62      	ldr	r3, [pc, #392]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d115      	bne.n	8001544 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0b6      	b.n	800168a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d107      	bne.n	8001534 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001524:	4b5c      	ldr	r3, [pc, #368]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d109      	bne.n	8001544 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0aa      	b.n	800168a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001534:	4b58      	ldr	r3, [pc, #352]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0a2      	b.n	800168a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001544:	f000 f8b0 	bl	80016a8 <HAL_RCC_GetSysClockFreq>
 8001548:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4a53      	ldr	r2, [pc, #332]	; (800169c <HAL_RCC_ClockConfig+0x264>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d90f      	bls.n	8001572 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001552:	4b51      	ldr	r3, [pc, #324]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d109      	bne.n	8001572 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800155e:	4b4e      	ldr	r3, [pc, #312]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001566:	4a4c      	ldr	r2, [pc, #304]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001572:	4b49      	ldr	r3, [pc, #292]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f023 0203 	bic.w	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4946      	ldr	r1, [pc, #280]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001580:	4313      	orrs	r3, r2
 8001582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001584:	f7ff f8c8 	bl	8000718 <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158a:	e013      	b.n	80015b4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158c:	f7ff f8c4 	bl	8000718 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d90a      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159e:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 020c 	and.w	r2, r3, #12
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e06a      	b.n	800168a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b4:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 020c 	and.w	r2, r3, #12
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d1e2      	bne.n	800158c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2b80      	cmp	r3, #128	; 0x80
 80015ca:	d105      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a31      	ldr	r2, [pc, #196]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 80015d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015d6:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d010      	beq.n	8001606 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d208      	bcs.n	8001606 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4925      	ldr	r1, [pc, #148]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <HAL_RCC_ClockConfig+0x25c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d210      	bcs.n	8001636 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <HAL_RCC_ClockConfig+0x25c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 020f 	bic.w	r2, r3, #15
 800161c:	491d      	ldr	r1, [pc, #116]	; (8001694 <HAL_RCC_ClockConfig+0x25c>)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_RCC_ClockConfig+0x25c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d001      	beq.n	8001636 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e029      	b.n	800168a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	4912      	ldr	r1, [pc, #72]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001650:	4313      	orrs	r3, r2
 8001652:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d009      	beq.n	8001674 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	490a      	ldr	r1, [pc, #40]	; (8001698 <HAL_RCC_ClockConfig+0x260>)
 8001670:	4313      	orrs	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001674:	f000 f8b4 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8001678:	4603      	mov	r3, r0
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <HAL_RCC_ClockConfig+0x268>)
 800167c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_RCC_ClockConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fe30 	bl	80002e8 <HAL_InitTick>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40022000 	.word	0x40022000
 8001698:	40021000 	.word	0x40021000
 800169c:	04c4b400 	.word	0x04c4b400
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b6:	4b47      	ldr	r3, [pc, #284]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c0:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x34>
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2b0c      	cmp	r3, #12
 80016d4:	d121      	bne.n	800171a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d11e      	bne.n	800171a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016dc:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d107      	bne.n	80016f8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016e8:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80016ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	e005      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016f8:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001704:	4a34      	ldr	r2, [pc, #208]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x130>)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10d      	bne.n	8001730 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b04      	cmp	r3, #4
 800171e:	d102      	bne.n	8001726 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001720:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <HAL_RCC_GetSysClockFreq+0x134>)
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	e004      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	2b08      	cmp	r3, #8
 800172a:	d101      	bne.n	8001730 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_RCC_GetSysClockFreq+0x134>)
 800172e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d146      	bne.n	80017c4 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3301      	adds	r3, #1
 800174c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d003      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0xb4>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d00d      	beq.n	8001776 <HAL_RCC_GetSysClockFreq+0xce>
 800175a:	e019      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800175c:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <HAL_RCC_GetSysClockFreq+0x134>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	fbb2 f3f3 	udiv	r3, r2, r3
 8001764:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001766:	68d2      	ldr	r2, [r2, #12]
 8001768:	0a12      	lsrs	r2, r2, #8
 800176a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800176e:	fb02 f303 	mul.w	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
        break;
 8001774:	e019      	b.n	80017aa <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001776:	4a19      	ldr	r2, [pc, #100]	; (80017dc <HAL_RCC_GetSysClockFreq+0x134>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001780:	68d2      	ldr	r2, [r2, #12]
 8001782:	0a12      	lsrs	r2, r2, #8
 8001784:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001788:	fb02 f303 	mul.w	r3, r2, r3
 800178c:	617b      	str	r3, [r7, #20]
        break;
 800178e:	e00c      	b.n	80017aa <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	fbb2 f3f3 	udiv	r3, r2, r3
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800179a:	68d2      	ldr	r2, [r2, #12]
 800179c:	0a12      	lsrs	r2, r2, #8
 800179e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]
        break;
 80017a8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	0e5b      	lsrs	r3, r3, #25
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	3301      	adds	r3, #1
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017c4:	69bb      	ldr	r3, [r7, #24]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	08005754 	.word	0x08005754
 80017dc:	00f42400 	.word	0x00f42400

080017e0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80017e4:	f7ff ff60 	bl	80016a8 <HAL_RCC_GetSysClockFreq>
 80017e8:	4602      	mov	r2, r0
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_RCC_GetHCLKFreq+0x20>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	4903      	ldr	r1, [pc, #12]	; (8001804 <HAL_RCC_GetHCLKFreq+0x24>)
 80017f6:	5ccb      	ldrb	r3, [r1, r3]
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	0800573c 	.word	0x0800573c

08001808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800180c:	f7ff ffe8 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8001810:	4602      	mov	r2, r0
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	0a1b      	lsrs	r3, r3, #8
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	4903      	ldr	r1, [pc, #12]	; (800182c <HAL_RCC_GetPCLK1Freq+0x24>)
 800181e:	5ccb      	ldrb	r3, [r1, r3]
 8001820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001824:	4618      	mov	r0, r3
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	0800574c 	.word	0x0800574c

08001830 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	220f      	movs	r2, #15
 800183e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_RCC_GetClockConfig+0x5c>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 0203 	and.w	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_RCC_GetClockConfig+0x5c>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <HAL_RCC_GetClockConfig+0x5c>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_RCC_GetClockConfig+0x5c>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	08db      	lsrs	r3, r3, #3
 800186a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <HAL_RCC_GetClockConfig+0x60>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 020f 	and.w	r2, r3, #15
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	601a      	str	r2, [r3, #0]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	40022000 	.word	0x40022000

08001894 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018a0:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80018a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018ac:	f7ff f850 	bl	8000950 <HAL_PWREx_GetVoltageRange>
 80018b0:	6138      	str	r0, [r7, #16]
 80018b2:	e014      	b.n	80018de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	4a26      	ldr	r2, [pc, #152]	; (8001954 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80018ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018be:	6593      	str	r3, [r2, #88]	; 0x58
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80018c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018cc:	f7ff f840 	bl	8000950 <HAL_PWREx_GetVoltageRange>
 80018d0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	4a1f      	ldr	r2, [pc, #124]	; (8001954 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80018d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <RCC_SetFlashLatencyFromMSIRange+0x58>
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ea:	d10b      	bne.n	8001904 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b80      	cmp	r3, #128	; 0x80
 80018f0:	d919      	bls.n	8001926 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2ba0      	cmp	r3, #160	; 0xa0
 80018f6:	d902      	bls.n	80018fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018f8:	2302      	movs	r3, #2
 80018fa:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80018fc:	e013      	b.n	8001926 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018fe:	2301      	movs	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001902:	e010      	b.n	8001926 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b80      	cmp	r3, #128	; 0x80
 8001908:	d902      	bls.n	8001910 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800190a:	2303      	movs	r3, #3
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e00a      	b.n	8001926 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b80      	cmp	r3, #128	; 0x80
 8001914:	d102      	bne.n	800191c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001916:	2302      	movs	r3, #2
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e004      	b.n	8001926 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b70      	cmp	r3, #112	; 0x70
 8001920:	d101      	bne.n	8001926 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001922:	2301      	movs	r3, #1
 8001924:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 020f 	bic.w	r2, r3, #15
 800192e:	490a      	ldr	r1, [pc, #40]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	40022000 	.word	0x40022000

0800195c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800196c:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3301      	adds	r3, #1
 8001978:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d015      	beq.n	80019ac <RCC_GetSysClockFreqFromPLLSource+0x50>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d839      	bhi.n	80019fa <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d01c      	beq.n	80019c6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d133      	bne.n	80019fa <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001992:	4a26      	ldr	r2, [pc, #152]	; (8001a2c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800199c:	68d2      	ldr	r2, [r2, #12]
 800199e:	0a12      	lsrs	r2, r2, #8
 80019a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019a4:	fb02 f303 	mul.w	r3, r2, r3
 80019a8:	613b      	str	r3, [r7, #16]
      break;
 80019aa:	e029      	b.n	8001a00 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019ac:	4a1f      	ldr	r2, [pc, #124]	; (8001a2c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80019b6:	68d2      	ldr	r2, [r2, #12]
 80019b8:	0a12      	lsrs	r2, r2, #8
 80019ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	613b      	str	r3, [r7, #16]
      break;
 80019c4:	e01c      	b.n	8001a00 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80019d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e005      	b.n	80019ee <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	613b      	str	r3, [r7, #16]
        break;
 80019f8:	e002      	b.n	8001a00 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
      break;
 80019fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	0e5b      	lsrs	r3, r3, #25
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001a1a:	683b      	ldr	r3, [r7, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	00f42400 	.word	0x00f42400
 8001a30:	08005754 	.word	0x08005754

08001a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e049      	b.n	8001ada <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f841 	bl	8001ae2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	4619      	mov	r1, r3
 8001a72:	4610      	mov	r0, r2
 8001a74:	f000 f9f8 	bl	8001e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d001      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e04f      	b.n	8001bb0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <HAL_TIM_Base_Start_IT+0xc4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d01d      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0x76>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3a:	d018      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0x76>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0x76>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00e      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0x76>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d009      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0x76>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1b      	ldr	r2, [pc, #108]	; (8001bcc <HAL_TIM_Base_Start_IT+0xd4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d004      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0x76>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d115      	bne.n	8001b9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b06      	cmp	r3, #6
 8001b7e:	d015      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0xb4>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b86:	d011      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b98:	e008      	b.n	8001bac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e000      	b.n	8001bae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40012c00 	.word	0x40012c00
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	40000800 	.word	0x40000800
 8001bc8:	40000c00 	.word	0x40000c00
 8001bcc:	40013400 	.word	0x40013400
 8001bd0:	40014000 	.word	0x40014000
 8001bd4:	00010007 	.word	0x00010007

08001bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d122      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d11b      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0202 	mvn.w	r2, #2
 8001c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f905 	bl	8001e2a <HAL_TIM_IC_CaptureCallback>
 8001c20:	e005      	b.n	8001c2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8f7 	bl	8001e16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f908 	bl	8001e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d122      	bne.n	8001c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d11b      	bne.n	8001c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0204 	mvn.w	r2, #4
 8001c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f8db 	bl	8001e2a <HAL_TIM_IC_CaptureCallback>
 8001c74:	e005      	b.n	8001c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8cd 	bl	8001e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f8de 	bl	8001e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d122      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d11b      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0208 	mvn.w	r2, #8
 8001cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8b1 	bl	8001e2a <HAL_TIM_IC_CaptureCallback>
 8001cc8:	e005      	b.n	8001cd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8a3 	bl	8001e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f8b4 	bl	8001e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d122      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	d11b      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0210 	mvn.w	r2, #16
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2208      	movs	r2, #8
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f887 	bl	8001e2a <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f879 	bl	8001e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f88a 	bl	8001e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d10e      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0201 	mvn.w	r2, #1
 8001d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f002 fc7e 	bl	8004658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d66:	2b80      	cmp	r3, #128	; 0x80
 8001d68:	d10e      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d74:	2b80      	cmp	r3, #128	; 0x80
 8001d76:	d107      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f914 	bl	8001fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d96:	d10e      	bne.n	8001db6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	2b80      	cmp	r3, #128	; 0x80
 8001da4:	d107      	bne.n	8001db6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f907 	bl	8001fc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc0:	2b40      	cmp	r3, #64	; 0x40
 8001dc2:	d10e      	bne.n	8001de2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dce:	2b40      	cmp	r3, #64	; 0x40
 8001dd0:	d107      	bne.n	8001de2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f838 	bl	8001e52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d10e      	bne.n	8001e0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d107      	bne.n	8001e0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f06f 0220 	mvn.w	r2, #32
 8001e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f8c7 	bl	8001f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a40      	ldr	r2, [pc, #256]	; (8001f7c <TIM_Base_SetConfig+0x114>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d013      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e86:	d00f      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a3d      	ldr	r2, [pc, #244]	; (8001f80 <TIM_Base_SetConfig+0x118>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00b      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a3c      	ldr	r2, [pc, #240]	; (8001f84 <TIM_Base_SetConfig+0x11c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d007      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a3b      	ldr	r2, [pc, #236]	; (8001f88 <TIM_Base_SetConfig+0x120>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d003      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3a      	ldr	r2, [pc, #232]	; (8001f8c <TIM_Base_SetConfig+0x124>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d108      	bne.n	8001eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a2f      	ldr	r2, [pc, #188]	; (8001f7c <TIM_Base_SetConfig+0x114>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d01f      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec8:	d01b      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a2c      	ldr	r2, [pc, #176]	; (8001f80 <TIM_Base_SetConfig+0x118>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d017      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <TIM_Base_SetConfig+0x11c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a2a      	ldr	r2, [pc, #168]	; (8001f88 <TIM_Base_SetConfig+0x120>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00f      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <TIM_Base_SetConfig+0x124>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00b      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a28      	ldr	r2, [pc, #160]	; (8001f90 <TIM_Base_SetConfig+0x128>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d007      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a27      	ldr	r2, [pc, #156]	; (8001f94 <TIM_Base_SetConfig+0x12c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d003      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a26      	ldr	r2, [pc, #152]	; (8001f98 <TIM_Base_SetConfig+0x130>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d108      	bne.n	8001f14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <TIM_Base_SetConfig+0x114>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d00f      	beq.n	8001f60 <TIM_Base_SetConfig+0xf8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <TIM_Base_SetConfig+0x124>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00b      	beq.n	8001f60 <TIM_Base_SetConfig+0xf8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a11      	ldr	r2, [pc, #68]	; (8001f90 <TIM_Base_SetConfig+0x128>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <TIM_Base_SetConfig+0xf8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <TIM_Base_SetConfig+0x12c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d003      	beq.n	8001f60 <TIM_Base_SetConfig+0xf8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <TIM_Base_SetConfig+0x130>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d103      	bne.n	8001f68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	615a      	str	r2, [r3, #20]
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40012c00 	.word	0x40012c00
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40000800 	.word	0x40000800
 8001f88:	40000c00 	.word	0x40000c00
 8001f8c:	40013400 	.word	0x40013400
 8001f90:	40014000 	.word	0x40014000
 8001f94:	40014400 	.word	0x40014400
 8001f98:	40014800 	.word	0x40014800

08001f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <SysTick_Handler+0x1c>)
 8001fde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001fe0:	f001 fe46 	bl	8003c70 <xTaskGetSchedulerState>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001fea:	f000 fb67 	bl	80026bc <xPortSysTickHandler>
  }
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	e000e010 	.word	0xe000e010

08001ff8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ffe:	f3ef 8305 	mrs	r3, IPSR
 8002002:	603b      	str	r3, [r7, #0]
  return(result);
 8002004:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800200a:	f06f 0305 	mvn.w	r3, #5
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	e00c      	b.n	800202c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <osKernelInitialize+0x44>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <osKernelInitialize+0x44>)
 800201c:	2201      	movs	r2, #1
 800201e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002020:	2300      	movs	r3, #0
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	e002      	b.n	800202c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800202c:	687b      	ldr	r3, [r7, #4]
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000098 	.word	0x20000098

08002040 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a07      	ldr	r2, [pc, #28]	; (800206c <vApplicationGetIdleTaskMemory+0x2c>)
 8002050:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <vApplicationGetIdleTaskMemory+0x30>)
 8002056:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800205e:	601a      	str	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	2000009c 	.word	0x2000009c
 8002070:	200000f8 	.word	0x200000f8

08002074 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002084:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <vApplicationGetTimerTaskMemory+0x30>)
 800208a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	200008f8 	.word	0x200008f8
 80020a4:	20000954 	.word	0x20000954

080020a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80020b4:	f001 fa54 	bl	8003560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80020b8:	4b4f      	ldr	r3, [pc, #316]	; (80021f8 <pvPortMalloc+0x150>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80020c0:	f000 f8f8 	bl	80022b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80020c4:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <pvPortMalloc+0x154>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f040 8083 	bne.w	80021d8 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d015      	beq.n	8002104 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 80020d8:	2208      	movs	r2, #8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00c      	beq.n	8002104 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f023 0307 	bic.w	r3, r3, #7
 80020f0:	3308      	adds	r3, #8
 80020f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <pvPortMalloc+0x5c>
 80020fe:	f000 fbeb 	bl	80028d8 <ulSetInterruptMask>
 8002102:	e7fe      	b.n	8002102 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d066      	beq.n	80021d8 <pvPortMalloc+0x130>
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <pvPortMalloc+0x158>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	d861      	bhi.n	80021d8 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002114:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <pvPortMalloc+0x15c>)
 8002116:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8002118:	4b3a      	ldr	r3, [pc, #232]	; (8002204 <pvPortMalloc+0x15c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800211e:	e004      	b.n	800212a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	d903      	bls.n	800213c <pvPortMalloc+0x94>
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f1      	bne.n	8002120 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800213c:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <pvPortMalloc+0x150>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	429a      	cmp	r2, r3
 8002144:	d048      	beq.n	80021d8 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2208      	movs	r2, #8
 800214c:	4413      	add	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	1ad2      	subs	r2, r2, r3
 8002160:	2308      	movs	r3, #8
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	429a      	cmp	r2, r3
 8002166:	d917      	bls.n	8002198 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <pvPortMalloc+0xd8>
 800217a:	f000 fbad 	bl	80028d8 <ulSetInterruptMask>
 800217e:	e7fe      	b.n	800217e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	1ad2      	subs	r2, r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002192:	68b8      	ldr	r0, [r7, #8]
 8002194:	f000 f8f0 	bl	8002378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <pvPortMalloc+0x158>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	4a17      	ldr	r2, [pc, #92]	; (8002200 <pvPortMalloc+0x158>)
 80021a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <pvPortMalloc+0x158>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <pvPortMalloc+0x160>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d203      	bcs.n	80021ba <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <pvPortMalloc+0x158>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a14      	ldr	r2, [pc, #80]	; (8002208 <pvPortMalloc+0x160>)
 80021b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <pvPortMalloc+0x154>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <pvPortMalloc+0x164>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <pvPortMalloc+0x164>)
 80021d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80021d8:	f001 f9d0 	bl	800357c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <pvPortMalloc+0x144>
 80021e6:	f000 fb77 	bl	80028d8 <ulSetInterruptMask>
 80021ea:	e7fe      	b.n	80021ea <pvPortMalloc+0x142>
	return pvReturn;
 80021ec:	68fb      	ldr	r3, [r7, #12]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20003914 	.word	0x20003914
 80021fc:	20003928 	.word	0x20003928
 8002200:	20003918 	.word	0x20003918
 8002204:	2000390c 	.word	0x2000390c
 8002208:	2000391c 	.word	0x2000391c
 800220c:	20003920 	.word	0x20003920

08002210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d03d      	beq.n	800229e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002222:	2308      	movs	r3, #8
 8002224:	425b      	negs	r3, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4413      	add	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <vPortFree+0x98>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <vPortFree+0x34>
 800223e:	f000 fb4b 	bl	80028d8 <ulSetInterruptMask>
 8002242:	e7fe      	b.n	8002242 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <vPortFree+0x42>
 800224c:	f000 fb44 	bl	80028d8 <ulSetInterruptMask>
 8002250:	e7fe      	b.n	8002250 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <vPortFree+0x98>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01e      	beq.n	800229e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d11a      	bne.n	800229e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <vPortFree+0x98>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	43db      	mvns	r3, r3
 8002272:	401a      	ands	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002278:	f001 f972 	bl	8003560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <vPortFree+0x9c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4413      	add	r3, r2
 8002286:	4a09      	ldr	r2, [pc, #36]	; (80022ac <vPortFree+0x9c>)
 8002288:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800228a:	68b8      	ldr	r0, [r7, #8]
 800228c:	f000 f874 	bl	8002378 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <vPortFree+0xa0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	4a06      	ldr	r2, [pc, #24]	; (80022b0 <vPortFree+0xa0>)
 8002298:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800229a:	f001 f96f 	bl	800357c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20003928 	.word	0x20003928
 80022ac:	20003918 	.word	0x20003918
 80022b0:	20003924 	.word	0x20003924

080022b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80022ba:	f641 73b8 	movw	r3, #8120	; 0x1fb8
 80022be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <prvHeapInit+0xac>)
 80022c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00c      	beq.n	80022e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3307      	adds	r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f023 0307 	bic.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <prvHeapInit+0xac>)
 80022e4:	4413      	add	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80022ec:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <prvHeapInit+0xb0>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80022f2:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <prvHeapInit+0xb0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	4413      	add	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002300:	2208      	movs	r2, #8
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f023 0307 	bic.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a15      	ldr	r2, [pc, #84]	; (8002368 <prvHeapInit+0xb4>)
 8002314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <prvHeapInit+0xb4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2200      	movs	r2, #0
 800231c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <prvHeapInit+0xb4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	1ad2      	subs	r2, r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <prvHeapInit+0xb4>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4a0a      	ldr	r2, [pc, #40]	; (800236c <prvHeapInit+0xb8>)
 8002342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a09      	ldr	r2, [pc, #36]	; (8002370 <prvHeapInit+0xbc>)
 800234a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <prvHeapInit+0xc0>)
 800234e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002352:	601a      	str	r2, [r3, #0]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	20001954 	.word	0x20001954
 8002364:	2000390c 	.word	0x2000390c
 8002368:	20003914 	.word	0x20003914
 800236c:	2000391c 	.word	0x2000391c
 8002370:	20003918 	.word	0x20003918
 8002374:	20003928 	.word	0x20003928

08002378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <prvInsertBlockIntoFreeList+0xac>)
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	e002      	b.n	800238c <prvInsertBlockIntoFreeList+0x14>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	d8f7      	bhi.n	8002386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	4413      	add	r3, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d108      	bne.n	80023ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	441a      	add	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	441a      	add	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d118      	bne.n	8002400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <prvInsertBlockIntoFreeList+0xb0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d00d      	beq.n	80023f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	441a      	add	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	e008      	b.n	8002408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <prvInsertBlockIntoFreeList+0xb0>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	e003      	b.n	8002408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	429a      	cmp	r2, r3
 800240e:	d002      	beq.n	8002416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	2000390c 	.word	0x2000390c
 8002428:	20003914 	.word	0x20003914

0800242c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f103 0208 	add.w	r2, r3, #8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f103 0208 	add.w	r2, r3, #8
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f103 0208 	add.w	r2, r3, #8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002486:	b480      	push	{r7}
 8002488:	b085      	sub	sp, #20
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	601a      	str	r2, [r3, #0]
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d103      	bne.n	80024ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e00c      	b.n	8002508 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3308      	adds	r3, #8
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	e002      	b.n	80024fc <vListInsert+0x2e>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	429a      	cmp	r2, r3
 8002506:	d2f6      	bcs.n	80024f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	601a      	str	r2, [r3, #0]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6892      	ldr	r2, [r2, #8]
 8002556:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6852      	ldr	r2, [r2, #4]
 8002560:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	429a      	cmp	r2, r3
 800256a:	d103      	bne.n	8002574 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1e5a      	subs	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <vPortSetupTimerInterrupt+0x34>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <vPortSetupTimerInterrupt+0x38>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <vPortSetupTimerInterrupt+0x3c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <vPortSetupTimerInterrupt+0x40>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <vPortSetupTimerInterrupt+0x44>)
 80025b2:	3b01      	subs	r3, #1
 80025b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <vPortSetupTimerInterrupt+0x34>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010
 80025cc:	e000e018 	.word	0xe000e018
 80025d0:	20000000 	.word	0x20000000
 80025d4:	10624dd3 	.word	0x10624dd3
 80025d8:	e000e014 	.word	0xe000e014

080025dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <prvTaskExitError+0x30>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d002      	beq.n	80025f6 <prvTaskExitError+0x1a>
 80025f0:	f000 f972 	bl	80028d8 <ulSetInterruptMask>
 80025f4:	e7fe      	b.n	80025f4 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 80025f6:	f000 f96f 	bl	80028d8 <ulSetInterruptMask>

	while( ulDummy == 0 )
 80025fa:	bf00      	nop
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0fc      	beq.n	80025fc <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 8002602:	bf00      	nop
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	2000000c 	.word	0x2000000c

08002610 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if( configENABLE_FPU == 1 )
	static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
	{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
		#endif /* configENABLE_TRUSTZONE */

		/* CP10 = 11 ==> Full access to FPU i.e. both privileged and
		 * unprivileged code should be able to access FPU. CP11 should be
		 * programmed to the same value as CP10. */
		*( portCPACR ) |=	(	( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <prvSetupFPU+0x28>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a07      	ldr	r2, [pc, #28]	; (8002638 <prvSetupFPU+0x28>)
 800261a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800261e:	6013      	str	r3, [r2, #0]
							);

		/* ASPEN = 1 ==> Hardware should automatically preserve floating point
		 * context on exception entry and restore on exception return.
		 * LSPEN = 1 ==> Enable lazy context save of FP state. */
		*( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <prvSetupFPU+0x2c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a05      	ldr	r2, [pc, #20]	; (800263c <prvSetupFPU+0x2c>)
 8002626:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800262a:	6013      	str	r3, [r2, #0]
	}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000ed88 	.word	0xe000ed88
 800263c:	e000ef34 	.word	0xe000ef34

08002640 <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <vPortYield+0x20>)
 8002646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800264c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002650:	f3bf 8f6f 	isb	sy
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000ed04 	.word	0xe000ed04

08002664 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8002668:	f000 f936 	bl	80028d8 <ulSetInterruptMask>
	ulCriticalNesting++;
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <vPortEnterCritical+0x20>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <vPortEnterCritical+0x20>)
 8002674:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002676:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800267a:	f3bf 8f6f 	isb	sy
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000000c 	.word	0x2000000c

08002688 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <vPortExitCritical+0x30>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <vPortExitCritical+0x12>
 8002694:	f000 f920 	bl	80028d8 <ulSetInterruptMask>
 8002698:	e7fe      	b.n	8002698 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <vPortExitCritical+0x30>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	3b01      	subs	r3, #1
 80026a0:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <vPortExitCritical+0x30>)
 80026a2:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <vPortExitCritical+0x30>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 80026ac:	2000      	movs	r0, #0
 80026ae:	f000 f920 	bl	80028f2 <vClearInterruptMask>
	}
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2000000c 	.word	0x2000000c

080026bc <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80026c2:	f000 f909 	bl	80028d8 <ulSetInterruptMask>
 80026c6:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80026c8:	f000 fff6 	bl	80036b8 <xTaskIncrementTick>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <xPortSysTickHandler+0x2c>)
 80026d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d8:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f909 	bl	80028f2 <vClearInterruptMask>
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	e000ed04 	.word	0xe000ed04

080026ec <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3b02      	subs	r3, #2
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 8002702:	7afb      	ldrb	r3, [r7, #11]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d104      	bne.n	8002712 <vPortSVCHandler_C+0x26>
			#endif /* configENABLE_TRUSTZONE */

			#if( configENABLE_FPU == 1 )
			{
				/* Setup the Floating Point Unit (FPU). */
				prvSetupFPU();
 8002708:	f7ff ff82 	bl	8002610 <prvSetupFPU>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800270c:	f000 f8b8 	bl	8002880 <vRestoreContextOfFirstTask>
		}
		break;
 8002710:	e002      	b.n	8002718 <vPortSVCHandler_C+0x2c>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8002712:	f000 f8e1 	bl	80028d8 <ulSetInterruptMask>
 8002716:	e7fe      	b.n	8002716 <vPortSVCHandler_C+0x2a>
		}
	}
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3b04      	subs	r3, #4
 8002732:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800273a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3b04      	subs	r3, #4
 8002740:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3b04      	subs	r3, #4
 800274c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800274e:	4a38      	ldr	r2, [pc, #224]	; (8002830 <pxPortInitialiseStack+0x110>)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3b04      	subs	r3, #4
 8002758:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8002760:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3b04      	subs	r3, #4
 8002766:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800276e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3b04      	subs	r3, #4
 8002774:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800277c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	3b04      	subs	r3, #4
 8002782:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800278a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3b04      	subs	r3, #4
 8002790:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3b04      	subs	r3, #4
 800279c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80027a4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3b04      	subs	r3, #4
 80027aa:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 80027b2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	3b04      	subs	r3, #4
 80027b8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 80027c0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3b04      	subs	r3, #4
 80027c6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 80027ce:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3b04      	subs	r3, #4
 80027d4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 80027dc:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3b04      	subs	r3, #4
 80027e2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 80027ea:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3b04      	subs	r3, #4
 80027f0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 80027f8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3b04      	subs	r3, #4
 80027fe:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8002806:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	3b04      	subs	r3, #4
 800280c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8002814:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3b04      	subs	r3, #4
 800281a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 8002822:	68fb      	ldr	r3, [r7, #12]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	080025dd 	.word	0x080025dd

08002834 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <xPortStartScheduler+0x38>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0b      	ldr	r2, [pc, #44]	; (800286c <xPortStartScheduler+0x38>)
 800283e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002842:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <xPortStartScheduler+0x38>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a08      	ldr	r2, [pc, #32]	; (800286c <xPortStartScheduler+0x38>)
 800284a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800284e:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 8002850:	f7ff fea0 	bl	8002594 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <xPortStartScheduler+0x3c>)
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 800285a:	f000 f829 	bl	80028b0 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 800285e:	f000 ffdd 	bl	800381c <vTaskSwitchContext>
	prvTaskExitError();
 8002862:	f7ff febb 	bl	80025dc <prvTaskExitError>

	/* Should not get here. */
	return 0;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	e000ed20 	.word	0xe000ed20
 8002870:	2000000c 	.word	0x2000000c
	...

08002880 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002880:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <pxCurrentTCBConst2>)
 8002882:	6811      	ldr	r1, [r2, #0]
 8002884:	6808      	ldr	r0, [r1, #0]
 8002886:	c806      	ldmia	r0!, {r1, r2}
 8002888:	f381 880b 	msr	PSPLIM, r1
 800288c:	2102      	movs	r1, #2
 800288e:	f381 8814 	msr	CONTROL, r1
 8002892:	3020      	adds	r0, #32
 8002894:	f380 8809 	msr	PSP, r0
 8002898:	f3bf 8f6f 	isb	sy
 800289c:	4710      	bx	r2
 800289e:	bf00      	nop

080028a0 <pxCurrentTCBConst2>:
 80028a0:	2000392c 	.word	0x2000392c
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
	...

080028b0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80028b0:	4807      	ldr	r0, [pc, #28]	; (80028d0 <xVTORConst>)
 80028b2:	6800      	ldr	r0, [r0, #0]
 80028b4:	6800      	ldr	r0, [r0, #0]
 80028b6:	f380 8808 	msr	MSP, r0
 80028ba:	b662      	cpsie	i
 80028bc:	b661      	cpsie	f
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	df02      	svc	2
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	f3af 8000 	nop.w

080028d0 <xVTORConst>:
 80028d0:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop

080028d8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80028d8:	f3ef 8011 	mrs	r0, BASEPRI
 80028dc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 80028e0:	f381 8811 	msr	BASEPRI, r1
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028ee:	bf00      	nop
 80028f0:	4618      	mov	r0, r3

080028f2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80028f2:	f380 8811 	msr	BASEPRI, r0
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 8002900:	bf00      	nop
	...

08002910 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002910:	f3ef 8009 	mrs	r0, PSP
 8002914:	f01e 0f10 	tst.w	lr, #16
 8002918:	bf08      	it	eq
 800291a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800291e:	f3ef 820b 	mrs	r2, PSPLIM
 8002922:	4673      	mov	r3, lr
 8002924:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8002928:	4a11      	ldr	r2, [pc, #68]	; (8002970 <pxCurrentTCBConst>)
 800292a:	6811      	ldr	r1, [r2, #0]
 800292c:	6008      	str	r0, [r1, #0]
 800292e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8002932:	f380 8811 	msr	BASEPRI, r0
 8002936:	f3bf 8f4f 	dsb	sy
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	f000 ff6d 	bl	800381c <vTaskSwitchContext>
 8002942:	f04f 0000 	mov.w	r0, #0
 8002946:	f380 8811 	msr	BASEPRI, r0
 800294a:	4a09      	ldr	r2, [pc, #36]	; (8002970 <pxCurrentTCBConst>)
 800294c:	6811      	ldr	r1, [r2, #0]
 800294e:	6808      	ldr	r0, [r1, #0]
 8002950:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8002954:	f013 0f10 	tst.w	r3, #16
 8002958:	bf08      	it	eq
 800295a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800295e:	f382 880b 	msr	PSPLIM, r2
 8002962:	f380 8809 	msr	PSP, r0
 8002966:	4718      	bx	r3
 8002968:	f3af 8000 	nop.w
 800296c:	f3af 8000 	nop.w

08002970 <pxCurrentTCBConst>:
 8002970:	2000392c 	.word	0x2000392c
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
	...

08002980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002980:	f01e 0f04 	tst.w	lr, #4
 8002984:	bf0c      	ite	eq
 8002986:	f3ef 8008 	mrseq	r0, MSP
 800298a:	f3ef 8009 	mrsne	r0, PSP
 800298e:	4904      	ldr	r1, [pc, #16]	; (80029a0 <svchandler_address_const>)
 8002990:	4708      	bx	r1
 8002992:	bf00      	nop
 8002994:	f3af 8000 	nop.w
 8002998:	f3af 8000 	nop.w
 800299c:	f3af 8000 	nop.w

080029a0 <svchandler_address_const>:
 80029a0:	080026ed 	.word	0x080026ed
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop

080029a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <xQueueGenericReset+0x1a>
 80029bc:	f7ff ff8c 	bl	80028d8 <ulSetInterruptMask>
 80029c0:	e7fe      	b.n	80029c0 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80029c2:	f7ff fe4f 	bl	8002664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	68f9      	ldr	r1, [r7, #12]
 80029d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	441a      	add	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	3b01      	subs	r3, #1
 80029f4:	68f9      	ldr	r1, [r7, #12]
 80029f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	441a      	add	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	22ff      	movs	r2, #255	; 0xff
 8002a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	22ff      	movs	r2, #255	; 0xff
 8002a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10e      	bne.n	8002a36 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d014      	beq.n	8002a4a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3310      	adds	r3, #16
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 ff8d 	bl	8003944 <xTaskRemoveFromEventList>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00c      	beq.n	8002a4a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a30:	f7ff fe06 	bl	8002640 <vPortYield>
 8002a34:	e009      	b.n	8002a4a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3310      	adds	r3, #16
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fcf6 	bl	800242c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3324      	adds	r3, #36	; 0x24
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fcf1 	bl	800242c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a4a:	f7ff fe1d 	bl	8002688 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <xQueueGenericCreateStatic+0x1a>
 8002a6c:	f7ff ff34 	bl	80028d8 <ulSetInterruptMask>
 8002a70:	e7fe      	b.n	8002a70 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d102      	bne.n	8002a7e <xQueueGenericCreateStatic+0x26>
 8002a78:	f7ff ff2e 	bl	80028d8 <ulSetInterruptMask>
 8002a7c:	e7fe      	b.n	8002a7c <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <xQueueGenericCreateStatic+0x32>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <xQueueGenericCreateStatic+0x36>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <xQueueGenericCreateStatic+0x38>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <xQueueGenericCreateStatic+0x42>
 8002a94:	f7ff ff20 	bl	80028d8 <ulSetInterruptMask>
 8002a98:	e7fe      	b.n	8002a98 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <xQueueGenericCreateStatic+0x4e>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <xQueueGenericCreateStatic+0x52>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <xQueueGenericCreateStatic+0x54>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <xQueueGenericCreateStatic+0x5e>
 8002ab0:	f7ff ff12 	bl	80028d8 <ulSetInterruptMask>
 8002ab4:	e7fe      	b.n	8002ab4 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ab6:	2350      	movs	r3, #80	; 0x50
 8002ab8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b50      	cmp	r3, #80	; 0x50
 8002abe:	d002      	beq.n	8002ac6 <xQueueGenericCreateStatic+0x6e>
 8002ac0:	f7ff ff0a 	bl	80028d8 <ulSetInterruptMask>
 8002ac4:	e7fe      	b.n	8002ac4 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ac6:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ada:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f805 	bl	8002af8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002aee:	697b      	ldr	r3, [r7, #20]
	}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e002      	b.n	8002b1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b26:	2101      	movs	r1, #1
 8002b28:	69b8      	ldr	r0, [r7, #24]
 8002b2a:	f7ff ff3d 	bl	80029a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b08a      	sub	sp, #40	; 0x28
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <xQueueGenericSend+0x22>
 8002b5a:	f7ff febd 	bl	80028d8 <ulSetInterruptMask>
 8002b5e:	e7fe      	b.n	8002b5e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d103      	bne.n	8002b6e <xQueueGenericSend+0x30>
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <xQueueGenericSend+0x34>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <xQueueGenericSend+0x36>
 8002b72:	2300      	movs	r3, #0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <xQueueGenericSend+0x40>
 8002b78:	f7ff feae 	bl	80028d8 <ulSetInterruptMask>
 8002b7c:	e7fe      	b.n	8002b7c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d103      	bne.n	8002b8c <xQueueGenericSend+0x4e>
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <xQueueGenericSend+0x52>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <xQueueGenericSend+0x54>
 8002b90:	2300      	movs	r3, #0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <xQueueGenericSend+0x5e>
 8002b96:	f7ff fe9f 	bl	80028d8 <ulSetInterruptMask>
 8002b9a:	e7fe      	b.n	8002b9a <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b9c:	f001 f868 	bl	8003c70 <xTaskGetSchedulerState>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <xQueueGenericSend+0x6e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <xQueueGenericSend+0x72>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <xQueueGenericSend+0x74>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <xQueueGenericSend+0x7e>
 8002bb6:	f7ff fe8f 	bl	80028d8 <ulSetInterruptMask>
 8002bba:	e7fe      	b.n	8002bba <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bbc:	f7ff fd52 	bl	8002664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d302      	bcc.n	8002bd2 <xQueueGenericSend+0x94>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d11d      	bne.n	8002c0e <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	6a38      	ldr	r0, [r7, #32]
 8002bd8:	f000 f9a4 	bl	8002f24 <prvCopyDataToQueue>
 8002bdc:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	3324      	adds	r3, #36	; 0x24
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 feaa 	bl	8003944 <xTaskRemoveFromEventList>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bf6:	f7ff fd23 	bl	8002640 <vPortYield>
 8002bfa:	e004      	b.n	8002c06 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c02:	f7ff fd1d 	bl	8002640 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c06:	f7ff fd3f 	bl	8002688 <vPortExitCritical>
				return pdPASS;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e05c      	b.n	8002cc8 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d103      	bne.n	8002c1c <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c14:	f7ff fd38 	bl	8002688 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e055      	b.n	8002cc8 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c22:	f107 0314 	add.w	r3, r7, #20
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fee8 	bl	80039fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c30:	f7ff fd2a 	bl	8002688 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c34:	f000 fc94 	bl	8003560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c38:	f7ff fd14 	bl	8002664 <vPortEnterCritical>
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c42:	b25b      	sxtb	r3, r3
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d103      	bne.n	8002c52 <xQueueGenericSend+0x114>
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5e:	d103      	bne.n	8002c68 <xQueueGenericSend+0x12a>
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c68:	f7ff fd0e 	bl	8002688 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c6c:	1d3a      	adds	r2, r7, #4
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fed7 	bl	8003a28 <xTaskCheckForTimeOut>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d11d      	bne.n	8002cbc <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c80:	6a38      	ldr	r0, [r7, #32]
 8002c82:	f000 fa47 	bl	8003114 <prvIsQueueFull>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d011      	beq.n	8002cb0 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	3310      	adds	r3, #16
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fe15 	bl	80038c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c9a:	6a38      	ldr	r0, [r7, #32]
 8002c9c:	f000 f9d2 	bl	8003044 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ca0:	f000 fc6c 	bl	800357c <xTaskResumeAll>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d188      	bne.n	8002bbc <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 8002caa:	f7ff fcc9 	bl	8002640 <vPortYield>
 8002cae:	e785      	b.n	8002bbc <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cb0:	6a38      	ldr	r0, [r7, #32]
 8002cb2:	f000 f9c7 	bl	8003044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cb6:	f000 fc61 	bl	800357c <xTaskResumeAll>
 8002cba:	e77f      	b.n	8002bbc <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cbc:	6a38      	ldr	r0, [r7, #32]
 8002cbe:	f000 f9c1 	bl	8003044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cc2:	f000 fc5b 	bl	800357c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3728      	adds	r7, #40	; 0x28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <xQueueGenericSendFromISR+0x1e>
 8002ce8:	f7ff fdf6 	bl	80028d8 <ulSetInterruptMask>
 8002cec:	e7fe      	b.n	8002cec <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d103      	bne.n	8002cfc <xQueueGenericSendFromISR+0x2c>
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <xQueueGenericSendFromISR+0x30>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <xQueueGenericSendFromISR+0x32>
 8002d00:	2300      	movs	r3, #0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <xQueueGenericSendFromISR+0x3c>
 8002d06:	f7ff fde7 	bl	80028d8 <ulSetInterruptMask>
 8002d0a:	e7fe      	b.n	8002d0a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d103      	bne.n	8002d1a <xQueueGenericSendFromISR+0x4a>
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <xQueueGenericSendFromISR+0x4e>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <xQueueGenericSendFromISR+0x50>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <xQueueGenericSendFromISR+0x5a>
 8002d24:	f7ff fdd8 	bl	80028d8 <ulSetInterruptMask>
 8002d28:	e7fe      	b.n	8002d28 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d2a:	f7ff fdd5 	bl	80028d8 <ulSetInterruptMask>
 8002d2e:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d302      	bcc.n	8002d42 <xQueueGenericSendFromISR+0x72>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d12d      	bne.n	8002d9e <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d48:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	6a38      	ldr	r0, [r7, #32]
 8002d56:	f000 f8e5 	bl	8002f24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d5a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d112      	bne.n	8002d8a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d015      	beq.n	8002d98 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	3324      	adds	r3, #36	; 0x24
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fde7 	bl	8003944 <xTaskRemoveFromEventList>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	e006      	b.n	8002d98 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d8a:	7efb      	ldrb	r3, [r7, #27]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	b25a      	sxtb	r2, r3
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8002d9c:	e001      	b.n	8002da2 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002da2:	69f8      	ldr	r0, [r7, #28]
 8002da4:	f7ff fda5 	bl	80028f2 <vClearInterruptMask>

	return xReturn;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3728      	adds	r7, #40	; 0x28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b08a      	sub	sp, #40	; 0x28
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <xQueueReceive+0x20>
 8002dcc:	f7ff fd84 	bl	80028d8 <ulSetInterruptMask>
 8002dd0:	e7fe      	b.n	8002dd0 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d103      	bne.n	8002de0 <xQueueReceive+0x2e>
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <xQueueReceive+0x32>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <xQueueReceive+0x34>
 8002de4:	2300      	movs	r3, #0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <xQueueReceive+0x3e>
 8002dea:	f7ff fd75 	bl	80028d8 <ulSetInterruptMask>
 8002dee:	e7fe      	b.n	8002dee <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002df0:	f000 ff3e 	bl	8003c70 <xTaskGetSchedulerState>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <xQueueReceive+0x4e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <xQueueReceive+0x52>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <xQueueReceive+0x54>
 8002e04:	2300      	movs	r3, #0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <xQueueReceive+0x5e>
 8002e0a:	f7ff fd65 	bl	80028d8 <ulSetInterruptMask>
 8002e0e:	e7fe      	b.n	8002e0e <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e10:	f7ff fc28 	bl	8002664 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d019      	beq.n	8002e54 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	6a38      	ldr	r0, [r7, #32]
 8002e24:	f000 f8e8 	bl	8002ff8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	1e5a      	subs	r2, r3, #1
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d009      	beq.n	8002e4c <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	3310      	adds	r3, #16
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fd81 	bl	8003944 <xTaskRemoveFromEventList>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e48:	f7ff fbfa 	bl	8002640 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e4c:	f7ff fc1c 	bl	8002688 <vPortExitCritical>
				return pdPASS;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e063      	b.n	8002f1c <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d103      	bne.n	8002e62 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e5a:	f7ff fc15 	bl	8002688 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e05c      	b.n	8002f1c <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e68:	f107 0314 	add.w	r3, r7, #20
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fdc5 	bl	80039fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e72:	2301      	movs	r3, #1
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e76:	f7ff fc07 	bl	8002688 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e7a:	f000 fb71 	bl	8003560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e7e:	f7ff fbf1 	bl	8002664 <vPortEnterCritical>
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e88:	b25b      	sxtb	r3, r3
 8002e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8e:	d103      	bne.n	8002e98 <xQueueReceive+0xe6>
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e9e:	b25b      	sxtb	r3, r3
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d103      	bne.n	8002eae <xQueueReceive+0xfc>
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eae:	f7ff fbeb 	bl	8002688 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eb2:	1d3a      	adds	r2, r7, #4
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fdb4 	bl	8003a28 <xTaskCheckForTimeOut>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11d      	bne.n	8002f02 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ec6:	6a38      	ldr	r0, [r7, #32]
 8002ec8:	f000 f90e 	bl	80030e8 <prvIsQueueEmpty>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d011      	beq.n	8002ef6 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	3324      	adds	r3, #36	; 0x24
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fcf2 	bl	80038c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ee0:	6a38      	ldr	r0, [r7, #32]
 8002ee2:	f000 f8af 	bl	8003044 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ee6:	f000 fb49 	bl	800357c <xTaskResumeAll>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d18f      	bne.n	8002e10 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 8002ef0:	f7ff fba6 	bl	8002640 <vPortYield>
 8002ef4:	e78c      	b.n	8002e10 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ef6:	6a38      	ldr	r0, [r7, #32]
 8002ef8:	f000 f8a4 	bl	8003044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002efc:	f000 fb3e 	bl	800357c <xTaskResumeAll>
 8002f00:	e786      	b.n	8002e10 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f02:	6a38      	ldr	r0, [r7, #32]
 8002f04:	f000 f89e 	bl	8003044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f08:	f000 fb38 	bl	800357c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f0c:	6a38      	ldr	r0, [r7, #32]
 8002f0e:	f000 f8eb 	bl	80030e8 <prvIsQueueEmpty>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f43f af7b 	beq.w	8002e10 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3728      	adds	r7, #40	; 0x28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10d      	bne.n	8002f5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d14d      	bne.n	8002fe6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 feac 	bl	8003cac <xTaskPriorityDisinherit>
 8002f54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	e043      	b.n	8002fe6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d119      	bne.n	8002f98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6858      	ldr	r0, [r3, #4]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	f001 fbb2 	bl	80046d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	441a      	add	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d32b      	bcc.n	8002fe6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	e026      	b.n	8002fe6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68d8      	ldr	r0, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	f001 fb98 	bl	80046d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	441a      	add	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d207      	bcs.n	8002fd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	425b      	negs	r3, r3
 8002fce:	441a      	add	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d105      	bne.n	8002fe6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fee:	697b      	ldr	r3, [r7, #20]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d018      	beq.n	800303c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	441a      	add	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	429a      	cmp	r2, r3
 8003022:	d303      	bcc.n	800302c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68d9      	ldr	r1, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	461a      	mov	r2, r3
 8003036:	6838      	ldr	r0, [r7, #0]
 8003038:	f001 fb4e 	bl	80046d8 <memcpy>
	}
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800304c:	f7ff fb0a 	bl	8002664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003056:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003058:	e011      	b.n	800307e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	d012      	beq.n	8003088 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3324      	adds	r3, #36	; 0x24
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fc6c 	bl	8003944 <xTaskRemoveFromEventList>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003072:	f000 fd2b 	bl	8003acc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	3b01      	subs	r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	dce9      	bgt.n	800305a <prvUnlockQueue+0x16>
 8003086:	e000      	b.n	800308a <prvUnlockQueue+0x46>
					break;
 8003088:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	22ff      	movs	r2, #255	; 0xff
 800308e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003092:	f7ff faf9 	bl	8002688 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003096:	f7ff fae5 	bl	8002664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030a2:	e011      	b.n	80030c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3310      	adds	r3, #16
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fc47 	bl	8003944 <xTaskRemoveFromEventList>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030bc:	f000 fd06 	bl	8003acc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030c0:	7bbb      	ldrb	r3, [r7, #14]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	dce9      	bgt.n	80030a4 <prvUnlockQueue+0x60>
 80030d0:	e000      	b.n	80030d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	22ff      	movs	r2, #255	; 0xff
 80030d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030dc:	f7ff fad4 	bl	8002688 <vPortExitCritical>
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030f0:	f7ff fab8 	bl	8002664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030fc:	2301      	movs	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e001      	b.n	8003106 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003106:	f7ff fabf 	bl	8002688 <vPortExitCritical>

	return xReturn;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800311c:	f7ff faa2 	bl	8002664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003128:	429a      	cmp	r2, r3
 800312a:	d102      	bne.n	8003132 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800312c:	2301      	movs	r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e001      	b.n	8003136 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003136:	f7ff faa7 	bl	8002688 <vPortExitCritical>

	return xReturn;
 800313a:	68fb      	ldr	r3, [r7, #12]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e014      	b.n	800317e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003154:	4a0f      	ldr	r2, [pc, #60]	; (8003194 <vQueueAddToRegistry+0x50>)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10b      	bne.n	8003178 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003160:	490c      	ldr	r1, [pc, #48]	; (8003194 <vQueueAddToRegistry+0x50>)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800316a:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <vQueueAddToRegistry+0x50>)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003176:	e006      	b.n	8003186 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3301      	adds	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2b07      	cmp	r3, #7
 8003182:	d9e7      	bls.n	8003154 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20003fb0 	.word	0x20003fb0

08003198 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031a8:	f7ff fa5c 	bl	8002664 <vPortEnterCritical>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031b2:	b25b      	sxtb	r3, r3
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d103      	bne.n	80031c2 <vQueueWaitForMessageRestricted+0x2a>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031c8:	b25b      	sxtb	r3, r3
 80031ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ce:	d103      	bne.n	80031d8 <vQueueWaitForMessageRestricted+0x40>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d8:	f7ff fa56 	bl	8002688 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d106      	bne.n	80031f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	3324      	adds	r3, #36	; 0x24
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fb85 	bl	80038fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031f2:	6978      	ldr	r0, [r7, #20]
 80031f4:	f7ff ff26 	bl	8003044 <prvUnlockQueue>
	}
 80031f8:	bf00      	nop
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08c      	sub	sp, #48	; 0x30
 8003204:	af04      	add	r7, sp, #16
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d102      	bne.n	800321a <xTaskCreateStatic+0x1a>
 8003214:	f7ff fb60 	bl	80028d8 <ulSetInterruptMask>
 8003218:	e7fe      	b.n	8003218 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <xTaskCreateStatic+0x26>
 8003220:	f7ff fb5a 	bl	80028d8 <ulSetInterruptMask>
 8003224:	e7fe      	b.n	8003224 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003226:	235c      	movs	r3, #92	; 0x5c
 8003228:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b5c      	cmp	r3, #92	; 0x5c
 800322e:	d002      	beq.n	8003236 <xTaskCreateStatic+0x36>
 8003230:	f7ff fb52 	bl	80028d8 <ulSetInterruptMask>
 8003234:	e7fe      	b.n	8003234 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003236:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	2b00      	cmp	r3, #0
 800323c:	d01e      	beq.n	800327c <xTaskCreateStatic+0x7c>
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01b      	beq.n	800327c <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800324c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	2202      	movs	r2, #2
 8003252:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003256:	2300      	movs	r3, #0
 8003258:	9303      	str	r3, [sp, #12]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	9302      	str	r3, [sp, #8]
 800325e:	f107 0318 	add.w	r3, r7, #24
 8003262:	9301      	str	r3, [sp, #4]
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f80b 	bl	800328a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003274:	69f8      	ldr	r0, [r7, #28]
 8003276:	f000 f891 	bl	800339c <prvAddNewTaskToReadyList>
 800327a:	e001      	b.n	8003280 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003280:	69bb      	ldr	r3, [r7, #24]
	}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b086      	sub	sp, #24
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	461a      	mov	r2, r3
 80032a2:	21a5      	movs	r1, #165	; 0xa5
 80032a4:	f001 fa25 	bl	80046f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032b2:	3b01      	subs	r3, #1
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f023 0307 	bic.w	r3, r3, #7
 80032c0:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <prvInitialiseNewTask+0x48>
 80032cc:	f7ff fb04 	bl	80028d8 <ulSetInterruptMask>
 80032d0:	e7fe      	b.n	80032d0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01f      	beq.n	8003318 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	e012      	b.n	8003304 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	4413      	add	r3, r2
 80032e4:	7819      	ldrb	r1, [r3, #0]
 80032e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	4413      	add	r3, r2
 80032ec:	3334      	adds	r3, #52	; 0x34
 80032ee:	460a      	mov	r2, r1
 80032f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	4413      	add	r3, r2
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d006      	beq.n	800330c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	3301      	adds	r3, #1
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b0f      	cmp	r3, #15
 8003308:	d9e9      	bls.n	80032de <prvInitialiseNewTask+0x54>
 800330a:	e000      	b.n	800330e <prvInitialiseNewTask+0x84>
			{
				break;
 800330c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003316:	e003      	b.n	8003320 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	2b37      	cmp	r3, #55	; 0x37
 8003324:	d901      	bls.n	800332a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003326:	2337      	movs	r3, #55	; 0x37
 8003328:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	6a3a      	ldr	r2, [r7, #32]
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	6a3a      	ldr	r2, [r7, #32]
 8003334:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003338:	2200      	movs	r2, #0
 800333a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	3304      	adds	r3, #4
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff f893 	bl	800246c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	3318      	adds	r3, #24
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff f88e 	bl	800246c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003354:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003364:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003368:	2200      	movs	r2, #0
 800336a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003376:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	6938      	ldr	r0, [r7, #16]
 800337e:	f7ff f9cf 	bl	8002720 <pxPortInitialiseStack>
 8003382:	4602      	mov	r2, r0
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003392:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003394:	bf00      	nop
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033a4:	f7ff f95e 	bl	8002664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033a8:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <prvAddNewTaskToReadyList+0xb8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	4a29      	ldr	r2, [pc, #164]	; (8003454 <prvAddNewTaskToReadyList+0xb8>)
 80033b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033b2:	4b29      	ldr	r3, [pc, #164]	; (8003458 <prvAddNewTaskToReadyList+0xbc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033ba:	4a27      	ldr	r2, [pc, #156]	; (8003458 <prvAddNewTaskToReadyList+0xbc>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033c0:	4b24      	ldr	r3, [pc, #144]	; (8003454 <prvAddNewTaskToReadyList+0xb8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d110      	bne.n	80033ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033c8:	f000 fb9c 	bl	8003b04 <prvInitialiseTaskLists>
 80033cc:	e00d      	b.n	80033ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033ce:	4b23      	ldr	r3, [pc, #140]	; (800345c <prvAddNewTaskToReadyList+0xc0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <prvAddNewTaskToReadyList+0xbc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d802      	bhi.n	80033ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033e4:	4a1c      	ldr	r2, [pc, #112]	; (8003458 <prvAddNewTaskToReadyList+0xbc>)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <prvAddNewTaskToReadyList+0xc4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3301      	adds	r3, #1
 80033f0:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <prvAddNewTaskToReadyList+0xc4>)
 80033f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033f4:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <prvAddNewTaskToReadyList+0xc4>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003400:	4b18      	ldr	r3, [pc, #96]	; (8003464 <prvAddNewTaskToReadyList+0xc8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d903      	bls.n	8003410 <prvAddNewTaskToReadyList+0x74>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	4a15      	ldr	r2, [pc, #84]	; (8003464 <prvAddNewTaskToReadyList+0xc8>)
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4a12      	ldr	r2, [pc, #72]	; (8003468 <prvAddNewTaskToReadyList+0xcc>)
 800341e:	441a      	add	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	4619      	mov	r1, r3
 8003426:	4610      	mov	r0, r2
 8003428:	f7ff f82d 	bl	8002486 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800342c:	f7ff f92c 	bl	8002688 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003430:	4b0a      	ldr	r3, [pc, #40]	; (800345c <prvAddNewTaskToReadyList+0xc0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003438:	4b07      	ldr	r3, [pc, #28]	; (8003458 <prvAddNewTaskToReadyList+0xbc>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	429a      	cmp	r2, r3
 8003444:	d201      	bcs.n	800344a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003446:	f7ff f8fb 	bl	8002640 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20003e00 	.word	0x20003e00
 8003458:	2000392c 	.word	0x2000392c
 800345c:	20003e0c 	.word	0x20003e0c
 8003460:	20003e1c 	.word	0x20003e1c
 8003464:	20003e08 	.word	0x20003e08
 8003468:	20003930 	.word	0x20003930

0800346c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00f      	beq.n	800349e <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800347e:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <vTaskDelay+0x44>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <vTaskDelay+0x20>
 8003486:	f7ff fa27 	bl	80028d8 <ulSetInterruptMask>
 800348a:	e7fe      	b.n	800348a <vTaskDelay+0x1e>
			vTaskSuspendAll();
 800348c:	f000 f868 	bl	8003560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003490:	2100      	movs	r1, #0
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fc68 	bl	8003d68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003498:	f000 f870 	bl	800357c <xTaskResumeAll>
 800349c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 80034a4:	f7ff f8cc 	bl	8002640 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20003e28 	.word	0x20003e28

080034b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034c2:	463a      	mov	r2, r7
 80034c4:	1d39      	adds	r1, r7, #4
 80034c6:	f107 0308 	add.w	r3, r7, #8
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe fdb8 	bl	8002040 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	9202      	str	r2, [sp, #8]
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	2300      	movs	r3, #0
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2300      	movs	r3, #0
 80034e0:	460a      	mov	r2, r1
 80034e2:	4919      	ldr	r1, [pc, #100]	; (8003548 <vTaskStartScheduler+0x94>)
 80034e4:	4819      	ldr	r0, [pc, #100]	; (800354c <vTaskStartScheduler+0x98>)
 80034e6:	f7ff fe8b 	bl	8003200 <xTaskCreateStatic>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4a18      	ldr	r2, [pc, #96]	; (8003550 <vTaskStartScheduler+0x9c>)
 80034ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034f0:	4b17      	ldr	r3, [pc, #92]	; (8003550 <vTaskStartScheduler+0x9c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034f8:	2301      	movs	r3, #1
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	e001      	b.n	8003502 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d102      	bne.n	800350e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003508:	f000 fc82 	bl	8003e10 <xTimerCreateTimerTask>
 800350c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d10e      	bne.n	8003532 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003514:	f7ff f9e0 	bl	80028d8 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003518:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <vTaskStartScheduler+0xa0>)
 800351a:	f04f 32ff 	mov.w	r2, #4294967295
 800351e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003520:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <vTaskStartScheduler+0xa4>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <vTaskStartScheduler+0xa8>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800352c:	f7ff f982 	bl	8002834 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003530:	e006      	b.n	8003540 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d102      	bne.n	8003540 <vTaskStartScheduler+0x8c>
 800353a:	f7ff f9cd 	bl	80028d8 <ulSetInterruptMask>
 800353e:	e7fe      	b.n	800353e <vTaskStartScheduler+0x8a>
}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	080056d0 	.word	0x080056d0
 800354c:	08003ae5 	.word	0x08003ae5
 8003550:	20003e24 	.word	0x20003e24
 8003554:	20003e20 	.word	0x20003e20
 8003558:	20003e0c 	.word	0x20003e0c
 800355c:	20003e04 	.word	0x20003e04

08003560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003564:	4b04      	ldr	r3, [pc, #16]	; (8003578 <vTaskSuspendAll+0x18>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3301      	adds	r3, #1
 800356a:	4a03      	ldr	r2, [pc, #12]	; (8003578 <vTaskSuspendAll+0x18>)
 800356c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	20003e28 	.word	0x20003e28

0800357c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800358a:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <xTaskResumeAll+0xfc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <xTaskResumeAll+0x1c>
 8003592:	f7ff f9a1 	bl	80028d8 <ulSetInterruptMask>
 8003596:	e7fe      	b.n	8003596 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003598:	f7ff f864 	bl	8002664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800359c:	4b36      	ldr	r3, [pc, #216]	; (8003678 <xTaskResumeAll+0xfc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	4a35      	ldr	r2, [pc, #212]	; (8003678 <xTaskResumeAll+0xfc>)
 80035a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035a6:	4b34      	ldr	r3, [pc, #208]	; (8003678 <xTaskResumeAll+0xfc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d15c      	bne.n	8003668 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035ae:	4b33      	ldr	r3, [pc, #204]	; (800367c <xTaskResumeAll+0x100>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d058      	beq.n	8003668 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035b6:	e02f      	b.n	8003618 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035b8:	4b31      	ldr	r3, [pc, #196]	; (8003680 <xTaskResumeAll+0x104>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3318      	adds	r3, #24
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe ffbb 	bl	8002540 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3304      	adds	r3, #4
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe ffb6 	bl	8002540 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d8:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <xTaskResumeAll+0x108>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d903      	bls.n	80035e8 <xTaskResumeAll+0x6c>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	4a27      	ldr	r2, [pc, #156]	; (8003684 <xTaskResumeAll+0x108>)
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4a24      	ldr	r2, [pc, #144]	; (8003688 <xTaskResumeAll+0x10c>)
 80035f6:	441a      	add	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3304      	adds	r3, #4
 80035fc:	4619      	mov	r1, r3
 80035fe:	4610      	mov	r0, r2
 8003600:	f7fe ff41 	bl	8002486 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	4b20      	ldr	r3, [pc, #128]	; (800368c <xTaskResumeAll+0x110>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	429a      	cmp	r2, r3
 8003610:	d302      	bcc.n	8003618 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8003612:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <xTaskResumeAll+0x114>)
 8003614:	2201      	movs	r2, #1
 8003616:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003618:	4b19      	ldr	r3, [pc, #100]	; (8003680 <xTaskResumeAll+0x104>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1cb      	bne.n	80035b8 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003626:	f000 fb03 	bl	8003c30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800362a:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <xTaskResumeAll+0x118>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d010      	beq.n	8003658 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003636:	f000 f83f 	bl	80036b8 <xTaskIncrementTick>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <xTaskResumeAll+0x114>)
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3b01      	subs	r3, #1
 800364a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f1      	bne.n	8003636 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <xTaskResumeAll+0x118>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003658:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <xTaskResumeAll+0x114>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003660:	2301      	movs	r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003664:	f7fe ffec 	bl	8002640 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003668:	f7ff f80e 	bl	8002688 <vPortExitCritical>

	return xAlreadyYielded;
 800366c:	68bb      	ldr	r3, [r7, #8]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20003e28 	.word	0x20003e28
 800367c:	20003e00 	.word	0x20003e00
 8003680:	20003dc0 	.word	0x20003dc0
 8003684:	20003e08 	.word	0x20003e08
 8003688:	20003930 	.word	0x20003930
 800368c:	2000392c 	.word	0x2000392c
 8003690:	20003e14 	.word	0x20003e14
 8003694:	20003e10 	.word	0x20003e10

08003698 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <xTaskGetTickCount+0x1c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036a4:	687b      	ldr	r3, [r7, #4]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20003e04 	.word	0x20003e04

080036b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036c2:	4b4b      	ldr	r3, [pc, #300]	; (80037f0 <xTaskIncrementTick+0x138>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 8087 	bne.w	80037da <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036cc:	4b49      	ldr	r3, [pc, #292]	; (80037f4 <xTaskIncrementTick+0x13c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036d4:	4a47      	ldr	r2, [pc, #284]	; (80037f4 <xTaskIncrementTick+0x13c>)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d118      	bne.n	8003712 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80036e0:	4b45      	ldr	r3, [pc, #276]	; (80037f8 <xTaskIncrementTick+0x140>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <xTaskIncrementTick+0x38>
 80036ea:	f7ff f8f5 	bl	80028d8 <ulSetInterruptMask>
 80036ee:	e7fe      	b.n	80036ee <xTaskIncrementTick+0x36>
 80036f0:	4b41      	ldr	r3, [pc, #260]	; (80037f8 <xTaskIncrementTick+0x140>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	4b41      	ldr	r3, [pc, #260]	; (80037fc <xTaskIncrementTick+0x144>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a3f      	ldr	r2, [pc, #252]	; (80037f8 <xTaskIncrementTick+0x140>)
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	4a3f      	ldr	r2, [pc, #252]	; (80037fc <xTaskIncrementTick+0x144>)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <xTaskIncrementTick+0x148>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	4a3d      	ldr	r2, [pc, #244]	; (8003800 <xTaskIncrementTick+0x148>)
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	f000 fa8f 	bl	8003c30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003712:	4b3c      	ldr	r3, [pc, #240]	; (8003804 <xTaskIncrementTick+0x14c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	429a      	cmp	r2, r3
 800371a:	d349      	bcc.n	80037b0 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800371c:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <xTaskIncrementTick+0x140>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d104      	bne.n	8003730 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003726:	4b37      	ldr	r3, [pc, #220]	; (8003804 <xTaskIncrementTick+0x14c>)
 8003728:	f04f 32ff 	mov.w	r2, #4294967295
 800372c:	601a      	str	r2, [r3, #0]
					break;
 800372e:	e03f      	b.n	80037b0 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003730:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <xTaskIncrementTick+0x140>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	d203      	bcs.n	8003750 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003748:	4a2e      	ldr	r2, [pc, #184]	; (8003804 <xTaskIncrementTick+0x14c>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800374e:	e02f      	b.n	80037b0 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	3304      	adds	r3, #4
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe fef3 	bl	8002540 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	2b00      	cmp	r3, #0
 8003760:	d004      	beq.n	800376c <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3318      	adds	r3, #24
 8003766:	4618      	mov	r0, r3
 8003768:	f7fe feea 	bl	8002540 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	4b25      	ldr	r3, [pc, #148]	; (8003808 <xTaskIncrementTick+0x150>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d903      	bls.n	8003780 <xTaskIncrementTick+0xc8>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	4a22      	ldr	r2, [pc, #136]	; (8003808 <xTaskIncrementTick+0x150>)
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4a1f      	ldr	r2, [pc, #124]	; (800380c <xTaskIncrementTick+0x154>)
 800378e:	441a      	add	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	3304      	adds	r3, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4610      	mov	r0, r2
 8003798:	f7fe fe75 	bl	8002486 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <xTaskIncrementTick+0x158>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d3b8      	bcc.n	800371c <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 80037aa:	2301      	movs	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ae:	e7b5      	b.n	800371c <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037b0:	4b17      	ldr	r3, [pc, #92]	; (8003810 <xTaskIncrementTick+0x158>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b6:	4915      	ldr	r1, [pc, #84]	; (800380c <xTaskIncrementTick+0x154>)
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d901      	bls.n	80037cc <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 80037c8:	2301      	movs	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <xTaskIncrementTick+0x15c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d007      	beq.n	80037e4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80037d4:	2301      	movs	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	e004      	b.n	80037e4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80037da:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <xTaskIncrementTick+0x160>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3301      	adds	r3, #1
 80037e0:	4a0d      	ldr	r2, [pc, #52]	; (8003818 <xTaskIncrementTick+0x160>)
 80037e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80037e4:	697b      	ldr	r3, [r7, #20]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20003e28 	.word	0x20003e28
 80037f4:	20003e04 	.word	0x20003e04
 80037f8:	20003db8 	.word	0x20003db8
 80037fc:	20003dbc 	.word	0x20003dbc
 8003800:	20003e18 	.word	0x20003e18
 8003804:	20003e20 	.word	0x20003e20
 8003808:	20003e08 	.word	0x20003e08
 800380c:	20003930 	.word	0x20003930
 8003810:	2000392c 	.word	0x2000392c
 8003814:	20003e14 	.word	0x20003e14
 8003818:	20003e10 	.word	0x20003e10

0800381c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003822:	4b23      	ldr	r3, [pc, #140]	; (80038b0 <vTaskSwitchContext+0x94>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800382a:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <vTaskSwitchContext+0x98>)
 800382c:	2201      	movs	r2, #1
 800382e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003830:	e039      	b.n	80038a6 <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <vTaskSwitchContext+0x98>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003838:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <vTaskSwitchContext+0x9c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	607b      	str	r3, [r7, #4]
 800383e:	e008      	b.n	8003852 <vTaskSwitchContext+0x36>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d102      	bne.n	800384c <vTaskSwitchContext+0x30>
 8003846:	f7ff f847 	bl	80028d8 <ulSetInterruptMask>
 800384a:	e7fe      	b.n	800384a <vTaskSwitchContext+0x2e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	491a      	ldr	r1, [pc, #104]	; (80038bc <vTaskSwitchContext+0xa0>)
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0ec      	beq.n	8003840 <vTaskSwitchContext+0x24>
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4a12      	ldr	r2, [pc, #72]	; (80038bc <vTaskSwitchContext+0xa0>)
 8003872:	4413      	add	r3, r2
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	3308      	adds	r3, #8
 8003888:	429a      	cmp	r2, r3
 800388a:	d104      	bne.n	8003896 <vTaskSwitchContext+0x7a>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a08      	ldr	r2, [pc, #32]	; (80038c0 <vTaskSwitchContext+0xa4>)
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	4a05      	ldr	r2, [pc, #20]	; (80038b8 <vTaskSwitchContext+0x9c>)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6013      	str	r3, [r2, #0]
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20003e28 	.word	0x20003e28
 80038b4:	20003e14 	.word	0x20003e14
 80038b8:	20003e08 	.word	0x20003e08
 80038bc:	20003930 	.word	0x20003930
 80038c0:	2000392c 	.word	0x2000392c

080038c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <vTaskPlaceOnEventList+0x16>
 80038d4:	f7ff f800 	bl	80028d8 <ulSetInterruptMask>
 80038d8:	e7fe      	b.n	80038d8 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038da:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <vTaskPlaceOnEventList+0x34>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3318      	adds	r3, #24
 80038e0:	4619      	mov	r1, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fe fdf3 	bl	80024ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038e8:	2101      	movs	r1, #1
 80038ea:	6838      	ldr	r0, [r7, #0]
 80038ec:	f000 fa3c 	bl	8003d68 <prvAddCurrentTaskToDelayedList>
}
 80038f0:	bf00      	nop
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	2000392c 	.word	0x2000392c

080038fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <vTaskPlaceOnEventListRestricted+0x18>
 800390e:	f7fe ffe3 	bl	80028d8 <ulSetInterruptMask>
 8003912:	e7fe      	b.n	8003912 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <vTaskPlaceOnEventListRestricted+0x44>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3318      	adds	r3, #24
 800391a:	4619      	mov	r1, r3
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7fe fdb2 	bl	8002486 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 8003928:	f04f 33ff 	mov.w	r3, #4294967295
 800392c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	68b8      	ldr	r0, [r7, #8]
 8003932:	f000 fa19 	bl	8003d68 <prvAddCurrentTaskToDelayedList>
	}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2000392c 	.word	0x2000392c

08003944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <xTaskRemoveFromEventList+0x1c>
 800395a:	f7fe ffbd 	bl	80028d8 <ulSetInterruptMask>
 800395e:	e7fe      	b.n	800395e <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	3318      	adds	r3, #24
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe fdeb 	bl	8002540 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800396a:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <xTaskRemoveFromEventList+0xa0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d11d      	bne.n	80039ae <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	3304      	adds	r3, #4
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe fde2 	bl	8002540 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003980:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <xTaskRemoveFromEventList+0xa4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d903      	bls.n	8003990 <xTaskRemoveFromEventList+0x4c>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	4a16      	ldr	r2, [pc, #88]	; (80039e8 <xTaskRemoveFromEventList+0xa4>)
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4a13      	ldr	r2, [pc, #76]	; (80039ec <xTaskRemoveFromEventList+0xa8>)
 800399e:	441a      	add	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f7fe fd6d 	bl	8002486 <vListInsertEnd>
 80039ac:	e005      	b.n	80039ba <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	3318      	adds	r3, #24
 80039b2:	4619      	mov	r1, r3
 80039b4:	480e      	ldr	r0, [pc, #56]	; (80039f0 <xTaskRemoveFromEventList+0xac>)
 80039b6:	f7fe fd66 	bl	8002486 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039be:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <xTaskRemoveFromEventList+0xb0>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d905      	bls.n	80039d4 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039c8:	2301      	movs	r3, #1
 80039ca:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <xTaskRemoveFromEventList+0xb4>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e001      	b.n	80039d8 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80039d8:	68fb      	ldr	r3, [r7, #12]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20003e28 	.word	0x20003e28
 80039e8:	20003e08 	.word	0x20003e08
 80039ec:	20003930 	.word	0x20003930
 80039f0:	20003dc0 	.word	0x20003dc0
 80039f4:	2000392c 	.word	0x2000392c
 80039f8:	20003e14 	.word	0x20003e14

080039fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <vTaskInternalSetTimeOutState+0x24>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <vTaskInternalSetTimeOutState+0x28>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	605a      	str	r2, [r3, #4]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	20003e18 	.word	0x20003e18
 8003a24:	20003e04 	.word	0x20003e04

08003a28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <xTaskCheckForTimeOut+0x16>
 8003a38:	f7fe ff4e 	bl	80028d8 <ulSetInterruptMask>
 8003a3c:	e7fe      	b.n	8003a3c <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <xTaskCheckForTimeOut+0x22>
 8003a44:	f7fe ff48 	bl	80028d8 <ulSetInterruptMask>
 8003a48:	e7fe      	b.n	8003a48 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8003a4a:	f7fe fe0b 	bl	8002664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <xTaskCheckForTimeOut+0x9c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a66:	d102      	bne.n	8003a6e <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	e023      	b.n	8003ab6 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <xTaskCheckForTimeOut+0xa0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d007      	beq.n	8003a8a <xTaskCheckForTimeOut+0x62>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d302      	bcc.n	8003a8a <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a84:	2301      	movs	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	e015      	b.n	8003ab6 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d20b      	bcs.n	8003aac <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ffab 	bl	80039fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	e004      	b.n	8003ab6 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003ab6:	f7fe fde7 	bl	8002688 <vPortExitCritical>

	return xReturn;
 8003aba:	697b      	ldr	r3, [r7, #20]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20003e04 	.word	0x20003e04
 8003ac8:	20003e18 	.word	0x20003e18

08003acc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ad0:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <vTaskMissedYield+0x14>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	20003e14 	.word	0x20003e14

08003ae4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003aec:	f000 f84a 	bl	8003b84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <prvIdleTask+0x1c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d9f9      	bls.n	8003aec <prvIdleTask+0x8>
			{
				taskYIELD();
 8003af8:	f7fe fda2 	bl	8002640 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003afc:	e7f6      	b.n	8003aec <prvIdleTask+0x8>
 8003afe:	bf00      	nop
 8003b00:	20003930 	.word	0x20003930

08003b04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	607b      	str	r3, [r7, #4]
 8003b0e:	e00c      	b.n	8003b2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <prvInitialiseTaskLists+0x60>)
 8003b1c:	4413      	add	r3, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe fc84 	bl	800242c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3301      	adds	r3, #1
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b37      	cmp	r3, #55	; 0x37
 8003b2e:	d9ef      	bls.n	8003b10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b30:	480d      	ldr	r0, [pc, #52]	; (8003b68 <prvInitialiseTaskLists+0x64>)
 8003b32:	f7fe fc7b 	bl	800242c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b36:	480d      	ldr	r0, [pc, #52]	; (8003b6c <prvInitialiseTaskLists+0x68>)
 8003b38:	f7fe fc78 	bl	800242c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b3c:	480c      	ldr	r0, [pc, #48]	; (8003b70 <prvInitialiseTaskLists+0x6c>)
 8003b3e:	f7fe fc75 	bl	800242c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b42:	480c      	ldr	r0, [pc, #48]	; (8003b74 <prvInitialiseTaskLists+0x70>)
 8003b44:	f7fe fc72 	bl	800242c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b48:	480b      	ldr	r0, [pc, #44]	; (8003b78 <prvInitialiseTaskLists+0x74>)
 8003b4a:	f7fe fc6f 	bl	800242c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <prvInitialiseTaskLists+0x78>)
 8003b50:	4a05      	ldr	r2, [pc, #20]	; (8003b68 <prvInitialiseTaskLists+0x64>)
 8003b52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <prvInitialiseTaskLists+0x7c>)
 8003b56:	4a05      	ldr	r2, [pc, #20]	; (8003b6c <prvInitialiseTaskLists+0x68>)
 8003b58:	601a      	str	r2, [r3, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20003930 	.word	0x20003930
 8003b68:	20003d90 	.word	0x20003d90
 8003b6c:	20003da4 	.word	0x20003da4
 8003b70:	20003dc0 	.word	0x20003dc0
 8003b74:	20003dd4 	.word	0x20003dd4
 8003b78:	20003dec 	.word	0x20003dec
 8003b7c:	20003db8 	.word	0x20003db8
 8003b80:	20003dbc 	.word	0x20003dbc

08003b84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b8a:	e019      	b.n	8003bc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b8c:	f7fe fd6a 	bl	8002664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b90:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <prvCheckTasksWaitingTermination+0x50>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe fccf 	bl	8002540 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <prvCheckTasksWaitingTermination+0x54>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	4a0b      	ldr	r2, [pc, #44]	; (8003bd8 <prvCheckTasksWaitingTermination+0x54>)
 8003baa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <prvCheckTasksWaitingTermination+0x58>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <prvCheckTasksWaitingTermination+0x58>)
 8003bb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003bb6:	f7fe fd67 	bl	8002688 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f810 	bl	8003be0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <prvCheckTasksWaitingTermination+0x58>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e1      	bne.n	8003b8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20003dd4 	.word	0x20003dd4
 8003bd8:	20003e00 	.word	0x20003e00
 8003bdc:	20003de8 	.word	0x20003de8

08003be0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d108      	bne.n	8003c04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fb0a 	bl	8002210 <vPortFree>
				vPortFree( pxTCB );
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7fe fb07 	bl	8002210 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c02:	e010      	b.n	8003c26 <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d103      	bne.n	8003c16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fe fafe 	bl	8002210 <vPortFree>
	}
 8003c14:	e007      	b.n	8003c26 <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d002      	beq.n	8003c26 <prvDeleteTCB+0x46>
 8003c20:	f7fe fe5a 	bl	80028d8 <ulSetInterruptMask>
 8003c24:	e7fe      	b.n	8003c24 <prvDeleteTCB+0x44>
	}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c36:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <prvResetNextTaskUnblockTime+0x38>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d104      	bne.n	8003c4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <prvResetNextTaskUnblockTime+0x3c>)
 8003c42:	f04f 32ff 	mov.w	r2, #4294967295
 8003c46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c48:	e008      	b.n	8003c5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <prvResetNextTaskUnblockTime+0x38>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <prvResetNextTaskUnblockTime+0x3c>)
 8003c5a:	6013      	str	r3, [r2, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	20003db8 	.word	0x20003db8
 8003c6c:	20003e20 	.word	0x20003e20

08003c70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <xTaskGetSchedulerState+0x34>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	e008      	b.n	8003c96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <xTaskGetSchedulerState+0x38>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	607b      	str	r3, [r7, #4]
 8003c90:	e001      	b.n	8003c96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c92:	2300      	movs	r3, #0
 8003c94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c96:	687b      	ldr	r3, [r7, #4]
	}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	20003e0c 	.word	0x20003e0c
 8003ca8:	20003e28 	.word	0x20003e28

08003cac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d046      	beq.n	8003d50 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003cc2:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <xTaskPriorityDisinherit+0xb0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d002      	beq.n	8003cd2 <xTaskPriorityDisinherit+0x26>
 8003ccc:	f7fe fe04 	bl	80028d8 <ulSetInterruptMask>
 8003cd0:	e7fe      	b.n	8003cd0 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <xTaskPriorityDisinherit+0x34>
 8003cda:	f7fe fdfd 	bl	80028d8 <ulSetInterruptMask>
 8003cde:	e7fe      	b.n	8003cde <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	1e5a      	subs	r2, r3, #1
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d02c      	beq.n	8003d50 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d128      	bne.n	8003d50 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fc1c 	bl	8002540 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <xTaskPriorityDisinherit+0xb4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d903      	bls.n	8003d30 <xTaskPriorityDisinherit+0x84>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	4a0c      	ldr	r2, [pc, #48]	; (8003d60 <xTaskPriorityDisinherit+0xb4>)
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <xTaskPriorityDisinherit+0xb8>)
 8003d3e:	441a      	add	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	3304      	adds	r3, #4
 8003d44:	4619      	mov	r1, r3
 8003d46:	4610      	mov	r0, r2
 8003d48:	f7fe fb9d 	bl	8002486 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d50:	68fb      	ldr	r3, [r7, #12]
	}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	2000392c 	.word	0x2000392c
 8003d60:	20003e08 	.word	0x20003e08
 8003d64:	20003930 	.word	0x20003930

08003d68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d72:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d78:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe fbde 	bl	8002540 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d10a      	bne.n	8003da2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d92:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3304      	adds	r3, #4
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4819      	ldr	r0, [pc, #100]	; (8003e00 <prvAddCurrentTaskToDelayedList+0x98>)
 8003d9c:	f7fe fb73 	bl	8002486 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003da0:	e026      	b.n	8003df0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4413      	add	r3, r2
 8003da8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003daa:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d209      	bcs.n	8003dce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dba:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f7fe fb81 	bl	80024ce <vListInsert>
}
 8003dcc:	e010      	b.n	8003df0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dce:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	f7fe fb77 	bl	80024ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003de0:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d202      	bcs.n	8003df0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003dea:	4a08      	ldr	r2, [pc, #32]	; (8003e0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	6013      	str	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20003e04 	.word	0x20003e04
 8003dfc:	2000392c 	.word	0x2000392c
 8003e00:	20003dec 	.word	0x20003dec
 8003e04:	20003dbc 	.word	0x20003dbc
 8003e08:	20003db8 	.word	0x20003db8
 8003e0c:	20003e20 	.word	0x20003e20

08003e10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003e1a:	f000 fb1b 	bl	8004454 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003e1e:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <xTimerCreateTimerTask+0x70>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d020      	beq.n	8003e68 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003e2e:	463a      	mov	r2, r7
 8003e30:	1d39      	adds	r1, r7, #4
 8003e32:	f107 0308 	add.w	r3, r7, #8
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe f91c 	bl	8002074 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003e3c:	6839      	ldr	r1, [r7, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	9202      	str	r2, [sp, #8]
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	2302      	movs	r3, #2
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	460a      	mov	r2, r1
 8003e4e:	490d      	ldr	r1, [pc, #52]	; (8003e84 <xTimerCreateTimerTask+0x74>)
 8003e50:	480d      	ldr	r0, [pc, #52]	; (8003e88 <xTimerCreateTimerTask+0x78>)
 8003e52:	f7ff f9d5 	bl	8003200 <xTaskCreateStatic>
 8003e56:	4603      	mov	r3, r0
 8003e58:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <xTimerCreateTimerTask+0x7c>)
 8003e5a:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <xTimerCreateTimerTask+0x7c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8003e64:	2301      	movs	r3, #1
 8003e66:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d102      	bne.n	8003e74 <xTimerCreateTimerTask+0x64>
 8003e6e:	f7fe fd33 	bl	80028d8 <ulSetInterruptMask>
 8003e72:	e7fe      	b.n	8003e72 <xTimerCreateTimerTask+0x62>
	return xReturn;
 8003e74:	68fb      	ldr	r3, [r7, #12]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20003e5c 	.word	0x20003e5c
 8003e84:	080056d8 	.word	0x080056d8
 8003e88:	0800404d 	.word	0x0800404d
 8003e8c:	20003e60 	.word	0x20003e60

08003e90 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8003e9e:	202c      	movs	r0, #44	; 0x2c
 8003ea0:	f7fe f902 	bl	80020a8 <pvPortMalloc>
 8003ea4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00d      	beq.n	8003ec8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f805 	bl	8003ed2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003ec8:	697b      	ldr	r3, [r7, #20]
	}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d102      	bne.n	8003eec <prvInitialiseNewTimer+0x1a>
 8003ee6:	f7fe fcf7 	bl	80028d8 <ulSetInterruptMask>
 8003eea:	e7fe      	b.n	8003eea <prvInitialiseNewTimer+0x18>

	if( pxNewTimer != NULL )
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01e      	beq.n	8003f30 <prvInitialiseNewTimer+0x5e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003ef2:	f000 faaf 	bl	8004454 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe faaa 	bl	800246c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <prvInitialiseNewTimer+0x5e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f24:	f043 0304 	orr.w	r3, r3, #4
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	; 0x28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <xTimerGenericCommand+0x1e>
 8003f50:	f7fe fcc2 	bl	80028d8 <ulSetInterruptMask>
 8003f54:	e7fe      	b.n	8003f54 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f56:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <xTimerGenericCommand+0x88>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d02a      	beq.n	8003fb4 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b05      	cmp	r3, #5
 8003f6e:	dc18      	bgt.n	8003fa2 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f70:	f7ff fe7e 	bl	8003c70 <xTaskGetSchedulerState>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d109      	bne.n	8003f8e <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f7a:	4b11      	ldr	r3, [pc, #68]	; (8003fc0 <xTimerGenericCommand+0x88>)
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	f107 0114 	add.w	r1, r7, #20
 8003f82:	2300      	movs	r3, #0
 8003f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f86:	f7fe fdda 	bl	8002b3e <xQueueGenericSend>
 8003f8a:	6278      	str	r0, [r7, #36]	; 0x24
 8003f8c:	e012      	b.n	8003fb4 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f8e:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <xTimerGenericCommand+0x88>)
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	f107 0114 	add.w	r1, r7, #20
 8003f96:	2300      	movs	r3, #0
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f7fe fdd0 	bl	8002b3e <xQueueGenericSend>
 8003f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8003fa0:	e008      	b.n	8003fb4 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fa2:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <xTimerGenericCommand+0x88>)
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	f107 0114 	add.w	r1, r7, #20
 8003faa:	2300      	movs	r3, #0
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	f7fe fe8f 	bl	8002cd0 <xQueueGenericSendFromISR>
 8003fb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3728      	adds	r7, #40	; 0x28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20003e5c 	.word	0x20003e5c

08003fc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fce:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <prvProcessExpiredTimer+0x84>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe faaf 	bl	8002540 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01a      	beq.n	8004026 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	18d1      	adds	r1, r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f8c1 	bl	8004184 <prvInsertTimerInActiveList>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d017      	beq.n	8004038 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004008:	2300      	movs	r3, #0
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	2300      	movs	r3, #0
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	2100      	movs	r1, #0
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7ff ff90 	bl	8003f38 <xTimerGenericCommand>
 8004018:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10b      	bne.n	8004038 <prvProcessExpiredTimer+0x74>
 8004020:	f7fe fc5a 	bl	80028d8 <ulSetInterruptMask>
 8004024:	e7fe      	b.n	8004024 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	4798      	blx	r3
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20003e54 	.word	0x20003e54

0800404c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004054:	f107 0308 	add.w	r3, r7, #8
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f84f 	bl	80040fc <prvGetNextExpireTime>
 800405e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4619      	mov	r1, r3
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f803 	bl	8004070 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800406a:	f000 f8cd 	bl	8004208 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800406e:	e7f1      	b.n	8004054 <prvTimerTask+0x8>

08004070 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800407a:	f7ff fa71 	bl	8003560 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800407e:	f107 0308 	add.w	r3, r7, #8
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f85e 	bl	8004144 <prvSampleTimeNow>
 8004088:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d12a      	bne.n	80040e6 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <prvProcessTimerOrBlockTask+0x3c>
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	429a      	cmp	r2, r3
 800409c:	d806      	bhi.n	80040ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800409e:	f7ff fa6d 	bl	800357c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040a2:	68f9      	ldr	r1, [r7, #12]
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff ff8d 	bl	8003fc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040aa:	e01e      	b.n	80040ea <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040b2:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <prvProcessTimerOrBlockTask+0x84>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <prvProcessTimerOrBlockTask+0x50>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <prvProcessTimerOrBlockTask+0x52>
 80040c0:	2300      	movs	r3, #0
 80040c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <prvProcessTimerOrBlockTask+0x88>)
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	4619      	mov	r1, r3
 80040d2:	f7ff f861 	bl	8003198 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80040d6:	f7ff fa51 	bl	800357c <xTaskResumeAll>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d104      	bne.n	80040ea <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80040e0:	f7fe faae 	bl	8002640 <vPortYield>
}
 80040e4:	e001      	b.n	80040ea <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80040e6:	f7ff fa49 	bl	800357c <xTaskResumeAll>
}
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20003e58 	.word	0x20003e58
 80040f8:	20003e5c 	.word	0x20003e5c

080040fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004104:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <prvGetNextExpireTime+0x44>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <prvGetNextExpireTime+0x16>
 800410e:	2201      	movs	r2, #1
 8004110:	e000      	b.n	8004114 <prvGetNextExpireTime+0x18>
 8004112:	2200      	movs	r2, #0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004120:	4b07      	ldr	r3, [pc, #28]	; (8004140 <prvGetNextExpireTime+0x44>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	e001      	b.n	8004130 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004130:	68fb      	ldr	r3, [r7, #12]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20003e54 	.word	0x20003e54

08004144 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800414c:	f7ff faa4 	bl	8003698 <xTaskGetTickCount>
 8004150:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <prvSampleTimeNow+0x3c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	429a      	cmp	r2, r3
 800415a:	d205      	bcs.n	8004168 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800415c:	f000 f91e 	bl	800439c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e002      	b.n	800416e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800416e:	4a04      	ldr	r2, [pc, #16]	; (8004180 <prvSampleTimeNow+0x3c>)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004174:	68fb      	ldr	r3, [r7, #12]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20003e64 	.word	0x20003e64

08004184 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d812      	bhi.n	80041d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	1ad2      	subs	r2, r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d302      	bcc.n	80041be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80041b8:	2301      	movs	r3, #1
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	e01b      	b.n	80041f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041be:	4b10      	ldr	r3, [pc, #64]	; (8004200 <prvInsertTimerInActiveList+0x7c>)
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f7fe f980 	bl	80024ce <vListInsert>
 80041ce:	e012      	b.n	80041f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d206      	bcs.n	80041e6 <prvInsertTimerInActiveList+0x62>
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d302      	bcc.n	80041e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80041e0:	2301      	movs	r3, #1
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	e007      	b.n	80041f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <prvInsertTimerInActiveList+0x80>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f7fe f96c 	bl	80024ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 80041f6:	697b      	ldr	r3, [r7, #20]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20003e58 	.word	0x20003e58
 8004204:	20003e54 	.word	0x20003e54

08004208 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08c      	sub	sp, #48	; 0x30
 800420c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800420e:	e0b2      	b.n	8004376 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	da11      	bge.n	800423a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004216:	f107 0308 	add.w	r3, r7, #8
 800421a:	3304      	adds	r3, #4
 800421c:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	2b00      	cmp	r3, #0
 8004222:	d102      	bne.n	800422a <prvProcessReceivedCommands+0x22>
 8004224:	f7fe fb58 	bl	80028d8 <ulSetInterruptMask>
 8004228:	e7fe      	b.n	8004228 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004230:	6850      	ldr	r0, [r2, #4]
 8004232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004234:	6892      	ldr	r2, [r2, #8]
 8004236:	4611      	mov	r1, r2
 8004238:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f2c0 8099 	blt.w	8004374 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d004      	beq.n	8004258 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	3304      	adds	r3, #4
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe f974 	bl	8002540 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004258:	1d3b      	adds	r3, r7, #4
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ff72 	bl	8004144 <prvSampleTimeNow>
 8004260:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b09      	cmp	r3, #9
 8004266:	f200 8086 	bhi.w	8004376 <prvProcessReceivedCommands+0x16e>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <prvProcessReceivedCommands+0x68>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004299 	.word	0x08004299
 8004274:	08004299 	.word	0x08004299
 8004278:	08004299 	.word	0x08004299
 800427c:	080042fd 	.word	0x080042fd
 8004280:	08004311 	.word	0x08004311
 8004284:	0800434b 	.word	0x0800434b
 8004288:	08004299 	.word	0x08004299
 800428c:	08004299 	.word	0x08004299
 8004290:	080042fd 	.word	0x080042fd
 8004294:	08004311 	.word	0x08004311
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	18d1      	adds	r1, r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	6a38      	ldr	r0, [r7, #32]
 80042b8:	f7ff ff64 	bl	8004184 <prvInsertTimerInActiveList>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d059      	beq.n	8004376 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	6a38      	ldr	r0, [r7, #32]
 80042c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d04e      	beq.n	8004376 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	441a      	add	r2, r3
 80042e0:	2300      	movs	r3, #0
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	2300      	movs	r3, #0
 80042e6:	2100      	movs	r1, #0
 80042e8:	6a38      	ldr	r0, [r7, #32]
 80042ea:	f7ff fe25 	bl	8003f38 <xTimerGenericCommand>
 80042ee:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d13f      	bne.n	8004376 <prvProcessReceivedCommands+0x16e>
 80042f6:	f7fe faef 	bl	80028d8 <ulSetInterruptMask>
 80042fa:	e7fe      	b.n	80042fa <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	b2da      	uxtb	r2, r3
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800430e:	e032      	b.n	8004376 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	b2da      	uxtb	r2, r3
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d102      	bne.n	8004336 <prvProcessReceivedCommands+0x12e>
 8004330:	f7fe fad2 	bl	80028d8 <ulSetInterruptMask>
 8004334:	e7fe      	b.n	8004334 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	699a      	ldr	r2, [r3, #24]
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	18d1      	adds	r1, r2, r3
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	6a38      	ldr	r0, [r7, #32]
 8004344:	f7ff ff1e 	bl	8004184 <prvInsertTimerInActiveList>
					break;
 8004348:	e015      	b.n	8004376 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d103      	bne.n	8004360 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8004358:	6a38      	ldr	r0, [r7, #32]
 800435a:	f7fd ff59 	bl	8002210 <vPortFree>
 800435e:	e00a      	b.n	8004376 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	b2da      	uxtb	r2, r3
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004372:	e000      	b.n	8004376 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004374:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004376:	4b08      	ldr	r3, [pc, #32]	; (8004398 <prvProcessReceivedCommands+0x190>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f107 0108 	add.w	r1, r7, #8
 800437e:	2200      	movs	r2, #0
 8004380:	4618      	mov	r0, r3
 8004382:	f7fe fd16 	bl	8002db2 <xQueueReceive>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	f47f af41 	bne.w	8004210 <prvProcessReceivedCommands+0x8>
	}
}
 800438e:	bf00      	nop
 8004390:	bf00      	nop
 8004392:	3728      	adds	r7, #40	; 0x28
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20003e5c 	.word	0x20003e5c

0800439c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043a2:	e040      	b.n	8004426 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043a4:	4b29      	ldr	r3, [pc, #164]	; (800444c <prvSwitchTimerLists+0xb0>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ae:	4b27      	ldr	r3, [pc, #156]	; (800444c <prvSwitchTimerLists+0xb0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3304      	adds	r3, #4
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fe f8bf 	bl	8002540 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d026      	beq.n	8004426 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4413      	add	r3, r2
 80043e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d90e      	bls.n	8004408 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043f6:	4b15      	ldr	r3, [pc, #84]	; (800444c <prvSwitchTimerLists+0xb0>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3304      	adds	r3, #4
 80043fe:	4619      	mov	r1, r3
 8004400:	4610      	mov	r0, r2
 8004402:	f7fe f864 	bl	80024ce <vListInsert>
 8004406:	e00e      	b.n	8004426 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004408:	2300      	movs	r3, #0
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	2300      	movs	r3, #0
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	2100      	movs	r1, #0
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f7ff fd90 	bl	8003f38 <xTimerGenericCommand>
 8004418:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <prvSwitchTimerLists+0x8a>
 8004420:	f7fe fa5a 	bl	80028d8 <ulSetInterruptMask>
 8004424:	e7fe      	b.n	8004424 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <prvSwitchTimerLists+0xb0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1b9      	bne.n	80043a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004430:	4b06      	ldr	r3, [pc, #24]	; (800444c <prvSwitchTimerLists+0xb0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <prvSwitchTimerLists+0xb4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a04      	ldr	r2, [pc, #16]	; (800444c <prvSwitchTimerLists+0xb0>)
 800443c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800443e:	4a04      	ldr	r2, [pc, #16]	; (8004450 <prvSwitchTimerLists+0xb4>)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	6013      	str	r3, [r2, #0]
}
 8004444:	bf00      	nop
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20003e54 	.word	0x20003e54
 8004450:	20003e58 	.word	0x20003e58

08004454 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800445a:	f7fe f903 	bl	8002664 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800445e:	4b15      	ldr	r3, [pc, #84]	; (80044b4 <prvCheckForValidListAndQueue+0x60>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d120      	bne.n	80044a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004466:	4814      	ldr	r0, [pc, #80]	; (80044b8 <prvCheckForValidListAndQueue+0x64>)
 8004468:	f7fd ffe0 	bl	800242c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800446c:	4813      	ldr	r0, [pc, #76]	; (80044bc <prvCheckForValidListAndQueue+0x68>)
 800446e:	f7fd ffdd 	bl	800242c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004472:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <prvCheckForValidListAndQueue+0x6c>)
 8004474:	4a10      	ldr	r2, [pc, #64]	; (80044b8 <prvCheckForValidListAndQueue+0x64>)
 8004476:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004478:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <prvCheckForValidListAndQueue+0x70>)
 800447a:	4a10      	ldr	r2, [pc, #64]	; (80044bc <prvCheckForValidListAndQueue+0x68>)
 800447c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800447e:	2300      	movs	r3, #0
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <prvCheckForValidListAndQueue+0x74>)
 8004484:	4a11      	ldr	r2, [pc, #68]	; (80044cc <prvCheckForValidListAndQueue+0x78>)
 8004486:	2110      	movs	r1, #16
 8004488:	200a      	movs	r0, #10
 800448a:	f7fe fae5 	bl	8002a58 <xQueueGenericCreateStatic>
 800448e:	4603      	mov	r3, r0
 8004490:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <prvCheckForValidListAndQueue+0x60>)
 8004492:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004494:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <prvCheckForValidListAndQueue+0x60>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800449c:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <prvCheckForValidListAndQueue+0x60>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	490b      	ldr	r1, [pc, #44]	; (80044d0 <prvCheckForValidListAndQueue+0x7c>)
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe fe4e 	bl	8003144 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044a8:	f7fe f8ee 	bl	8002688 <vPortExitCritical>
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20003e5c 	.word	0x20003e5c
 80044b8:	20003e2c 	.word	0x20003e2c
 80044bc:	20003e40 	.word	0x20003e40
 80044c0:	20003e54 	.word	0x20003e54
 80044c4:	20003e58 	.word	0x20003e58
 80044c8:	20003f08 	.word	0x20003f08
 80044cc:	20003e68 	.word	0x20003e68
 80044d0:	080056e0 	.word	0x080056e0

080044d4 <main>:

//#define mainONE_SHOT_TIMER_PERIOD pdMS_TO_TICKS( 3333 )
//#define mainAUTO_RELOAD_TIMER_PERIOD pdMS_TO_TICKS( 1000 )

int main(void)
{
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80044da:	f7fc f8ef 	bl	80006bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80044de:	f000 f833 	bl	8004548 <SystemClock_Config>
  // BSP_LED_Init(LED9);
  //BSP_LED_Init(LED10);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 80044e2:	f000 f882 	bl	80045ea <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80044e6:	f7fd fd87 	bl	8001ff8 <osKernelInitialize>
  BaseType_t xTimer1Started, xTimer2Started;

 // xTaskCreate(LED_Thread1, "LED Task", 1024, NULL, 1, &task1_handle);

 // xOneShotTimer = xTimerCreate("OneShot",mainONE_SHOT_TIMER_PERIOD,pdFALSE,0,prvTimerCallback );
  xAutoReloadTimer = xTimerCreate("AutoReload",xHealthyTimerPeriod,pdTRUE,0,prvTimerCallback);
 80044ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <main+0x64>)
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	2300      	movs	r3, #0
 80044f4:	2201      	movs	r2, #1
 80044f6:	4811      	ldr	r0, [pc, #68]	; (800453c <main+0x68>)
 80044f8:	f7ff fcca 	bl	8003e90 <xTimerCreate>
 80044fc:	4603      	mov	r3, r0
 80044fe:	4a10      	ldr	r2, [pc, #64]	; (8004540 <main+0x6c>)
 8004500:	6013      	str	r3, [r2, #0]

  if(  xAutoReloadTimer != NULL  )
 8004502:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <main+0x6c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d014      	beq.n	8004534 <main+0x60>
   {
    printf("timers created\n");
 800450a:	480e      	ldr	r0, [pc, #56]	; (8004544 <main+0x70>)
 800450c:	f000 f980 	bl	8004810 <puts>
   //xTimer1Started = xTimerStart( xOneShotTimer, 0 );
   xTimer2Started = xTimerStart( xAutoReloadTimer, 0 );
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <main+0x6c>)
 8004512:	681c      	ldr	r4, [r3, #0]
 8004514:	f7ff f8c0 	bl	8003698 <xTaskGetTickCount>
 8004518:	4602      	mov	r2, r0
 800451a:	2300      	movs	r3, #0
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	2300      	movs	r3, #0
 8004520:	2101      	movs	r1, #1
 8004522:	4620      	mov	r0, r4
 8004524:	f7ff fd08 	bl	8003f38 <xTimerGenericCommand>
 8004528:	6078      	str	r0, [r7, #4]

     if( xTimer2Started == pdPASS  )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <main+0x60>
      {
    	 /* Start the scheduler. */
    	 vTaskStartScheduler();
 8004530:	f7fe ffc0 	bl	80034b4 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004534:	e7fe      	b.n	8004534 <main+0x60>
 8004536:	bf00      	nop
 8004538:	08004611 	.word	0x08004611
 800453c:	080056e8 	.word	0x080056e8
 8004540:	20003ff0 	.word	0x20003ff0
 8004544:	080056f4 	.word	0x080056f4

08004548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b098      	sub	sp, #96	; 0x60
 800454c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800454e:	f107 0318 	add.w	r3, r7, #24
 8004552:	2248      	movs	r2, #72	; 0x48
 8004554:	2100      	movs	r1, #0
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f8cb 	bl	80046f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800455c:	1d3b      	adds	r3, r7, #4
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	609a      	str	r2, [r3, #8]
 8004566:	60da      	str	r2, [r3, #12]
 8004568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800456a:	2000      	movs	r0, #0
 800456c:	f7fc f9fe 	bl	800096c <HAL_PWREx_ControlVoltageScaling>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004576:	f000 f881 	bl	800467c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800457a:	2310      	movs	r3, #16
 800457c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800457e:	2301      	movs	r3, #1
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004582:	2300      	movs	r3, #0
 8004584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004586:	2360      	movs	r3, #96	; 0x60
 8004588:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800458a:	2302      	movs	r3, #2
 800458c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800458e:	2301      	movs	r3, #1
 8004590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004592:	2301      	movs	r3, #1
 8004594:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8004596:	2337      	movs	r3, #55	; 0x37
 8004598:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800459a:	2307      	movs	r3, #7
 800459c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800459e:	2302      	movs	r3, #2
 80045a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80045a2:	2302      	movs	r3, #2
 80045a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045a6:	f107 0318 	add.w	r3, r7, #24
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fc fa6e 	bl	8000a8c <HAL_RCC_OscConfig>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80045b6:	f000 f861 	bl	800467c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045ba:	230f      	movs	r3, #15
 80045bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045be:	2303      	movs	r3, #3
 80045c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80045ce:	1d3b      	adds	r3, r7, #4
 80045d0:	2105      	movs	r1, #5
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fc ff30 	bl	8001438 <HAL_RCC_ClockConfig>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80045de:	f000 f84d 	bl	800467c <Error_Handler>
  }
}
 80045e2:	bf00      	nop
 80045e4:	3760      	adds	r7, #96	; 0x60
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80045ee:	2000      	movs	r0, #0
 80045f0:	f7fc f97e 	bl	80008f0 <HAL_ICACHE_ConfigAssociativityMode>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80045fa:	f000 f83f 	bl	800467c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80045fe:	f7fc f997 	bl	8000930 <HAL_ICACHE_Enable>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8004608:	f000 f838 	bl	800467c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800460c:	bf00      	nop
 800460e:	bd80      	pop	{r7, pc}

08004610 <prvTimerCallback>:
	  osDelay(1000);
   USER CODE END 5
}*/

static void prvTimerCallback( TimerHandle_t xTimer )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af02      	add	r7, sp, #8
 8004616:	6078      	str	r0, [r7, #4]

//static BaseType_t xErrorDetected = pdFALSE;
printf("timer expired \n");
 8004618:	480d      	ldr	r0, [pc, #52]	; (8004650 <prvTimerCallback+0x40>)
 800461a:	f000 f8f9 	bl	8004810 <puts>

TickType_t TimeNow;
 /* Obtain the current tick count. */
 TimeNow = xTaskGetTickCount();
 800461e:	f7ff f83b 	bl	8003698 <xTaskGetTickCount>
 8004622:	60f8      	str	r0, [r7, #12]
 /* Output a string to show the time at which the callback was executed. */
 printf( "One-shot timer callback executing %d \n", TimeNow );
 8004624:	68f9      	ldr	r1, [r7, #12]
 8004626:	480b      	ldr	r0, [pc, #44]	; (8004654 <prvTimerCallback+0x44>)
 8004628:	f000 f86c 	bl	8004704 <iprintf>
vTaskDelay(5000);
 800462c:	f241 3088 	movw	r0, #5000	; 0x1388
 8004630:	f7fe ff1c 	bl	800346c <vTaskDelay>
xTimerReset(xTimer, 0);
 8004634:	f7ff f830 	bl	8003698 <xTaskGetTickCount>
 8004638:	4602      	mov	r2, r0
 800463a:	2300      	movs	r3, #0
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	2300      	movs	r3, #0
 8004640:	2102      	movs	r1, #2
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff fc78 	bl	8003f38 <xTimerGenericCommand>
		}
		 Latch that an error has already been detected.
		xErrorDetected = pdTRUE;
	}
BSP_LED_Toggle(LED9);*/
}
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	08005704 	.word	0x08005704
 8004654:	08005714 	.word	0x08005714

08004658 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a04      	ldr	r2, [pc, #16]	; (8004678 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d101      	bne.n	800466e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800466a:	f7fc f841 	bl	80006f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40001000 	.word	0x40001000

0800467c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
   //USER CODE BEGIN Error_Handler_Debug
   //User can add his own implementation to report the HAL error return state
  while(1)
 8004680:	e7fe      	b.n	8004680 <Error_Handler+0x4>
	...

08004684 <__errno>:
 8004684:	4b01      	ldr	r3, [pc, #4]	; (800468c <__errno+0x8>)
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000010 	.word	0x20000010

08004690 <__libc_init_array>:
 8004690:	b570      	push	{r4, r5, r6, lr}
 8004692:	4d0d      	ldr	r5, [pc, #52]	; (80046c8 <__libc_init_array+0x38>)
 8004694:	2600      	movs	r6, #0
 8004696:	4c0d      	ldr	r4, [pc, #52]	; (80046cc <__libc_init_array+0x3c>)
 8004698:	1b64      	subs	r4, r4, r5
 800469a:	10a4      	asrs	r4, r4, #2
 800469c:	42a6      	cmp	r6, r4
 800469e:	d109      	bne.n	80046b4 <__libc_init_array+0x24>
 80046a0:	4d0b      	ldr	r5, [pc, #44]	; (80046d0 <__libc_init_array+0x40>)
 80046a2:	2600      	movs	r6, #0
 80046a4:	4c0b      	ldr	r4, [pc, #44]	; (80046d4 <__libc_init_array+0x44>)
 80046a6:	f001 f807 	bl	80056b8 <_init>
 80046aa:	1b64      	subs	r4, r4, r5
 80046ac:	10a4      	asrs	r4, r4, #2
 80046ae:	42a6      	cmp	r6, r4
 80046b0:	d105      	bne.n	80046be <__libc_init_array+0x2e>
 80046b2:	bd70      	pop	{r4, r5, r6, pc}
 80046b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b8:	3601      	adds	r6, #1
 80046ba:	4798      	blx	r3
 80046bc:	e7ee      	b.n	800469c <__libc_init_array+0xc>
 80046be:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c2:	3601      	adds	r6, #1
 80046c4:	4798      	blx	r3
 80046c6:	e7f2      	b.n	80046ae <__libc_init_array+0x1e>
 80046c8:	08005830 	.word	0x08005830
 80046cc:	08005830 	.word	0x08005830
 80046d0:	08005830 	.word	0x08005830
 80046d4:	08005834 	.word	0x08005834

080046d8 <memcpy>:
 80046d8:	440a      	add	r2, r1
 80046da:	1e43      	subs	r3, r0, #1
 80046dc:	4291      	cmp	r1, r2
 80046de:	d100      	bne.n	80046e2 <memcpy+0xa>
 80046e0:	4770      	bx	lr
 80046e2:	b510      	push	{r4, lr}
 80046e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046e8:	4291      	cmp	r1, r2
 80046ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046ee:	d1f9      	bne.n	80046e4 <memcpy+0xc>
 80046f0:	bd10      	pop	{r4, pc}

080046f2 <memset>:
 80046f2:	4402      	add	r2, r0
 80046f4:	4603      	mov	r3, r0
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d100      	bne.n	80046fc <memset+0xa>
 80046fa:	4770      	bx	lr
 80046fc:	f803 1b01 	strb.w	r1, [r3], #1
 8004700:	e7f9      	b.n	80046f6 <memset+0x4>
	...

08004704 <iprintf>:
 8004704:	b40f      	push	{r0, r1, r2, r3}
 8004706:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <iprintf+0x2c>)
 8004708:	b513      	push	{r0, r1, r4, lr}
 800470a:	681c      	ldr	r4, [r3, #0]
 800470c:	b124      	cbz	r4, 8004718 <iprintf+0x14>
 800470e:	69a3      	ldr	r3, [r4, #24]
 8004710:	b913      	cbnz	r3, 8004718 <iprintf+0x14>
 8004712:	4620      	mov	r0, r4
 8004714:	f000 fa5c 	bl	8004bd0 <__sinit>
 8004718:	ab05      	add	r3, sp, #20
 800471a:	9a04      	ldr	r2, [sp, #16]
 800471c:	68a1      	ldr	r1, [r4, #8]
 800471e:	4620      	mov	r0, r4
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	f000 fc2d 	bl	8004f80 <_vfiprintf_r>
 8004726:	b002      	add	sp, #8
 8004728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800472c:	b004      	add	sp, #16
 800472e:	4770      	bx	lr
 8004730:	20000010 	.word	0x20000010

08004734 <_puts_r>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	460e      	mov	r6, r1
 8004738:	4605      	mov	r5, r0
 800473a:	b118      	cbz	r0, 8004744 <_puts_r+0x10>
 800473c:	6983      	ldr	r3, [r0, #24]
 800473e:	b90b      	cbnz	r3, 8004744 <_puts_r+0x10>
 8004740:	f000 fa46 	bl	8004bd0 <__sinit>
 8004744:	69ab      	ldr	r3, [r5, #24]
 8004746:	68ac      	ldr	r4, [r5, #8]
 8004748:	b913      	cbnz	r3, 8004750 <_puts_r+0x1c>
 800474a:	4628      	mov	r0, r5
 800474c:	f000 fa40 	bl	8004bd0 <__sinit>
 8004750:	4b2c      	ldr	r3, [pc, #176]	; (8004804 <_puts_r+0xd0>)
 8004752:	429c      	cmp	r4, r3
 8004754:	d120      	bne.n	8004798 <_puts_r+0x64>
 8004756:	686c      	ldr	r4, [r5, #4]
 8004758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800475a:	07db      	lsls	r3, r3, #31
 800475c:	d405      	bmi.n	800476a <_puts_r+0x36>
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	0598      	lsls	r0, r3, #22
 8004762:	d402      	bmi.n	800476a <_puts_r+0x36>
 8004764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004766:	f000 fad1 	bl	8004d0c <__retarget_lock_acquire_recursive>
 800476a:	89a3      	ldrh	r3, [r4, #12]
 800476c:	0719      	lsls	r1, r3, #28
 800476e:	d51d      	bpl.n	80047ac <_puts_r+0x78>
 8004770:	6923      	ldr	r3, [r4, #16]
 8004772:	b1db      	cbz	r3, 80047ac <_puts_r+0x78>
 8004774:	3e01      	subs	r6, #1
 8004776:	68a3      	ldr	r3, [r4, #8]
 8004778:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800477c:	3b01      	subs	r3, #1
 800477e:	60a3      	str	r3, [r4, #8]
 8004780:	bb39      	cbnz	r1, 80047d2 <_puts_r+0x9e>
 8004782:	2b00      	cmp	r3, #0
 8004784:	da38      	bge.n	80047f8 <_puts_r+0xc4>
 8004786:	4622      	mov	r2, r4
 8004788:	210a      	movs	r1, #10
 800478a:	4628      	mov	r0, r5
 800478c:	f000 f848 	bl	8004820 <__swbuf_r>
 8004790:	3001      	adds	r0, #1
 8004792:	d011      	beq.n	80047b8 <_puts_r+0x84>
 8004794:	250a      	movs	r5, #10
 8004796:	e011      	b.n	80047bc <_puts_r+0x88>
 8004798:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <_puts_r+0xd4>)
 800479a:	429c      	cmp	r4, r3
 800479c:	d101      	bne.n	80047a2 <_puts_r+0x6e>
 800479e:	68ac      	ldr	r4, [r5, #8]
 80047a0:	e7da      	b.n	8004758 <_puts_r+0x24>
 80047a2:	4b1a      	ldr	r3, [pc, #104]	; (800480c <_puts_r+0xd8>)
 80047a4:	429c      	cmp	r4, r3
 80047a6:	bf08      	it	eq
 80047a8:	68ec      	ldreq	r4, [r5, #12]
 80047aa:	e7d5      	b.n	8004758 <_puts_r+0x24>
 80047ac:	4621      	mov	r1, r4
 80047ae:	4628      	mov	r0, r5
 80047b0:	f000 f888 	bl	80048c4 <__swsetup_r>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d0dd      	beq.n	8004774 <_puts_r+0x40>
 80047b8:	f04f 35ff 	mov.w	r5, #4294967295
 80047bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047be:	07da      	lsls	r2, r3, #31
 80047c0:	d405      	bmi.n	80047ce <_puts_r+0x9a>
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	059b      	lsls	r3, r3, #22
 80047c6:	d402      	bmi.n	80047ce <_puts_r+0x9a>
 80047c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ca:	f000 faa0 	bl	8004d0e <__retarget_lock_release_recursive>
 80047ce:	4628      	mov	r0, r5
 80047d0:	bd70      	pop	{r4, r5, r6, pc}
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	da04      	bge.n	80047e0 <_puts_r+0xac>
 80047d6:	69a2      	ldr	r2, [r4, #24]
 80047d8:	429a      	cmp	r2, r3
 80047da:	dc06      	bgt.n	80047ea <_puts_r+0xb6>
 80047dc:	290a      	cmp	r1, #10
 80047de:	d004      	beq.n	80047ea <_puts_r+0xb6>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	6022      	str	r2, [r4, #0]
 80047e6:	7019      	strb	r1, [r3, #0]
 80047e8:	e7c5      	b.n	8004776 <_puts_r+0x42>
 80047ea:	4622      	mov	r2, r4
 80047ec:	4628      	mov	r0, r5
 80047ee:	f000 f817 	bl	8004820 <__swbuf_r>
 80047f2:	3001      	adds	r0, #1
 80047f4:	d1bf      	bne.n	8004776 <_puts_r+0x42>
 80047f6:	e7df      	b.n	80047b8 <_puts_r+0x84>
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	250a      	movs	r5, #10
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	6022      	str	r2, [r4, #0]
 8004800:	701d      	strb	r5, [r3, #0]
 8004802:	e7db      	b.n	80047bc <_puts_r+0x88>
 8004804:	080057b8 	.word	0x080057b8
 8004808:	080057d8 	.word	0x080057d8
 800480c:	08005798 	.word	0x08005798

08004810 <puts>:
 8004810:	4b02      	ldr	r3, [pc, #8]	; (800481c <puts+0xc>)
 8004812:	4601      	mov	r1, r0
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	f7ff bf8d 	b.w	8004734 <_puts_r>
 800481a:	bf00      	nop
 800481c:	20000010 	.word	0x20000010

08004820 <__swbuf_r>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	460e      	mov	r6, r1
 8004824:	4614      	mov	r4, r2
 8004826:	4605      	mov	r5, r0
 8004828:	b118      	cbz	r0, 8004832 <__swbuf_r+0x12>
 800482a:	6983      	ldr	r3, [r0, #24]
 800482c:	b90b      	cbnz	r3, 8004832 <__swbuf_r+0x12>
 800482e:	f000 f9cf 	bl	8004bd0 <__sinit>
 8004832:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <__swbuf_r+0x98>)
 8004834:	429c      	cmp	r4, r3
 8004836:	d12b      	bne.n	8004890 <__swbuf_r+0x70>
 8004838:	686c      	ldr	r4, [r5, #4]
 800483a:	69a3      	ldr	r3, [r4, #24]
 800483c:	60a3      	str	r3, [r4, #8]
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	071a      	lsls	r2, r3, #28
 8004842:	d52f      	bpl.n	80048a4 <__swbuf_r+0x84>
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	b36b      	cbz	r3, 80048a4 <__swbuf_r+0x84>
 8004848:	6923      	ldr	r3, [r4, #16]
 800484a:	b2f6      	uxtb	r6, r6
 800484c:	6820      	ldr	r0, [r4, #0]
 800484e:	4637      	mov	r7, r6
 8004850:	1ac0      	subs	r0, r0, r3
 8004852:	6963      	ldr	r3, [r4, #20]
 8004854:	4283      	cmp	r3, r0
 8004856:	dc04      	bgt.n	8004862 <__swbuf_r+0x42>
 8004858:	4621      	mov	r1, r4
 800485a:	4628      	mov	r0, r5
 800485c:	f000 f924 	bl	8004aa8 <_fflush_r>
 8004860:	bb30      	cbnz	r0, 80048b0 <__swbuf_r+0x90>
 8004862:	68a3      	ldr	r3, [r4, #8]
 8004864:	3001      	adds	r0, #1
 8004866:	3b01      	subs	r3, #1
 8004868:	60a3      	str	r3, [r4, #8]
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	6022      	str	r2, [r4, #0]
 8004870:	701e      	strb	r6, [r3, #0]
 8004872:	6963      	ldr	r3, [r4, #20]
 8004874:	4283      	cmp	r3, r0
 8004876:	d004      	beq.n	8004882 <__swbuf_r+0x62>
 8004878:	89a3      	ldrh	r3, [r4, #12]
 800487a:	07db      	lsls	r3, r3, #31
 800487c:	d506      	bpl.n	800488c <__swbuf_r+0x6c>
 800487e:	2e0a      	cmp	r6, #10
 8004880:	d104      	bne.n	800488c <__swbuf_r+0x6c>
 8004882:	4621      	mov	r1, r4
 8004884:	4628      	mov	r0, r5
 8004886:	f000 f90f 	bl	8004aa8 <_fflush_r>
 800488a:	b988      	cbnz	r0, 80048b0 <__swbuf_r+0x90>
 800488c:	4638      	mov	r0, r7
 800488e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004890:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <__swbuf_r+0x9c>)
 8004892:	429c      	cmp	r4, r3
 8004894:	d101      	bne.n	800489a <__swbuf_r+0x7a>
 8004896:	68ac      	ldr	r4, [r5, #8]
 8004898:	e7cf      	b.n	800483a <__swbuf_r+0x1a>
 800489a:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <__swbuf_r+0xa0>)
 800489c:	429c      	cmp	r4, r3
 800489e:	bf08      	it	eq
 80048a0:	68ec      	ldreq	r4, [r5, #12]
 80048a2:	e7ca      	b.n	800483a <__swbuf_r+0x1a>
 80048a4:	4621      	mov	r1, r4
 80048a6:	4628      	mov	r0, r5
 80048a8:	f000 f80c 	bl	80048c4 <__swsetup_r>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	d0cb      	beq.n	8004848 <__swbuf_r+0x28>
 80048b0:	f04f 37ff 	mov.w	r7, #4294967295
 80048b4:	e7ea      	b.n	800488c <__swbuf_r+0x6c>
 80048b6:	bf00      	nop
 80048b8:	080057b8 	.word	0x080057b8
 80048bc:	080057d8 	.word	0x080057d8
 80048c0:	08005798 	.word	0x08005798

080048c4 <__swsetup_r>:
 80048c4:	4b32      	ldr	r3, [pc, #200]	; (8004990 <__swsetup_r+0xcc>)
 80048c6:	b570      	push	{r4, r5, r6, lr}
 80048c8:	681d      	ldr	r5, [r3, #0]
 80048ca:	4606      	mov	r6, r0
 80048cc:	460c      	mov	r4, r1
 80048ce:	b125      	cbz	r5, 80048da <__swsetup_r+0x16>
 80048d0:	69ab      	ldr	r3, [r5, #24]
 80048d2:	b913      	cbnz	r3, 80048da <__swsetup_r+0x16>
 80048d4:	4628      	mov	r0, r5
 80048d6:	f000 f97b 	bl	8004bd0 <__sinit>
 80048da:	4b2e      	ldr	r3, [pc, #184]	; (8004994 <__swsetup_r+0xd0>)
 80048dc:	429c      	cmp	r4, r3
 80048de:	d10f      	bne.n	8004900 <__swsetup_r+0x3c>
 80048e0:	686c      	ldr	r4, [r5, #4]
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048e8:	0719      	lsls	r1, r3, #28
 80048ea:	d42c      	bmi.n	8004946 <__swsetup_r+0x82>
 80048ec:	06dd      	lsls	r5, r3, #27
 80048ee:	d411      	bmi.n	8004914 <__swsetup_r+0x50>
 80048f0:	2309      	movs	r3, #9
 80048f2:	6033      	str	r3, [r6, #0]
 80048f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048f8:	f04f 30ff 	mov.w	r0, #4294967295
 80048fc:	81a3      	strh	r3, [r4, #12]
 80048fe:	e03e      	b.n	800497e <__swsetup_r+0xba>
 8004900:	4b25      	ldr	r3, [pc, #148]	; (8004998 <__swsetup_r+0xd4>)
 8004902:	429c      	cmp	r4, r3
 8004904:	d101      	bne.n	800490a <__swsetup_r+0x46>
 8004906:	68ac      	ldr	r4, [r5, #8]
 8004908:	e7eb      	b.n	80048e2 <__swsetup_r+0x1e>
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <__swsetup_r+0xd8>)
 800490c:	429c      	cmp	r4, r3
 800490e:	bf08      	it	eq
 8004910:	68ec      	ldreq	r4, [r5, #12]
 8004912:	e7e6      	b.n	80048e2 <__swsetup_r+0x1e>
 8004914:	0758      	lsls	r0, r3, #29
 8004916:	d512      	bpl.n	800493e <__swsetup_r+0x7a>
 8004918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800491a:	b141      	cbz	r1, 800492e <__swsetup_r+0x6a>
 800491c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004920:	4299      	cmp	r1, r3
 8004922:	d002      	beq.n	800492a <__swsetup_r+0x66>
 8004924:	4630      	mov	r0, r6
 8004926:	f000 fa57 	bl	8004dd8 <_free_r>
 800492a:	2300      	movs	r3, #0
 800492c:	6363      	str	r3, [r4, #52]	; 0x34
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004934:	81a3      	strh	r3, [r4, #12]
 8004936:	2300      	movs	r3, #0
 8004938:	6063      	str	r3, [r4, #4]
 800493a:	6923      	ldr	r3, [r4, #16]
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	f043 0308 	orr.w	r3, r3, #8
 8004944:	81a3      	strh	r3, [r4, #12]
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	b94b      	cbnz	r3, 800495e <__swsetup_r+0x9a>
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004954:	d003      	beq.n	800495e <__swsetup_r+0x9a>
 8004956:	4621      	mov	r1, r4
 8004958:	4630      	mov	r0, r6
 800495a:	f000 f9fd 	bl	8004d58 <__smakebuf_r>
 800495e:	89a0      	ldrh	r0, [r4, #12]
 8004960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004964:	f010 0301 	ands.w	r3, r0, #1
 8004968:	d00a      	beq.n	8004980 <__swsetup_r+0xbc>
 800496a:	2300      	movs	r3, #0
 800496c:	60a3      	str	r3, [r4, #8]
 800496e:	6963      	ldr	r3, [r4, #20]
 8004970:	425b      	negs	r3, r3
 8004972:	61a3      	str	r3, [r4, #24]
 8004974:	6923      	ldr	r3, [r4, #16]
 8004976:	b943      	cbnz	r3, 800498a <__swsetup_r+0xc6>
 8004978:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800497c:	d1ba      	bne.n	80048f4 <__swsetup_r+0x30>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	0781      	lsls	r1, r0, #30
 8004982:	bf58      	it	pl
 8004984:	6963      	ldrpl	r3, [r4, #20]
 8004986:	60a3      	str	r3, [r4, #8]
 8004988:	e7f4      	b.n	8004974 <__swsetup_r+0xb0>
 800498a:	2000      	movs	r0, #0
 800498c:	e7f7      	b.n	800497e <__swsetup_r+0xba>
 800498e:	bf00      	nop
 8004990:	20000010 	.word	0x20000010
 8004994:	080057b8 	.word	0x080057b8
 8004998:	080057d8 	.word	0x080057d8
 800499c:	08005798 	.word	0x08005798

080049a0 <__sflush_r>:
 80049a0:	898a      	ldrh	r2, [r1, #12]
 80049a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a6:	4605      	mov	r5, r0
 80049a8:	0710      	lsls	r0, r2, #28
 80049aa:	460c      	mov	r4, r1
 80049ac:	d458      	bmi.n	8004a60 <__sflush_r+0xc0>
 80049ae:	684b      	ldr	r3, [r1, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	dc05      	bgt.n	80049c0 <__sflush_r+0x20>
 80049b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	dc02      	bgt.n	80049c0 <__sflush_r+0x20>
 80049ba:	2000      	movs	r0, #0
 80049bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049c2:	2e00      	cmp	r6, #0
 80049c4:	d0f9      	beq.n	80049ba <__sflush_r+0x1a>
 80049c6:	2300      	movs	r3, #0
 80049c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049cc:	682f      	ldr	r7, [r5, #0]
 80049ce:	602b      	str	r3, [r5, #0]
 80049d0:	d032      	beq.n	8004a38 <__sflush_r+0x98>
 80049d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	075a      	lsls	r2, r3, #29
 80049d8:	d505      	bpl.n	80049e6 <__sflush_r+0x46>
 80049da:	6863      	ldr	r3, [r4, #4]
 80049dc:	1ac0      	subs	r0, r0, r3
 80049de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049e0:	b10b      	cbz	r3, 80049e6 <__sflush_r+0x46>
 80049e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049e4:	1ac0      	subs	r0, r0, r3
 80049e6:	2300      	movs	r3, #0
 80049e8:	4602      	mov	r2, r0
 80049ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049ec:	4628      	mov	r0, r5
 80049ee:	6a21      	ldr	r1, [r4, #32]
 80049f0:	47b0      	blx	r6
 80049f2:	1c43      	adds	r3, r0, #1
 80049f4:	89a3      	ldrh	r3, [r4, #12]
 80049f6:	d106      	bne.n	8004a06 <__sflush_r+0x66>
 80049f8:	6829      	ldr	r1, [r5, #0]
 80049fa:	291d      	cmp	r1, #29
 80049fc:	d82c      	bhi.n	8004a58 <__sflush_r+0xb8>
 80049fe:	4a29      	ldr	r2, [pc, #164]	; (8004aa4 <__sflush_r+0x104>)
 8004a00:	40ca      	lsrs	r2, r1
 8004a02:	07d6      	lsls	r6, r2, #31
 8004a04:	d528      	bpl.n	8004a58 <__sflush_r+0xb8>
 8004a06:	2200      	movs	r2, #0
 8004a08:	04d9      	lsls	r1, r3, #19
 8004a0a:	6062      	str	r2, [r4, #4]
 8004a0c:	6922      	ldr	r2, [r4, #16]
 8004a0e:	6022      	str	r2, [r4, #0]
 8004a10:	d504      	bpl.n	8004a1c <__sflush_r+0x7c>
 8004a12:	1c42      	adds	r2, r0, #1
 8004a14:	d101      	bne.n	8004a1a <__sflush_r+0x7a>
 8004a16:	682b      	ldr	r3, [r5, #0]
 8004a18:	b903      	cbnz	r3, 8004a1c <__sflush_r+0x7c>
 8004a1a:	6560      	str	r0, [r4, #84]	; 0x54
 8004a1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a1e:	602f      	str	r7, [r5, #0]
 8004a20:	2900      	cmp	r1, #0
 8004a22:	d0ca      	beq.n	80049ba <__sflush_r+0x1a>
 8004a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a28:	4299      	cmp	r1, r3
 8004a2a:	d002      	beq.n	8004a32 <__sflush_r+0x92>
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 f9d3 	bl	8004dd8 <_free_r>
 8004a32:	2000      	movs	r0, #0
 8004a34:	6360      	str	r0, [r4, #52]	; 0x34
 8004a36:	e7c1      	b.n	80049bc <__sflush_r+0x1c>
 8004a38:	6a21      	ldr	r1, [r4, #32]
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	47b0      	blx	r6
 8004a40:	1c41      	adds	r1, r0, #1
 8004a42:	d1c7      	bne.n	80049d4 <__sflush_r+0x34>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0c4      	beq.n	80049d4 <__sflush_r+0x34>
 8004a4a:	2b1d      	cmp	r3, #29
 8004a4c:	d001      	beq.n	8004a52 <__sflush_r+0xb2>
 8004a4e:	2b16      	cmp	r3, #22
 8004a50:	d101      	bne.n	8004a56 <__sflush_r+0xb6>
 8004a52:	602f      	str	r7, [r5, #0]
 8004a54:	e7b1      	b.n	80049ba <__sflush_r+0x1a>
 8004a56:	89a3      	ldrh	r3, [r4, #12]
 8004a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a5c:	81a3      	strh	r3, [r4, #12]
 8004a5e:	e7ad      	b.n	80049bc <__sflush_r+0x1c>
 8004a60:	690f      	ldr	r7, [r1, #16]
 8004a62:	2f00      	cmp	r7, #0
 8004a64:	d0a9      	beq.n	80049ba <__sflush_r+0x1a>
 8004a66:	0793      	lsls	r3, r2, #30
 8004a68:	680e      	ldr	r6, [r1, #0]
 8004a6a:	600f      	str	r7, [r1, #0]
 8004a6c:	bf0c      	ite	eq
 8004a6e:	694b      	ldreq	r3, [r1, #20]
 8004a70:	2300      	movne	r3, #0
 8004a72:	eba6 0807 	sub.w	r8, r6, r7
 8004a76:	608b      	str	r3, [r1, #8]
 8004a78:	f1b8 0f00 	cmp.w	r8, #0
 8004a7c:	dd9d      	ble.n	80049ba <__sflush_r+0x1a>
 8004a7e:	4643      	mov	r3, r8
 8004a80:	463a      	mov	r2, r7
 8004a82:	6a21      	ldr	r1, [r4, #32]
 8004a84:	4628      	mov	r0, r5
 8004a86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a88:	47b0      	blx	r6
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	dc06      	bgt.n	8004a9c <__sflush_r+0xfc>
 8004a8e:	89a3      	ldrh	r3, [r4, #12]
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a98:	81a3      	strh	r3, [r4, #12]
 8004a9a:	e78f      	b.n	80049bc <__sflush_r+0x1c>
 8004a9c:	4407      	add	r7, r0
 8004a9e:	eba8 0800 	sub.w	r8, r8, r0
 8004aa2:	e7e9      	b.n	8004a78 <__sflush_r+0xd8>
 8004aa4:	20400001 	.word	0x20400001

08004aa8 <_fflush_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	690b      	ldr	r3, [r1, #16]
 8004aac:	4605      	mov	r5, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	b913      	cbnz	r3, 8004ab8 <_fflush_r+0x10>
 8004ab2:	2500      	movs	r5, #0
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
 8004ab8:	b118      	cbz	r0, 8004ac2 <_fflush_r+0x1a>
 8004aba:	6983      	ldr	r3, [r0, #24]
 8004abc:	b90b      	cbnz	r3, 8004ac2 <_fflush_r+0x1a>
 8004abe:	f000 f887 	bl	8004bd0 <__sinit>
 8004ac2:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <_fflush_r+0x6c>)
 8004ac4:	429c      	cmp	r4, r3
 8004ac6:	d11b      	bne.n	8004b00 <_fflush_r+0x58>
 8004ac8:	686c      	ldr	r4, [r5, #4]
 8004aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0ef      	beq.n	8004ab2 <_fflush_r+0xa>
 8004ad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ad4:	07d0      	lsls	r0, r2, #31
 8004ad6:	d404      	bmi.n	8004ae2 <_fflush_r+0x3a>
 8004ad8:	0599      	lsls	r1, r3, #22
 8004ada:	d402      	bmi.n	8004ae2 <_fflush_r+0x3a>
 8004adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ade:	f000 f915 	bl	8004d0c <__retarget_lock_acquire_recursive>
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	f7ff ff5b 	bl	80049a0 <__sflush_r>
 8004aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aec:	4605      	mov	r5, r0
 8004aee:	07da      	lsls	r2, r3, #31
 8004af0:	d4e0      	bmi.n	8004ab4 <_fflush_r+0xc>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	059b      	lsls	r3, r3, #22
 8004af6:	d4dd      	bmi.n	8004ab4 <_fflush_r+0xc>
 8004af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004afa:	f000 f908 	bl	8004d0e <__retarget_lock_release_recursive>
 8004afe:	e7d9      	b.n	8004ab4 <_fflush_r+0xc>
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <_fflush_r+0x70>)
 8004b02:	429c      	cmp	r4, r3
 8004b04:	d101      	bne.n	8004b0a <_fflush_r+0x62>
 8004b06:	68ac      	ldr	r4, [r5, #8]
 8004b08:	e7df      	b.n	8004aca <_fflush_r+0x22>
 8004b0a:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <_fflush_r+0x74>)
 8004b0c:	429c      	cmp	r4, r3
 8004b0e:	bf08      	it	eq
 8004b10:	68ec      	ldreq	r4, [r5, #12]
 8004b12:	e7da      	b.n	8004aca <_fflush_r+0x22>
 8004b14:	080057b8 	.word	0x080057b8
 8004b18:	080057d8 	.word	0x080057d8
 8004b1c:	08005798 	.word	0x08005798

08004b20 <std>:
 8004b20:	2300      	movs	r3, #0
 8004b22:	b510      	push	{r4, lr}
 8004b24:	4604      	mov	r4, r0
 8004b26:	6083      	str	r3, [r0, #8]
 8004b28:	8181      	strh	r1, [r0, #12]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	6643      	str	r3, [r0, #100]	; 0x64
 8004b2e:	81c2      	strh	r2, [r0, #14]
 8004b30:	2208      	movs	r2, #8
 8004b32:	6183      	str	r3, [r0, #24]
 8004b34:	e9c0 3300 	strd	r3, r3, [r0]
 8004b38:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b3c:	305c      	adds	r0, #92	; 0x5c
 8004b3e:	f7ff fdd8 	bl	80046f2 <memset>
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <std+0x38>)
 8004b44:	6224      	str	r4, [r4, #32]
 8004b46:	6263      	str	r3, [r4, #36]	; 0x24
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <std+0x3c>)
 8004b4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b4c:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <std+0x40>)
 8004b4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b50:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <std+0x44>)
 8004b52:	6323      	str	r3, [r4, #48]	; 0x30
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	bf00      	nop
 8004b58:	0800552d 	.word	0x0800552d
 8004b5c:	0800554f 	.word	0x0800554f
 8004b60:	08005587 	.word	0x08005587
 8004b64:	080055ab 	.word	0x080055ab

08004b68 <_cleanup_r>:
 8004b68:	4901      	ldr	r1, [pc, #4]	; (8004b70 <_cleanup_r+0x8>)
 8004b6a:	f000 b8af 	b.w	8004ccc <_fwalk_reent>
 8004b6e:	bf00      	nop
 8004b70:	08004aa9 	.word	0x08004aa9

08004b74 <__sfmoreglue>:
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	1e4a      	subs	r2, r1, #1
 8004b78:	2568      	movs	r5, #104	; 0x68
 8004b7a:	460e      	mov	r6, r1
 8004b7c:	4355      	muls	r5, r2
 8004b7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b82:	f000 f979 	bl	8004e78 <_malloc_r>
 8004b86:	4604      	mov	r4, r0
 8004b88:	b140      	cbz	r0, 8004b9c <__sfmoreglue+0x28>
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b90:	e9c0 1600 	strd	r1, r6, [r0]
 8004b94:	300c      	adds	r0, #12
 8004b96:	60a0      	str	r0, [r4, #8]
 8004b98:	f7ff fdab 	bl	80046f2 <memset>
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}

08004ba0 <__sfp_lock_acquire>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	; (8004ba8 <__sfp_lock_acquire+0x8>)
 8004ba2:	f000 b8b3 	b.w	8004d0c <__retarget_lock_acquire_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	20004004 	.word	0x20004004

08004bac <__sfp_lock_release>:
 8004bac:	4801      	ldr	r0, [pc, #4]	; (8004bb4 <__sfp_lock_release+0x8>)
 8004bae:	f000 b8ae 	b.w	8004d0e <__retarget_lock_release_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	20004004 	.word	0x20004004

08004bb8 <__sinit_lock_acquire>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	; (8004bc0 <__sinit_lock_acquire+0x8>)
 8004bba:	f000 b8a7 	b.w	8004d0c <__retarget_lock_acquire_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	20003fff 	.word	0x20003fff

08004bc4 <__sinit_lock_release>:
 8004bc4:	4801      	ldr	r0, [pc, #4]	; (8004bcc <__sinit_lock_release+0x8>)
 8004bc6:	f000 b8a2 	b.w	8004d0e <__retarget_lock_release_recursive>
 8004bca:	bf00      	nop
 8004bcc:	20003fff 	.word	0x20003fff

08004bd0 <__sinit>:
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	f7ff fff0 	bl	8004bb8 <__sinit_lock_acquire>
 8004bd8:	69a3      	ldr	r3, [r4, #24]
 8004bda:	b11b      	cbz	r3, 8004be4 <__sinit+0x14>
 8004bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be0:	f7ff bff0 	b.w	8004bc4 <__sinit_lock_release>
 8004be4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004be8:	6523      	str	r3, [r4, #80]	; 0x50
 8004bea:	4620      	mov	r0, r4
 8004bec:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <__sinit+0x68>)
 8004bee:	4a13      	ldr	r2, [pc, #76]	; (8004c3c <__sinit+0x6c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bf4:	42a3      	cmp	r3, r4
 8004bf6:	bf04      	itt	eq
 8004bf8:	2301      	moveq	r3, #1
 8004bfa:	61a3      	streq	r3, [r4, #24]
 8004bfc:	f000 f820 	bl	8004c40 <__sfp>
 8004c00:	6060      	str	r0, [r4, #4]
 8004c02:	4620      	mov	r0, r4
 8004c04:	f000 f81c 	bl	8004c40 <__sfp>
 8004c08:	60a0      	str	r0, [r4, #8]
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f000 f818 	bl	8004c40 <__sfp>
 8004c10:	2200      	movs	r2, #0
 8004c12:	2104      	movs	r1, #4
 8004c14:	60e0      	str	r0, [r4, #12]
 8004c16:	6860      	ldr	r0, [r4, #4]
 8004c18:	f7ff ff82 	bl	8004b20 <std>
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	2109      	movs	r1, #9
 8004c20:	68a0      	ldr	r0, [r4, #8]
 8004c22:	f7ff ff7d 	bl	8004b20 <std>
 8004c26:	2202      	movs	r2, #2
 8004c28:	2112      	movs	r1, #18
 8004c2a:	68e0      	ldr	r0, [r4, #12]
 8004c2c:	f7ff ff78 	bl	8004b20 <std>
 8004c30:	2301      	movs	r3, #1
 8004c32:	61a3      	str	r3, [r4, #24]
 8004c34:	e7d2      	b.n	8004bdc <__sinit+0xc>
 8004c36:	bf00      	nop
 8004c38:	08005794 	.word	0x08005794
 8004c3c:	08004b69 	.word	0x08004b69

08004c40 <__sfp>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	4607      	mov	r7, r0
 8004c44:	f7ff ffac 	bl	8004ba0 <__sfp_lock_acquire>
 8004c48:	4b1e      	ldr	r3, [pc, #120]	; (8004cc4 <__sfp+0x84>)
 8004c4a:	681e      	ldr	r6, [r3, #0]
 8004c4c:	69b3      	ldr	r3, [r6, #24]
 8004c4e:	b913      	cbnz	r3, 8004c56 <__sfp+0x16>
 8004c50:	4630      	mov	r0, r6
 8004c52:	f7ff ffbd 	bl	8004bd0 <__sinit>
 8004c56:	3648      	adds	r6, #72	; 0x48
 8004c58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	d503      	bpl.n	8004c68 <__sfp+0x28>
 8004c60:	6833      	ldr	r3, [r6, #0]
 8004c62:	b30b      	cbz	r3, 8004ca8 <__sfp+0x68>
 8004c64:	6836      	ldr	r6, [r6, #0]
 8004c66:	e7f7      	b.n	8004c58 <__sfp+0x18>
 8004c68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c6c:	b9d5      	cbnz	r5, 8004ca4 <__sfp+0x64>
 8004c6e:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <__sfp+0x88>)
 8004c70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c74:	6665      	str	r5, [r4, #100]	; 0x64
 8004c76:	60e3      	str	r3, [r4, #12]
 8004c78:	f000 f847 	bl	8004d0a <__retarget_lock_init_recursive>
 8004c7c:	f7ff ff96 	bl	8004bac <__sfp_lock_release>
 8004c80:	2208      	movs	r2, #8
 8004c82:	4629      	mov	r1, r5
 8004c84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c88:	6025      	str	r5, [r4, #0]
 8004c8a:	61a5      	str	r5, [r4, #24]
 8004c8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c94:	f7ff fd2d 	bl	80046f2 <memset>
 8004c98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ca4:	3468      	adds	r4, #104	; 0x68
 8004ca6:	e7d9      	b.n	8004c5c <__sfp+0x1c>
 8004ca8:	2104      	movs	r1, #4
 8004caa:	4638      	mov	r0, r7
 8004cac:	f7ff ff62 	bl	8004b74 <__sfmoreglue>
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	6030      	str	r0, [r6, #0]
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d1d5      	bne.n	8004c64 <__sfp+0x24>
 8004cb8:	f7ff ff78 	bl	8004bac <__sfp_lock_release>
 8004cbc:	230c      	movs	r3, #12
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	e7ee      	b.n	8004ca0 <__sfp+0x60>
 8004cc2:	bf00      	nop
 8004cc4:	08005794 	.word	0x08005794
 8004cc8:	ffff0001 	.word	0xffff0001

08004ccc <_fwalk_reent>:
 8004ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cd0:	4606      	mov	r6, r0
 8004cd2:	4688      	mov	r8, r1
 8004cd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cd8:	2700      	movs	r7, #0
 8004cda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cde:	f1b9 0901 	subs.w	r9, r9, #1
 8004ce2:	d505      	bpl.n	8004cf0 <_fwalk_reent+0x24>
 8004ce4:	6824      	ldr	r4, [r4, #0]
 8004ce6:	2c00      	cmp	r4, #0
 8004ce8:	d1f7      	bne.n	8004cda <_fwalk_reent+0xe>
 8004cea:	4638      	mov	r0, r7
 8004cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cf0:	89ab      	ldrh	r3, [r5, #12]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d907      	bls.n	8004d06 <_fwalk_reent+0x3a>
 8004cf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	d003      	beq.n	8004d06 <_fwalk_reent+0x3a>
 8004cfe:	4629      	mov	r1, r5
 8004d00:	4630      	mov	r0, r6
 8004d02:	47c0      	blx	r8
 8004d04:	4307      	orrs	r7, r0
 8004d06:	3568      	adds	r5, #104	; 0x68
 8004d08:	e7e9      	b.n	8004cde <_fwalk_reent+0x12>

08004d0a <__retarget_lock_init_recursive>:
 8004d0a:	4770      	bx	lr

08004d0c <__retarget_lock_acquire_recursive>:
 8004d0c:	4770      	bx	lr

08004d0e <__retarget_lock_release_recursive>:
 8004d0e:	4770      	bx	lr

08004d10 <__swhatbuf_r>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	460e      	mov	r6, r1
 8004d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d18:	b096      	sub	sp, #88	; 0x58
 8004d1a:	4614      	mov	r4, r2
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	461d      	mov	r5, r3
 8004d20:	da07      	bge.n	8004d32 <__swhatbuf_r+0x22>
 8004d22:	2300      	movs	r3, #0
 8004d24:	602b      	str	r3, [r5, #0]
 8004d26:	89b3      	ldrh	r3, [r6, #12]
 8004d28:	061a      	lsls	r2, r3, #24
 8004d2a:	d410      	bmi.n	8004d4e <__swhatbuf_r+0x3e>
 8004d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d30:	e00e      	b.n	8004d50 <__swhatbuf_r+0x40>
 8004d32:	466a      	mov	r2, sp
 8004d34:	f000 fc60 	bl	80055f8 <_fstat_r>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	dbf2      	blt.n	8004d22 <__swhatbuf_r+0x12>
 8004d3c:	9a01      	ldr	r2, [sp, #4]
 8004d3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d46:	425a      	negs	r2, r3
 8004d48:	415a      	adcs	r2, r3
 8004d4a:	602a      	str	r2, [r5, #0]
 8004d4c:	e7ee      	b.n	8004d2c <__swhatbuf_r+0x1c>
 8004d4e:	2340      	movs	r3, #64	; 0x40
 8004d50:	2000      	movs	r0, #0
 8004d52:	6023      	str	r3, [r4, #0]
 8004d54:	b016      	add	sp, #88	; 0x58
 8004d56:	bd70      	pop	{r4, r5, r6, pc}

08004d58 <__smakebuf_r>:
 8004d58:	898b      	ldrh	r3, [r1, #12]
 8004d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d5c:	079d      	lsls	r5, r3, #30
 8004d5e:	4606      	mov	r6, r0
 8004d60:	460c      	mov	r4, r1
 8004d62:	d507      	bpl.n	8004d74 <__smakebuf_r+0x1c>
 8004d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	6123      	str	r3, [r4, #16]
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	6163      	str	r3, [r4, #20]
 8004d70:	b002      	add	sp, #8
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	ab01      	add	r3, sp, #4
 8004d76:	466a      	mov	r2, sp
 8004d78:	f7ff ffca 	bl	8004d10 <__swhatbuf_r>
 8004d7c:	9900      	ldr	r1, [sp, #0]
 8004d7e:	4605      	mov	r5, r0
 8004d80:	4630      	mov	r0, r6
 8004d82:	f000 f879 	bl	8004e78 <_malloc_r>
 8004d86:	b948      	cbnz	r0, 8004d9c <__smakebuf_r+0x44>
 8004d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d8c:	059a      	lsls	r2, r3, #22
 8004d8e:	d4ef      	bmi.n	8004d70 <__smakebuf_r+0x18>
 8004d90:	f023 0303 	bic.w	r3, r3, #3
 8004d94:	f043 0302 	orr.w	r3, r3, #2
 8004d98:	81a3      	strh	r3, [r4, #12]
 8004d9a:	e7e3      	b.n	8004d64 <__smakebuf_r+0xc>
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <__smakebuf_r+0x7c>)
 8004d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	6020      	str	r0, [r4, #0]
 8004da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da8:	6120      	str	r0, [r4, #16]
 8004daa:	81a3      	strh	r3, [r4, #12]
 8004dac:	9b00      	ldr	r3, [sp, #0]
 8004dae:	6163      	str	r3, [r4, #20]
 8004db0:	9b01      	ldr	r3, [sp, #4]
 8004db2:	b15b      	cbz	r3, 8004dcc <__smakebuf_r+0x74>
 8004db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 fc2f 	bl	800561c <_isatty_r>
 8004dbe:	b128      	cbz	r0, 8004dcc <__smakebuf_r+0x74>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	89a0      	ldrh	r0, [r4, #12]
 8004dce:	4305      	orrs	r5, r0
 8004dd0:	81a5      	strh	r5, [r4, #12]
 8004dd2:	e7cd      	b.n	8004d70 <__smakebuf_r+0x18>
 8004dd4:	08004b69 	.word	0x08004b69

08004dd8 <_free_r>:
 8004dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dda:	2900      	cmp	r1, #0
 8004ddc:	d047      	beq.n	8004e6e <_free_r+0x96>
 8004dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de2:	1f0c      	subs	r4, r1, #4
 8004de4:	9001      	str	r0, [sp, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bfb8      	it	lt
 8004dea:	18e4      	addlt	r4, r4, r3
 8004dec:	f000 fc46 	bl	800567c <__malloc_lock>
 8004df0:	4a20      	ldr	r2, [pc, #128]	; (8004e74 <_free_r+0x9c>)
 8004df2:	9801      	ldr	r0, [sp, #4]
 8004df4:	6813      	ldr	r3, [r2, #0]
 8004df6:	4615      	mov	r5, r2
 8004df8:	b933      	cbnz	r3, 8004e08 <_free_r+0x30>
 8004dfa:	6063      	str	r3, [r4, #4]
 8004dfc:	6014      	str	r4, [r2, #0]
 8004dfe:	b003      	add	sp, #12
 8004e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e04:	f000 bc40 	b.w	8005688 <__malloc_unlock>
 8004e08:	42a3      	cmp	r3, r4
 8004e0a:	d90b      	bls.n	8004e24 <_free_r+0x4c>
 8004e0c:	6821      	ldr	r1, [r4, #0]
 8004e0e:	1862      	adds	r2, r4, r1
 8004e10:	4293      	cmp	r3, r2
 8004e12:	bf02      	ittt	eq
 8004e14:	681a      	ldreq	r2, [r3, #0]
 8004e16:	685b      	ldreq	r3, [r3, #4]
 8004e18:	1852      	addeq	r2, r2, r1
 8004e1a:	6063      	str	r3, [r4, #4]
 8004e1c:	bf08      	it	eq
 8004e1e:	6022      	streq	r2, [r4, #0]
 8004e20:	602c      	str	r4, [r5, #0]
 8004e22:	e7ec      	b.n	8004dfe <_free_r+0x26>
 8004e24:	461a      	mov	r2, r3
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	b10b      	cbz	r3, 8004e2e <_free_r+0x56>
 8004e2a:	42a3      	cmp	r3, r4
 8004e2c:	d9fa      	bls.n	8004e24 <_free_r+0x4c>
 8004e2e:	6811      	ldr	r1, [r2, #0]
 8004e30:	1855      	adds	r5, r2, r1
 8004e32:	42a5      	cmp	r5, r4
 8004e34:	d10b      	bne.n	8004e4e <_free_r+0x76>
 8004e36:	6824      	ldr	r4, [r4, #0]
 8004e38:	4421      	add	r1, r4
 8004e3a:	1854      	adds	r4, r2, r1
 8004e3c:	6011      	str	r1, [r2, #0]
 8004e3e:	42a3      	cmp	r3, r4
 8004e40:	d1dd      	bne.n	8004dfe <_free_r+0x26>
 8004e42:	681c      	ldr	r4, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	4421      	add	r1, r4
 8004e48:	6053      	str	r3, [r2, #4]
 8004e4a:	6011      	str	r1, [r2, #0]
 8004e4c:	e7d7      	b.n	8004dfe <_free_r+0x26>
 8004e4e:	d902      	bls.n	8004e56 <_free_r+0x7e>
 8004e50:	230c      	movs	r3, #12
 8004e52:	6003      	str	r3, [r0, #0]
 8004e54:	e7d3      	b.n	8004dfe <_free_r+0x26>
 8004e56:	6825      	ldr	r5, [r4, #0]
 8004e58:	1961      	adds	r1, r4, r5
 8004e5a:	428b      	cmp	r3, r1
 8004e5c:	bf02      	ittt	eq
 8004e5e:	6819      	ldreq	r1, [r3, #0]
 8004e60:	685b      	ldreq	r3, [r3, #4]
 8004e62:	1949      	addeq	r1, r1, r5
 8004e64:	6063      	str	r3, [r4, #4]
 8004e66:	bf08      	it	eq
 8004e68:	6021      	streq	r1, [r4, #0]
 8004e6a:	6054      	str	r4, [r2, #4]
 8004e6c:	e7c7      	b.n	8004dfe <_free_r+0x26>
 8004e6e:	b003      	add	sp, #12
 8004e70:	bd30      	pop	{r4, r5, pc}
 8004e72:	bf00      	nop
 8004e74:	20003f58 	.word	0x20003f58

08004e78 <_malloc_r>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	1ccd      	adds	r5, r1, #3
 8004e7c:	4606      	mov	r6, r0
 8004e7e:	f025 0503 	bic.w	r5, r5, #3
 8004e82:	3508      	adds	r5, #8
 8004e84:	2d0c      	cmp	r5, #12
 8004e86:	bf38      	it	cc
 8004e88:	250c      	movcc	r5, #12
 8004e8a:	2d00      	cmp	r5, #0
 8004e8c:	db01      	blt.n	8004e92 <_malloc_r+0x1a>
 8004e8e:	42a9      	cmp	r1, r5
 8004e90:	d903      	bls.n	8004e9a <_malloc_r+0x22>
 8004e92:	230c      	movs	r3, #12
 8004e94:	6033      	str	r3, [r6, #0]
 8004e96:	2000      	movs	r0, #0
 8004e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e9a:	f000 fbef 	bl	800567c <__malloc_lock>
 8004e9e:	4921      	ldr	r1, [pc, #132]	; (8004f24 <_malloc_r+0xac>)
 8004ea0:	680a      	ldr	r2, [r1, #0]
 8004ea2:	4614      	mov	r4, r2
 8004ea4:	b99c      	cbnz	r4, 8004ece <_malloc_r+0x56>
 8004ea6:	4f20      	ldr	r7, [pc, #128]	; (8004f28 <_malloc_r+0xb0>)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	b923      	cbnz	r3, 8004eb6 <_malloc_r+0x3e>
 8004eac:	4621      	mov	r1, r4
 8004eae:	4630      	mov	r0, r6
 8004eb0:	f000 fb2c 	bl	800550c <_sbrk_r>
 8004eb4:	6038      	str	r0, [r7, #0]
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	4630      	mov	r0, r6
 8004eba:	f000 fb27 	bl	800550c <_sbrk_r>
 8004ebe:	1c43      	adds	r3, r0, #1
 8004ec0:	d123      	bne.n	8004f0a <_malloc_r+0x92>
 8004ec2:	230c      	movs	r3, #12
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	6033      	str	r3, [r6, #0]
 8004ec8:	f000 fbde 	bl	8005688 <__malloc_unlock>
 8004ecc:	e7e3      	b.n	8004e96 <_malloc_r+0x1e>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	1b5b      	subs	r3, r3, r5
 8004ed2:	d417      	bmi.n	8004f04 <_malloc_r+0x8c>
 8004ed4:	2b0b      	cmp	r3, #11
 8004ed6:	d903      	bls.n	8004ee0 <_malloc_r+0x68>
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	441c      	add	r4, r3
 8004edc:	6025      	str	r5, [r4, #0]
 8004ede:	e004      	b.n	8004eea <_malloc_r+0x72>
 8004ee0:	6863      	ldr	r3, [r4, #4]
 8004ee2:	42a2      	cmp	r2, r4
 8004ee4:	bf0c      	ite	eq
 8004ee6:	600b      	streq	r3, [r1, #0]
 8004ee8:	6053      	strne	r3, [r2, #4]
 8004eea:	4630      	mov	r0, r6
 8004eec:	f000 fbcc 	bl	8005688 <__malloc_unlock>
 8004ef0:	f104 000b 	add.w	r0, r4, #11
 8004ef4:	1d23      	adds	r3, r4, #4
 8004ef6:	f020 0007 	bic.w	r0, r0, #7
 8004efa:	1ac2      	subs	r2, r0, r3
 8004efc:	d0cc      	beq.n	8004e98 <_malloc_r+0x20>
 8004efe:	1a1b      	subs	r3, r3, r0
 8004f00:	50a3      	str	r3, [r4, r2]
 8004f02:	e7c9      	b.n	8004e98 <_malloc_r+0x20>
 8004f04:	4622      	mov	r2, r4
 8004f06:	6864      	ldr	r4, [r4, #4]
 8004f08:	e7cc      	b.n	8004ea4 <_malloc_r+0x2c>
 8004f0a:	1cc4      	adds	r4, r0, #3
 8004f0c:	f024 0403 	bic.w	r4, r4, #3
 8004f10:	42a0      	cmp	r0, r4
 8004f12:	d0e3      	beq.n	8004edc <_malloc_r+0x64>
 8004f14:	1a21      	subs	r1, r4, r0
 8004f16:	4630      	mov	r0, r6
 8004f18:	f000 faf8 	bl	800550c <_sbrk_r>
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d1dd      	bne.n	8004edc <_malloc_r+0x64>
 8004f20:	e7cf      	b.n	8004ec2 <_malloc_r+0x4a>
 8004f22:	bf00      	nop
 8004f24:	20003f58 	.word	0x20003f58
 8004f28:	20003f5c 	.word	0x20003f5c

08004f2c <__sfputc_r>:
 8004f2c:	6893      	ldr	r3, [r2, #8]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	6093      	str	r3, [r2, #8]
 8004f34:	b410      	push	{r4}
 8004f36:	da08      	bge.n	8004f4a <__sfputc_r+0x1e>
 8004f38:	6994      	ldr	r4, [r2, #24]
 8004f3a:	42a3      	cmp	r3, r4
 8004f3c:	db01      	blt.n	8004f42 <__sfputc_r+0x16>
 8004f3e:	290a      	cmp	r1, #10
 8004f40:	d103      	bne.n	8004f4a <__sfputc_r+0x1e>
 8004f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f46:	f7ff bc6b 	b.w	8004820 <__swbuf_r>
 8004f4a:	6813      	ldr	r3, [r2, #0]
 8004f4c:	1c58      	adds	r0, r3, #1
 8004f4e:	6010      	str	r0, [r2, #0]
 8004f50:	4608      	mov	r0, r1
 8004f52:	7019      	strb	r1, [r3, #0]
 8004f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <__sfputs_r>:
 8004f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	460f      	mov	r7, r1
 8004f60:	4614      	mov	r4, r2
 8004f62:	18d5      	adds	r5, r2, r3
 8004f64:	42ac      	cmp	r4, r5
 8004f66:	d101      	bne.n	8004f6c <__sfputs_r+0x12>
 8004f68:	2000      	movs	r0, #0
 8004f6a:	e007      	b.n	8004f7c <__sfputs_r+0x22>
 8004f6c:	463a      	mov	r2, r7
 8004f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f72:	4630      	mov	r0, r6
 8004f74:	f7ff ffda 	bl	8004f2c <__sfputc_r>
 8004f78:	1c43      	adds	r3, r0, #1
 8004f7a:	d1f3      	bne.n	8004f64 <__sfputs_r+0xa>
 8004f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f80 <_vfiprintf_r>:
 8004f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f84:	460d      	mov	r5, r1
 8004f86:	b09d      	sub	sp, #116	; 0x74
 8004f88:	4614      	mov	r4, r2
 8004f8a:	4698      	mov	r8, r3
 8004f8c:	4606      	mov	r6, r0
 8004f8e:	b118      	cbz	r0, 8004f98 <_vfiprintf_r+0x18>
 8004f90:	6983      	ldr	r3, [r0, #24]
 8004f92:	b90b      	cbnz	r3, 8004f98 <_vfiprintf_r+0x18>
 8004f94:	f7ff fe1c 	bl	8004bd0 <__sinit>
 8004f98:	4b89      	ldr	r3, [pc, #548]	; (80051c0 <_vfiprintf_r+0x240>)
 8004f9a:	429d      	cmp	r5, r3
 8004f9c:	d11b      	bne.n	8004fd6 <_vfiprintf_r+0x56>
 8004f9e:	6875      	ldr	r5, [r6, #4]
 8004fa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fa2:	07d9      	lsls	r1, r3, #31
 8004fa4:	d405      	bmi.n	8004fb2 <_vfiprintf_r+0x32>
 8004fa6:	89ab      	ldrh	r3, [r5, #12]
 8004fa8:	059a      	lsls	r2, r3, #22
 8004faa:	d402      	bmi.n	8004fb2 <_vfiprintf_r+0x32>
 8004fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fae:	f7ff fead 	bl	8004d0c <__retarget_lock_acquire_recursive>
 8004fb2:	89ab      	ldrh	r3, [r5, #12]
 8004fb4:	071b      	lsls	r3, r3, #28
 8004fb6:	d501      	bpl.n	8004fbc <_vfiprintf_r+0x3c>
 8004fb8:	692b      	ldr	r3, [r5, #16]
 8004fba:	b9eb      	cbnz	r3, 8004ff8 <_vfiprintf_r+0x78>
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	f7ff fc80 	bl	80048c4 <__swsetup_r>
 8004fc4:	b1c0      	cbz	r0, 8004ff8 <_vfiprintf_r+0x78>
 8004fc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fc8:	07dc      	lsls	r4, r3, #31
 8004fca:	d50e      	bpl.n	8004fea <_vfiprintf_r+0x6a>
 8004fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd0:	b01d      	add	sp, #116	; 0x74
 8004fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd6:	4b7b      	ldr	r3, [pc, #492]	; (80051c4 <_vfiprintf_r+0x244>)
 8004fd8:	429d      	cmp	r5, r3
 8004fda:	d101      	bne.n	8004fe0 <_vfiprintf_r+0x60>
 8004fdc:	68b5      	ldr	r5, [r6, #8]
 8004fde:	e7df      	b.n	8004fa0 <_vfiprintf_r+0x20>
 8004fe0:	4b79      	ldr	r3, [pc, #484]	; (80051c8 <_vfiprintf_r+0x248>)
 8004fe2:	429d      	cmp	r5, r3
 8004fe4:	bf08      	it	eq
 8004fe6:	68f5      	ldreq	r5, [r6, #12]
 8004fe8:	e7da      	b.n	8004fa0 <_vfiprintf_r+0x20>
 8004fea:	89ab      	ldrh	r3, [r5, #12]
 8004fec:	0598      	lsls	r0, r3, #22
 8004fee:	d4ed      	bmi.n	8004fcc <_vfiprintf_r+0x4c>
 8004ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ff2:	f7ff fe8c 	bl	8004d0e <__retarget_lock_release_recursive>
 8004ff6:	e7e9      	b.n	8004fcc <_vfiprintf_r+0x4c>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ffe:	f04f 0901 	mov.w	r9, #1
 8005002:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80051cc <_vfiprintf_r+0x24c>
 8005006:	9309      	str	r3, [sp, #36]	; 0x24
 8005008:	2320      	movs	r3, #32
 800500a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800500e:	2330      	movs	r3, #48	; 0x30
 8005010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005014:	4623      	mov	r3, r4
 8005016:	469a      	mov	sl, r3
 8005018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800501c:	b10a      	cbz	r2, 8005022 <_vfiprintf_r+0xa2>
 800501e:	2a25      	cmp	r2, #37	; 0x25
 8005020:	d1f9      	bne.n	8005016 <_vfiprintf_r+0x96>
 8005022:	ebba 0b04 	subs.w	fp, sl, r4
 8005026:	d00b      	beq.n	8005040 <_vfiprintf_r+0xc0>
 8005028:	465b      	mov	r3, fp
 800502a:	4622      	mov	r2, r4
 800502c:	4629      	mov	r1, r5
 800502e:	4630      	mov	r0, r6
 8005030:	f7ff ff93 	bl	8004f5a <__sfputs_r>
 8005034:	3001      	adds	r0, #1
 8005036:	f000 80aa 	beq.w	800518e <_vfiprintf_r+0x20e>
 800503a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800503c:	445a      	add	r2, fp
 800503e:	9209      	str	r2, [sp, #36]	; 0x24
 8005040:	f89a 3000 	ldrb.w	r3, [sl]
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 80a2 	beq.w	800518e <_vfiprintf_r+0x20e>
 800504a:	2300      	movs	r3, #0
 800504c:	f04f 32ff 	mov.w	r2, #4294967295
 8005050:	f10a 0a01 	add.w	sl, sl, #1
 8005054:	9304      	str	r3, [sp, #16]
 8005056:	9307      	str	r3, [sp, #28]
 8005058:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800505c:	931a      	str	r3, [sp, #104]	; 0x68
 800505e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005062:	4654      	mov	r4, sl
 8005064:	2205      	movs	r2, #5
 8005066:	4859      	ldr	r0, [pc, #356]	; (80051cc <_vfiprintf_r+0x24c>)
 8005068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800506c:	f000 faf8 	bl	8005660 <memchr>
 8005070:	9a04      	ldr	r2, [sp, #16]
 8005072:	b9d8      	cbnz	r0, 80050ac <_vfiprintf_r+0x12c>
 8005074:	06d1      	lsls	r1, r2, #27
 8005076:	bf44      	itt	mi
 8005078:	2320      	movmi	r3, #32
 800507a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800507e:	0713      	lsls	r3, r2, #28
 8005080:	bf44      	itt	mi
 8005082:	232b      	movmi	r3, #43	; 0x2b
 8005084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005088:	f89a 3000 	ldrb.w	r3, [sl]
 800508c:	2b2a      	cmp	r3, #42	; 0x2a
 800508e:	d015      	beq.n	80050bc <_vfiprintf_r+0x13c>
 8005090:	9a07      	ldr	r2, [sp, #28]
 8005092:	4654      	mov	r4, sl
 8005094:	2000      	movs	r0, #0
 8005096:	f04f 0c0a 	mov.w	ip, #10
 800509a:	4621      	mov	r1, r4
 800509c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050a0:	3b30      	subs	r3, #48	; 0x30
 80050a2:	2b09      	cmp	r3, #9
 80050a4:	d94e      	bls.n	8005144 <_vfiprintf_r+0x1c4>
 80050a6:	b1b0      	cbz	r0, 80050d6 <_vfiprintf_r+0x156>
 80050a8:	9207      	str	r2, [sp, #28]
 80050aa:	e014      	b.n	80050d6 <_vfiprintf_r+0x156>
 80050ac:	eba0 0308 	sub.w	r3, r0, r8
 80050b0:	46a2      	mov	sl, r4
 80050b2:	fa09 f303 	lsl.w	r3, r9, r3
 80050b6:	4313      	orrs	r3, r2
 80050b8:	9304      	str	r3, [sp, #16]
 80050ba:	e7d2      	b.n	8005062 <_vfiprintf_r+0xe2>
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	1d19      	adds	r1, r3, #4
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	9103      	str	r1, [sp, #12]
 80050c6:	bfbb      	ittet	lt
 80050c8:	425b      	neglt	r3, r3
 80050ca:	f042 0202 	orrlt.w	r2, r2, #2
 80050ce:	9307      	strge	r3, [sp, #28]
 80050d0:	9307      	strlt	r3, [sp, #28]
 80050d2:	bfb8      	it	lt
 80050d4:	9204      	strlt	r2, [sp, #16]
 80050d6:	7823      	ldrb	r3, [r4, #0]
 80050d8:	2b2e      	cmp	r3, #46	; 0x2e
 80050da:	d10c      	bne.n	80050f6 <_vfiprintf_r+0x176>
 80050dc:	7863      	ldrb	r3, [r4, #1]
 80050de:	2b2a      	cmp	r3, #42	; 0x2a
 80050e0:	d135      	bne.n	800514e <_vfiprintf_r+0x1ce>
 80050e2:	9b03      	ldr	r3, [sp, #12]
 80050e4:	3402      	adds	r4, #2
 80050e6:	1d1a      	adds	r2, r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	9203      	str	r2, [sp, #12]
 80050ee:	bfb8      	it	lt
 80050f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80050f4:	9305      	str	r3, [sp, #20]
 80050f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80051dc <_vfiprintf_r+0x25c>
 80050fa:	2203      	movs	r2, #3
 80050fc:	7821      	ldrb	r1, [r4, #0]
 80050fe:	4650      	mov	r0, sl
 8005100:	f000 faae 	bl	8005660 <memchr>
 8005104:	b140      	cbz	r0, 8005118 <_vfiprintf_r+0x198>
 8005106:	2340      	movs	r3, #64	; 0x40
 8005108:	eba0 000a 	sub.w	r0, r0, sl
 800510c:	3401      	adds	r4, #1
 800510e:	fa03 f000 	lsl.w	r0, r3, r0
 8005112:	9b04      	ldr	r3, [sp, #16]
 8005114:	4303      	orrs	r3, r0
 8005116:	9304      	str	r3, [sp, #16]
 8005118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800511c:	2206      	movs	r2, #6
 800511e:	482c      	ldr	r0, [pc, #176]	; (80051d0 <_vfiprintf_r+0x250>)
 8005120:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005124:	f000 fa9c 	bl	8005660 <memchr>
 8005128:	2800      	cmp	r0, #0
 800512a:	d03f      	beq.n	80051ac <_vfiprintf_r+0x22c>
 800512c:	4b29      	ldr	r3, [pc, #164]	; (80051d4 <_vfiprintf_r+0x254>)
 800512e:	bb1b      	cbnz	r3, 8005178 <_vfiprintf_r+0x1f8>
 8005130:	9b03      	ldr	r3, [sp, #12]
 8005132:	3307      	adds	r3, #7
 8005134:	f023 0307 	bic.w	r3, r3, #7
 8005138:	3308      	adds	r3, #8
 800513a:	9303      	str	r3, [sp, #12]
 800513c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800513e:	443b      	add	r3, r7
 8005140:	9309      	str	r3, [sp, #36]	; 0x24
 8005142:	e767      	b.n	8005014 <_vfiprintf_r+0x94>
 8005144:	fb0c 3202 	mla	r2, ip, r2, r3
 8005148:	460c      	mov	r4, r1
 800514a:	2001      	movs	r0, #1
 800514c:	e7a5      	b.n	800509a <_vfiprintf_r+0x11a>
 800514e:	2300      	movs	r3, #0
 8005150:	3401      	adds	r4, #1
 8005152:	f04f 0c0a 	mov.w	ip, #10
 8005156:	4619      	mov	r1, r3
 8005158:	9305      	str	r3, [sp, #20]
 800515a:	4620      	mov	r0, r4
 800515c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005160:	3a30      	subs	r2, #48	; 0x30
 8005162:	2a09      	cmp	r2, #9
 8005164:	d903      	bls.n	800516e <_vfiprintf_r+0x1ee>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0c5      	beq.n	80050f6 <_vfiprintf_r+0x176>
 800516a:	9105      	str	r1, [sp, #20]
 800516c:	e7c3      	b.n	80050f6 <_vfiprintf_r+0x176>
 800516e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005172:	4604      	mov	r4, r0
 8005174:	2301      	movs	r3, #1
 8005176:	e7f0      	b.n	800515a <_vfiprintf_r+0x1da>
 8005178:	ab03      	add	r3, sp, #12
 800517a:	462a      	mov	r2, r5
 800517c:	a904      	add	r1, sp, #16
 800517e:	4630      	mov	r0, r6
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	4b15      	ldr	r3, [pc, #84]	; (80051d8 <_vfiprintf_r+0x258>)
 8005184:	e000      	b.n	8005188 <_vfiprintf_r+0x208>
 8005186:	bf00      	nop
 8005188:	4607      	mov	r7, r0
 800518a:	1c78      	adds	r0, r7, #1
 800518c:	d1d6      	bne.n	800513c <_vfiprintf_r+0x1bc>
 800518e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005190:	07d9      	lsls	r1, r3, #31
 8005192:	d405      	bmi.n	80051a0 <_vfiprintf_r+0x220>
 8005194:	89ab      	ldrh	r3, [r5, #12]
 8005196:	059a      	lsls	r2, r3, #22
 8005198:	d402      	bmi.n	80051a0 <_vfiprintf_r+0x220>
 800519a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800519c:	f7ff fdb7 	bl	8004d0e <__retarget_lock_release_recursive>
 80051a0:	89ab      	ldrh	r3, [r5, #12]
 80051a2:	065b      	lsls	r3, r3, #25
 80051a4:	f53f af12 	bmi.w	8004fcc <_vfiprintf_r+0x4c>
 80051a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051aa:	e711      	b.n	8004fd0 <_vfiprintf_r+0x50>
 80051ac:	ab03      	add	r3, sp, #12
 80051ae:	462a      	mov	r2, r5
 80051b0:	a904      	add	r1, sp, #16
 80051b2:	4630      	mov	r0, r6
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	4b08      	ldr	r3, [pc, #32]	; (80051d8 <_vfiprintf_r+0x258>)
 80051b8:	f000 f882 	bl	80052c0 <_printf_i>
 80051bc:	e7e4      	b.n	8005188 <_vfiprintf_r+0x208>
 80051be:	bf00      	nop
 80051c0:	080057b8 	.word	0x080057b8
 80051c4:	080057d8 	.word	0x080057d8
 80051c8:	08005798 	.word	0x08005798
 80051cc:	080057f8 	.word	0x080057f8
 80051d0:	08005802 	.word	0x08005802
 80051d4:	00000000 	.word	0x00000000
 80051d8:	08004f5b 	.word	0x08004f5b
 80051dc:	080057fe 	.word	0x080057fe

080051e0 <_printf_common>:
 80051e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e4:	4616      	mov	r6, r2
 80051e6:	4699      	mov	r9, r3
 80051e8:	688a      	ldr	r2, [r1, #8]
 80051ea:	4607      	mov	r7, r0
 80051ec:	690b      	ldr	r3, [r1, #16]
 80051ee:	460c      	mov	r4, r1
 80051f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051f4:	4293      	cmp	r3, r2
 80051f6:	bfb8      	it	lt
 80051f8:	4613      	movlt	r3, r2
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005200:	b10a      	cbz	r2, 8005206 <_printf_common+0x26>
 8005202:	3301      	adds	r3, #1
 8005204:	6033      	str	r3, [r6, #0]
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	0699      	lsls	r1, r3, #26
 800520a:	bf42      	ittt	mi
 800520c:	6833      	ldrmi	r3, [r6, #0]
 800520e:	3302      	addmi	r3, #2
 8005210:	6033      	strmi	r3, [r6, #0]
 8005212:	6825      	ldr	r5, [r4, #0]
 8005214:	f015 0506 	ands.w	r5, r5, #6
 8005218:	d106      	bne.n	8005228 <_printf_common+0x48>
 800521a:	f104 0a19 	add.w	sl, r4, #25
 800521e:	68e3      	ldr	r3, [r4, #12]
 8005220:	6832      	ldr	r2, [r6, #0]
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	42ab      	cmp	r3, r5
 8005226:	dc29      	bgt.n	800527c <_printf_common+0x9c>
 8005228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800522c:	1e13      	subs	r3, r2, #0
 800522e:	6822      	ldr	r2, [r4, #0]
 8005230:	bf18      	it	ne
 8005232:	2301      	movne	r3, #1
 8005234:	0692      	lsls	r2, r2, #26
 8005236:	d42e      	bmi.n	8005296 <_printf_common+0xb6>
 8005238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800523c:	4649      	mov	r1, r9
 800523e:	4638      	mov	r0, r7
 8005240:	47c0      	blx	r8
 8005242:	3001      	adds	r0, #1
 8005244:	d021      	beq.n	800528a <_printf_common+0xaa>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	341a      	adds	r4, #26
 800524a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800524e:	f003 0306 	and.w	r3, r3, #6
 8005252:	6832      	ldr	r2, [r6, #0]
 8005254:	2600      	movs	r6, #0
 8005256:	2b04      	cmp	r3, #4
 8005258:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800525c:	bf08      	it	eq
 800525e:	1aad      	subeq	r5, r5, r2
 8005260:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8005264:	bf14      	ite	ne
 8005266:	2500      	movne	r5, #0
 8005268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800526c:	4293      	cmp	r3, r2
 800526e:	bfc4      	itt	gt
 8005270:	1a9b      	subgt	r3, r3, r2
 8005272:	18ed      	addgt	r5, r5, r3
 8005274:	42b5      	cmp	r5, r6
 8005276:	d11a      	bne.n	80052ae <_printf_common+0xce>
 8005278:	2000      	movs	r0, #0
 800527a:	e008      	b.n	800528e <_printf_common+0xae>
 800527c:	2301      	movs	r3, #1
 800527e:	4652      	mov	r2, sl
 8005280:	4649      	mov	r1, r9
 8005282:	4638      	mov	r0, r7
 8005284:	47c0      	blx	r8
 8005286:	3001      	adds	r0, #1
 8005288:	d103      	bne.n	8005292 <_printf_common+0xb2>
 800528a:	f04f 30ff 	mov.w	r0, #4294967295
 800528e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005292:	3501      	adds	r5, #1
 8005294:	e7c3      	b.n	800521e <_printf_common+0x3e>
 8005296:	18e1      	adds	r1, r4, r3
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	2030      	movs	r0, #48	; 0x30
 800529c:	3302      	adds	r3, #2
 800529e:	4422      	add	r2, r4
 80052a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052ac:	e7c4      	b.n	8005238 <_printf_common+0x58>
 80052ae:	2301      	movs	r3, #1
 80052b0:	4622      	mov	r2, r4
 80052b2:	4649      	mov	r1, r9
 80052b4:	4638      	mov	r0, r7
 80052b6:	47c0      	blx	r8
 80052b8:	3001      	adds	r0, #1
 80052ba:	d0e6      	beq.n	800528a <_printf_common+0xaa>
 80052bc:	3601      	adds	r6, #1
 80052be:	e7d9      	b.n	8005274 <_printf_common+0x94>

080052c0 <_printf_i>:
 80052c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	460c      	mov	r4, r1
 80052c6:	4691      	mov	r9, r2
 80052c8:	4680      	mov	r8, r0
 80052ca:	469a      	mov	sl, r3
 80052cc:	7e27      	ldrb	r7, [r4, #24]
 80052ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052d4:	2f78      	cmp	r7, #120	; 0x78
 80052d6:	d807      	bhi.n	80052e8 <_printf_i+0x28>
 80052d8:	2f62      	cmp	r7, #98	; 0x62
 80052da:	d80a      	bhi.n	80052f2 <_printf_i+0x32>
 80052dc:	2f00      	cmp	r7, #0
 80052de:	f000 80d8 	beq.w	8005492 <_printf_i+0x1d2>
 80052e2:	2f58      	cmp	r7, #88	; 0x58
 80052e4:	f000 80a3 	beq.w	800542e <_printf_i+0x16e>
 80052e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052f0:	e03a      	b.n	8005368 <_printf_i+0xa8>
 80052f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052f6:	2b15      	cmp	r3, #21
 80052f8:	d8f6      	bhi.n	80052e8 <_printf_i+0x28>
 80052fa:	a001      	add	r0, pc, #4	; (adr r0, 8005300 <_printf_i+0x40>)
 80052fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005300:	08005359 	.word	0x08005359
 8005304:	0800536d 	.word	0x0800536d
 8005308:	080052e9 	.word	0x080052e9
 800530c:	080052e9 	.word	0x080052e9
 8005310:	080052e9 	.word	0x080052e9
 8005314:	080052e9 	.word	0x080052e9
 8005318:	0800536d 	.word	0x0800536d
 800531c:	080052e9 	.word	0x080052e9
 8005320:	080052e9 	.word	0x080052e9
 8005324:	080052e9 	.word	0x080052e9
 8005328:	080052e9 	.word	0x080052e9
 800532c:	08005479 	.word	0x08005479
 8005330:	0800539d 	.word	0x0800539d
 8005334:	0800545b 	.word	0x0800545b
 8005338:	080052e9 	.word	0x080052e9
 800533c:	080052e9 	.word	0x080052e9
 8005340:	0800549b 	.word	0x0800549b
 8005344:	080052e9 	.word	0x080052e9
 8005348:	0800539d 	.word	0x0800539d
 800534c:	080052e9 	.word	0x080052e9
 8005350:	080052e9 	.word	0x080052e9
 8005354:	08005463 	.word	0x08005463
 8005358:	680b      	ldr	r3, [r1, #0]
 800535a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800535e:	1d1a      	adds	r2, r3, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	600a      	str	r2, [r1, #0]
 8005364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005368:	2301      	movs	r3, #1
 800536a:	e0a3      	b.n	80054b4 <_printf_i+0x1f4>
 800536c:	6825      	ldr	r5, [r4, #0]
 800536e:	6808      	ldr	r0, [r1, #0]
 8005370:	062e      	lsls	r6, r5, #24
 8005372:	f100 0304 	add.w	r3, r0, #4
 8005376:	d50a      	bpl.n	800538e <_printf_i+0xce>
 8005378:	6805      	ldr	r5, [r0, #0]
 800537a:	600b      	str	r3, [r1, #0]
 800537c:	2d00      	cmp	r5, #0
 800537e:	da03      	bge.n	8005388 <_printf_i+0xc8>
 8005380:	232d      	movs	r3, #45	; 0x2d
 8005382:	426d      	negs	r5, r5
 8005384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005388:	485e      	ldr	r0, [pc, #376]	; (8005504 <_printf_i+0x244>)
 800538a:	230a      	movs	r3, #10
 800538c:	e019      	b.n	80053c2 <_printf_i+0x102>
 800538e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005392:	6805      	ldr	r5, [r0, #0]
 8005394:	600b      	str	r3, [r1, #0]
 8005396:	bf18      	it	ne
 8005398:	b22d      	sxthne	r5, r5
 800539a:	e7ef      	b.n	800537c <_printf_i+0xbc>
 800539c:	680b      	ldr	r3, [r1, #0]
 800539e:	6825      	ldr	r5, [r4, #0]
 80053a0:	1d18      	adds	r0, r3, #4
 80053a2:	6008      	str	r0, [r1, #0]
 80053a4:	0628      	lsls	r0, r5, #24
 80053a6:	d501      	bpl.n	80053ac <_printf_i+0xec>
 80053a8:	681d      	ldr	r5, [r3, #0]
 80053aa:	e002      	b.n	80053b2 <_printf_i+0xf2>
 80053ac:	0669      	lsls	r1, r5, #25
 80053ae:	d5fb      	bpl.n	80053a8 <_printf_i+0xe8>
 80053b0:	881d      	ldrh	r5, [r3, #0]
 80053b2:	2f6f      	cmp	r7, #111	; 0x6f
 80053b4:	4853      	ldr	r0, [pc, #332]	; (8005504 <_printf_i+0x244>)
 80053b6:	bf0c      	ite	eq
 80053b8:	2308      	moveq	r3, #8
 80053ba:	230a      	movne	r3, #10
 80053bc:	2100      	movs	r1, #0
 80053be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053c2:	6866      	ldr	r6, [r4, #4]
 80053c4:	2e00      	cmp	r6, #0
 80053c6:	60a6      	str	r6, [r4, #8]
 80053c8:	bfa2      	ittt	ge
 80053ca:	6821      	ldrge	r1, [r4, #0]
 80053cc:	f021 0104 	bicge.w	r1, r1, #4
 80053d0:	6021      	strge	r1, [r4, #0]
 80053d2:	b90d      	cbnz	r5, 80053d8 <_printf_i+0x118>
 80053d4:	2e00      	cmp	r6, #0
 80053d6:	d04d      	beq.n	8005474 <_printf_i+0x1b4>
 80053d8:	4616      	mov	r6, r2
 80053da:	fbb5 f1f3 	udiv	r1, r5, r3
 80053de:	fb03 5711 	mls	r7, r3, r1, r5
 80053e2:	5dc7      	ldrb	r7, [r0, r7]
 80053e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053e8:	462f      	mov	r7, r5
 80053ea:	460d      	mov	r5, r1
 80053ec:	42bb      	cmp	r3, r7
 80053ee:	d9f4      	bls.n	80053da <_printf_i+0x11a>
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d10b      	bne.n	800540c <_printf_i+0x14c>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	07df      	lsls	r7, r3, #31
 80053f8:	d508      	bpl.n	800540c <_printf_i+0x14c>
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	6861      	ldr	r1, [r4, #4]
 80053fe:	4299      	cmp	r1, r3
 8005400:	bfde      	ittt	le
 8005402:	2330      	movle	r3, #48	; 0x30
 8005404:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005408:	f106 36ff 	addle.w	r6, r6, #4294967295
 800540c:	1b92      	subs	r2, r2, r6
 800540e:	6122      	str	r2, [r4, #16]
 8005410:	464b      	mov	r3, r9
 8005412:	aa03      	add	r2, sp, #12
 8005414:	4621      	mov	r1, r4
 8005416:	4640      	mov	r0, r8
 8005418:	f8cd a000 	str.w	sl, [sp]
 800541c:	f7ff fee0 	bl	80051e0 <_printf_common>
 8005420:	3001      	adds	r0, #1
 8005422:	d14c      	bne.n	80054be <_printf_i+0x1fe>
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	b004      	add	sp, #16
 800542a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542e:	4835      	ldr	r0, [pc, #212]	; (8005504 <_printf_i+0x244>)
 8005430:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	680e      	ldr	r6, [r1, #0]
 8005438:	061f      	lsls	r7, r3, #24
 800543a:	f856 5b04 	ldr.w	r5, [r6], #4
 800543e:	600e      	str	r6, [r1, #0]
 8005440:	d514      	bpl.n	800546c <_printf_i+0x1ac>
 8005442:	07d9      	lsls	r1, r3, #31
 8005444:	bf44      	itt	mi
 8005446:	f043 0320 	orrmi.w	r3, r3, #32
 800544a:	6023      	strmi	r3, [r4, #0]
 800544c:	b91d      	cbnz	r5, 8005456 <_printf_i+0x196>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	f023 0320 	bic.w	r3, r3, #32
 8005454:	6023      	str	r3, [r4, #0]
 8005456:	2310      	movs	r3, #16
 8005458:	e7b0      	b.n	80053bc <_printf_i+0xfc>
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	f043 0320 	orr.w	r3, r3, #32
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	2378      	movs	r3, #120	; 0x78
 8005464:	4828      	ldr	r0, [pc, #160]	; (8005508 <_printf_i+0x248>)
 8005466:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800546a:	e7e3      	b.n	8005434 <_printf_i+0x174>
 800546c:	065e      	lsls	r6, r3, #25
 800546e:	bf48      	it	mi
 8005470:	b2ad      	uxthmi	r5, r5
 8005472:	e7e6      	b.n	8005442 <_printf_i+0x182>
 8005474:	4616      	mov	r6, r2
 8005476:	e7bb      	b.n	80053f0 <_printf_i+0x130>
 8005478:	680b      	ldr	r3, [r1, #0]
 800547a:	6826      	ldr	r6, [r4, #0]
 800547c:	1d1d      	adds	r5, r3, #4
 800547e:	6960      	ldr	r0, [r4, #20]
 8005480:	600d      	str	r5, [r1, #0]
 8005482:	0635      	lsls	r5, r6, #24
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	d501      	bpl.n	800548c <_printf_i+0x1cc>
 8005488:	6018      	str	r0, [r3, #0]
 800548a:	e002      	b.n	8005492 <_printf_i+0x1d2>
 800548c:	0671      	lsls	r1, r6, #25
 800548e:	d5fb      	bpl.n	8005488 <_printf_i+0x1c8>
 8005490:	8018      	strh	r0, [r3, #0]
 8005492:	2300      	movs	r3, #0
 8005494:	4616      	mov	r6, r2
 8005496:	6123      	str	r3, [r4, #16]
 8005498:	e7ba      	b.n	8005410 <_printf_i+0x150>
 800549a:	680b      	ldr	r3, [r1, #0]
 800549c:	1d1a      	adds	r2, r3, #4
 800549e:	600a      	str	r2, [r1, #0]
 80054a0:	2100      	movs	r1, #0
 80054a2:	681e      	ldr	r6, [r3, #0]
 80054a4:	6862      	ldr	r2, [r4, #4]
 80054a6:	4630      	mov	r0, r6
 80054a8:	f000 f8da 	bl	8005660 <memchr>
 80054ac:	b108      	cbz	r0, 80054b2 <_printf_i+0x1f2>
 80054ae:	1b80      	subs	r0, r0, r6
 80054b0:	6060      	str	r0, [r4, #4]
 80054b2:	6863      	ldr	r3, [r4, #4]
 80054b4:	6123      	str	r3, [r4, #16]
 80054b6:	2300      	movs	r3, #0
 80054b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054bc:	e7a8      	b.n	8005410 <_printf_i+0x150>
 80054be:	6923      	ldr	r3, [r4, #16]
 80054c0:	4632      	mov	r2, r6
 80054c2:	4649      	mov	r1, r9
 80054c4:	4640      	mov	r0, r8
 80054c6:	47d0      	blx	sl
 80054c8:	3001      	adds	r0, #1
 80054ca:	d0ab      	beq.n	8005424 <_printf_i+0x164>
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	079b      	lsls	r3, r3, #30
 80054d0:	d413      	bmi.n	80054fa <_printf_i+0x23a>
 80054d2:	68e0      	ldr	r0, [r4, #12]
 80054d4:	9b03      	ldr	r3, [sp, #12]
 80054d6:	4298      	cmp	r0, r3
 80054d8:	bfb8      	it	lt
 80054da:	4618      	movlt	r0, r3
 80054dc:	e7a4      	b.n	8005428 <_printf_i+0x168>
 80054de:	2301      	movs	r3, #1
 80054e0:	4632      	mov	r2, r6
 80054e2:	4649      	mov	r1, r9
 80054e4:	4640      	mov	r0, r8
 80054e6:	47d0      	blx	sl
 80054e8:	3001      	adds	r0, #1
 80054ea:	d09b      	beq.n	8005424 <_printf_i+0x164>
 80054ec:	3501      	adds	r5, #1
 80054ee:	68e3      	ldr	r3, [r4, #12]
 80054f0:	9903      	ldr	r1, [sp, #12]
 80054f2:	1a5b      	subs	r3, r3, r1
 80054f4:	42ab      	cmp	r3, r5
 80054f6:	dcf2      	bgt.n	80054de <_printf_i+0x21e>
 80054f8:	e7eb      	b.n	80054d2 <_printf_i+0x212>
 80054fa:	2500      	movs	r5, #0
 80054fc:	f104 0619 	add.w	r6, r4, #25
 8005500:	e7f5      	b.n	80054ee <_printf_i+0x22e>
 8005502:	bf00      	nop
 8005504:	08005809 	.word	0x08005809
 8005508:	0800581a 	.word	0x0800581a

0800550c <_sbrk_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	2300      	movs	r3, #0
 8005510:	4d05      	ldr	r5, [pc, #20]	; (8005528 <_sbrk_r+0x1c>)
 8005512:	4604      	mov	r4, r0
 8005514:	4608      	mov	r0, r1
 8005516:	602b      	str	r3, [r5, #0]
 8005518:	f7fa ffdc 	bl	80004d4 <_sbrk>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d102      	bne.n	8005526 <_sbrk_r+0x1a>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	b103      	cbz	r3, 8005526 <_sbrk_r+0x1a>
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	bd38      	pop	{r3, r4, r5, pc}
 8005528:	20004008 	.word	0x20004008

0800552c <__sread>:
 800552c:	b510      	push	{r4, lr}
 800552e:	460c      	mov	r4, r1
 8005530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005534:	f000 f8ae 	bl	8005694 <_read_r>
 8005538:	2800      	cmp	r0, #0
 800553a:	bfab      	itete	ge
 800553c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800553e:	89a3      	ldrhlt	r3, [r4, #12]
 8005540:	181b      	addge	r3, r3, r0
 8005542:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005546:	bfac      	ite	ge
 8005548:	6563      	strge	r3, [r4, #84]	; 0x54
 800554a:	81a3      	strhlt	r3, [r4, #12]
 800554c:	bd10      	pop	{r4, pc}

0800554e <__swrite>:
 800554e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005552:	461f      	mov	r7, r3
 8005554:	898b      	ldrh	r3, [r1, #12]
 8005556:	4605      	mov	r5, r0
 8005558:	460c      	mov	r4, r1
 800555a:	05db      	lsls	r3, r3, #23
 800555c:	4616      	mov	r6, r2
 800555e:	d505      	bpl.n	800556c <__swrite+0x1e>
 8005560:	2302      	movs	r3, #2
 8005562:	2200      	movs	r2, #0
 8005564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005568:	f000 f868 	bl	800563c <_lseek_r>
 800556c:	89a3      	ldrh	r3, [r4, #12]
 800556e:	4632      	mov	r2, r6
 8005570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005574:	4628      	mov	r0, r5
 8005576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800557a:	81a3      	strh	r3, [r4, #12]
 800557c:	463b      	mov	r3, r7
 800557e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005582:	f000 b817 	b.w	80055b4 <_write_r>

08005586 <__sseek>:
 8005586:	b510      	push	{r4, lr}
 8005588:	460c      	mov	r4, r1
 800558a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800558e:	f000 f855 	bl	800563c <_lseek_r>
 8005592:	1c43      	adds	r3, r0, #1
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	bf15      	itete	ne
 8005598:	6560      	strne	r0, [r4, #84]	; 0x54
 800559a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800559e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055a2:	81a3      	strheq	r3, [r4, #12]
 80055a4:	bf18      	it	ne
 80055a6:	81a3      	strhne	r3, [r4, #12]
 80055a8:	bd10      	pop	{r4, pc}

080055aa <__sclose>:
 80055aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ae:	f000 b813 	b.w	80055d8 <_close_r>
	...

080055b4 <_write_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4604      	mov	r4, r0
 80055b8:	4d06      	ldr	r5, [pc, #24]	; (80055d4 <_write_r+0x20>)
 80055ba:	4608      	mov	r0, r1
 80055bc:	4611      	mov	r1, r2
 80055be:	2200      	movs	r2, #0
 80055c0:	602a      	str	r2, [r5, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f7fa ff35 	bl	8000432 <_write>
 80055c8:	1c43      	adds	r3, r0, #1
 80055ca:	d102      	bne.n	80055d2 <_write_r+0x1e>
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	b103      	cbz	r3, 80055d2 <_write_r+0x1e>
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	bd38      	pop	{r3, r4, r5, pc}
 80055d4:	20004008 	.word	0x20004008

080055d8 <_close_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	2300      	movs	r3, #0
 80055dc:	4d05      	ldr	r5, [pc, #20]	; (80055f4 <_close_r+0x1c>)
 80055de:	4604      	mov	r4, r0
 80055e0:	4608      	mov	r0, r1
 80055e2:	602b      	str	r3, [r5, #0]
 80055e4:	f7fa ff41 	bl	800046a <_close>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d102      	bne.n	80055f2 <_close_r+0x1a>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	b103      	cbz	r3, 80055f2 <_close_r+0x1a>
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
 80055f4:	20004008 	.word	0x20004008

080055f8 <_fstat_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	2300      	movs	r3, #0
 80055fc:	4d06      	ldr	r5, [pc, #24]	; (8005618 <_fstat_r+0x20>)
 80055fe:	4604      	mov	r4, r0
 8005600:	4608      	mov	r0, r1
 8005602:	4611      	mov	r1, r2
 8005604:	602b      	str	r3, [r5, #0]
 8005606:	f7fa ff3c 	bl	8000482 <_fstat>
 800560a:	1c43      	adds	r3, r0, #1
 800560c:	d102      	bne.n	8005614 <_fstat_r+0x1c>
 800560e:	682b      	ldr	r3, [r5, #0]
 8005610:	b103      	cbz	r3, 8005614 <_fstat_r+0x1c>
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	bd38      	pop	{r3, r4, r5, pc}
 8005616:	bf00      	nop
 8005618:	20004008 	.word	0x20004008

0800561c <_isatty_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	2300      	movs	r3, #0
 8005620:	4d05      	ldr	r5, [pc, #20]	; (8005638 <_isatty_r+0x1c>)
 8005622:	4604      	mov	r4, r0
 8005624:	4608      	mov	r0, r1
 8005626:	602b      	str	r3, [r5, #0]
 8005628:	f7fa ff3b 	bl	80004a2 <_isatty>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_isatty_r+0x1a>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_isatty_r+0x1a>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	20004008 	.word	0x20004008

0800563c <_lseek_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4604      	mov	r4, r0
 8005640:	4d06      	ldr	r5, [pc, #24]	; (800565c <_lseek_r+0x20>)
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	2200      	movs	r2, #0
 8005648:	602a      	str	r2, [r5, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f7fa ff34 	bl	80004b8 <_lseek>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_lseek_r+0x1e>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_lseek_r+0x1e>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20004008 	.word	0x20004008

08005660 <memchr>:
 8005660:	b2c9      	uxtb	r1, r1
 8005662:	4402      	add	r2, r0
 8005664:	b510      	push	{r4, lr}
 8005666:	4290      	cmp	r0, r2
 8005668:	4603      	mov	r3, r0
 800566a:	d101      	bne.n	8005670 <memchr+0x10>
 800566c:	2300      	movs	r3, #0
 800566e:	e003      	b.n	8005678 <memchr+0x18>
 8005670:	781c      	ldrb	r4, [r3, #0]
 8005672:	3001      	adds	r0, #1
 8005674:	428c      	cmp	r4, r1
 8005676:	d1f6      	bne.n	8005666 <memchr+0x6>
 8005678:	4618      	mov	r0, r3
 800567a:	bd10      	pop	{r4, pc}

0800567c <__malloc_lock>:
 800567c:	4801      	ldr	r0, [pc, #4]	; (8005684 <__malloc_lock+0x8>)
 800567e:	f7ff bb45 	b.w	8004d0c <__retarget_lock_acquire_recursive>
 8005682:	bf00      	nop
 8005684:	20004000 	.word	0x20004000

08005688 <__malloc_unlock>:
 8005688:	4801      	ldr	r0, [pc, #4]	; (8005690 <__malloc_unlock+0x8>)
 800568a:	f7ff bb40 	b.w	8004d0e <__retarget_lock_release_recursive>
 800568e:	bf00      	nop
 8005690:	20004000 	.word	0x20004000

08005694 <_read_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4604      	mov	r4, r0
 8005698:	4d06      	ldr	r5, [pc, #24]	; (80056b4 <_read_r+0x20>)
 800569a:	4608      	mov	r0, r1
 800569c:	4611      	mov	r1, r2
 800569e:	2200      	movs	r2, #0
 80056a0:	602a      	str	r2, [r5, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	f7fa fea8 	bl	80003f8 <_read>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_read_r+0x1e>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_read_r+0x1e>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	20004008 	.word	0x20004008

080056b8 <_init>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	bf00      	nop
 80056bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056be:	bc08      	pop	{r3}
 80056c0:	469e      	mov	lr, r3
 80056c2:	4770      	bx	lr

080056c4 <_fini>:
 80056c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c6:	bf00      	nop
 80056c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ca:	bc08      	pop	{r3}
 80056cc:	469e      	mov	lr, r3
 80056ce:	4770      	bx	lr
