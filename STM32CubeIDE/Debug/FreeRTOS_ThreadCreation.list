
FreeRTOS_ThreadCreation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08005bc8  08005bc8  00015bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da0  08005da0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005da0  08005da0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005da0  08005da0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005da0  08005da0  00015da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f98  20000078  08005e28  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20004010  08005e28  00024010  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_line   00015ad8  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0001a506  00000000  00000000  00035b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000332e  00000000  00000000  0005008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  000533c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001154d6  00000000  00000000  000548e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000013b8  00000000  00000000  00169db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004e13  00000000  00000000  0016b170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016ff83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060d4  00000000  00000000  0016ffd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08005bac 	.word	0x08005bac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08005bac 	.word	0x08005bac

08000240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000278 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000244:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000246:	e003      	b.n	8000250 <LoopCopyDataInit>

08000248 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800024a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800024c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800024e:	3104      	adds	r1, #4

08000250 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000254:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000256:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000258:	d3f6      	bcc.n	8000248 <CopyDataInit>
	ldr	r2, =_sbss
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <LoopForever+0x12>)
	b	LoopFillZerobss
 800025c:	e002      	b.n	8000264 <LoopFillZerobss>

0800025e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800025e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000260:	f842 3b04 	str.w	r3, [r2], #4

08000264 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <LoopForever+0x16>)
	cmp	r2, r3
 8000266:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000268:	d3f9      	bcc.n	800025e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800026a:	f000 faa9 	bl	80007c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f004 fab1 	bl	80047d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000272:	f000 f80f 	bl	8000294 <main>

08000276 <LoopForever>:

LoopForever:
    b LoopForever
 8000276:	e7fe      	b.n	8000276 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000278:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800027c:	08005db0 	.word	0x08005db0
	ldr	r0, =_sdata
 8000280:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000284:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8000288:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 800028c:	20004010 	.word	0x20004010

08000290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC1_2_IRQHandler>
	...

08000294 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fb4f 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029e:	f000 f849 	bl	8000334 <SystemClock_Config>
//  BSP_LED_Init(LED9);
  //BSP_LED_Init(LED10);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 80002a2:	f000 f898 	bl	80003d6 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002a6:	f001 ffe7 	bl	8002278 <osKernelInitialize>


  /* The queue is created to hold a maximum of 5 values, each of which is
   large enough to hold a variable of type Data_t ). */
   //xQueue = xQueueCreate( 3, sizeof( Data_t )) ;
   xPointerQueue = xQueueCreate( 5, sizeof( char * ) );
 80002aa:	2200      	movs	r2, #0
 80002ac:	2104      	movs	r1, #4
 80002ae:	2005      	movs	r0, #5
 80002b0:	f002 fd62 	bl	8002d78 <xQueueGenericCreate>
 80002b4:	4603      	mov	r3, r0
 80002b6:	4a18      	ldr	r2, [pc, #96]	; (8000318 <main+0x84>)
 80002b8:	6013      	str	r3, [r2, #0]

   if( xPointerQueue != NULL )
 80002ba:	4b17      	ldr	r3, [pc, #92]	; (8000318 <main+0x84>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d026      	beq.n	8000310 <main+0x7c>
   {
   /* Create two instances of the task that will send to the queue. The
 parameter is used to pass the structure that the task will write to the
 queue, so one task will continuously send xStructsToSend[ 0 ] to the queue
 while the other task will continuously send xStructsToSend[ 1 ]. */
	   status = xTaskCreate(vSenderTask, "Task1", 500, NULL, 2, &task1_handle);
 80002c2:	4b16      	ldr	r3, [pc, #88]	; (800031c <main+0x88>)
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2302      	movs	r3, #2
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	2300      	movs	r3, #0
 80002cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002d0:	4913      	ldr	r1, [pc, #76]	; (8000320 <main+0x8c>)
 80002d2:	4814      	ldr	r0, [pc, #80]	; (8000324 <main+0x90>)
 80002d4:	f003 f961 	bl	800359a <xTaskCreate>
 80002d8:	6078      	str	r0, [r7, #4]
	 //  status1 = xTaskCreate(vSenderTask, "Task2", 500, &( xStructsToSend[ 1 ] ), 2, &task2_handle);
	   configASSERT(status == pdPASS);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d002      	beq.n	80002e6 <main+0x52>
 80002e0:	f002 fc3a 	bl	8002b58 <ulSetInterruptMask>
 80002e4:	e7fe      	b.n	80002e4 <main+0x50>
	 // configASSERT(status1 == pdPASS);

   /* Create the task that will read from the queue. The task is created with
   priority 2, so above the priority of the sender tasks. */
   status2 = xTaskCreate( vReceiverTask, "Task3", 500, NULL, 1, NULL );
 80002e6:	2300      	movs	r3, #0
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	2300      	movs	r3, #0
 80002f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002f4:	490c      	ldr	r1, [pc, #48]	; (8000328 <main+0x94>)
 80002f6:	480d      	ldr	r0, [pc, #52]	; (800032c <main+0x98>)
 80002f8:	f003 f94f 	bl	800359a <xTaskCreate>
 80002fc:	6038      	str	r0, [r7, #0]
   configASSERT(status2 == pdPASS);
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d002      	beq.n	800030a <main+0x76>
 8000304:	f002 fc28 	bl	8002b58 <ulSetInterruptMask>
 8000308:	e7fe      	b.n	8000308 <main+0x74>
   /* Start the scheduler so the created tasks start executing. */
   vTaskStartScheduler();
 800030a:	f003 faa1 	bl	8003850 <vTaskStartScheduler>
 800030e:	e002      	b.n	8000316 <main+0x82>
   }
   else
   {
   /* The queue could not be created. */
	   printf("Queue not created\n");
 8000310:	4807      	ldr	r0, [pc, #28]	; (8000330 <main+0x9c>)
 8000312:	f004 fb1f 	bl	8004954 <puts>
  /* Start scheduler */
 // osKernelStart();

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000316:	e7fe      	b.n	8000316 <main+0x82>
 8000318:	20003f64 	.word	0x20003f64
 800031c:	20003f60 	.word	0x20003f60
 8000320:	08005bc8 	.word	0x08005bc8
 8000324:	080003fd 	.word	0x080003fd
 8000328:	08005bd0 	.word	0x08005bd0
 800032c:	08000481 	.word	0x08000481
 8000330:	08005bd8 	.word	0x08005bd8

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b098      	sub	sp, #96	; 0x60
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0318 	add.w	r3, r7, #24
 800033e:	2248      	movs	r2, #72	; 0x48
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f004 fa77 	bl	8004836 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000356:	2000      	movs	r0, #0
 8000358:	f000 fc48 	bl	8000bec <HAL_PWREx_ControlVoltageScaling>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000362:	f000 f8d3 	bl	800050c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000366:	2310      	movs	r3, #16
 8000368:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800036a:	2301      	movs	r3, #1
 800036c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800036e:	2300      	movs	r3, #0
 8000370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000372:	2360      	movs	r3, #96	; 0x60
 8000374:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000376:	2302      	movs	r3, #2
 8000378:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800037a:	2301      	movs	r3, #1
 800037c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800037e:	2301      	movs	r3, #1
 8000380:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000382:	2337      	movs	r3, #55	; 0x37
 8000384:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000386:	2307      	movs	r3, #7
 8000388:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800038a:	2302      	movs	r3, #2
 800038c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800038e:	2302      	movs	r3, #2
 8000390:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	f107 0318 	add.w	r3, r7, #24
 8000396:	4618      	mov	r0, r3
 8000398:	f000 fcb8 	bl	8000d0c <HAL_RCC_OscConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003a2:	f000 f8b3 	bl	800050c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	230f      	movs	r3, #15
 80003a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003aa:	2303      	movs	r3, #3
 80003ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2105      	movs	r1, #5
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 f97a 	bl	80016b8 <HAL_RCC_ClockConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ca:	f000 f89f 	bl	800050c <Error_Handler>
  }
}
 80003ce:	bf00      	nop
 80003d0:	3760      	adds	r7, #96	; 0x60
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80003da:	2000      	movs	r0, #0
 80003dc:	f000 fbc8 	bl	8000b70 <HAL_ICACHE_ConfigAssociativityMode>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80003e6:	f000 f891 	bl	800050c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003ea:	f000 fbe1 	bl	8000bb0 <HAL_ICACHE_Enable>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003f4:	f000 f88a 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}

080003fc <vSenderTask>:

/* USER CODE END 4 */

/*SenderTask_Handler   */
 void vSenderTask( void *pvParameters )
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b094      	sub	sp, #80	; 0x50
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	 char *pcStringToSend;
	 const size_t xMaxStringLength = 50;
 8000404:	2332      	movs	r3, #50	; 0x32
 8000406:	64bb      	str	r3, [r7, #72]	; 0x48
	 char buffer[50];
	 BaseType_t xStatus, xStringNumber = 0;
 8000408:	2300      	movs	r3, #0
 800040a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  for( ;; )
	  {

	 // pcStringToSend = ( char * ) pvPortMalloc( xMaxStringLength );
	  pcStringToSend = ( char * ) buffer;
 800040c:	f107 030c 	add.w	r3, r7, #12
 8000410:	643b      	str	r3, [r7, #64]	; 0x40

	  snprintf( pcStringToSend, xMaxStringLength, " Hello\r\n");//, xStringNumber );
 8000412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000414:	4a14      	ldr	r2, [pc, #80]	; (8000468 <vSenderTask+0x6c>)
 8000416:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000418:	4618      	mov	r0, r3
 800041a:	f004 faa3 	bl	8004964 <sniprintf>
	  printf("String in sendertask:  %s\n",pcStringToSend);
 800041e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000420:	4619      	mov	r1, r3
 8000422:	4812      	ldr	r0, [pc, #72]	; (800046c <vSenderTask+0x70>)
 8000424:	f004 fa10 	bl	8004848 <iprintf>
	  printf("String number: %d \n",xStringNumber);
 8000428:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800042a:	4811      	ldr	r0, [pc, #68]	; (8000470 <vSenderTask+0x74>)
 800042c:	f004 fa0c 	bl	8004848 <iprintf>
	  /* Increment the counter so the string is different on each iteration of this task. */
	  xStringNumber++;
 8000430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000432:	3301      	adds	r3, #1
 8000434:	64fb      	str	r3, [r7, #76]	; 0x4c

	  xStatus= xQueueSend( xPointerQueue,&pcStringToSend, portMAX_DELAY );
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <vSenderTask+0x78>)
 8000438:	6818      	ldr	r0, [r3, #0]
 800043a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800043e:	2300      	movs	r3, #0
 8000440:	f04f 32ff 	mov.w	r2, #4294967295
 8000444:	f002 fced 	bl	8002e22 <xQueueGenericSend>
 8000448:	6478      	str	r0, [r7, #68]	; 0x44

	  if( xStatus != pdPASS )
 800044a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800044c:	2b01      	cmp	r3, #1
 800044e:	d003      	beq.n	8000458 <vSenderTask+0x5c>
	   {
	   /* The send operation could not complete because the queue was full -this must be an error as the queue should never contain more than
	   one item! */
	   printf( "Could not send to the queue.\r\n" );
 8000450:	4809      	ldr	r0, [pc, #36]	; (8000478 <vSenderTask+0x7c>)
 8000452:	f004 fa7f 	bl	8004954 <puts>
 8000456:	e7d9      	b.n	800040c <vSenderTask+0x10>
	   }
	   else
	   {
	  	 printf( "Send pass\r\n" );
 8000458:	4808      	ldr	r0, [pc, #32]	; (800047c <vSenderTask+0x80>)
 800045a:	f004 fa7b 	bl	8004954 <puts>
	  	 vTaskDelay(pdMS_TO_TICKS(100));
 800045e:	2064      	movs	r0, #100	; 0x64
 8000460:	f003 f9d2 	bl	8003808 <vTaskDelay>
	  pcStringToSend = ( char * ) buffer;
 8000464:	e7d2      	b.n	800040c <vSenderTask+0x10>
 8000466:	bf00      	nop
 8000468:	08005bec 	.word	0x08005bec
 800046c:	08005bf8 	.word	0x08005bf8
 8000470:	08005c14 	.word	0x08005c14
 8000474:	20003f64 	.word	0x20003f64
 8000478:	08005c28 	.word	0x08005c28
 800047c:	08005c48 	.word	0x08005c48

08000480 <vReceiverTask>:



/* ReceiverTask_Handler*/
static void vReceiverTask( void *pvParameters )
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	char *pcReceivedString;
	//BaseType_t xStatus;
	 for( ;; )
	 {

		 if( uxQueueMessagesWaiting( xPointerQueue ) == 5 )
 8000488:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <vReceiverTask+0x58>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	f002 febb 	bl	8003208 <uxQueueMessagesWaiting>
 8000492:	4603      	mov	r3, r0
 8000494:	2b05      	cmp	r3, #5
 8000496:	d102      	bne.n	800049e <vReceiverTask+0x1e>
		 {
		 printf( "Queue is full!\r\n" );
 8000498:	4810      	ldr	r0, [pc, #64]	; (80004dc <vReceiverTask+0x5c>)
 800049a:	f004 fa5b 	bl	8004954 <puts>
		 }
		 if( uxQueueMessagesWaiting( xPointerQueue ) == 0 )
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <vReceiverTask+0x58>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f002 feb0 	bl	8003208 <uxQueueMessagesWaiting>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d102      	bne.n	80004b4 <vReceiverTask+0x34>
		 {
		  printf( "Queue is empty!\r\n" );
 80004ae:	480c      	ldr	r0, [pc, #48]	; (80004e0 <vReceiverTask+0x60>)
 80004b0:	f004 fa50 	bl	8004954 <puts>
	     }

	 /* Receive the address of a buffer. */
	 xQueueReceive( xPointerQueue,&pcReceivedString, portMAX_DELAY );
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <vReceiverTask+0x58>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f107 010c 	add.w	r1, r7, #12
 80004bc:	f04f 32ff 	mov.w	r2, #4294967295
 80004c0:	4618      	mov	r0, r3
 80004c2:	f002 fde8 	bl	8003096 <xQueueReceive>
	 /* The buffer holds a string, print it out. */
	 printf( "String in receiver task: %s \n",pcReceivedString );
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	4619      	mov	r1, r3
 80004ca:	4806      	ldr	r0, [pc, #24]	; (80004e4 <vReceiverTask+0x64>)
 80004cc:	f004 f9bc 	bl	8004848 <iprintf>
	 vTaskDelay(pdMS_TO_TICKS(100));
 80004d0:	2064      	movs	r0, #100	; 0x64
 80004d2:	f003 f999 	bl	8003808 <vTaskDelay>
		 if( uxQueueMessagesWaiting( xPointerQueue ) == 5 )
 80004d6:	e7d7      	b.n	8000488 <vReceiverTask+0x8>
 80004d8:	20003f64 	.word	0x20003f64
 80004dc:	08005c54 	.word	0x08005c54
 80004e0:	08005c64 	.word	0x08005c64
 80004e4:	08005c78 	.word	0x08005c78

080004e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d101      	bne.n	80004fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004fa:	f000 fa39 	bl	8000970 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40001000 	.word	0x40001000

0800050c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
   //USER CODE BEGIN Error_Handler_Debug
   //User can add his own implementation to report the HAL error return state
  while(1)
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x4>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_MspInit+0x50>)
 800051c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800051e:	4a11      	ldr	r2, [pc, #68]	; (8000564 <HAL_MspInit+0x50>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6613      	str	r3, [r2, #96]	; 0x60
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_MspInit+0x50>)
 8000528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_MspInit+0x50>)
 8000534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <HAL_MspInit+0x50>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053c:	6593      	str	r3, [r2, #88]	; 0x58
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <HAL_MspInit+0x50>)
 8000540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2107      	movs	r1, #7
 800054e:	f06f 0001 	mvn.w	r0, #1
 8000552:	f000 fae5 	bl	8000b20 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000556:	f000 fba5 	bl	8000ca4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08c      	sub	sp, #48	; 0x30
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8000578:	2200      	movs	r2, #0
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	2031      	movs	r0, #49	; 0x31
 800057e:	f000 facf 	bl	8000b20 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000582:	2031      	movs	r0, #49	; 0x31
 8000584:	f000 fae6 	bl	8000b54 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <HAL_InitTick+0x9c>)
 800058a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058c:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <HAL_InitTick+0x9c>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6593      	str	r3, [r2, #88]	; 0x58
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <HAL_InitTick+0x9c>)
 8000596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005a0:	f107 0210 	add.w	r2, r7, #16
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4611      	mov	r1, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fa80 	bl	8001ab0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005b0:	f001 fa6a 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 80005b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b8:	4a13      	ldr	r2, [pc, #76]	; (8000608 <HAL_InitTick+0xa0>)
 80005ba:	fba2 2303 	umull	r2, r3, r2, r3
 80005be:	0c9b      	lsrs	r3, r3, #18
 80005c0:	3b01      	subs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <HAL_InitTick+0xa4>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <HAL_InitTick+0xa8>)
 80005c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <HAL_InitTick+0xa4>)
 80005cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <HAL_InitTick+0xa4>)
 80005d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_InitTick+0xa4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <HAL_InitTick+0xa4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <HAL_InitTick+0xa4>)
 80005e6:	f001 fb65 	bl	8001cb4 <HAL_TIM_Base_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d104      	bne.n	80005fa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80005f0:	4806      	ldr	r0, [pc, #24]	; (800060c <HAL_InitTick+0xa4>)
 80005f2:	f001 fbc1 	bl	8001d78 <HAL_TIM_Base_Start_IT>
 80005f6:	4603      	mov	r3, r0
 80005f8:	e000      	b.n	80005fc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3730      	adds	r7, #48	; 0x30
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000
 8000608:	431bde83 	.word	0x431bde83
 800060c:	20003f6c 	.word	0x20003f6c
 8000610:	40001000 	.word	0x40001000

08000614 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <TIM6_IRQHandler+0x10>)
 800061a:	f001 fc1d 	bl	8001e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20003f6c 	.word	0x20003f6c

08000628 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <ITM_SendChar+0x48>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <ITM_SendChar+0x48>)
 8000638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800063c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <ITM_SendChar+0x4c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <ITM_SendChar+0x4c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800064a:	bf00      	nop
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0f8      	beq.n	800064c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800065a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	6013      	str	r3, [r2, #0]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000edfc 	.word	0xe000edfc
 8000674:	e0000e00 	.word	0xe0000e00

08000678 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	e00a      	b.n	80006a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800068a:	e000      	b.n	800068e <_read+0x16>
 800068c:	bf00      	nop
 800068e:	4601      	mov	r1, r0
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	60ba      	str	r2, [r7, #8]
 8000696:	b2ca      	uxtb	r2, r1
 8000698:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	3301      	adds	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697a      	ldr	r2, [r7, #20]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	dbf0      	blt.n	800068a <_read+0x12>
	}

return len;
 80006a8:	687b      	ldr	r3, [r7, #4]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b086      	sub	sp, #24
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e009      	b.n	80006d8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	60ba      	str	r2, [r7, #8]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ffab 	bl	8000628 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbf1      	blt.n	80006c4 <_write+0x12>
	}
	return len;
 80006e0:	687b      	ldr	r3, [r7, #4]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_close>:

int _close(int file)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
	return -1;
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000712:	605a      	str	r2, [r3, #4]
	return 0;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <_isatty>:

int _isatty(int file)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
	return 1;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
	return 0;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800075c:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <_sbrk+0x5c>)
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <_sbrk+0x60>)
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <_sbrk+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d102      	bne.n	8000776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <_sbrk+0x64>)
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <_sbrk+0x68>)
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	429a      	cmp	r2, r3
 8000782:	d207      	bcs.n	8000794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000784:	f004 f820 	bl	80047c8 <__errno>
 8000788:	4603      	mov	r3, r0
 800078a:	220c      	movs	r2, #12
 800078c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	e009      	b.n	80007a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <_sbrk+0x64>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4413      	add	r3, r2
 80007a2:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <_sbrk+0x64>)
 80007a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20030000 	.word	0x20030000
 80007b4:	00000800 	.word	0x00000800
 80007b8:	20000094 	.word	0x20000094
 80007bc:	20004010 	.word	0x20004010

080007c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <SystemInit+0x20>)
 80007c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ca:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <SystemInit+0x20>)
 80007cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80007ea:	4b4f      	ldr	r3, [pc, #316]	; (8000928 <SystemCoreClockUpdate+0x144>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f003 0308 	and.w	r3, r3, #8
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d107      	bne.n	8000806 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80007f6:	4b4c      	ldr	r3, [pc, #304]	; (8000928 <SystemCoreClockUpdate+0x144>)
 80007f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	f003 030f 	and.w	r3, r3, #15
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	e005      	b.n	8000812 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000806:	4b48      	ldr	r3, [pc, #288]	; (8000928 <SystemCoreClockUpdate+0x144>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	091b      	lsrs	r3, r3, #4
 800080c:	f003 030f 	and.w	r3, r3, #15
 8000810:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000812:	4a46      	ldr	r2, [pc, #280]	; (800092c <SystemCoreClockUpdate+0x148>)
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800081c:	4b42      	ldr	r3, [pc, #264]	; (8000928 <SystemCoreClockUpdate+0x144>)
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	f003 030c 	and.w	r3, r3, #12
 8000824:	2b0c      	cmp	r3, #12
 8000826:	d866      	bhi.n	80008f6 <SystemCoreClockUpdate+0x112>
 8000828:	a201      	add	r2, pc, #4	; (adr r2, 8000830 <SystemCoreClockUpdate+0x4c>)
 800082a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082e:	bf00      	nop
 8000830:	08000865 	.word	0x08000865
 8000834:	080008f7 	.word	0x080008f7
 8000838:	080008f7 	.word	0x080008f7
 800083c:	080008f7 	.word	0x080008f7
 8000840:	0800086d 	.word	0x0800086d
 8000844:	080008f7 	.word	0x080008f7
 8000848:	080008f7 	.word	0x080008f7
 800084c:	080008f7 	.word	0x080008f7
 8000850:	08000875 	.word	0x08000875
 8000854:	080008f7 	.word	0x080008f7
 8000858:	080008f7 	.word	0x080008f7
 800085c:	080008f7 	.word	0x080008f7
 8000860:	0800087d 	.word	0x0800087d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000864:	4a32      	ldr	r2, [pc, #200]	; (8000930 <SystemCoreClockUpdate+0x14c>)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	6013      	str	r3, [r2, #0]
      break;
 800086a:	e048      	b.n	80008fe <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800086c:	4b30      	ldr	r3, [pc, #192]	; (8000930 <SystemCoreClockUpdate+0x14c>)
 800086e:	4a31      	ldr	r2, [pc, #196]	; (8000934 <SystemCoreClockUpdate+0x150>)
 8000870:	601a      	str	r2, [r3, #0]
      break;
 8000872:	e044      	b.n	80008fe <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000874:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <SystemCoreClockUpdate+0x14c>)
 8000876:	4a2f      	ldr	r2, [pc, #188]	; (8000934 <SystemCoreClockUpdate+0x150>)
 8000878:	601a      	str	r2, [r3, #0]
      break;
 800087a:	e040      	b.n	80008fe <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800087c:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <SystemCoreClockUpdate+0x144>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	f003 0303 	and.w	r3, r3, #3
 8000884:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <SystemCoreClockUpdate+0x144>)
 8000888:	68db      	ldr	r3, [r3, #12]
 800088a:	091b      	lsrs	r3, r3, #4
 800088c:	f003 030f 	and.w	r3, r3, #15
 8000890:	3301      	adds	r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d003      	beq.n	80008a2 <SystemCoreClockUpdate+0xbe>
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	2b03      	cmp	r3, #3
 800089e:	d006      	beq.n	80008ae <SystemCoreClockUpdate+0xca>
 80008a0:	e00b      	b.n	80008ba <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80008a2:	4a24      	ldr	r2, [pc, #144]	; (8000934 <SystemCoreClockUpdate+0x150>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	613b      	str	r3, [r7, #16]
          break;
 80008ac:	e00b      	b.n	80008c6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80008ae:	4a21      	ldr	r2, [pc, #132]	; (8000934 <SystemCoreClockUpdate+0x150>)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b6:	613b      	str	r3, [r7, #16]
          break;
 80008b8:	e005      	b.n	80008c6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80008ba:	697a      	ldr	r2, [r7, #20]
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	613b      	str	r3, [r7, #16]
          break;
 80008c4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <SystemCoreClockUpdate+0x144>)
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	0a1b      	lsrs	r3, r3, #8
 80008cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	fb02 f303 	mul.w	r3, r2, r3
 80008d6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <SystemCoreClockUpdate+0x144>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	0e5b      	lsrs	r3, r3, #25
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	3301      	adds	r3, #1
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f0:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <SystemCoreClockUpdate+0x14c>)
 80008f2:	6013      	str	r3, [r2, #0]
      break;
 80008f4:	e003      	b.n	80008fe <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <SystemCoreClockUpdate+0x14c>)
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	6013      	str	r3, [r2, #0]
      break;
 80008fc:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <SystemCoreClockUpdate+0x144>)
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	091b      	lsrs	r3, r3, #4
 8000904:	f003 030f 	and.w	r3, r3, #15
 8000908:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <SystemCoreClockUpdate+0x154>)
 800090a:	5cd3      	ldrb	r3, [r2, r3]
 800090c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <SystemCoreClockUpdate+0x14c>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	fa22 f303 	lsr.w	r3, r2, r3
 8000918:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SystemCoreClockUpdate+0x14c>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	371c      	adds	r7, #28
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40021000 	.word	0x40021000
 800092c:	08005cc8 	.word	0x08005cc8
 8000930:	20000000 	.word	0x20000000
 8000934:	00f42400 	.word	0x00f42400
 8000938:	08005cb0 	.word	0x08005cb0

0800093c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000946:	2004      	movs	r0, #4
 8000948:	f000 f8df 	bl	8000b0a <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800094c:	f7ff ff4a 	bl	80007e4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff fe09 	bl	8000568 <HAL_InitTick>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d002      	beq.n	8000962 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	71fb      	strb	r3, [r7, #7]
 8000960:	e001      	b.n	8000966 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000962:	f7ff fdd7 	bl	8000514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000966:	79fb      	ldrb	r3, [r7, #7]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_IncTick+0x20>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_IncTick+0x24>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4413      	add	r3, r2
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_IncTick+0x24>)
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008
 8000994:	20003fb8 	.word	0x20003fb8

08000998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTick;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <HAL_GetTick+0x14>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20003fb8 	.word	0x20003fb8

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4907      	ldr	r1, [pc, #28]	; (8000a4c <__NVIC_EnableIRQ+0x38>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0152      	lsls	r2, r2, #5
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0152      	lsls	r2, r2, #5
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	bf28      	it	cs
 8000ac2:	2303      	movcs	r3, #3
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3303      	adds	r3, #3
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b04      	subs	r3, #4
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ff4c 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2e:	f7ff ff63 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	68b9      	ldr	r1, [r7, #8]
 8000b38:	6978      	ldr	r0, [r7, #20]
 8000b3a:	f7ff ffb3 	bl	8000aa4 <NVIC_EncodePriority>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff82 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b4c:	bf00      	nop
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff56 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d002      	beq.n	8000b8e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
 8000b8c:	e007      	b.n	8000b9e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f023 0204 	bic.w	r2, r3, #4
 8000b96:	4905      	ldr	r1, [pc, #20]	; (8000bac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	40030400 	.word	0x40030400

08000bb0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_ICACHE_Enable+0x1c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_ICACHE_Enable+0x1c>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40030400 	.word	0x40030400

08000bd0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40007000 	.word	0x40007000

08000bec <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8000bf4:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bfc:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8000bfe:	f000 f861 	bl	8000cc4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c08:	d101      	bne.n	8000c0e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e03e      	b.n	8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c1a:	d101      	bne.n	8000c20 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e035      	b.n	8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000c20:	68ba      	ldr	r2, [r7, #8]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d101      	bne.n	8000c2c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e02f      	b.n	8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000c34:	4917      	ldr	r1, [pc, #92]	; (8000c94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	095b      	lsrs	r3, r3, #5
 8000c42:	4a16      	ldr	r2, [pc, #88]	; (8000c9c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000c44:	fba2 2303 	umull	r2, r3, r2, r3
 8000c48:	09db      	lsrs	r3, r3, #7
 8000c4a:	2232      	movs	r2, #50	; 0x32
 8000c4c:	fb02 f303 	mul.w	r3, r2, r3
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8000c52:	fba2 2303 	umull	r2, r3, r2, r3
 8000c56:	08db      	lsrs	r3, r3, #3
 8000c58:	3301      	adds	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c5c:	e002      	b.n	8000c64 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c70:	d102      	bne.n	8000c78 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f2      	bne.n	8000c5e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c84:	d101      	bne.n	8000c8a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e000      	b.n	8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40007000 	.word	0x40007000
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	0a7c5ac5 	.word	0x0a7c5ac5
 8000ca0:	cccccccd 	.word	0xcccccccd

08000ca4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb2:	6093      	str	r3, [r2, #8]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40007000 	.word	0x40007000

08000cc4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8000cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	e00a      	b.n	8000cf8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d103      	bne.n	8000cf4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8000cec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	e001      	b.n	8000cf8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40007000 	.word	0x40007000

08000d0c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	f000 bcc2 	b.w	80016a4 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d20:	4ba3      	ldr	r3, [pc, #652]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f003 030c 	and.w	r3, r3, #12
 8000d28:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d2a:	4ba1      	ldr	r3, [pc, #644]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0310 	and.w	r3, r3, #16
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 80e9 	beq.w	8000f14 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d006      	beq.n	8000d56 <HAL_RCC_OscConfig+0x4a>
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	2b0c      	cmp	r3, #12
 8000d4c:	f040 8083 	bne.w	8000e56 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d17f      	bne.n	8000e56 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d56:	4b96      	ldr	r3, [pc, #600]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <HAL_RCC_OscConfig+0x64>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	f000 bc9a 	b.w	80016a4 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d74:	4b8e      	ldr	r3, [pc, #568]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d004      	beq.n	8000d8a <HAL_RCC_OscConfig+0x7e>
 8000d80:	4b8b      	ldr	r3, [pc, #556]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d88:	e005      	b.n	8000d96 <HAL_RCC_OscConfig+0x8a>
 8000d8a:	4b89      	ldr	r3, [pc, #548]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d90:	091b      	lsrs	r3, r3, #4
 8000d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d224      	bcs.n	8000de4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 feb8 	bl	8001b14 <RCC_SetFlashLatencyFromMSIRange>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	f000 bc7a 	b.w	80016a4 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000db0:	4b7f      	ldr	r3, [pc, #508]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a7e      	ldr	r2, [pc, #504]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000db6:	f043 0308 	orr.w	r3, r3, #8
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b7c      	ldr	r3, [pc, #496]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc8:	4979      	ldr	r1, [pc, #484]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dce:	4b78      	ldr	r3, [pc, #480]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	4974      	ldr	r1, [pc, #464]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	604b      	str	r3, [r1, #4]
 8000de2:	e026      	b.n	8000e32 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000de4:	4b72      	ldr	r3, [pc, #456]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a71      	ldr	r2, [pc, #452]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000dea:	f043 0308 	orr.w	r3, r3, #8
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b6f      	ldr	r3, [pc, #444]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfc:	496c      	ldr	r1, [pc, #432]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e02:	4b6b      	ldr	r3, [pc, #428]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a1b      	ldr	r3, [r3, #32]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	4967      	ldr	r1, [pc, #412]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d10a      	bne.n	8000e32 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fe77 	bl	8001b14 <RCC_SetFlashLatencyFromMSIRange>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d002      	beq.n	8000e32 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f000 bc39 	b.w	80016a4 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000e32:	f000 fe15 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4a5e      	ldr	r2, [pc, #376]	; (8000fb4 <HAL_RCC_OscConfig+0x2a8>)
 8000e3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e3c:	4b5e      	ldr	r3, [pc, #376]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fb91 	bl	8000568 <HAL_InitTick>
 8000e46:	4603      	mov	r3, r0
 8000e48:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d060      	beq.n	8000f12 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	f000 bc27 	b.w	80016a4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d039      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e5e:	4b54      	ldr	r3, [pc, #336]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a53      	ldr	r2, [pc, #332]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fd95 	bl	8000998 <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e70:	e00f      	b.n	8000e92 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e72:	f7ff fd91 	bl	8000998 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d908      	bls.n	8000e92 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e80:	4b4b      	ldr	r3, [pc, #300]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	f000 bc09 	b.w	80016a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e92:	4b47      	ldr	r3, [pc, #284]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0e9      	beq.n	8000e72 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e9e:	4b44      	ldr	r3, [pc, #272]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a43      	ldr	r2, [pc, #268]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	4b41      	ldr	r3, [pc, #260]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb6:	493e      	ldr	r1, [pc, #248]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ebc:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	4939      	ldr	r1, [pc, #228]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	604b      	str	r3, [r1, #4]
 8000ed0:	e020      	b.n	8000f14 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ed2:	4b37      	ldr	r3, [pc, #220]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a36      	ldr	r2, [pc, #216]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000ed8:	f023 0301 	bic.w	r3, r3, #1
 8000edc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ede:	f7ff fd5b 	bl	8000998 <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ee4:	e00e      	b.n	8000f04 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fd57 	bl	8000998 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d907      	bls.n	8000f04 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e3cf      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1ea      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x1da>
 8000f10:	e000      	b.n	8000f14 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d07e      	beq.n	800101e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d005      	beq.n	8000f32 <HAL_RCC_OscConfig+0x226>
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	2b0c      	cmp	r3, #12
 8000f2a:	d10e      	bne.n	8000f4a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d10b      	bne.n	8000f4a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d06e      	beq.n	800101c <HAL_RCC_OscConfig+0x310>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d16a      	bne.n	800101c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e3ac      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f52:	d106      	bne.n	8000f62 <HAL_RCC_OscConfig+0x256>
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e01d      	b.n	8000f9e <HAL_RCC_OscConfig+0x292>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f6a:	d10c      	bne.n	8000f86 <HAL_RCC_OscConfig+0x27a>
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000f72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	e00b      	b.n	8000f9e <HAL_RCC_OscConfig+0x292>
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_RCC_OscConfig+0x2a4>)
 8000f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d020      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fcf7 	bl	8000998 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fac:	e015      	b.n	8000fda <HAL_RCC_OscConfig+0x2ce>
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fcec 	bl	8000998 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	; 0x64
 8000fc8:	d907      	bls.n	8000fda <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fca:	4b9f      	ldr	r3, [pc, #636]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e364      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fda:	4b9b      	ldr	r3, [pc, #620]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0ea      	beq.n	8000fbc <HAL_RCC_OscConfig+0x2b0>
 8000fe6:	e01a      	b.n	800101e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fcd6 	bl	8000998 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fee:	e00e      	b.n	800100e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fcd2 	bl	8000998 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	; 0x64
 8000ffc:	d907      	bls.n	800100e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ffe:	4b92      	ldr	r3, [pc, #584]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e34a      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800100e:	4b8e      	ldr	r3, [pc, #568]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1ea      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x2e4>
 800101a:	e000      	b.n	800101e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d06c      	beq.n	8001104 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2b04      	cmp	r3, #4
 800102e:	d005      	beq.n	800103c <HAL_RCC_OscConfig+0x330>
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2b0c      	cmp	r3, #12
 8001034:	d119      	bne.n	800106a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d116      	bne.n	800106a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800103c:	4b82      	ldr	r3, [pc, #520]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <HAL_RCC_OscConfig+0x348>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e327      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001054:	4b7c      	ldr	r3, [pc, #496]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	061b      	lsls	r3, r3, #24
 8001062:	4979      	ldr	r1, [pc, #484]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 8001064:	4313      	orrs	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001068:	e04c      	b.n	8001104 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d029      	beq.n	80010c6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001072:	4b75      	ldr	r3, [pc, #468]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a74      	ldr	r2, [pc, #464]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 8001078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107e:	f7ff fc8b 	bl	8000998 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001084:	e00e      	b.n	80010a4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001086:	f7ff fc87 	bl	8000998 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d907      	bls.n	80010a4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001094:	4b6c      	ldr	r3, [pc, #432]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e2ff      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010a4:	4b68      	ldr	r3, [pc, #416]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0ea      	beq.n	8001086 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b0:	4b65      	ldr	r3, [pc, #404]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	061b      	lsls	r3, r3, #24
 80010be:	4962      	ldr	r1, [pc, #392]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	604b      	str	r3, [r1, #4]
 80010c4:	e01e      	b.n	8001104 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c6:	4b60      	ldr	r3, [pc, #384]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a5f      	ldr	r2, [pc, #380]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 80010cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d2:	f7ff fc61 	bl	8000998 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d8:	e00e      	b.n	80010f8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff fc5d 	bl	8000998 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d907      	bls.n	80010f8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010e8:	4b57      	ldr	r3, [pc, #348]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e2d5      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010f8:	4b53      	ldr	r3, [pc, #332]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1ea      	bne.n	80010da <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	2b00      	cmp	r3, #0
 800110e:	d05f      	beq.n	80011d0 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d038      	beq.n	800118a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d108      	bne.n	8001132 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001120:	4b49      	ldr	r3, [pc, #292]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 8001122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001126:	4a48      	ldr	r2, [pc, #288]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 8001128:	f023 0310 	bic.w	r3, r3, #16
 800112c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001130:	e007      	b.n	8001142 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001132:	4b45      	ldr	r3, [pc, #276]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 8001134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001138:	4a43      	ldr	r2, [pc, #268]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 800113a:	f043 0310 	orr.w	r3, r3, #16
 800113e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001142:	4b41      	ldr	r3, [pc, #260]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 8001144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001148:	4a3f      	ldr	r2, [pc, #252]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001152:	f7ff fc21 	bl	8000998 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001158:	e00f      	b.n	800117a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115a:	f7ff fc1d 	bl	8000998 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b07      	cmp	r3, #7
 8001166:	d908      	bls.n	800117a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001168:	4b37      	ldr	r3, [pc, #220]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 800116a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e294      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800117a:	4b33      	ldr	r3, [pc, #204]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 800117c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0e8      	beq.n	800115a <HAL_RCC_OscConfig+0x44e>
 8001188:	e022      	b.n	80011d0 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800118a:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 800118c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001190:	4a2d      	ldr	r2, [pc, #180]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 8001192:	f023 0301 	bic.w	r3, r3, #1
 8001196:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119a:	f7ff fbfd 	bl	8000998 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011a0:	e00f      	b.n	80011c2 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a2:	f7ff fbf9 	bl	8000998 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b07      	cmp	r3, #7
 80011ae:	d908      	bls.n	80011c2 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 80011b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e270      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 80011c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1e8      	bne.n	80011a2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 8131 	beq.w	8001440 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10d      	bne.n	800120a <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	4a15      	ldr	r2, [pc, #84]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6593      	str	r3, [r2, #88]	; 0x58
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_RCC_OscConfig+0x53c>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001206:	2301      	movs	r3, #1
 8001208:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <HAL_RCC_OscConfig+0x540>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001212:	2b00      	cmp	r3, #0
 8001214:	d122      	bne.n	800125c <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_RCC_OscConfig+0x540>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_RCC_OscConfig+0x540>)
 800121c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001222:	f7ff fbb9 	bl	8000998 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001228:	e012      	b.n	8001250 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122a:	f7ff fbb5 	bl	8000998 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d90b      	bls.n	8001250 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <HAL_RCC_OscConfig+0x540>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001240:	2b00      	cmp	r3, #0
 8001242:	d105      	bne.n	8001250 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e22d      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
 8001248:	40021000 	.word	0x40021000
 800124c:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001250:	4bb8      	ldr	r3, [pc, #736]	; (8001534 <HAL_RCC_OscConfig+0x828>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0e6      	beq.n	800122a <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b00      	cmp	r3, #0
 8001266:	d01f      	beq.n	80012a8 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d010      	beq.n	8001296 <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001274:	4bb0      	ldr	r3, [pc, #704]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 8001276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127a:	4aaf      	ldr	r2, [pc, #700]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001284:	4bac      	ldr	r3, [pc, #688]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 8001286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800128a:	4aab      	ldr	r2, [pc, #684]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001294:	e018      	b.n	80012c8 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001296:	4ba8      	ldr	r3, [pc, #672]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 8001298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129c:	4aa6      	ldr	r2, [pc, #664]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a6:	e00f      	b.n	80012c8 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80012a8:	4ba3      	ldr	r3, [pc, #652]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80012aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ae:	4aa2      	ldr	r2, [pc, #648]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80012b0:	f023 0301 	bic.w	r3, r3, #1
 80012b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80012b8:	4b9f      	ldr	r3, [pc, #636]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80012ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012be:	4a9e      	ldr	r2, [pc, #632]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80012c0:	f023 0304 	bic.w	r3, r3, #4
 80012c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d068      	beq.n	80013a2 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d0:	f7ff fb62 	bl	8000998 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012d6:	e011      	b.n	80012fc <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d8:	f7ff fb5e 	bl	8000998 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d908      	bls.n	80012fc <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ea:	4b93      	ldr	r3, [pc, #588]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80012ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e1d3      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012fc:	4b8e      	ldr	r3, [pc, #568]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80012fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0e6      	beq.n	80012d8 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001312:	2b00      	cmp	r3, #0
 8001314:	d022      	beq.n	800135c <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001316:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 8001318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800131c:	4a86      	ldr	r2, [pc, #536]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 800131e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001326:	e011      	b.n	800134c <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001328:	f7ff fb36 	bl	8000998 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f241 3288 	movw	r2, #5000	; 0x1388
 8001336:	4293      	cmp	r3, r2
 8001338:	d908      	bls.n	800134c <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800133a:	4b7f      	ldr	r3, [pc, #508]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 800133c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e1ab      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800134c:	4b7a      	ldr	r3, [pc, #488]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 800134e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0e6      	beq.n	8001328 <HAL_RCC_OscConfig+0x61c>
 800135a:	e068      	b.n	800142e <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800135c:	4b76      	ldr	r3, [pc, #472]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 800135e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001362:	4a75      	ldr	r2, [pc, #468]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 8001364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800136c:	e011      	b.n	8001392 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136e:	f7ff fb13 	bl	8000998 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f241 3288 	movw	r2, #5000	; 0x1388
 800137c:	4293      	cmp	r3, r2
 800137e:	d908      	bls.n	8001392 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001380:	4b6d      	ldr	r3, [pc, #436]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 8001382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e188      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001392:	4b69      	ldr	r3, [pc, #420]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 8001394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1e6      	bne.n	800136e <HAL_RCC_OscConfig+0x662>
 80013a0:	e045      	b.n	800142e <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a2:	f7ff faf9 	bl	8000998 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013a8:	e011      	b.n	80013ce <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013aa:	f7ff faf5 	bl	8000998 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d908      	bls.n	80013ce <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80013be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e16a      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ce:	4b5a      	ldr	r3, [pc, #360]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80013d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1e6      	bne.n	80013aa <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80013dc:	4b56      	ldr	r3, [pc, #344]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80013de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d021      	beq.n	800142e <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80013ea:	4b53      	ldr	r3, [pc, #332]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80013ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f0:	4a51      	ldr	r2, [pc, #324]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80013f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80013fa:	e011      	b.n	8001420 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fc:	f7ff facc 	bl	8000998 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f241 3288 	movw	r2, #5000	; 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	d908      	bls.n	8001420 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800140e:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 8001410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e141      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001420:	4b45      	ldr	r3, [pc, #276]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 8001422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1e6      	bne.n	80013fc <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800142e:	7ffb      	ldrb	r3, [r7, #31]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d105      	bne.n	8001440 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001434:	4b40      	ldr	r3, [pc, #256]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	4a3f      	ldr	r2, [pc, #252]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 800143a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800143e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0320 	and.w	r3, r3, #32
 8001448:	2b00      	cmp	r3, #0
 800144a:	d04a      	beq.n	80014e2 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001450:	2b00      	cmp	r3, #0
 8001452:	d023      	beq.n	800149c <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001454:	4b38      	ldr	r3, [pc, #224]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 8001456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800145a:	4a37      	ldr	r2, [pc, #220]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff fa98 	bl	8000998 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800146a:	e00f      	b.n	800148c <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800146c:	f7ff fa94 	bl	8000998 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d908      	bls.n	800148c <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800147a:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 800147c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e10b      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 800148e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0e8      	beq.n	800146c <HAL_RCC_OscConfig+0x760>
 800149a:	e022      	b.n	80014e2 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800149c:	4b26      	ldr	r3, [pc, #152]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 800149e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014a2:	4a25      	ldr	r2, [pc, #148]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ac:	f7ff fa74 	bl	8000998 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014b2:	e00f      	b.n	80014d4 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014b4:	f7ff fa70 	bl	8000998 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d908      	bls.n	80014d4 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80014c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e0e7      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80014d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1e8      	bne.n	80014b4 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 80db 	beq.w	80016a2 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	2b0c      	cmp	r3, #12
 80014f6:	f000 8095 	beq.w	8001624 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d16a      	bne.n	80015d8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 8001508:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800150c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff fa43 	bl	8000998 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001514:	e012      	b.n	800153c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff fa3f 	bl	8000998 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d90b      	bls.n	800153c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <HAL_RCC_OscConfig+0x82c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e0b7      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
 8001534:	40007000 	.word	0x40007000
 8001538:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800153c:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1e6      	bne.n	8001516 <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001548:	4b58      	ldr	r3, [pc, #352]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <HAL_RCC_OscConfig+0x9a4>)
 800154e:	4013      	ands	r3, r2
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001558:	3a01      	subs	r2, #1
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	4311      	orrs	r1, r2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001562:	0212      	lsls	r2, r2, #8
 8001564:	4311      	orrs	r1, r2
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800156a:	0852      	lsrs	r2, r2, #1
 800156c:	3a01      	subs	r2, #1
 800156e:	0552      	lsls	r2, r2, #21
 8001570:	4311      	orrs	r1, r2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001576:	0852      	lsrs	r2, r2, #1
 8001578:	3a01      	subs	r2, #1
 800157a:	0652      	lsls	r2, r2, #25
 800157c:	4311      	orrs	r1, r2
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001582:	06d2      	lsls	r2, r2, #27
 8001584:	430a      	orrs	r2, r1
 8001586:	4949      	ldr	r1, [pc, #292]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 8001588:	4313      	orrs	r3, r2
 800158a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800158c:	4b47      	ldr	r3, [pc, #284]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a46      	ldr	r2, [pc, #280]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 8001592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001596:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001598:	4b44      	ldr	r3, [pc, #272]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4a43      	ldr	r2, [pc, #268]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 800159e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff f9f8 	bl	8000998 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015aa:	e00e      	b.n	80015ca <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ac:	f7ff f9f4 	bl	8000998 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d907      	bls.n	80015ca <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ba:	4b3c      	ldr	r3, [pc, #240]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e06c      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0ea      	beq.n	80015ac <HAL_RCC_OscConfig+0x8a0>
 80015d6:	e064      	b.n	80016a2 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d8:	4b34      	ldr	r3, [pc, #208]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a33      	ldr	r2, [pc, #204]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 80015de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff f9d8 	bl	8000998 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ea:	e00e      	b.n	800160a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ec:	f7ff f9d4 	bl	8000998 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d907      	bls.n	800160a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015fa:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e04c      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800160a:	4b28      	ldr	r3, [pc, #160]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1ea      	bne.n	80015ec <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001616:	4b25      	ldr	r3, [pc, #148]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	4924      	ldr	r1, [pc, #144]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <HAL_RCC_OscConfig+0x9a8>)
 800161e:	4013      	ands	r3, r2
 8001620:	60cb      	str	r3, [r1, #12]
 8001622:	e03e      	b.n	80016a2 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e039      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_RCC_OscConfig+0x9a0>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f003 0203 	and.w	r2, r3, #3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	429a      	cmp	r2, r3
 8001642:	d12c      	bne.n	800169e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164e:	3b01      	subs	r3, #1
 8001650:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d123      	bne.n	800169e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001660:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001662:	429a      	cmp	r2, r3
 8001664:	d11b      	bne.n	800169e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001670:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d113      	bne.n	800169e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	3b01      	subs	r3, #1
 8001684:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d109      	bne.n	800169e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	085b      	lsrs	r3, r3, #1
 8001696:	3b01      	subs	r3, #1
 8001698:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800169a:	429a      	cmp	r2, r3
 800169c:	d001      	beq.n	80016a2 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	019f800c 	.word	0x019f800c
 80016b4:	feeefffc 	.word	0xfeeefffc

080016b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e11c      	b.n	800190a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016d0:	4b90      	ldr	r3, [pc, #576]	; (8001914 <HAL_RCC_ClockConfig+0x25c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d910      	bls.n	8001700 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b8d      	ldr	r3, [pc, #564]	; (8001914 <HAL_RCC_ClockConfig+0x25c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 020f 	bic.w	r2, r3, #15
 80016e6:	498b      	ldr	r1, [pc, #556]	; (8001914 <HAL_RCC_ClockConfig+0x25c>)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b89      	ldr	r3, [pc, #548]	; (8001914 <HAL_RCC_ClockConfig+0x25c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e104      	b.n	800190a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d010      	beq.n	800172e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	4b81      	ldr	r3, [pc, #516]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001718:	429a      	cmp	r2, r3
 800171a:	d908      	bls.n	800172e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800171c:	4b7e      	ldr	r3, [pc, #504]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	497b      	ldr	r1, [pc, #492]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8085 	beq.w	8001846 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d11f      	bne.n	8001784 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001744:	4b74      	ldr	r3, [pc, #464]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0da      	b.n	800190a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001754:	f000 fa42 	bl	8001bdc <RCC_GetSysClockFreqFromPLLSource>
 8001758:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4a6f      	ldr	r2, [pc, #444]	; (800191c <HAL_RCC_ClockConfig+0x264>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d947      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001762:	4b6d      	ldr	r3, [pc, #436]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d141      	bne.n	80017f2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800176e:	4b6a      	ldr	r3, [pc, #424]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001776:	4a68      	ldr	r2, [pc, #416]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e036      	b.n	80017f2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d107      	bne.n	800179c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178c:	4b62      	ldr	r3, [pc, #392]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d115      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0b6      	b.n	800190a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017a4:	4b5c      	ldr	r3, [pc, #368]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d109      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0aa      	b.n	800190a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b4:	4b58      	ldr	r3, [pc, #352]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0a2      	b.n	800190a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80017c4:	f000 f8b0 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4a53      	ldr	r2, [pc, #332]	; (800191c <HAL_RCC_ClockConfig+0x264>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d90f      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80017d2:	4b51      	ldr	r3, [pc, #324]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017de:	4b4e      	ldr	r3, [pc, #312]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017e6:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 80017e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017f2:	4b49      	ldr	r3, [pc, #292]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f023 0203 	bic.w	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4946      	ldr	r1, [pc, #280]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001804:	f7ff f8c8 	bl	8000998 <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	e013      	b.n	8001834 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7ff f8c4 	bl	8000998 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d90a      	bls.n	8001834 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e06a      	b.n	800190a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001834:	4b38      	ldr	r3, [pc, #224]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 020c 	and.w	r2, r3, #12
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	429a      	cmp	r2, r3
 8001844:	d1e2      	bne.n	800180c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2b80      	cmp	r3, #128	; 0x80
 800184a:	d105      	bne.n	8001858 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800184c:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a31      	ldr	r2, [pc, #196]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001856:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d010      	beq.n	8001886 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001870:	429a      	cmp	r2, r3
 8001872:	d208      	bcs.n	8001886 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4925      	ldr	r1, [pc, #148]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001886:	4b23      	ldr	r3, [pc, #140]	; (8001914 <HAL_RCC_ClockConfig+0x25c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d210      	bcs.n	80018b6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <HAL_RCC_ClockConfig+0x25c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 020f 	bic.w	r2, r3, #15
 800189c:	491d      	ldr	r1, [pc, #116]	; (8001914 <HAL_RCC_ClockConfig+0x25c>)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_RCC_ClockConfig+0x25c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d001      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e029      	b.n	800190a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d008      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	4912      	ldr	r1, [pc, #72]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d009      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	490a      	ldr	r1, [pc, #40]	; (8001918 <HAL_RCC_ClockConfig+0x260>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80018f4:	f000 f8b4 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x268>)
 80018fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_ClockConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe30 	bl	8000568 <HAL_InitTick>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40022000 	.word	0x40022000
 8001918:	40021000 	.word	0x40021000
 800191c:	04c4b400 	.word	0x04c4b400
 8001920:	20000000 	.word	0x20000000
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001940:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x34>
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	2b0c      	cmp	r3, #12
 8001954:	d121      	bne.n	800199a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d11e      	bne.n	800199a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800195c:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x12c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d107      	bne.n	8001978 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001968:	4b3a      	ldr	r3, [pc, #232]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x12c>)
 800196a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196e:	0a1b      	lsrs	r3, r3, #8
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	e005      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001978:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x12c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001984:	4a34      	ldr	r2, [pc, #208]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x130>)
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10d      	bne.n	80019b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	2b04      	cmp	r3, #4
 800199e:	d102      	bne.n	80019a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019a0:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x134>)
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	e004      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x134>)
 80019ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	d146      	bne.n	8001a44 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019b6:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x12c>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x12c>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3301      	adds	r3, #1
 80019cc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d003      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0xb4>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d00d      	beq.n	80019f6 <HAL_RCC_GetSysClockFreq+0xce>
 80019da:	e019      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019dc:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x134>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e4:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x12c>)
 80019e6:	68d2      	ldr	r2, [r2, #12]
 80019e8:	0a12      	lsrs	r2, r2, #8
 80019ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
        break;
 80019f4:	e019      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019f6:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x134>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001a00:	68d2      	ldr	r2, [r2, #12]
 8001a02:	0a12      	lsrs	r2, r2, #8
 8001a04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a08:	fb02 f303 	mul.w	r3, r2, r3
 8001a0c:	617b      	str	r3, [r7, #20]
        break;
 8001a0e:	e00c      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001a1a:	68d2      	ldr	r2, [r2, #12]
 8001a1c:	0a12      	lsrs	r2, r2, #8
 8001a1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	617b      	str	r3, [r7, #20]
        break;
 8001a28:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	0e5b      	lsrs	r3, r3, #25
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	3301      	adds	r3, #1
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a44:	69bb      	ldr	r3, [r7, #24]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	08005cc8 	.word	0x08005cc8
 8001a5c:	00f42400 	.word	0x00f42400

08001a60 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8001a64:	f7ff ff60 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetHCLKFreq+0x20>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	4903      	ldr	r1, [pc, #12]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x24>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	08005cb0 	.word	0x08005cb0

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a8c:	f7ff ffe8 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	08005cc0 	.word	0x08005cc0

08001ab0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	220f      	movs	r2, #15
 8001abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 0203 	and.w	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	08db      	lsrs	r3, r3, #3
 8001aea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <HAL_RCC_GetClockConfig+0x60>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 020f 	and.w	r2, r3, #15
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	601a      	str	r2, [r3, #0]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40022000 	.word	0x40022000

08001b14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b2c:	f7ff f850 	bl	8000bd0 <HAL_PWREx_GetVoltageRange>
 8001b30:	6138      	str	r0, [r7, #16]
 8001b32:	e014      	b.n	8001b5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b34:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	4a26      	ldr	r2, [pc, #152]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b4c:	f7ff f840 	bl	8000bd0 <HAL_PWREx_GetVoltageRange>
 8001b50:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	4a1f      	ldr	r2, [pc, #124]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b6a:	d10b      	bne.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b80      	cmp	r3, #128	; 0x80
 8001b70:	d919      	bls.n	8001ba6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2ba0      	cmp	r3, #160	; 0xa0
 8001b76:	d902      	bls.n	8001b7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b78:	2302      	movs	r3, #2
 8001b7a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001b7c:	e013      	b.n	8001ba6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b7e:	2301      	movs	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001b82:	e010      	b.n	8001ba6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b80      	cmp	r3, #128	; 0x80
 8001b88:	d902      	bls.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	e00a      	b.n	8001ba6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b80      	cmp	r3, #128	; 0x80
 8001b94:	d102      	bne.n	8001b9c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b96:	2302      	movs	r3, #2
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e004      	b.n	8001ba6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b70      	cmp	r3, #112	; 0x70
 8001ba0:	d101      	bne.n	8001ba6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 020f 	bic.w	r2, r3, #15
 8001bae:	490a      	ldr	r1, [pc, #40]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40022000 	.word	0x40022000

08001bdc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001be2:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bec:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d015      	beq.n	8001c2c <RCC_GetSysClockFreqFromPLLSource+0x50>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d839      	bhi.n	8001c7a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d01c      	beq.n	8001c46 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d133      	bne.n	8001c7a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c12:	4a26      	ldr	r2, [pc, #152]	; (8001cac <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4a23      	ldr	r2, [pc, #140]	; (8001ca8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001c1c:	68d2      	ldr	r2, [r2, #12]
 8001c1e:	0a12      	lsrs	r2, r2, #8
 8001c20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c24:	fb02 f303 	mul.w	r3, r2, r3
 8001c28:	613b      	str	r3, [r7, #16]
      break;
 8001c2a:	e029      	b.n	8001c80 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c2c:	4a1f      	ldr	r2, [pc, #124]	; (8001cac <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c34:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001c36:	68d2      	ldr	r2, [r2, #12]
 8001c38:	0a12      	lsrs	r2, r2, #8
 8001c3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	613b      	str	r3, [r7, #16]
      break;
 8001c44:	e01c      	b.n	8001c80 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d107      	bne.n	8001c62 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e005      	b.n	8001c6e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	091b      	lsrs	r3, r3, #4
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8001c6e:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	613b      	str	r3, [r7, #16]
        break;
 8001c78:	e002      	b.n	8001c80 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
      break;
 8001c7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0e5b      	lsrs	r3, r3, #25
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001c9a:	683b      	ldr	r3, [r7, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	00f42400 	.word	0x00f42400
 8001cb0:	08005cc8 	.word	0x08005cc8

08001cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e049      	b.n	8001d5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f841 	bl	8001d62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	f000 f9f8 	bl	80020e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d001      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e04f      	b.n	8001e30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <HAL_TIM_Base_Start_IT+0xc4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01d      	beq.n	8001dee <HAL_TIM_Base_Start_IT+0x76>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dba:	d018      	beq.n	8001dee <HAL_TIM_Base_Start_IT+0x76>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_TIM_Base_Start_IT+0x76>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d00e      	beq.n	8001dee <HAL_TIM_Base_Start_IT+0x76>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d009      	beq.n	8001dee <HAL_TIM_Base_Start_IT+0x76>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <HAL_TIM_Base_Start_IT+0xd4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d004      	beq.n	8001dee <HAL_TIM_Base_Start_IT+0x76>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d115      	bne.n	8001e1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_TIM_Base_Start_IT+0xdc>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b06      	cmp	r3, #6
 8001dfe:	d015      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0xb4>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e06:	d011      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e18:	e008      	b.n	8001e2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e000      	b.n	8001e2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	40012c00 	.word	0x40012c00
 8001e40:	40000400 	.word	0x40000400
 8001e44:	40000800 	.word	0x40000800
 8001e48:	40000c00 	.word	0x40000c00
 8001e4c:	40013400 	.word	0x40013400
 8001e50:	40014000 	.word	0x40014000
 8001e54:	00010007 	.word	0x00010007

08001e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d122      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d11b      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0202 	mvn.w	r2, #2
 8001e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f905 	bl	80020aa <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8f7 	bl	8002096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f908 	bl	80020be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d122      	bne.n	8001f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d11b      	bne.n	8001f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0204 	mvn.w	r2, #4
 8001ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f8db 	bl	80020aa <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e005      	b.n	8001f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8cd 	bl	8002096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f8de 	bl	80020be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d122      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d11b      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0208 	mvn.w	r2, #8
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2204      	movs	r2, #4
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8b1 	bl	80020aa <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8a3 	bl	8002096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8b4 	bl	80020be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d122      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b10      	cmp	r3, #16
 8001f76:	d11b      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0210 	mvn.w	r2, #16
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2208      	movs	r2, #8
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f887 	bl	80020aa <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f879 	bl	8002096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f88a 	bl	80020be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d10e      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d107      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0201 	mvn.w	r2, #1
 8001fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe fa86 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe6:	2b80      	cmp	r3, #128	; 0x80
 8001fe8:	d10e      	bne.n	8002008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff4:	2b80      	cmp	r3, #128	; 0x80
 8001ff6:	d107      	bne.n	8002008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f914 	bl	8002230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002016:	d10e      	bne.n	8002036 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002022:	2b80      	cmp	r3, #128	; 0x80
 8002024:	d107      	bne.n	8002036 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800202e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f907 	bl	8002244 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002040:	2b40      	cmp	r3, #64	; 0x40
 8002042:	d10e      	bne.n	8002062 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b40      	cmp	r3, #64	; 0x40
 8002050:	d107      	bne.n	8002062 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800205a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f838 	bl	80020d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b20      	cmp	r3, #32
 800206e:	d10e      	bne.n	800208e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b20      	cmp	r3, #32
 800207c:	d107      	bne.n	800208e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f06f 0220 	mvn.w	r2, #32
 8002086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f8c7 	bl	800221c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a40      	ldr	r2, [pc, #256]	; (80021fc <TIM_Base_SetConfig+0x114>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d013      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002106:	d00f      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a3d      	ldr	r2, [pc, #244]	; (8002200 <TIM_Base_SetConfig+0x118>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00b      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a3c      	ldr	r2, [pc, #240]	; (8002204 <TIM_Base_SetConfig+0x11c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d007      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a3b      	ldr	r2, [pc, #236]	; (8002208 <TIM_Base_SetConfig+0x120>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d003      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a3a      	ldr	r2, [pc, #232]	; (800220c <TIM_Base_SetConfig+0x124>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d108      	bne.n	800213a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a2f      	ldr	r2, [pc, #188]	; (80021fc <TIM_Base_SetConfig+0x114>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d01f      	beq.n	8002182 <TIM_Base_SetConfig+0x9a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002148:	d01b      	beq.n	8002182 <TIM_Base_SetConfig+0x9a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a2c      	ldr	r2, [pc, #176]	; (8002200 <TIM_Base_SetConfig+0x118>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d017      	beq.n	8002182 <TIM_Base_SetConfig+0x9a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2b      	ldr	r2, [pc, #172]	; (8002204 <TIM_Base_SetConfig+0x11c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <TIM_Base_SetConfig+0x9a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a2a      	ldr	r2, [pc, #168]	; (8002208 <TIM_Base_SetConfig+0x120>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00f      	beq.n	8002182 <TIM_Base_SetConfig+0x9a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a29      	ldr	r2, [pc, #164]	; (800220c <TIM_Base_SetConfig+0x124>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00b      	beq.n	8002182 <TIM_Base_SetConfig+0x9a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a28      	ldr	r2, [pc, #160]	; (8002210 <TIM_Base_SetConfig+0x128>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <TIM_Base_SetConfig+0x9a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a27      	ldr	r2, [pc, #156]	; (8002214 <TIM_Base_SetConfig+0x12c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d003      	beq.n	8002182 <TIM_Base_SetConfig+0x9a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a26      	ldr	r2, [pc, #152]	; (8002218 <TIM_Base_SetConfig+0x130>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d108      	bne.n	8002194 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a10      	ldr	r2, [pc, #64]	; (80021fc <TIM_Base_SetConfig+0x114>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00f      	beq.n	80021e0 <TIM_Base_SetConfig+0xf8>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a12      	ldr	r2, [pc, #72]	; (800220c <TIM_Base_SetConfig+0x124>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00b      	beq.n	80021e0 <TIM_Base_SetConfig+0xf8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a11      	ldr	r2, [pc, #68]	; (8002210 <TIM_Base_SetConfig+0x128>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d007      	beq.n	80021e0 <TIM_Base_SetConfig+0xf8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a10      	ldr	r2, [pc, #64]	; (8002214 <TIM_Base_SetConfig+0x12c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d003      	beq.n	80021e0 <TIM_Base_SetConfig+0xf8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a0f      	ldr	r2, [pc, #60]	; (8002218 <TIM_Base_SetConfig+0x130>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d103      	bne.n	80021e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	615a      	str	r2, [r3, #20]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40012c00 	.word	0x40012c00
 8002200:	40000400 	.word	0x40000400
 8002204:	40000800 	.word	0x40000800
 8002208:	40000c00 	.word	0x40000c00
 800220c:	40013400 	.word	0x40013400
 8002210:	40014000 	.word	0x40014000
 8002214:	40014400 	.word	0x40014400
 8002218:	40014800 	.word	0x40014800

0800221c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <SysTick_Handler+0x1c>)
 800225e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002260:	f001 fed4 	bl	800400c <xTaskGetSchedulerState>
 8002264:	4603      	mov	r3, r0
 8002266:	2b01      	cmp	r3, #1
 8002268:	d001      	beq.n	800226e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800226a:	f000 fb67 	bl	800293c <xPortSysTickHandler>
  }
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	e000e010 	.word	0xe000e010

08002278 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800227e:	f3ef 8305 	mrs	r3, IPSR
 8002282:	603b      	str	r3, [r7, #0]
  return(result);
 8002284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800228a:	f06f 0305 	mvn.w	r3, #5
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	e00c      	b.n	80022ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <osKernelInitialize+0x44>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <osKernelInitialize+0x44>)
 800229c:	2201      	movs	r2, #1
 800229e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	e002      	b.n	80022ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000098 	.word	0x20000098

080022c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4a07      	ldr	r2, [pc, #28]	; (80022ec <vApplicationGetIdleTaskMemory+0x2c>)
 80022d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4a06      	ldr	r2, [pc, #24]	; (80022f0 <vApplicationGetIdleTaskMemory+0x30>)
 80022d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022de:	601a      	str	r2, [r3, #0]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	2000009c 	.word	0x2000009c
 80022f0:	200000f8 	.word	0x200000f8

080022f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a07      	ldr	r2, [pc, #28]	; (8002320 <vApplicationGetTimerTaskMemory+0x2c>)
 8002304:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	4a06      	ldr	r2, [pc, #24]	; (8002324 <vApplicationGetTimerTaskMemory+0x30>)
 800230a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002312:	601a      	str	r2, [r3, #0]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	200008f8 	.word	0x200008f8
 8002324:	20000954 	.word	0x20000954

08002328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8002334:	f001 fae2 	bl	80038fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002338:	4b4f      	ldr	r3, [pc, #316]	; (8002478 <pvPortMalloc+0x150>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002340:	f000 f8f8 	bl	8002534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002344:	4b4d      	ldr	r3, [pc, #308]	; (800247c <pvPortMalloc+0x154>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 8083 	bne.w	8002458 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d015      	beq.n	8002384 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8002358:	2208      	movs	r2, #8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00c      	beq.n	8002384 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f023 0307 	bic.w	r3, r3, #7
 8002370:	3308      	adds	r3, #8
 8002372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <pvPortMalloc+0x5c>
 800237e:	f000 fbeb 	bl	8002b58 <ulSetInterruptMask>
 8002382:	e7fe      	b.n	8002382 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d066      	beq.n	8002458 <pvPortMalloc+0x130>
 800238a:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <pvPortMalloc+0x158>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	d861      	bhi.n	8002458 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002394:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <pvPortMalloc+0x15c>)
 8002396:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8002398:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <pvPortMalloc+0x15c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800239e:	e004      	b.n	80023aa <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d903      	bls.n	80023bc <pvPortMalloc+0x94>
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f1      	bne.n	80023a0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80023bc:	4b2e      	ldr	r3, [pc, #184]	; (8002478 <pvPortMalloc+0x150>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d048      	beq.n	8002458 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2208      	movs	r2, #8
 80023cc:	4413      	add	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	2308      	movs	r3, #8
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d917      	bls.n	8002418 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <pvPortMalloc+0xd8>
 80023fa:	f000 fbad 	bl	8002b58 <ulSetInterruptMask>
 80023fe:	e7fe      	b.n	80023fe <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	1ad2      	subs	r2, r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002412:	68b8      	ldr	r0, [r7, #8]
 8002414:	f000 f8f0 	bl	80025f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <pvPortMalloc+0x158>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	4a17      	ldr	r2, [pc, #92]	; (8002480 <pvPortMalloc+0x158>)
 8002424:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002426:	4b16      	ldr	r3, [pc, #88]	; (8002480 <pvPortMalloc+0x158>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b17      	ldr	r3, [pc, #92]	; (8002488 <pvPortMalloc+0x160>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d203      	bcs.n	800243a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <pvPortMalloc+0x158>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a14      	ldr	r2, [pc, #80]	; (8002488 <pvPortMalloc+0x160>)
 8002438:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	4b0f      	ldr	r3, [pc, #60]	; (800247c <pvPortMalloc+0x154>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	431a      	orrs	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <pvPortMalloc+0x164>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3301      	adds	r3, #1
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <pvPortMalloc+0x164>)
 8002456:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002458:	f001 fa5e 	bl	8003918 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <pvPortMalloc+0x144>
 8002466:	f000 fb77 	bl	8002b58 <ulSetInterruptMask>
 800246a:	e7fe      	b.n	800246a <pvPortMalloc+0x142>
	return pvReturn;
 800246c:	68fb      	ldr	r3, [r7, #12]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20003914 	.word	0x20003914
 800247c:	20003928 	.word	0x20003928
 8002480:	20003918 	.word	0x20003918
 8002484:	2000390c 	.word	0x2000390c
 8002488:	2000391c 	.word	0x2000391c
 800248c:	20003920 	.word	0x20003920

08002490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d03d      	beq.n	800251e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80024a2:	2308      	movs	r3, #8
 80024a4:	425b      	negs	r3, r3
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4413      	add	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <vPortFree+0x98>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <vPortFree+0x34>
 80024be:	f000 fb4b 	bl	8002b58 <ulSetInterruptMask>
 80024c2:	e7fe      	b.n	80024c2 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <vPortFree+0x42>
 80024cc:	f000 fb44 	bl	8002b58 <ulSetInterruptMask>
 80024d0:	e7fe      	b.n	80024d0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <vPortFree+0x98>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01e      	beq.n	800251e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d11a      	bne.n	800251e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <vPortFree+0x98>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	401a      	ands	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80024f8:	f001 fa00 	bl	80038fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <vPortFree+0x9c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4413      	add	r3, r2
 8002506:	4a09      	ldr	r2, [pc, #36]	; (800252c <vPortFree+0x9c>)
 8002508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800250a:	68b8      	ldr	r0, [r7, #8]
 800250c:	f000 f874 	bl	80025f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <vPortFree+0xa0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	4a06      	ldr	r2, [pc, #24]	; (8002530 <vPortFree+0xa0>)
 8002518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800251a:	f001 f9fd 	bl	8003918 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20003928 	.word	0x20003928
 800252c:	20003918 	.word	0x20003918
 8002530:	20003924 	.word	0x20003924

08002534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800253a:	f641 73b8 	movw	r3, #8120	; 0x1fb8
 800253e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002540:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <prvHeapInit+0xac>)
 8002542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00c      	beq.n	8002568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3307      	adds	r3, #7
 8002552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f023 0307 	bic.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	4a1f      	ldr	r2, [pc, #124]	; (80025e0 <prvHeapInit+0xac>)
 8002564:	4413      	add	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800256c:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <prvHeapInit+0xb0>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <prvHeapInit+0xb0>)
 8002574:	2200      	movs	r2, #0
 8002576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	4413      	add	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002580:	2208      	movs	r2, #8
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0307 	bic.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <prvHeapInit+0xb4>)
 8002594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002596:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <prvHeapInit+0xb4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2200      	movs	r2, #0
 800259c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <prvHeapInit+0xb4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	1ad2      	subs	r2, r2, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <prvHeapInit+0xb4>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <prvHeapInit+0xb8>)
 80025c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <prvHeapInit+0xbc>)
 80025ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <prvHeapInit+0xc0>)
 80025ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025d2:	601a      	str	r2, [r3, #0]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	20001954 	.word	0x20001954
 80025e4:	2000390c 	.word	0x2000390c
 80025e8:	20003914 	.word	0x20003914
 80025ec:	2000391c 	.word	0x2000391c
 80025f0:	20003918 	.word	0x20003918
 80025f4:	20003928 	.word	0x20003928

080025f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002600:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <prvInsertBlockIntoFreeList+0xac>)
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	e002      	b.n	800260c <prvInsertBlockIntoFreeList+0x14>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	d8f7      	bhi.n	8002606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	4413      	add	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	429a      	cmp	r2, r3
 8002626:	d108      	bne.n	800263a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	441a      	add	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	441a      	add	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d118      	bne.n	8002680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <prvInsertBlockIntoFreeList+0xb0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d00d      	beq.n	8002676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	441a      	add	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e008      	b.n	8002688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <prvInsertBlockIntoFreeList+0xb0>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e003      	b.n	8002688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	d002      	beq.n	8002696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	2000390c 	.word	0x2000390c
 80026a8:	20003914 	.word	0x20003914

080026ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f103 0208 	add.w	r2, r3, #8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f04f 32ff 	mov.w	r2, #4294967295
 80026c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f103 0208 	add.w	r2, r3, #8
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f103 0208 	add.w	r2, r3, #8
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	601a      	str	r2, [r3, #0]
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d103      	bne.n	800276e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	e00c      	b.n	8002788 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3308      	adds	r3, #8
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e002      	b.n	800277c <vListInsert+0x2e>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	429a      	cmp	r2, r3
 8002786:	d2f6      	bcs.n	8002776 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	601a      	str	r2, [r3, #0]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6892      	ldr	r2, [r2, #8]
 80027d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6852      	ldr	r2, [r2, #4]
 80027e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d103      	bne.n	80027f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	1e5a      	subs	r2, r3, #1
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <vPortSetupTimerInterrupt+0x34>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <vPortSetupTimerInterrupt+0x38>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <vPortSetupTimerInterrupt+0x3c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <vPortSetupTimerInterrupt+0x40>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	4a09      	ldr	r2, [pc, #36]	; (8002858 <vPortSetupTimerInterrupt+0x44>)
 8002832:	3b01      	subs	r3, #1
 8002834:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8002836:	4b04      	ldr	r3, [pc, #16]	; (8002848 <vPortSetupTimerInterrupt+0x34>)
 8002838:	2207      	movs	r2, #7
 800283a:	601a      	str	r2, [r3, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000e010 	.word	0xe000e010
 800284c:	e000e018 	.word	0xe000e018
 8002850:	20000000 	.word	0x20000000
 8002854:	10624dd3 	.word	0x10624dd3
 8002858:	e000e014 	.word	0xe000e014

0800285c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <prvTaskExitError+0x30>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286e:	d002      	beq.n	8002876 <prvTaskExitError+0x1a>
 8002870:	f000 f972 	bl	8002b58 <ulSetInterruptMask>
 8002874:	e7fe      	b.n	8002874 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 8002876:	f000 f96f 	bl	8002b58 <ulSetInterruptMask>

	while( ulDummy == 0 )
 800287a:	bf00      	nop
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0fc      	beq.n	800287c <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	2000000c 	.word	0x2000000c

08002890 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if( configENABLE_FPU == 1 )
	static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
	{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
		#endif /* configENABLE_TRUSTZONE */

		/* CP10 = 11 ==> Full access to FPU i.e. both privileged and
		 * unprivileged code should be able to access FPU. CP11 should be
		 * programmed to the same value as CP10. */
		*( portCPACR ) |=	(	( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <prvSetupFPU+0x28>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <prvSetupFPU+0x28>)
 800289a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800289e:	6013      	str	r3, [r2, #0]
							);

		/* ASPEN = 1 ==> Hardware should automatically preserve floating point
		 * context on exception entry and restore on exception return.
		 * LSPEN = 1 ==> Enable lazy context save of FP state. */
		*( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <prvSetupFPU+0x2c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a05      	ldr	r2, [pc, #20]	; (80028bc <prvSetupFPU+0x2c>)
 80028a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80028aa:	6013      	str	r3, [r2, #0]
	}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000ed88 	.word	0xe000ed88
 80028bc:	e000ef34 	.word	0xe000ef34

080028c0 <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <vPortYield+0x20>)
 80028c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80028cc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80028d0:	f3bf 8f6f 	isb	sy
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000ed04 	.word	0xe000ed04

080028e4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80028e8:	f000 f936 	bl	8002b58 <ulSetInterruptMask>
	ulCriticalNesting++;
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <vPortEnterCritical+0x20>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	4a04      	ldr	r2, [pc, #16]	; (8002904 <vPortEnterCritical+0x20>)
 80028f4:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80028f6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80028fa:	f3bf 8f6f 	isb	sy
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	2000000c 	.word	0x2000000c

08002908 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <vPortExitCritical+0x30>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <vPortExitCritical+0x12>
 8002914:	f000 f920 	bl	8002b58 <ulSetInterruptMask>
 8002918:	e7fe      	b.n	8002918 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800291a:	4b07      	ldr	r3, [pc, #28]	; (8002938 <vPortExitCritical+0x30>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3b01      	subs	r3, #1
 8002920:	4a05      	ldr	r2, [pc, #20]	; (8002938 <vPortExitCritical+0x30>)
 8002922:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <vPortExitCritical+0x30>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 800292c:	2000      	movs	r0, #0
 800292e:	f000 f920 	bl	8002b72 <vClearInterruptMask>
	}
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2000000c 	.word	0x2000000c

0800293c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002942:	f000 f909 	bl	8002b58 <ulSetInterruptMask>
 8002946:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002948:	f001 f884 	bl	8003a54 <xTaskIncrementTick>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <xPortSysTickHandler+0x2c>)
 8002954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002958:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f909 	bl	8002b72 <vClearInterruptMask>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	e000ed04 	.word	0xe000ed04

0800296c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3b02      	subs	r3, #2
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 8002982:	7afb      	ldrb	r3, [r7, #11]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d104      	bne.n	8002992 <vPortSVCHandler_C+0x26>
			#endif /* configENABLE_TRUSTZONE */

			#if( configENABLE_FPU == 1 )
			{
				/* Setup the Floating Point Unit (FPU). */
				prvSetupFPU();
 8002988:	f7ff ff82 	bl	8002890 <prvSetupFPU>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800298c:	f000 f8b8 	bl	8002b00 <vRestoreContextOfFirstTask>
		}
		break;
 8002990:	e002      	b.n	8002998 <vPortSVCHandler_C+0x2c>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8002992:	f000 f8e1 	bl	8002b58 <ulSetInterruptMask>
 8002996:	e7fe      	b.n	8002996 <vPortSVCHandler_C+0x2a>
		}
	}
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3b04      	subs	r3, #4
 80029b2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029ba:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3b04      	subs	r3, #4
 80029c0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3b04      	subs	r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80029ce:	4a38      	ldr	r2, [pc, #224]	; (8002ab0 <pxPortInitialiseStack+0x110>)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3b04      	subs	r3, #4
 80029d8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80029e0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3b04      	subs	r3, #4
 80029e6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80029ee:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3b04      	subs	r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80029fc:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3b04      	subs	r3, #4
 8002a02:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8002a0a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3b04      	subs	r3, #4
 8002a1c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8002a24:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3b04      	subs	r3, #4
 8002a2a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8002a32:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3b04      	subs	r3, #4
 8002a38:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8002a40:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3b04      	subs	r3, #4
 8002a46:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8002a4e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3b04      	subs	r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8002a5c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3b04      	subs	r3, #4
 8002a62:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8002a6a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3b04      	subs	r3, #4
 8002a70:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8002a78:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3b04      	subs	r3, #4
 8002a7e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8002a86:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8002a94:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3b04      	subs	r3, #4
 8002a9a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	0800285d 	.word	0x0800285d

08002ab4 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <xPortStartScheduler+0x38>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <xPortStartScheduler+0x38>)
 8002abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ac2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <xPortStartScheduler+0x38>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a08      	ldr	r2, [pc, #32]	; (8002aec <xPortStartScheduler+0x38>)
 8002aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ace:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 8002ad0:	f7ff fea0 	bl	8002814 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <xPortStartScheduler+0x3c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 8002ada:	f000 f829 	bl	8002b30 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 8002ade:	f001 f86b 	bl	8003bb8 <vTaskSwitchContext>
	prvTaskExitError();
 8002ae2:	f7ff febb 	bl	800285c <prvTaskExitError>

	/* Should not get here. */
	return 0;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	e000ed20 	.word	0xe000ed20
 8002af0:	2000000c 	.word	0x2000000c
	...

08002b00 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002b00:	4a07      	ldr	r2, [pc, #28]	; (8002b20 <pxCurrentTCBConst2>)
 8002b02:	6811      	ldr	r1, [r2, #0]
 8002b04:	6808      	ldr	r0, [r1, #0]
 8002b06:	c806      	ldmia	r0!, {r1, r2}
 8002b08:	f381 880b 	msr	PSPLIM, r1
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	f381 8814 	msr	CONTROL, r1
 8002b12:	3020      	adds	r0, #32
 8002b14:	f380 8809 	msr	PSP, r0
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	4710      	bx	r2
 8002b1e:	bf00      	nop

08002b20 <pxCurrentTCBConst2>:
 8002b20:	2000392c 	.word	0x2000392c
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
	...

08002b30 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002b30:	4807      	ldr	r0, [pc, #28]	; (8002b50 <xVTORConst>)
 8002b32:	6800      	ldr	r0, [r0, #0]
 8002b34:	6800      	ldr	r0, [r0, #0]
 8002b36:	f380 8808 	msr	MSP, r0
 8002b3a:	b662      	cpsie	i
 8002b3c:	b661      	cpsie	f
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	df02      	svc	2
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	f3af 8000 	nop.w

08002b50 <xVTORConst>:
 8002b50:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop

08002b58 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002b58:	f3ef 8011 	mrs	r0, BASEPRI
 8002b5c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 8002b60:	f381 8811 	msr	BASEPRI, r1
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b6e:	bf00      	nop
 8002b70:	4618      	mov	r0, r3

08002b72 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002b72:	f380 8811 	msr	BASEPRI, r0
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 8002b80:	bf00      	nop
	...

08002b90 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002b90:	f3ef 8009 	mrs	r0, PSP
 8002b94:	f01e 0f10 	tst.w	lr, #16
 8002b98:	bf08      	it	eq
 8002b9a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b9e:	f3ef 820b 	mrs	r2, PSPLIM
 8002ba2:	4673      	mov	r3, lr
 8002ba4:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8002ba8:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <pxCurrentTCBConst>)
 8002baa:	6811      	ldr	r1, [r2, #0]
 8002bac:	6008      	str	r0, [r1, #0]
 8002bae:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8002bb2:	f380 8811 	msr	BASEPRI, r0
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f000 fffb 	bl	8003bb8 <vTaskSwitchContext>
 8002bc2:	f04f 0000 	mov.w	r0, #0
 8002bc6:	f380 8811 	msr	BASEPRI, r0
 8002bca:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <pxCurrentTCBConst>)
 8002bcc:	6811      	ldr	r1, [r2, #0]
 8002bce:	6808      	ldr	r0, [r1, #0]
 8002bd0:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8002bd4:	f013 0f10 	tst.w	r3, #16
 8002bd8:	bf08      	it	eq
 8002bda:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002bde:	f382 880b 	msr	PSPLIM, r2
 8002be2:	f380 8809 	msr	PSP, r0
 8002be6:	4718      	bx	r3
 8002be8:	f3af 8000 	nop.w
 8002bec:	f3af 8000 	nop.w

08002bf0 <pxCurrentTCBConst>:
 8002bf0:	2000392c 	.word	0x2000392c
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
	...

08002c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002c00:	f01e 0f04 	tst.w	lr, #4
 8002c04:	bf0c      	ite	eq
 8002c06:	f3ef 8008 	mrseq	r0, MSP
 8002c0a:	f3ef 8009 	mrsne	r0, PSP
 8002c0e:	4904      	ldr	r1, [pc, #16]	; (8002c20 <svchandler_address_const>)
 8002c10:	4708      	bx	r1
 8002c12:	bf00      	nop
 8002c14:	f3af 8000 	nop.w
 8002c18:	f3af 8000 	nop.w
 8002c1c:	f3af 8000 	nop.w

08002c20 <svchandler_address_const>:
 8002c20:	0800296d 	.word	0x0800296d
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop

08002c28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <xQueueGenericReset+0x1a>
 8002c3c:	f7ff ff8c 	bl	8002b58 <ulSetInterruptMask>
 8002c40:	e7fe      	b.n	8002c40 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8002c42:	f7ff fe4f 	bl	80028e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4e:	68f9      	ldr	r1, [r7, #12]
 8002c50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	441a      	add	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	3b01      	subs	r3, #1
 8002c74:	68f9      	ldr	r1, [r7, #12]
 8002c76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	441a      	add	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	22ff      	movs	r2, #255	; 0xff
 8002c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10e      	bne.n	8002cb6 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d014      	beq.n	8002cca <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3310      	adds	r3, #16
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f001 f81b 	bl	8003ce0 <xTaskRemoveFromEventList>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00c      	beq.n	8002cca <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cb0:	f7ff fe06 	bl	80028c0 <vPortYield>
 8002cb4:	e009      	b.n	8002cca <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3310      	adds	r3, #16
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fcf6 	bl	80026ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3324      	adds	r3, #36	; 0x24
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fcf1 	bl	80026ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002cca:	f7ff fe1d 	bl	8002908 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002cce:	2301      	movs	r3, #1
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <xQueueGenericCreateStatic+0x1a>
 8002cec:	f7ff ff34 	bl	8002b58 <ulSetInterruptMask>
 8002cf0:	e7fe      	b.n	8002cf0 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <xQueueGenericCreateStatic+0x26>
 8002cf8:	f7ff ff2e 	bl	8002b58 <ulSetInterruptMask>
 8002cfc:	e7fe      	b.n	8002cfc <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <xQueueGenericCreateStatic+0x32>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <xQueueGenericCreateStatic+0x36>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <xQueueGenericCreateStatic+0x38>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <xQueueGenericCreateStatic+0x42>
 8002d14:	f7ff ff20 	bl	8002b58 <ulSetInterruptMask>
 8002d18:	e7fe      	b.n	8002d18 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <xQueueGenericCreateStatic+0x4e>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <xQueueGenericCreateStatic+0x52>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <xQueueGenericCreateStatic+0x54>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <xQueueGenericCreateStatic+0x5e>
 8002d30:	f7ff ff12 	bl	8002b58 <ulSetInterruptMask>
 8002d34:	e7fe      	b.n	8002d34 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d36:	2350      	movs	r3, #80	; 0x50
 8002d38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b50      	cmp	r3, #80	; 0x50
 8002d3e:	d002      	beq.n	8002d46 <xQueueGenericCreateStatic+0x6e>
 8002d40:	f7ff ff0a 	bl	8002b58 <ulSetInterruptMask>
 8002d44:	e7fe      	b.n	8002d44 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d46:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00d      	beq.n	8002d6e <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d5a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	4613      	mov	r3, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f837 	bl	8002ddc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d6e:	697b      	ldr	r3, [r7, #20]
	}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	; 0x28
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <xQueueGenericCreate+0x1a>
 8002d8c:	f7ff fee4 	bl	8002b58 <ulSetInterruptMask>
 8002d90:	e7fe      	b.n	8002d90 <xQueueGenericCreate+0x18>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	3350      	adds	r3, #80	; 0x50
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fac1 	bl	8002328 <pvPortMalloc>
 8002da6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d011      	beq.n	8002dd2 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	3350      	adds	r3, #80	; 0x50
 8002db6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002dc0:	79fa      	ldrb	r2, [r7, #7]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f805 	bl	8002ddc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002dd2:	69bb      	ldr	r3, [r7, #24]
	}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3720      	adds	r7, #32
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d103      	bne.n	8002df8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e002      	b.n	8002dfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	69b8      	ldr	r0, [r7, #24]
 8002e0e:	f7ff ff0b 	bl	8002c28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b08a      	sub	sp, #40	; 0x28
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <xQueueGenericSend+0x22>
 8002e3e:	f7ff fe8b 	bl	8002b58 <ulSetInterruptMask>
 8002e42:	e7fe      	b.n	8002e42 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d103      	bne.n	8002e52 <xQueueGenericSend+0x30>
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <xQueueGenericSend+0x34>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <xQueueGenericSend+0x36>
 8002e56:	2300      	movs	r3, #0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <xQueueGenericSend+0x40>
 8002e5c:	f7ff fe7c 	bl	8002b58 <ulSetInterruptMask>
 8002e60:	e7fe      	b.n	8002e60 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d103      	bne.n	8002e70 <xQueueGenericSend+0x4e>
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <xQueueGenericSend+0x52>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <xQueueGenericSend+0x54>
 8002e74:	2300      	movs	r3, #0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <xQueueGenericSend+0x5e>
 8002e7a:	f7ff fe6d 	bl	8002b58 <ulSetInterruptMask>
 8002e7e:	e7fe      	b.n	8002e7e <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e80:	f001 f8c4 	bl	800400c <xTaskGetSchedulerState>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <xQueueGenericSend+0x6e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <xQueueGenericSend+0x72>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <xQueueGenericSend+0x74>
 8002e94:	2300      	movs	r3, #0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d102      	bne.n	8002ea0 <xQueueGenericSend+0x7e>
 8002e9a:	f7ff fe5d 	bl	8002b58 <ulSetInterruptMask>
 8002e9e:	e7fe      	b.n	8002e9e <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ea0:	f7ff fd20 	bl	80028e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d302      	bcc.n	8002eb6 <xQueueGenericSend+0x94>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d11d      	bne.n	8002ef2 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	6a38      	ldr	r0, [r7, #32]
 8002ebc:	f000 f9ba 	bl	8003234 <prvCopyDataToQueue>
 8002ec0:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	3324      	adds	r3, #36	; 0x24
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 ff06 	bl	8003ce0 <xTaskRemoveFromEventList>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002eda:	f7ff fcf1 	bl	80028c0 <vPortYield>
 8002ede:	e004      	b.n	8002eea <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ee6:	f7ff fceb 	bl	80028c0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002eea:	f7ff fd0d 	bl	8002908 <vPortExitCritical>
				return pdPASS;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e05c      	b.n	8002fac <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d103      	bne.n	8002f00 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ef8:	f7ff fd06 	bl	8002908 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e055      	b.n	8002fac <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 ff44 	bl	8003d98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f10:	2301      	movs	r3, #1
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f14:	f7ff fcf8 	bl	8002908 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f18:	f000 fcf0 	bl	80038fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f1c:	f7ff fce2 	bl	80028e4 <vPortEnterCritical>
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f26:	b25b      	sxtb	r3, r3
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d103      	bne.n	8002f36 <xQueueGenericSend+0x114>
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f42:	d103      	bne.n	8002f4c <xQueueGenericSend+0x12a>
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f4c:	f7ff fcdc 	bl	8002908 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f50:	1d3a      	adds	r2, r7, #4
 8002f52:	f107 0314 	add.w	r3, r7, #20
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 ff33 	bl	8003dc4 <xTaskCheckForTimeOut>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d11d      	bne.n	8002fa0 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f64:	6a38      	ldr	r0, [r7, #32]
 8002f66:	f000 fa5d 	bl	8003424 <prvIsQueueFull>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d011      	beq.n	8002f94 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	3310      	adds	r3, #16
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fe71 	bl	8003c60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f7e:	6a38      	ldr	r0, [r7, #32]
 8002f80:	f000 f9e8 	bl	8003354 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f84:	f000 fcc8 	bl	8003918 <xTaskResumeAll>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d188      	bne.n	8002ea0 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 8002f8e:	f7ff fc97 	bl	80028c0 <vPortYield>
 8002f92:	e785      	b.n	8002ea0 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f94:	6a38      	ldr	r0, [r7, #32]
 8002f96:	f000 f9dd 	bl	8003354 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f9a:	f000 fcbd 	bl	8003918 <xTaskResumeAll>
 8002f9e:	e77f      	b.n	8002ea0 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fa0:	6a38      	ldr	r0, [r7, #32]
 8002fa2:	f000 f9d7 	bl	8003354 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fa6:	f000 fcb7 	bl	8003918 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002faa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3728      	adds	r7, #40	; 0x28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <xQueueGenericSendFromISR+0x1e>
 8002fcc:	f7ff fdc4 	bl	8002b58 <ulSetInterruptMask>
 8002fd0:	e7fe      	b.n	8002fd0 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d103      	bne.n	8002fe0 <xQueueGenericSendFromISR+0x2c>
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <xQueueGenericSendFromISR+0x30>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <xQueueGenericSendFromISR+0x32>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <xQueueGenericSendFromISR+0x3c>
 8002fea:	f7ff fdb5 	bl	8002b58 <ulSetInterruptMask>
 8002fee:	e7fe      	b.n	8002fee <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d103      	bne.n	8002ffe <xQueueGenericSendFromISR+0x4a>
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <xQueueGenericSendFromISR+0x4e>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <xQueueGenericSendFromISR+0x50>
 8003002:	2300      	movs	r3, #0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <xQueueGenericSendFromISR+0x5a>
 8003008:	f7ff fda6 	bl	8002b58 <ulSetInterruptMask>
 800300c:	e7fe      	b.n	800300c <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800300e:	f7ff fda3 	bl	8002b58 <ulSetInterruptMask>
 8003012:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	429a      	cmp	r2, r3
 800301e:	d302      	bcc.n	8003026 <xQueueGenericSendFromISR+0x72>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d12d      	bne.n	8003082 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800302c:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	6a38      	ldr	r0, [r7, #32]
 800303a:	f000 f8fb 	bl	8003234 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800303e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003046:	d112      	bne.n	800306e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	2b00      	cmp	r3, #0
 800304e:	d015      	beq.n	800307c <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	3324      	adds	r3, #36	; 0x24
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fe43 	bl	8003ce0 <xTaskRemoveFromEventList>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00d      	beq.n	800307c <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	e006      	b.n	800307c <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800306e:	7efb      	ldrb	r3, [r7, #27]
 8003070:	3301      	adds	r3, #1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	b25a      	sxtb	r2, r3
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800307c:	2301      	movs	r3, #1
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8003080:	e001      	b.n	8003086 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003086:	69f8      	ldr	r0, [r7, #28]
 8003088:	f7ff fd73 	bl	8002b72 <vClearInterruptMask>

	return xReturn;
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800308e:	4618      	mov	r0, r3
 8003090:	3728      	adds	r7, #40	; 0x28
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b08a      	sub	sp, #40	; 0x28
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <xQueueReceive+0x20>
 80030b0:	f7ff fd52 	bl	8002b58 <ulSetInterruptMask>
 80030b4:	e7fe      	b.n	80030b4 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d103      	bne.n	80030c4 <xQueueReceive+0x2e>
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <xQueueReceive+0x32>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <xQueueReceive+0x34>
 80030c8:	2300      	movs	r3, #0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <xQueueReceive+0x3e>
 80030ce:	f7ff fd43 	bl	8002b58 <ulSetInterruptMask>
 80030d2:	e7fe      	b.n	80030d2 <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030d4:	f000 ff9a 	bl	800400c <xTaskGetSchedulerState>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <xQueueReceive+0x4e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <xQueueReceive+0x52>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <xQueueReceive+0x54>
 80030e8:	2300      	movs	r3, #0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d102      	bne.n	80030f4 <xQueueReceive+0x5e>
 80030ee:	f7ff fd33 	bl	8002b58 <ulSetInterruptMask>
 80030f2:	e7fe      	b.n	80030f2 <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030f4:	f7ff fbf6 	bl	80028e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d019      	beq.n	8003138 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	6a38      	ldr	r0, [r7, #32]
 8003108:	f000 f8fe 	bl	8003308 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	1e5a      	subs	r2, r3, #1
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d009      	beq.n	8003130 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	3310      	adds	r3, #16
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fddd 	bl	8003ce0 <xTaskRemoveFromEventList>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800312c:	f7ff fbc8 	bl	80028c0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003130:	f7ff fbea 	bl	8002908 <vPortExitCritical>
				return pdPASS;
 8003134:	2301      	movs	r3, #1
 8003136:	e063      	b.n	8003200 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800313e:	f7ff fbe3 	bl	8002908 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003142:	2300      	movs	r3, #0
 8003144:	e05c      	b.n	8003200 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fe21 	bl	8003d98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003156:	2301      	movs	r3, #1
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800315a:	f7ff fbd5 	bl	8002908 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800315e:	f000 fbcd 	bl	80038fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003162:	f7ff fbbf 	bl	80028e4 <vPortEnterCritical>
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800316c:	b25b      	sxtb	r3, r3
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d103      	bne.n	800317c <xQueueReceive+0xe6>
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003182:	b25b      	sxtb	r3, r3
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d103      	bne.n	8003192 <xQueueReceive+0xfc>
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003192:	f7ff fbb9 	bl	8002908 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003196:	1d3a      	adds	r2, r7, #4
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fe10 	bl	8003dc4 <xTaskCheckForTimeOut>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d11d      	bne.n	80031e6 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031aa:	6a38      	ldr	r0, [r7, #32]
 80031ac:	f000 f924 	bl	80033f8 <prvIsQueueEmpty>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d011      	beq.n	80031da <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	3324      	adds	r3, #36	; 0x24
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fd4e 	bl	8003c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031c4:	6a38      	ldr	r0, [r7, #32]
 80031c6:	f000 f8c5 	bl	8003354 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031ca:	f000 fba5 	bl	8003918 <xTaskResumeAll>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d18f      	bne.n	80030f4 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 80031d4:	f7ff fb74 	bl	80028c0 <vPortYield>
 80031d8:	e78c      	b.n	80030f4 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031da:	6a38      	ldr	r0, [r7, #32]
 80031dc:	f000 f8ba 	bl	8003354 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031e0:	f000 fb9a 	bl	8003918 <xTaskResumeAll>
 80031e4:	e786      	b.n	80030f4 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031e6:	6a38      	ldr	r0, [r7, #32]
 80031e8:	f000 f8b4 	bl	8003354 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ec:	f000 fb94 	bl	8003918 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031f0:	6a38      	ldr	r0, [r7, #32]
 80031f2:	f000 f901 	bl	80033f8 <prvIsQueueEmpty>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f43f af7b 	beq.w	80030f4 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003200:	4618      	mov	r0, r3
 8003202:	3728      	adds	r7, #40	; 0x28
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <uxQueueMessagesWaiting+0x14>
 8003216:	f7ff fc9f 	bl	8002b58 <ulSetInterruptMask>
 800321a:	e7fe      	b.n	800321a <uxQueueMessagesWaiting+0x12>

	taskENTER_CRITICAL();
 800321c:	f7ff fb62 	bl	80028e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003226:	f7ff fb6f 	bl	8002908 <vPortExitCritical>

	return uxReturn;
 800322a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10d      	bne.n	800326e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d14d      	bne.n	80032f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fef2 	bl	8004048 <xTaskPriorityDisinherit>
 8003264:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	e043      	b.n	80032f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d119      	bne.n	80032a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6858      	ldr	r0, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	461a      	mov	r2, r3
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	f001 facc 	bl	800481c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	441a      	add	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	429a      	cmp	r2, r3
 800329c:	d32b      	bcc.n	80032f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	e026      	b.n	80032f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	68d8      	ldr	r0, [r3, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	461a      	mov	r2, r3
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	f001 fab2 	bl	800481c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	425b      	negs	r3, r3
 80032c2:	441a      	add	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d207      	bcs.n	80032e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	425b      	negs	r3, r3
 80032de:	441a      	add	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d105      	bne.n	80032f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032fe:	697b      	ldr	r3, [r7, #20]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d018      	beq.n	800334c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	441a      	add	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	429a      	cmp	r2, r3
 8003332:	d303      	bcc.n	800333c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68d9      	ldr	r1, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	461a      	mov	r2, r3
 8003346:	6838      	ldr	r0, [r7, #0]
 8003348:	f001 fa68 	bl	800481c <memcpy>
	}
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800335c:	f7ff fac2 	bl	80028e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003366:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003368:	e011      	b.n	800338e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	2b00      	cmp	r3, #0
 8003370:	d012      	beq.n	8003398 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3324      	adds	r3, #36	; 0x24
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fcb2 	bl	8003ce0 <xTaskRemoveFromEventList>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003382:	f000 fd71 	bl	8003e68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	3b01      	subs	r3, #1
 800338a:	b2db      	uxtb	r3, r3
 800338c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800338e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	dce9      	bgt.n	800336a <prvUnlockQueue+0x16>
 8003396:	e000      	b.n	800339a <prvUnlockQueue+0x46>
					break;
 8003398:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	22ff      	movs	r2, #255	; 0xff
 800339e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033a2:	f7ff fab1 	bl	8002908 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033a6:	f7ff fa9d 	bl	80028e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033b2:	e011      	b.n	80033d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d012      	beq.n	80033e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3310      	adds	r3, #16
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fc8d 	bl	8003ce0 <xTaskRemoveFromEventList>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033cc:	f000 fd4c 	bl	8003e68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033d0:	7bbb      	ldrb	r3, [r7, #14]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	dce9      	bgt.n	80033b4 <prvUnlockQueue+0x60>
 80033e0:	e000      	b.n	80033e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	22ff      	movs	r2, #255	; 0xff
 80033e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033ec:	f7ff fa8c 	bl	8002908 <vPortExitCritical>
}
 80033f0:	bf00      	nop
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003400:	f7ff fa70 	bl	80028e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	2b00      	cmp	r3, #0
 800340a:	d102      	bne.n	8003412 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800340c:	2301      	movs	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	e001      	b.n	8003416 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003416:	f7ff fa77 	bl	8002908 <vPortExitCritical>

	return xReturn;
 800341a:	68fb      	ldr	r3, [r7, #12]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800342c:	f7ff fa5a 	bl	80028e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	429a      	cmp	r2, r3
 800343a:	d102      	bne.n	8003442 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800343c:	2301      	movs	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e001      	b.n	8003446 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003446:	f7ff fa5f 	bl	8002908 <vPortExitCritical>

	return xReturn;
 800344a:	68fb      	ldr	r3, [r7, #12]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	e014      	b.n	800348e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003464:	4a0f      	ldr	r2, [pc, #60]	; (80034a4 <vQueueAddToRegistry+0x50>)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003470:	490c      	ldr	r1, [pc, #48]	; (80034a4 <vQueueAddToRegistry+0x50>)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800347a:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <vQueueAddToRegistry+0x50>)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4413      	add	r3, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003486:	e006      	b.n	8003496 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3301      	adds	r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b07      	cmp	r3, #7
 8003492:	d9e7      	bls.n	8003464 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20003fbc 	.word	0x20003fbc

080034a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034b8:	f7ff fa14 	bl	80028e4 <vPortEnterCritical>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c8:	d103      	bne.n	80034d2 <vQueueWaitForMessageRestricted+0x2a>
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d103      	bne.n	80034e8 <vQueueWaitForMessageRestricted+0x40>
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034e8:	f7ff fa0e 	bl	8002908 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d106      	bne.n	8003502 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	3324      	adds	r3, #36	; 0x24
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fbcb 	bl	8003c98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7ff ff26 	bl	8003354 <prvUnlockQueue>
	}
 8003508:	bf00      	nop
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08c      	sub	sp, #48	; 0x30
 8003514:	af04      	add	r7, sp, #16
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <xTaskCreateStatic+0x1a>
 8003524:	f7ff fb18 	bl	8002b58 <ulSetInterruptMask>
 8003528:	e7fe      	b.n	8003528 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <xTaskCreateStatic+0x26>
 8003530:	f7ff fb12 	bl	8002b58 <ulSetInterruptMask>
 8003534:	e7fe      	b.n	8003534 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003536:	235c      	movs	r3, #92	; 0x5c
 8003538:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b5c      	cmp	r3, #92	; 0x5c
 800353e:	d002      	beq.n	8003546 <xTaskCreateStatic+0x36>
 8003540:	f7ff fb0a 	bl	8002b58 <ulSetInterruptMask>
 8003544:	e7fe      	b.n	8003544 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003546:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01e      	beq.n	800358c <xTaskCreateStatic+0x7c>
 800354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01b      	beq.n	800358c <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800355c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	2202      	movs	r2, #2
 8003562:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003566:	2300      	movs	r3, #0
 8003568:	9303      	str	r3, [sp, #12]
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	9302      	str	r3, [sp, #8]
 800356e:	f107 0318 	add.w	r3, r7, #24
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f850 	bl	8003624 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003584:	69f8      	ldr	r0, [r7, #28]
 8003586:	f000 f8d7 	bl	8003738 <prvAddNewTaskToReadyList>
 800358a:	e001      	b.n	8003590 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 800358c:	2300      	movs	r3, #0
 800358e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003590:	69bb      	ldr	r3, [r7, #24]
	}
 8003592:	4618      	mov	r0, r3
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800359a:	b580      	push	{r7, lr}
 800359c:	b08c      	sub	sp, #48	; 0x30
 800359e:	af04      	add	r7, sp, #16
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe feba 	bl	8002328 <pvPortMalloc>
 80035b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00e      	beq.n	80035da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035bc:	205c      	movs	r0, #92	; 0x5c
 80035be:	f7fe feb3 	bl	8002328 <pvPortMalloc>
 80035c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30
 80035d0:	e005      	b.n	80035de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035d2:	6978      	ldr	r0, [r7, #20]
 80035d4:	f7fe ff5c 	bl	8002490 <vPortFree>
 80035d8:	e001      	b.n	80035de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d017      	beq.n	8003614 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035ec:	88fa      	ldrh	r2, [r7, #6]
 80035ee:	2300      	movs	r3, #0
 80035f0:	9303      	str	r3, [sp, #12]
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	9302      	str	r3, [sp, #8]
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f80e 	bl	8003624 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003608:	69f8      	ldr	r0, [r7, #28]
 800360a:	f000 f895 	bl	8003738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800360e:	2301      	movs	r3, #1
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	e002      	b.n	800361a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003614:	f04f 33ff 	mov.w	r3, #4294967295
 8003618:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800361a:	69bb      	ldr	r3, [r7, #24]
	}
 800361c:	4618      	mov	r0, r3
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	461a      	mov	r2, r3
 800363c:	21a5      	movs	r1, #165	; 0xa5
 800363e:	f001 f8fa 	bl	8004836 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800364c:	3b01      	subs	r3, #1
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f023 0307 	bic.w	r3, r3, #7
 800365a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <prvInitialiseNewTask+0x48>
 8003666:	f7ff fa77 	bl	8002b58 <ulSetInterruptMask>
 800366a:	e7fe      	b.n	800366a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01f      	beq.n	80036b2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	e012      	b.n	800369e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	4413      	add	r3, r2
 800367e:	7819      	ldrb	r1, [r3, #0]
 8003680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	4413      	add	r3, r2
 8003686:	3334      	adds	r3, #52	; 0x34
 8003688:	460a      	mov	r2, r1
 800368a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	4413      	add	r3, r2
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d006      	beq.n	80036a6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3301      	adds	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b0f      	cmp	r3, #15
 80036a2:	d9e9      	bls.n	8003678 <prvInitialiseNewTask+0x54>
 80036a4:	e000      	b.n	80036a8 <prvInitialiseNewTask+0x84>
			{
				break;
 80036a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036b0:	e003      	b.n	80036ba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	2b37      	cmp	r3, #55	; 0x37
 80036be:	d901      	bls.n	80036c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036c0:	2337      	movs	r3, #55	; 0x37
 80036c2:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	6a3a      	ldr	r2, [r7, #32]
 80036c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	2200      	movs	r2, #0
 80036d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	3304      	adds	r3, #4
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f806 	bl	80026ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	3318      	adds	r3, #24
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff f801 	bl	80026ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	2200      	movs	r2, #0
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	6938      	ldr	r0, [r7, #16]
 8003718:	f7ff f942 	bl	80029a0 <pxPortInitialiseStack>
 800371c:	4602      	mov	r2, r0
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800372c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003740:	f7ff f8d0 	bl	80028e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003744:	4b2a      	ldr	r3, [pc, #168]	; (80037f0 <prvAddNewTaskToReadyList+0xb8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3301      	adds	r3, #1
 800374a:	4a29      	ldr	r2, [pc, #164]	; (80037f0 <prvAddNewTaskToReadyList+0xb8>)
 800374c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800374e:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <prvAddNewTaskToReadyList+0xbc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003756:	4a27      	ldr	r2, [pc, #156]	; (80037f4 <prvAddNewTaskToReadyList+0xbc>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800375c:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <prvAddNewTaskToReadyList+0xb8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d110      	bne.n	8003786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003764:	f000 fb9c 	bl	8003ea0 <prvInitialiseTaskLists>
 8003768:	e00d      	b.n	8003786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800376a:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <prvAddNewTaskToReadyList+0xc0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <prvAddNewTaskToReadyList+0xbc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	429a      	cmp	r2, r3
 800377e:	d802      	bhi.n	8003786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003780:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <prvAddNewTaskToReadyList+0xbc>)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003786:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <prvAddNewTaskToReadyList+0xc4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3301      	adds	r3, #1
 800378c:	4a1b      	ldr	r2, [pc, #108]	; (80037fc <prvAddNewTaskToReadyList+0xc4>)
 800378e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <prvAddNewTaskToReadyList+0xc4>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379c:	4b18      	ldr	r3, [pc, #96]	; (8003800 <prvAddNewTaskToReadyList+0xc8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d903      	bls.n	80037ac <prvAddNewTaskToReadyList+0x74>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	4a15      	ldr	r2, [pc, #84]	; (8003800 <prvAddNewTaskToReadyList+0xc8>)
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4a12      	ldr	r2, [pc, #72]	; (8003804 <prvAddNewTaskToReadyList+0xcc>)
 80037ba:	441a      	add	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3304      	adds	r3, #4
 80037c0:	4619      	mov	r1, r3
 80037c2:	4610      	mov	r0, r2
 80037c4:	f7fe ff9f 	bl	8002706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037c8:	f7ff f89e 	bl	8002908 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <prvAddNewTaskToReadyList+0xc0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037d4:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <prvAddNewTaskToReadyList+0xbc>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	429a      	cmp	r2, r3
 80037e0:	d201      	bcs.n	80037e6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037e2:	f7ff f86d 	bl	80028c0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20003e00 	.word	0x20003e00
 80037f4:	2000392c 	.word	0x2000392c
 80037f8:	20003e0c 	.word	0x20003e0c
 80037fc:	20003e1c 	.word	0x20003e1c
 8003800:	20003e08 	.word	0x20003e08
 8003804:	20003930 	.word	0x20003930

08003808 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00f      	beq.n	800383a <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800381a:	4b0c      	ldr	r3, [pc, #48]	; (800384c <vTaskDelay+0x44>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <vTaskDelay+0x20>
 8003822:	f7ff f999 	bl	8002b58 <ulSetInterruptMask>
 8003826:	e7fe      	b.n	8003826 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8003828:	f000 f868 	bl	80038fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800382c:	2100      	movs	r1, #0
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fc68 	bl	8004104 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003834:	f000 f870 	bl	8003918 <xTaskResumeAll>
 8003838:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 8003840:	f7ff f83e 	bl	80028c0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20003e28 	.word	0x20003e28

08003850 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800385e:	463a      	mov	r2, r7
 8003860:	1d39      	adds	r1, r7, #4
 8003862:	f107 0308 	add.w	r3, r7, #8
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe fd2a 	bl	80022c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800386c:	6839      	ldr	r1, [r7, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	9202      	str	r2, [sp, #8]
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	2300      	movs	r3, #0
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2300      	movs	r3, #0
 800387c:	460a      	mov	r2, r1
 800387e:	4919      	ldr	r1, [pc, #100]	; (80038e4 <vTaskStartScheduler+0x94>)
 8003880:	4819      	ldr	r0, [pc, #100]	; (80038e8 <vTaskStartScheduler+0x98>)
 8003882:	f7ff fe45 	bl	8003510 <xTaskCreateStatic>
 8003886:	4603      	mov	r3, r0
 8003888:	4a18      	ldr	r2, [pc, #96]	; (80038ec <vTaskStartScheduler+0x9c>)
 800388a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800388c:	4b17      	ldr	r3, [pc, #92]	; (80038ec <vTaskStartScheduler+0x9c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003894:	2301      	movs	r3, #1
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	e001      	b.n	800389e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d102      	bne.n	80038aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038a4:	f000 fc82 	bl	80041ac <xTimerCreateTimerTask>
 80038a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d10e      	bne.n	80038ce <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80038b0:	f7ff f952 	bl	8002b58 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <vTaskStartScheduler+0xa0>)
 80038b6:	f04f 32ff 	mov.w	r2, #4294967295
 80038ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038bc:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <vTaskStartScheduler+0xa4>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038c2:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <vTaskStartScheduler+0xa8>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038c8:	f7ff f8f4 	bl	8002ab4 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038cc:	e006      	b.n	80038dc <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d102      	bne.n	80038dc <vTaskStartScheduler+0x8c>
 80038d6:	f7ff f93f 	bl	8002b58 <ulSetInterruptMask>
 80038da:	e7fe      	b.n	80038da <vTaskStartScheduler+0x8a>
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	08005c98 	.word	0x08005c98
 80038e8:	08003e81 	.word	0x08003e81
 80038ec:	20003e24 	.word	0x20003e24
 80038f0:	20003e20 	.word	0x20003e20
 80038f4:	20003e0c 	.word	0x20003e0c
 80038f8:	20003e04 	.word	0x20003e04

080038fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <vTaskSuspendAll+0x18>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	4a03      	ldr	r2, [pc, #12]	; (8003914 <vTaskSuspendAll+0x18>)
 8003908:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800390a:	bf00      	nop
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	20003e28 	.word	0x20003e28

08003918 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003926:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <xTaskResumeAll+0xfc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <xTaskResumeAll+0x1c>
 800392e:	f7ff f913 	bl	8002b58 <ulSetInterruptMask>
 8003932:	e7fe      	b.n	8003932 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003934:	f7fe ffd6 	bl	80028e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003938:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <xTaskResumeAll+0xfc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3b01      	subs	r3, #1
 800393e:	4a35      	ldr	r2, [pc, #212]	; (8003a14 <xTaskResumeAll+0xfc>)
 8003940:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003942:	4b34      	ldr	r3, [pc, #208]	; (8003a14 <xTaskResumeAll+0xfc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d15c      	bne.n	8003a04 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800394a:	4b33      	ldr	r3, [pc, #204]	; (8003a18 <xTaskResumeAll+0x100>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d058      	beq.n	8003a04 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003952:	e02f      	b.n	80039b4 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003954:	4b31      	ldr	r3, [pc, #196]	; (8003a1c <xTaskResumeAll+0x104>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3318      	adds	r3, #24
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe ff2d 	bl	80027c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3304      	adds	r3, #4
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe ff28 	bl	80027c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003974:	4b2a      	ldr	r3, [pc, #168]	; (8003a20 <xTaskResumeAll+0x108>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d903      	bls.n	8003984 <xTaskResumeAll+0x6c>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	4a27      	ldr	r2, [pc, #156]	; (8003a20 <xTaskResumeAll+0x108>)
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4a24      	ldr	r2, [pc, #144]	; (8003a24 <xTaskResumeAll+0x10c>)
 8003992:	441a      	add	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f7fe feb3 	bl	8002706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a4:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <xTaskResumeAll+0x110>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 80039ae:	4b1f      	ldr	r3, [pc, #124]	; (8003a2c <xTaskResumeAll+0x114>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039b4:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <xTaskResumeAll+0x104>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1cb      	bne.n	8003954 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039c2:	f000 fb03 	bl	8003fcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039c6:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <xTaskResumeAll+0x118>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d010      	beq.n	80039f4 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039d2:	f000 f83f 	bl	8003a54 <xTaskIncrementTick>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 80039dc:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <xTaskResumeAll+0x114>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f1      	bne.n	80039d2 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <xTaskResumeAll+0x118>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039f4:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <xTaskResumeAll+0x114>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039fc:	2301      	movs	r3, #1
 80039fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a00:	f7fe ff5e 	bl	80028c0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a04:	f7fe ff80 	bl	8002908 <vPortExitCritical>

	return xAlreadyYielded;
 8003a08:	68bb      	ldr	r3, [r7, #8]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20003e28 	.word	0x20003e28
 8003a18:	20003e00 	.word	0x20003e00
 8003a1c:	20003dc0 	.word	0x20003dc0
 8003a20:	20003e08 	.word	0x20003e08
 8003a24:	20003930 	.word	0x20003930
 8003a28:	2000392c 	.word	0x2000392c
 8003a2c:	20003e14 	.word	0x20003e14
 8003a30:	20003e10 	.word	0x20003e10

08003a34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <xTaskGetTickCount+0x1c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a40:	687b      	ldr	r3, [r7, #4]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20003e04 	.word	0x20003e04

08003a54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a5e:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <xTaskIncrementTick+0x138>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 8087 	bne.w	8003b76 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a68:	4b49      	ldr	r3, [pc, #292]	; (8003b90 <xTaskIncrementTick+0x13c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a70:	4a47      	ldr	r2, [pc, #284]	; (8003b90 <xTaskIncrementTick+0x13c>)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d118      	bne.n	8003aae <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a7c:	4b45      	ldr	r3, [pc, #276]	; (8003b94 <xTaskIncrementTick+0x140>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <xTaskIncrementTick+0x38>
 8003a86:	f7ff f867 	bl	8002b58 <ulSetInterruptMask>
 8003a8a:	e7fe      	b.n	8003a8a <xTaskIncrementTick+0x36>
 8003a8c:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <xTaskIncrementTick+0x140>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	4b41      	ldr	r3, [pc, #260]	; (8003b98 <xTaskIncrementTick+0x144>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a3f      	ldr	r2, [pc, #252]	; (8003b94 <xTaskIncrementTick+0x140>)
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4a3f      	ldr	r2, [pc, #252]	; (8003b98 <xTaskIncrementTick+0x144>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	4b3e      	ldr	r3, [pc, #248]	; (8003b9c <xTaskIncrementTick+0x148>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	4a3d      	ldr	r2, [pc, #244]	; (8003b9c <xTaskIncrementTick+0x148>)
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	f000 fa8f 	bl	8003fcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003aae:	4b3c      	ldr	r3, [pc, #240]	; (8003ba0 <xTaskIncrementTick+0x14c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d349      	bcc.n	8003b4c <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ab8:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <xTaskIncrementTick+0x140>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ac2:	4b37      	ldr	r3, [pc, #220]	; (8003ba0 <xTaskIncrementTick+0x14c>)
 8003ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac8:	601a      	str	r2, [r3, #0]
					break;
 8003aca:	e03f      	b.n	8003b4c <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003acc:	4b31      	ldr	r3, [pc, #196]	; (8003b94 <xTaskIncrementTick+0x140>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d203      	bcs.n	8003aec <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ae4:	4a2e      	ldr	r2, [pc, #184]	; (8003ba0 <xTaskIncrementTick+0x14c>)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003aea:	e02f      	b.n	8003b4c <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe fe65 	bl	80027c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d004      	beq.n	8003b08 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	3318      	adds	r3, #24
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fe5c 	bl	80027c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <xTaskIncrementTick+0x150>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d903      	bls.n	8003b1c <xTaskIncrementTick+0xc8>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	4a22      	ldr	r2, [pc, #136]	; (8003ba4 <xTaskIncrementTick+0x150>)
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4a1f      	ldr	r2, [pc, #124]	; (8003ba8 <xTaskIncrementTick+0x154>)
 8003b2a:	441a      	add	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f7fe fde7 	bl	8002706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <xTaskIncrementTick+0x158>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d3b8      	bcc.n	8003ab8 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8003b46:	2301      	movs	r3, #1
 8003b48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b4a:	e7b5      	b.n	8003ab8 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b4c:	4b17      	ldr	r3, [pc, #92]	; (8003bac <xTaskIncrementTick+0x158>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b52:	4915      	ldr	r1, [pc, #84]	; (8003ba8 <xTaskIncrementTick+0x154>)
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d901      	bls.n	8003b68 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 8003b64:	2301      	movs	r3, #1
 8003b66:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <xTaskIncrementTick+0x15c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003b70:	2301      	movs	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e004      	b.n	8003b80 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <xTaskIncrementTick+0x160>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	4a0d      	ldr	r2, [pc, #52]	; (8003bb4 <xTaskIncrementTick+0x160>)
 8003b7e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b80:	697b      	ldr	r3, [r7, #20]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20003e28 	.word	0x20003e28
 8003b90:	20003e04 	.word	0x20003e04
 8003b94:	20003db8 	.word	0x20003db8
 8003b98:	20003dbc 	.word	0x20003dbc
 8003b9c:	20003e18 	.word	0x20003e18
 8003ba0:	20003e20 	.word	0x20003e20
 8003ba4:	20003e08 	.word	0x20003e08
 8003ba8:	20003930 	.word	0x20003930
 8003bac:	2000392c 	.word	0x2000392c
 8003bb0:	20003e14 	.word	0x20003e14
 8003bb4:	20003e10 	.word	0x20003e10

08003bb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bbe:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <vTaskSwitchContext+0x94>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bc6:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <vTaskSwitchContext+0x98>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bcc:	e039      	b.n	8003c42 <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 8003bce:	4b20      	ldr	r3, [pc, #128]	; (8003c50 <vTaskSwitchContext+0x98>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bd4:	4b1f      	ldr	r3, [pc, #124]	; (8003c54 <vTaskSwitchContext+0x9c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	e008      	b.n	8003bee <vTaskSwitchContext+0x36>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d102      	bne.n	8003be8 <vTaskSwitchContext+0x30>
 8003be2:	f7fe ffb9 	bl	8002b58 <ulSetInterruptMask>
 8003be6:	e7fe      	b.n	8003be6 <vTaskSwitchContext+0x2e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	491a      	ldr	r1, [pc, #104]	; (8003c58 <vTaskSwitchContext+0xa0>)
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0ec      	beq.n	8003bdc <vTaskSwitchContext+0x24>
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <vTaskSwitchContext+0xa0>)
 8003c0e:	4413      	add	r3, r2
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	605a      	str	r2, [r3, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	3308      	adds	r3, #8
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d104      	bne.n	8003c32 <vTaskSwitchContext+0x7a>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <vTaskSwitchContext+0xa4>)
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <vTaskSwitchContext+0x9c>)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6013      	str	r3, [r2, #0]
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20003e28 	.word	0x20003e28
 8003c50:	20003e14 	.word	0x20003e14
 8003c54:	20003e08 	.word	0x20003e08
 8003c58:	20003930 	.word	0x20003930
 8003c5c:	2000392c 	.word	0x2000392c

08003c60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <vTaskPlaceOnEventList+0x16>
 8003c70:	f7fe ff72 	bl	8002b58 <ulSetInterruptMask>
 8003c74:	e7fe      	b.n	8003c74 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <vTaskPlaceOnEventList+0x34>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3318      	adds	r3, #24
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fe fd65 	bl	800274e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c84:	2101      	movs	r1, #1
 8003c86:	6838      	ldr	r0, [r7, #0]
 8003c88:	f000 fa3c 	bl	8004104 <prvAddCurrentTaskToDelayedList>
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	2000392c 	.word	0x2000392c

08003c98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <vTaskPlaceOnEventListRestricted+0x18>
 8003caa:	f7fe ff55 	bl	8002b58 <ulSetInterruptMask>
 8003cae:	e7fe      	b.n	8003cae <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <vTaskPlaceOnEventListRestricted+0x44>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3318      	adds	r3, #24
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f7fe fd24 	bl	8002706 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	68b8      	ldr	r0, [r7, #8]
 8003cce:	f000 fa19 	bl	8004104 <prvAddCurrentTaskToDelayedList>
	}
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	2000392c 	.word	0x2000392c

08003ce0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d102      	bne.n	8003cfc <xTaskRemoveFromEventList+0x1c>
 8003cf6:	f7fe ff2f 	bl	8002b58 <ulSetInterruptMask>
 8003cfa:	e7fe      	b.n	8003cfa <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	3318      	adds	r3, #24
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fe fd5d 	bl	80027c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d06:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <xTaskRemoveFromEventList+0xa0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d11d      	bne.n	8003d4a <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fd54 	bl	80027c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1c:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <xTaskRemoveFromEventList+0xa4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d903      	bls.n	8003d2c <xTaskRemoveFromEventList+0x4c>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	4a16      	ldr	r2, [pc, #88]	; (8003d84 <xTaskRemoveFromEventList+0xa4>)
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <xTaskRemoveFromEventList+0xa8>)
 8003d3a:	441a      	add	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4619      	mov	r1, r3
 8003d42:	4610      	mov	r0, r2
 8003d44:	f7fe fcdf 	bl	8002706 <vListInsertEnd>
 8003d48:	e005      	b.n	8003d56 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	3318      	adds	r3, #24
 8003d4e:	4619      	mov	r1, r3
 8003d50:	480e      	ldr	r0, [pc, #56]	; (8003d8c <xTaskRemoveFromEventList+0xac>)
 8003d52:	f7fe fcd8 	bl	8002706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <xTaskRemoveFromEventList+0xb0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d905      	bls.n	8003d70 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d64:	2301      	movs	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d68:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <xTaskRemoveFromEventList+0xb4>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e001      	b.n	8003d74 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003d74:	68fb      	ldr	r3, [r7, #12]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20003e28 	.word	0x20003e28
 8003d84:	20003e08 	.word	0x20003e08
 8003d88:	20003930 	.word	0x20003930
 8003d8c:	20003dc0 	.word	0x20003dc0
 8003d90:	2000392c 	.word	0x2000392c
 8003d94:	20003e14 	.word	0x20003e14

08003d98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <vTaskInternalSetTimeOutState+0x24>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <vTaskInternalSetTimeOutState+0x28>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	605a      	str	r2, [r3, #4]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	20003e18 	.word	0x20003e18
 8003dc0:	20003e04 	.word	0x20003e04

08003dc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <xTaskCheckForTimeOut+0x16>
 8003dd4:	f7fe fec0 	bl	8002b58 <ulSetInterruptMask>
 8003dd8:	e7fe      	b.n	8003dd8 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <xTaskCheckForTimeOut+0x22>
 8003de0:	f7fe feba 	bl	8002b58 <ulSetInterruptMask>
 8003de4:	e7fe      	b.n	8003de4 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8003de6:	f7fe fd7d 	bl	80028e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <xTaskCheckForTimeOut+0x9c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d102      	bne.n	8003e0a <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	e023      	b.n	8003e52 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <xTaskCheckForTimeOut+0xa0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d007      	beq.n	8003e26 <xTaskCheckForTimeOut+0x62>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d302      	bcc.n	8003e26 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e20:	2301      	movs	r3, #1
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	e015      	b.n	8003e52 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d20b      	bcs.n	8003e48 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	1ad2      	subs	r2, r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ffab 	bl	8003d98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	e004      	b.n	8003e52 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003e52:	f7fe fd59 	bl	8002908 <vPortExitCritical>

	return xReturn;
 8003e56:	697b      	ldr	r3, [r7, #20]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20003e04 	.word	0x20003e04
 8003e64:	20003e18 	.word	0x20003e18

08003e68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <vTaskMissedYield+0x14>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	20003e14 	.word	0x20003e14

08003e80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e88:	f000 f84a 	bl	8003f20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <prvIdleTask+0x1c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d9f9      	bls.n	8003e88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e94:	f7fe fd14 	bl	80028c0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003e98:	e7f6      	b.n	8003e88 <prvIdleTask+0x8>
 8003e9a:	bf00      	nop
 8003e9c:	20003930 	.word	0x20003930

08003ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	e00c      	b.n	8003ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <prvInitialiseTaskLists+0x60>)
 8003eb8:	4413      	add	r3, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe fbf6 	bl	80026ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	607b      	str	r3, [r7, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b37      	cmp	r3, #55	; 0x37
 8003eca:	d9ef      	bls.n	8003eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ecc:	480d      	ldr	r0, [pc, #52]	; (8003f04 <prvInitialiseTaskLists+0x64>)
 8003ece:	f7fe fbed 	bl	80026ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ed2:	480d      	ldr	r0, [pc, #52]	; (8003f08 <prvInitialiseTaskLists+0x68>)
 8003ed4:	f7fe fbea 	bl	80026ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ed8:	480c      	ldr	r0, [pc, #48]	; (8003f0c <prvInitialiseTaskLists+0x6c>)
 8003eda:	f7fe fbe7 	bl	80026ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ede:	480c      	ldr	r0, [pc, #48]	; (8003f10 <prvInitialiseTaskLists+0x70>)
 8003ee0:	f7fe fbe4 	bl	80026ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ee4:	480b      	ldr	r0, [pc, #44]	; (8003f14 <prvInitialiseTaskLists+0x74>)
 8003ee6:	f7fe fbe1 	bl	80026ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003eea:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <prvInitialiseTaskLists+0x78>)
 8003eec:	4a05      	ldr	r2, [pc, #20]	; (8003f04 <prvInitialiseTaskLists+0x64>)
 8003eee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <prvInitialiseTaskLists+0x7c>)
 8003ef2:	4a05      	ldr	r2, [pc, #20]	; (8003f08 <prvInitialiseTaskLists+0x68>)
 8003ef4:	601a      	str	r2, [r3, #0]
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20003930 	.word	0x20003930
 8003f04:	20003d90 	.word	0x20003d90
 8003f08:	20003da4 	.word	0x20003da4
 8003f0c:	20003dc0 	.word	0x20003dc0
 8003f10:	20003dd4 	.word	0x20003dd4
 8003f14:	20003dec 	.word	0x20003dec
 8003f18:	20003db8 	.word	0x20003db8
 8003f1c:	20003dbc 	.word	0x20003dbc

08003f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f26:	e019      	b.n	8003f5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f28:	f7fe fcdc 	bl	80028e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <prvCheckTasksWaitingTermination+0x50>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe fc41 	bl	80027c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <prvCheckTasksWaitingTermination+0x54>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <prvCheckTasksWaitingTermination+0x54>)
 8003f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <prvCheckTasksWaitingTermination+0x58>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <prvCheckTasksWaitingTermination+0x58>)
 8003f50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f52:	f7fe fcd9 	bl	8002908 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f810 	bl	8003f7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <prvCheckTasksWaitingTermination+0x58>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e1      	bne.n	8003f28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20003dd4 	.word	0x20003dd4
 8003f74:	20003e00 	.word	0x20003e00
 8003f78:	20003de8 	.word	0x20003de8

08003f7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d108      	bne.n	8003fa0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fa7c 	bl	8002490 <vPortFree>
				vPortFree( pxTCB );
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7fe fa79 	bl	8002490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f9e:	e010      	b.n	8003fc2 <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d103      	bne.n	8003fb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fe fa70 	bl	8002490 <vPortFree>
	}
 8003fb0:	e007      	b.n	8003fc2 <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d002      	beq.n	8003fc2 <prvDeleteTCB+0x46>
 8003fbc:	f7fe fdcc 	bl	8002b58 <ulSetInterruptMask>
 8003fc0:	e7fe      	b.n	8003fc0 <prvDeleteTCB+0x44>
	}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fd2:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <prvResetNextTaskUnblockTime+0x38>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d104      	bne.n	8003fe6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <prvResetNextTaskUnblockTime+0x3c>)
 8003fde:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fe4:	e008      	b.n	8003ff8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe6:	4b07      	ldr	r3, [pc, #28]	; (8004004 <prvResetNextTaskUnblockTime+0x38>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4a04      	ldr	r2, [pc, #16]	; (8004008 <prvResetNextTaskUnblockTime+0x3c>)
 8003ff6:	6013      	str	r3, [r2, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	20003db8 	.word	0x20003db8
 8004008:	20003e20 	.word	0x20003e20

0800400c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <xTaskGetSchedulerState+0x34>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800401a:	2301      	movs	r3, #1
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	e008      	b.n	8004032 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004020:	4b08      	ldr	r3, [pc, #32]	; (8004044 <xTaskGetSchedulerState+0x38>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004028:	2302      	movs	r3, #2
 800402a:	607b      	str	r3, [r7, #4]
 800402c:	e001      	b.n	8004032 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800402e:	2300      	movs	r3, #0
 8004030:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004032:	687b      	ldr	r3, [r7, #4]
	}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	20003e0c 	.word	0x20003e0c
 8004044:	20003e28 	.word	0x20003e28

08004048 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d046      	beq.n	80040ec <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800405e:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <xTaskPriorityDisinherit+0xb0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	429a      	cmp	r2, r3
 8004066:	d002      	beq.n	800406e <xTaskPriorityDisinherit+0x26>
 8004068:	f7fe fd76 	bl	8002b58 <ulSetInterruptMask>
 800406c:	e7fe      	b.n	800406c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <xTaskPriorityDisinherit+0x34>
 8004076:	f7fe fd6f 	bl	8002b58 <ulSetInterruptMask>
 800407a:	e7fe      	b.n	800407a <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004080:	1e5a      	subs	r2, r3, #1
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408e:	429a      	cmp	r2, r3
 8004090:	d02c      	beq.n	80040ec <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004096:	2b00      	cmp	r3, #0
 8004098:	d128      	bne.n	80040ec <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	3304      	adds	r3, #4
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fb8e 	bl	80027c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040bc:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <xTaskPriorityDisinherit+0xb4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d903      	bls.n	80040cc <xTaskPriorityDisinherit+0x84>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	4a0c      	ldr	r2, [pc, #48]	; (80040fc <xTaskPriorityDisinherit+0xb4>)
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4a09      	ldr	r2, [pc, #36]	; (8004100 <xTaskPriorityDisinherit+0xb8>)
 80040da:	441a      	add	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	3304      	adds	r3, #4
 80040e0:	4619      	mov	r1, r3
 80040e2:	4610      	mov	r0, r2
 80040e4:	f7fe fb0f 	bl	8002706 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040e8:	2301      	movs	r3, #1
 80040ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040ec:	68fb      	ldr	r3, [r7, #12]
	}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	2000392c 	.word	0x2000392c
 80040fc:	20003e08 	.word	0x20003e08
 8004100:	20003930 	.word	0x20003930

08004104 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800410e:	4b21      	ldr	r3, [pc, #132]	; (8004194 <prvAddCurrentTaskToDelayedList+0x90>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004114:	4b20      	ldr	r3, [pc, #128]	; (8004198 <prvAddCurrentTaskToDelayedList+0x94>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3304      	adds	r3, #4
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe fb50 	bl	80027c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004126:	d10a      	bne.n	800413e <prvAddCurrentTaskToDelayedList+0x3a>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800412e:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <prvAddCurrentTaskToDelayedList+0x94>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4819      	ldr	r0, [pc, #100]	; (800419c <prvAddCurrentTaskToDelayedList+0x98>)
 8004138:	f7fe fae5 	bl	8002706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800413c:	e026      	b.n	800418c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4413      	add	r3, r2
 8004144:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <prvAddCurrentTaskToDelayedList+0x94>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	429a      	cmp	r2, r3
 8004154:	d209      	bcs.n	800416a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <prvAddCurrentTaskToDelayedList+0x94>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3304      	adds	r3, #4
 8004160:	4619      	mov	r1, r3
 8004162:	4610      	mov	r0, r2
 8004164:	f7fe faf3 	bl	800274e <vListInsert>
}
 8004168:	e010      	b.n	800418c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800416a:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <prvAddCurrentTaskToDelayedList+0x94>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f7fe fae9 	bl	800274e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	429a      	cmp	r2, r3
 8004184:	d202      	bcs.n	800418c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004186:	4a08      	ldr	r2, [pc, #32]	; (80041a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20003e04 	.word	0x20003e04
 8004198:	2000392c 	.word	0x2000392c
 800419c:	20003dec 	.word	0x20003dec
 80041a0:	20003dbc 	.word	0x20003dbc
 80041a4:	20003db8 	.word	0x20003db8
 80041a8:	20003e20 	.word	0x20003e20

080041ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80041b6:	f000 fac7 	bl	8004748 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80041ba:	4b18      	ldr	r3, [pc, #96]	; (800421c <xTimerCreateTimerTask+0x70>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d020      	beq.n	8004204 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80041ca:	463a      	mov	r2, r7
 80041cc:	1d39      	adds	r1, r7, #4
 80041ce:	f107 0308 	add.w	r3, r7, #8
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe f88e 	bl	80022f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80041d8:	6839      	ldr	r1, [r7, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	9202      	str	r2, [sp, #8]
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	2302      	movs	r3, #2
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	2300      	movs	r3, #0
 80041e8:	460a      	mov	r2, r1
 80041ea:	490d      	ldr	r1, [pc, #52]	; (8004220 <xTimerCreateTimerTask+0x74>)
 80041ec:	480d      	ldr	r0, [pc, #52]	; (8004224 <xTimerCreateTimerTask+0x78>)
 80041ee:	f7ff f98f 	bl	8003510 <xTaskCreateStatic>
 80041f2:	4603      	mov	r3, r0
 80041f4:	4a0c      	ldr	r2, [pc, #48]	; (8004228 <xTimerCreateTimerTask+0x7c>)
 80041f6:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <xTimerCreateTimerTask+0x7c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8004200:	2301      	movs	r3, #1
 8004202:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <xTimerCreateTimerTask+0x64>
 800420a:	f7fe fca5 	bl	8002b58 <ulSetInterruptMask>
 800420e:	e7fe      	b.n	800420e <xTimerCreateTimerTask+0x62>
	return xReturn;
 8004210:	68fb      	ldr	r3, [r7, #12]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20003e5c 	.word	0x20003e5c
 8004220:	08005ca0 	.word	0x08005ca0
 8004224:	08004341 	.word	0x08004341
 8004228:	20003e60 	.word	0x20003e60

0800422c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	; 0x28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800423a:	2300      	movs	r3, #0
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d102      	bne.n	800424a <xTimerGenericCommand+0x1e>
 8004244:	f7fe fc88 	bl	8002b58 <ulSetInterruptMask>
 8004248:	e7fe      	b.n	8004248 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800424a:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <xTimerGenericCommand+0x88>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d02a      	beq.n	80042a8 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b05      	cmp	r3, #5
 8004262:	dc18      	bgt.n	8004296 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004264:	f7ff fed2 	bl	800400c <xTaskGetSchedulerState>
 8004268:	4603      	mov	r3, r0
 800426a:	2b02      	cmp	r3, #2
 800426c:	d109      	bne.n	8004282 <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800426e:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <xTimerGenericCommand+0x88>)
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	f107 0114 	add.w	r1, r7, #20
 8004276:	2300      	movs	r3, #0
 8004278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800427a:	f7fe fdd2 	bl	8002e22 <xQueueGenericSend>
 800427e:	6278      	str	r0, [r7, #36]	; 0x24
 8004280:	e012      	b.n	80042a8 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <xTimerGenericCommand+0x88>)
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	f107 0114 	add.w	r1, r7, #20
 800428a:	2300      	movs	r3, #0
 800428c:	2200      	movs	r2, #0
 800428e:	f7fe fdc8 	bl	8002e22 <xQueueGenericSend>
 8004292:	6278      	str	r0, [r7, #36]	; 0x24
 8004294:	e008      	b.n	80042a8 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <xTimerGenericCommand+0x88>)
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	f107 0114 	add.w	r1, r7, #20
 800429e:	2300      	movs	r3, #0
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	f7fe fe87 	bl	8002fb4 <xQueueGenericSendFromISR>
 80042a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3728      	adds	r7, #40	; 0x28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20003e5c 	.word	0x20003e5c

080042b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af02      	add	r7, sp, #8
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c2:	4b1e      	ldr	r3, [pc, #120]	; (800433c <prvProcessExpiredTimer+0x84>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fe fa75 	bl	80027c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01a      	beq.n	800431a <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	699a      	ldr	r2, [r3, #24]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	18d1      	adds	r1, r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f8c1 	bl	8004478 <prvInsertTimerInActiveList>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d017      	beq.n	800432c <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042fc:	2300      	movs	r3, #0
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2300      	movs	r3, #0
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	2100      	movs	r1, #0
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7ff ff90 	bl	800422c <xTimerGenericCommand>
 800430c:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10b      	bne.n	800432c <prvProcessExpiredTimer+0x74>
 8004314:	f7fe fc20 	bl	8002b58 <ulSetInterruptMask>
 8004318:	e7fe      	b.n	8004318 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004320:	f023 0301 	bic.w	r3, r3, #1
 8004324:	b2da      	uxtb	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	4798      	blx	r3
}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20003e54 	.word	0x20003e54

08004340 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004348:	f107 0308 	add.w	r3, r7, #8
 800434c:	4618      	mov	r0, r3
 800434e:	f000 f84f 	bl	80043f0 <prvGetNextExpireTime>
 8004352:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4619      	mov	r1, r3
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f803 	bl	8004364 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800435e:	f000 f8cd 	bl	80044fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004362:	e7f1      	b.n	8004348 <prvTimerTask+0x8>

08004364 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800436e:	f7ff fac5 	bl	80038fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004372:	f107 0308 	add.w	r3, r7, #8
 8004376:	4618      	mov	r0, r3
 8004378:	f000 f85e 	bl	8004438 <prvSampleTimeNow>
 800437c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d12a      	bne.n	80043da <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <prvProcessTimerOrBlockTask+0x3c>
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	429a      	cmp	r2, r3
 8004390:	d806      	bhi.n	80043a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004392:	f7ff fac1 	bl	8003918 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff ff8d 	bl	80042b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800439e:	e01e      	b.n	80043de <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <prvProcessTimerOrBlockTask+0x84>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <prvProcessTimerOrBlockTask+0x50>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <prvProcessTimerOrBlockTask+0x52>
 80043b4:	2300      	movs	r3, #0
 80043b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <prvProcessTimerOrBlockTask+0x88>)
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	4619      	mov	r1, r3
 80043c6:	f7ff f86f 	bl	80034a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80043ca:	f7ff faa5 	bl	8003918 <xTaskResumeAll>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d104      	bne.n	80043de <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80043d4:	f7fe fa74 	bl	80028c0 <vPortYield>
}
 80043d8:	e001      	b.n	80043de <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80043da:	f7ff fa9d 	bl	8003918 <xTaskResumeAll>
}
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20003e58 	.word	0x20003e58
 80043ec:	20003e5c 	.word	0x20003e5c

080043f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80043f8:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <prvGetNextExpireTime+0x44>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <prvGetNextExpireTime+0x16>
 8004402:	2201      	movs	r2, #1
 8004404:	e000      	b.n	8004408 <prvGetNextExpireTime+0x18>
 8004406:	2200      	movs	r2, #0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d105      	bne.n	8004420 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004414:	4b07      	ldr	r3, [pc, #28]	; (8004434 <prvGetNextExpireTime+0x44>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e001      	b.n	8004424 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004424:	68fb      	ldr	r3, [r7, #12]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20003e54 	.word	0x20003e54

08004438 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004440:	f7ff faf8 	bl	8003a34 <xTaskGetTickCount>
 8004444:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <prvSampleTimeNow+0x3c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	429a      	cmp	r2, r3
 800444e:	d205      	bcs.n	800445c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004450:	f000 f91e 	bl	8004690 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	e002      	b.n	8004462 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004462:	4a04      	ldr	r2, [pc, #16]	; (8004474 <prvSampleTimeNow+0x3c>)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004468:	68fb      	ldr	r3, [r7, #12]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20003e64 	.word	0x20003e64

08004478 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	429a      	cmp	r2, r3
 800449c:	d812      	bhi.n	80044c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	1ad2      	subs	r2, r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d302      	bcc.n	80044b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80044ac:	2301      	movs	r3, #1
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	e01b      	b.n	80044ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <prvInsertTimerInActiveList+0x7c>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3304      	adds	r3, #4
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f7fe f946 	bl	800274e <vListInsert>
 80044c2:	e012      	b.n	80044ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d206      	bcs.n	80044da <prvInsertTimerInActiveList+0x62>
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d302      	bcc.n	80044da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80044d4:	2301      	movs	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	e007      	b.n	80044ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <prvInsertTimerInActiveList+0x80>)
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3304      	adds	r3, #4
 80044e2:	4619      	mov	r1, r3
 80044e4:	4610      	mov	r0, r2
 80044e6:	f7fe f932 	bl	800274e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80044ea:	697b      	ldr	r3, [r7, #20]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20003e58 	.word	0x20003e58
 80044f8:	20003e54 	.word	0x20003e54

080044fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08c      	sub	sp, #48	; 0x30
 8004500:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004502:	e0b2      	b.n	800466a <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	da11      	bge.n	800452e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800450a:	f107 0308 	add.w	r3, r7, #8
 800450e:	3304      	adds	r3, #4
 8004510:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	2b00      	cmp	r3, #0
 8004516:	d102      	bne.n	800451e <prvProcessReceivedCommands+0x22>
 8004518:	f7fe fb1e 	bl	8002b58 <ulSetInterruptMask>
 800451c:	e7fe      	b.n	800451c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004524:	6850      	ldr	r0, [r2, #4]
 8004526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004528:	6892      	ldr	r2, [r2, #8]
 800452a:	4611      	mov	r1, r2
 800452c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f2c0 8099 	blt.w	8004668 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	3304      	adds	r3, #4
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe f93a 	bl	80027c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800454c:	1d3b      	adds	r3, r7, #4
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff ff72 	bl	8004438 <prvSampleTimeNow>
 8004554:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b09      	cmp	r3, #9
 800455a:	f200 8086 	bhi.w	800466a <prvProcessReceivedCommands+0x16e>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <prvProcessReceivedCommands+0x68>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	0800458d 	.word	0x0800458d
 8004568:	0800458d 	.word	0x0800458d
 800456c:	0800458d 	.word	0x0800458d
 8004570:	080045f1 	.word	0x080045f1
 8004574:	08004605 	.word	0x08004605
 8004578:	0800463f 	.word	0x0800463f
 800457c:	0800458d 	.word	0x0800458d
 8004580:	0800458d 	.word	0x0800458d
 8004584:	080045f1 	.word	0x080045f1
 8004588:	08004605 	.word	0x08004605
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	b2da      	uxtb	r2, r3
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	18d1      	adds	r1, r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	69fa      	ldr	r2, [r7, #28]
 80045aa:	6a38      	ldr	r0, [r7, #32]
 80045ac:	f7ff ff64 	bl	8004478 <prvInsertTimerInActiveList>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d059      	beq.n	800466a <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	6a38      	ldr	r0, [r7, #32]
 80045bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d04e      	beq.n	800466a <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	441a      	add	r2, r3
 80045d4:	2300      	movs	r3, #0
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2300      	movs	r3, #0
 80045da:	2100      	movs	r1, #0
 80045dc:	6a38      	ldr	r0, [r7, #32]
 80045de:	f7ff fe25 	bl	800422c <xTimerGenericCommand>
 80045e2:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d13f      	bne.n	800466a <prvProcessReceivedCommands+0x16e>
 80045ea:	f7fe fab5 	bl	8002b58 <ulSetInterruptMask>
 80045ee:	e7fe      	b.n	80045ee <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004602:	e032      	b.n	800466a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	b2da      	uxtb	r2, r3
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <prvProcessReceivedCommands+0x12e>
 8004624:	f7fe fa98 	bl	8002b58 <ulSetInterruptMask>
 8004628:	e7fe      	b.n	8004628 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	18d1      	adds	r1, r2, r3
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	6a38      	ldr	r0, [r7, #32]
 8004638:	f7ff ff1e 	bl	8004478 <prvInsertTimerInActiveList>
					break;
 800463c:	e015      	b.n	800466a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d103      	bne.n	8004654 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800464c:	6a38      	ldr	r0, [r7, #32]
 800464e:	f7fd ff1f 	bl	8002490 <vPortFree>
 8004652:	e00a      	b.n	800466a <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	b2da      	uxtb	r2, r3
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004666:	e000      	b.n	800466a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004668:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800466a:	4b08      	ldr	r3, [pc, #32]	; (800468c <prvProcessReceivedCommands+0x190>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f107 0108 	add.w	r1, r7, #8
 8004672:	2200      	movs	r2, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe fd0e 	bl	8003096 <xQueueReceive>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	f47f af41 	bne.w	8004504 <prvProcessReceivedCommands+0x8>
	}
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	3728      	adds	r7, #40	; 0x28
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20003e5c 	.word	0x20003e5c

08004690 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004696:	e040      	b.n	800471a <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004698:	4b29      	ldr	r3, [pc, #164]	; (8004740 <prvSwitchTimerLists+0xb0>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a2:	4b27      	ldr	r3, [pc, #156]	; (8004740 <prvSwitchTimerLists+0xb0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fe f885 	bl	80027c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d026      	beq.n	800471a <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4413      	add	r3, r2
 80046d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d90e      	bls.n	80046fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046ea:	4b15      	ldr	r3, [pc, #84]	; (8004740 <prvSwitchTimerLists+0xb0>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3304      	adds	r3, #4
 80046f2:	4619      	mov	r1, r3
 80046f4:	4610      	mov	r0, r2
 80046f6:	f7fe f82a 	bl	800274e <vListInsert>
 80046fa:	e00e      	b.n	800471a <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046fc:	2300      	movs	r3, #0
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	2300      	movs	r3, #0
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	2100      	movs	r1, #0
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff fd90 	bl	800422c <xTimerGenericCommand>
 800470c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <prvSwitchTimerLists+0x8a>
 8004714:	f7fe fa20 	bl	8002b58 <ulSetInterruptMask>
 8004718:	e7fe      	b.n	8004718 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800471a:	4b09      	ldr	r3, [pc, #36]	; (8004740 <prvSwitchTimerLists+0xb0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1b9      	bne.n	8004698 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <prvSwitchTimerLists+0xb0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <prvSwitchTimerLists+0xb4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a04      	ldr	r2, [pc, #16]	; (8004740 <prvSwitchTimerLists+0xb0>)
 8004730:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004732:	4a04      	ldr	r2, [pc, #16]	; (8004744 <prvSwitchTimerLists+0xb4>)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	6013      	str	r3, [r2, #0]
}
 8004738:	bf00      	nop
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	20003e54 	.word	0x20003e54
 8004744:	20003e58 	.word	0x20003e58

08004748 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800474e:	f7fe f8c9 	bl	80028e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <prvCheckForValidListAndQueue+0x60>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d120      	bne.n	800479c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800475a:	4814      	ldr	r0, [pc, #80]	; (80047ac <prvCheckForValidListAndQueue+0x64>)
 800475c:	f7fd ffa6 	bl	80026ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004760:	4813      	ldr	r0, [pc, #76]	; (80047b0 <prvCheckForValidListAndQueue+0x68>)
 8004762:	f7fd ffa3 	bl	80026ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004766:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <prvCheckForValidListAndQueue+0x6c>)
 8004768:	4a10      	ldr	r2, [pc, #64]	; (80047ac <prvCheckForValidListAndQueue+0x64>)
 800476a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800476c:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <prvCheckForValidListAndQueue+0x70>)
 800476e:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <prvCheckForValidListAndQueue+0x68>)
 8004770:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004772:	2300      	movs	r3, #0
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	4b11      	ldr	r3, [pc, #68]	; (80047bc <prvCheckForValidListAndQueue+0x74>)
 8004778:	4a11      	ldr	r2, [pc, #68]	; (80047c0 <prvCheckForValidListAndQueue+0x78>)
 800477a:	2110      	movs	r1, #16
 800477c:	200a      	movs	r0, #10
 800477e:	f7fe faab 	bl	8002cd8 <xQueueGenericCreateStatic>
 8004782:	4603      	mov	r3, r0
 8004784:	4a08      	ldr	r2, [pc, #32]	; (80047a8 <prvCheckForValidListAndQueue+0x60>)
 8004786:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004788:	4b07      	ldr	r3, [pc, #28]	; (80047a8 <prvCheckForValidListAndQueue+0x60>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <prvCheckForValidListAndQueue+0x60>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	490b      	ldr	r1, [pc, #44]	; (80047c4 <prvCheckForValidListAndQueue+0x7c>)
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe fe5c 	bl	8003454 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800479c:	f7fe f8b4 	bl	8002908 <vPortExitCritical>
}
 80047a0:	bf00      	nop
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20003e5c 	.word	0x20003e5c
 80047ac:	20003e2c 	.word	0x20003e2c
 80047b0:	20003e40 	.word	0x20003e40
 80047b4:	20003e54 	.word	0x20003e54
 80047b8:	20003e58 	.word	0x20003e58
 80047bc:	20003f08 	.word	0x20003f08
 80047c0:	20003e68 	.word	0x20003e68
 80047c4:	08005ca8 	.word	0x08005ca8

080047c8 <__errno>:
 80047c8:	4b01      	ldr	r3, [pc, #4]	; (80047d0 <__errno+0x8>)
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000010 	.word	0x20000010

080047d4 <__libc_init_array>:
 80047d4:	b570      	push	{r4, r5, r6, lr}
 80047d6:	4d0d      	ldr	r5, [pc, #52]	; (800480c <__libc_init_array+0x38>)
 80047d8:	2600      	movs	r6, #0
 80047da:	4c0d      	ldr	r4, [pc, #52]	; (8004810 <__libc_init_array+0x3c>)
 80047dc:	1b64      	subs	r4, r4, r5
 80047de:	10a4      	asrs	r4, r4, #2
 80047e0:	42a6      	cmp	r6, r4
 80047e2:	d109      	bne.n	80047f8 <__libc_init_array+0x24>
 80047e4:	4d0b      	ldr	r5, [pc, #44]	; (8004814 <__libc_init_array+0x40>)
 80047e6:	2600      	movs	r6, #0
 80047e8:	4c0b      	ldr	r4, [pc, #44]	; (8004818 <__libc_init_array+0x44>)
 80047ea:	f001 f9df 	bl	8005bac <_init>
 80047ee:	1b64      	subs	r4, r4, r5
 80047f0:	10a4      	asrs	r4, r4, #2
 80047f2:	42a6      	cmp	r6, r4
 80047f4:	d105      	bne.n	8004802 <__libc_init_array+0x2e>
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
 80047f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fc:	3601      	adds	r6, #1
 80047fe:	4798      	blx	r3
 8004800:	e7ee      	b.n	80047e0 <__libc_init_array+0xc>
 8004802:	f855 3b04 	ldr.w	r3, [r5], #4
 8004806:	3601      	adds	r6, #1
 8004808:	4798      	blx	r3
 800480a:	e7f2      	b.n	80047f2 <__libc_init_array+0x1e>
 800480c:	08005da0 	.word	0x08005da0
 8004810:	08005da0 	.word	0x08005da0
 8004814:	08005da0 	.word	0x08005da0
 8004818:	08005da4 	.word	0x08005da4

0800481c <memcpy>:
 800481c:	440a      	add	r2, r1
 800481e:	1e43      	subs	r3, r0, #1
 8004820:	4291      	cmp	r1, r2
 8004822:	d100      	bne.n	8004826 <memcpy+0xa>
 8004824:	4770      	bx	lr
 8004826:	b510      	push	{r4, lr}
 8004828:	f811 4b01 	ldrb.w	r4, [r1], #1
 800482c:	4291      	cmp	r1, r2
 800482e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004832:	d1f9      	bne.n	8004828 <memcpy+0xc>
 8004834:	bd10      	pop	{r4, pc}

08004836 <memset>:
 8004836:	4402      	add	r2, r0
 8004838:	4603      	mov	r3, r0
 800483a:	4293      	cmp	r3, r2
 800483c:	d100      	bne.n	8004840 <memset+0xa>
 800483e:	4770      	bx	lr
 8004840:	f803 1b01 	strb.w	r1, [r3], #1
 8004844:	e7f9      	b.n	800483a <memset+0x4>
	...

08004848 <iprintf>:
 8004848:	b40f      	push	{r0, r1, r2, r3}
 800484a:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <iprintf+0x2c>)
 800484c:	b513      	push	{r0, r1, r4, lr}
 800484e:	681c      	ldr	r4, [r3, #0]
 8004850:	b124      	cbz	r4, 800485c <iprintf+0x14>
 8004852:	69a3      	ldr	r3, [r4, #24]
 8004854:	b913      	cbnz	r3, 800485c <iprintf+0x14>
 8004856:	4620      	mov	r0, r4
 8004858:	f000 fa90 	bl	8004d7c <__sinit>
 800485c:	ab05      	add	r3, sp, #20
 800485e:	9a04      	ldr	r2, [sp, #16]
 8004860:	68a1      	ldr	r1, [r4, #8]
 8004862:	4620      	mov	r0, r4
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	f000 fdbd 	bl	80053e4 <_vfiprintf_r>
 800486a:	b002      	add	sp, #8
 800486c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004870:	b004      	add	sp, #16
 8004872:	4770      	bx	lr
 8004874:	20000010 	.word	0x20000010

08004878 <_puts_r>:
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	460e      	mov	r6, r1
 800487c:	4605      	mov	r5, r0
 800487e:	b118      	cbz	r0, 8004888 <_puts_r+0x10>
 8004880:	6983      	ldr	r3, [r0, #24]
 8004882:	b90b      	cbnz	r3, 8004888 <_puts_r+0x10>
 8004884:	f000 fa7a 	bl	8004d7c <__sinit>
 8004888:	69ab      	ldr	r3, [r5, #24]
 800488a:	68ac      	ldr	r4, [r5, #8]
 800488c:	b913      	cbnz	r3, 8004894 <_puts_r+0x1c>
 800488e:	4628      	mov	r0, r5
 8004890:	f000 fa74 	bl	8004d7c <__sinit>
 8004894:	4b2c      	ldr	r3, [pc, #176]	; (8004948 <_puts_r+0xd0>)
 8004896:	429c      	cmp	r4, r3
 8004898:	d120      	bne.n	80048dc <_puts_r+0x64>
 800489a:	686c      	ldr	r4, [r5, #4]
 800489c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800489e:	07db      	lsls	r3, r3, #31
 80048a0:	d405      	bmi.n	80048ae <_puts_r+0x36>
 80048a2:	89a3      	ldrh	r3, [r4, #12]
 80048a4:	0598      	lsls	r0, r3, #22
 80048a6:	d402      	bmi.n	80048ae <_puts_r+0x36>
 80048a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048aa:	f000 fb05 	bl	8004eb8 <__retarget_lock_acquire_recursive>
 80048ae:	89a3      	ldrh	r3, [r4, #12]
 80048b0:	0719      	lsls	r1, r3, #28
 80048b2:	d51d      	bpl.n	80048f0 <_puts_r+0x78>
 80048b4:	6923      	ldr	r3, [r4, #16]
 80048b6:	b1db      	cbz	r3, 80048f0 <_puts_r+0x78>
 80048b8:	3e01      	subs	r6, #1
 80048ba:	68a3      	ldr	r3, [r4, #8]
 80048bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048c0:	3b01      	subs	r3, #1
 80048c2:	60a3      	str	r3, [r4, #8]
 80048c4:	bb39      	cbnz	r1, 8004916 <_puts_r+0x9e>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	da38      	bge.n	800493c <_puts_r+0xc4>
 80048ca:	4622      	mov	r2, r4
 80048cc:	210a      	movs	r1, #10
 80048ce:	4628      	mov	r0, r5
 80048d0:	f000 f87c 	bl	80049cc <__swbuf_r>
 80048d4:	3001      	adds	r0, #1
 80048d6:	d011      	beq.n	80048fc <_puts_r+0x84>
 80048d8:	250a      	movs	r5, #10
 80048da:	e011      	b.n	8004900 <_puts_r+0x88>
 80048dc:	4b1b      	ldr	r3, [pc, #108]	; (800494c <_puts_r+0xd4>)
 80048de:	429c      	cmp	r4, r3
 80048e0:	d101      	bne.n	80048e6 <_puts_r+0x6e>
 80048e2:	68ac      	ldr	r4, [r5, #8]
 80048e4:	e7da      	b.n	800489c <_puts_r+0x24>
 80048e6:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <_puts_r+0xd8>)
 80048e8:	429c      	cmp	r4, r3
 80048ea:	bf08      	it	eq
 80048ec:	68ec      	ldreq	r4, [r5, #12]
 80048ee:	e7d5      	b.n	800489c <_puts_r+0x24>
 80048f0:	4621      	mov	r1, r4
 80048f2:	4628      	mov	r0, r5
 80048f4:	f000 f8bc 	bl	8004a70 <__swsetup_r>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	d0dd      	beq.n	80048b8 <_puts_r+0x40>
 80048fc:	f04f 35ff 	mov.w	r5, #4294967295
 8004900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004902:	07da      	lsls	r2, r3, #31
 8004904:	d405      	bmi.n	8004912 <_puts_r+0x9a>
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	059b      	lsls	r3, r3, #22
 800490a:	d402      	bmi.n	8004912 <_puts_r+0x9a>
 800490c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800490e:	f000 fad4 	bl	8004eba <__retarget_lock_release_recursive>
 8004912:	4628      	mov	r0, r5
 8004914:	bd70      	pop	{r4, r5, r6, pc}
 8004916:	2b00      	cmp	r3, #0
 8004918:	da04      	bge.n	8004924 <_puts_r+0xac>
 800491a:	69a2      	ldr	r2, [r4, #24]
 800491c:	429a      	cmp	r2, r3
 800491e:	dc06      	bgt.n	800492e <_puts_r+0xb6>
 8004920:	290a      	cmp	r1, #10
 8004922:	d004      	beq.n	800492e <_puts_r+0xb6>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	6022      	str	r2, [r4, #0]
 800492a:	7019      	strb	r1, [r3, #0]
 800492c:	e7c5      	b.n	80048ba <_puts_r+0x42>
 800492e:	4622      	mov	r2, r4
 8004930:	4628      	mov	r0, r5
 8004932:	f000 f84b 	bl	80049cc <__swbuf_r>
 8004936:	3001      	adds	r0, #1
 8004938:	d1bf      	bne.n	80048ba <_puts_r+0x42>
 800493a:	e7df      	b.n	80048fc <_puts_r+0x84>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	250a      	movs	r5, #10
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	6022      	str	r2, [r4, #0]
 8004944:	701d      	strb	r5, [r3, #0]
 8004946:	e7db      	b.n	8004900 <_puts_r+0x88>
 8004948:	08005d2c 	.word	0x08005d2c
 800494c:	08005d4c 	.word	0x08005d4c
 8004950:	08005d0c 	.word	0x08005d0c

08004954 <puts>:
 8004954:	4b02      	ldr	r3, [pc, #8]	; (8004960 <puts+0xc>)
 8004956:	4601      	mov	r1, r0
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	f7ff bf8d 	b.w	8004878 <_puts_r>
 800495e:	bf00      	nop
 8004960:	20000010 	.word	0x20000010

08004964 <sniprintf>:
 8004964:	b40c      	push	{r2, r3}
 8004966:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <sniprintf+0x64>)
 8004968:	b530      	push	{r4, r5, lr}
 800496a:	1e0c      	subs	r4, r1, #0
 800496c:	b09d      	sub	sp, #116	; 0x74
 800496e:	681d      	ldr	r5, [r3, #0]
 8004970:	da08      	bge.n	8004984 <sniprintf+0x20>
 8004972:	238b      	movs	r3, #139	; 0x8b
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	602b      	str	r3, [r5, #0]
 800497a:	b01d      	add	sp, #116	; 0x74
 800497c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004980:	b002      	add	sp, #8
 8004982:	4770      	bx	lr
 8004984:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004988:	9002      	str	r0, [sp, #8]
 800498a:	9006      	str	r0, [sp, #24]
 800498c:	a902      	add	r1, sp, #8
 800498e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004992:	bf14      	ite	ne
 8004994:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004998:	4623      	moveq	r3, r4
 800499a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800499c:	4628      	mov	r0, r5
 800499e:	9304      	str	r3, [sp, #16]
 80049a0:	9307      	str	r3, [sp, #28]
 80049a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80049aa:	ab21      	add	r3, sp, #132	; 0x84
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	f000 fbef 	bl	8005190 <_svfiprintf_r>
 80049b2:	1c43      	adds	r3, r0, #1
 80049b4:	bfbc      	itt	lt
 80049b6:	238b      	movlt	r3, #139	; 0x8b
 80049b8:	602b      	strlt	r3, [r5, #0]
 80049ba:	2c00      	cmp	r4, #0
 80049bc:	d0dd      	beq.n	800497a <sniprintf+0x16>
 80049be:	9b02      	ldr	r3, [sp, #8]
 80049c0:	2200      	movs	r2, #0
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	e7d9      	b.n	800497a <sniprintf+0x16>
 80049c6:	bf00      	nop
 80049c8:	20000010 	.word	0x20000010

080049cc <__swbuf_r>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	460e      	mov	r6, r1
 80049d0:	4614      	mov	r4, r2
 80049d2:	4605      	mov	r5, r0
 80049d4:	b118      	cbz	r0, 80049de <__swbuf_r+0x12>
 80049d6:	6983      	ldr	r3, [r0, #24]
 80049d8:	b90b      	cbnz	r3, 80049de <__swbuf_r+0x12>
 80049da:	f000 f9cf 	bl	8004d7c <__sinit>
 80049de:	4b21      	ldr	r3, [pc, #132]	; (8004a64 <__swbuf_r+0x98>)
 80049e0:	429c      	cmp	r4, r3
 80049e2:	d12b      	bne.n	8004a3c <__swbuf_r+0x70>
 80049e4:	686c      	ldr	r4, [r5, #4]
 80049e6:	69a3      	ldr	r3, [r4, #24]
 80049e8:	60a3      	str	r3, [r4, #8]
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	071a      	lsls	r2, r3, #28
 80049ee:	d52f      	bpl.n	8004a50 <__swbuf_r+0x84>
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	b36b      	cbz	r3, 8004a50 <__swbuf_r+0x84>
 80049f4:	6923      	ldr	r3, [r4, #16]
 80049f6:	b2f6      	uxtb	r6, r6
 80049f8:	6820      	ldr	r0, [r4, #0]
 80049fa:	4637      	mov	r7, r6
 80049fc:	1ac0      	subs	r0, r0, r3
 80049fe:	6963      	ldr	r3, [r4, #20]
 8004a00:	4283      	cmp	r3, r0
 8004a02:	dc04      	bgt.n	8004a0e <__swbuf_r+0x42>
 8004a04:	4621      	mov	r1, r4
 8004a06:	4628      	mov	r0, r5
 8004a08:	f000 f924 	bl	8004c54 <_fflush_r>
 8004a0c:	bb30      	cbnz	r0, 8004a5c <__swbuf_r+0x90>
 8004a0e:	68a3      	ldr	r3, [r4, #8]
 8004a10:	3001      	adds	r0, #1
 8004a12:	3b01      	subs	r3, #1
 8004a14:	60a3      	str	r3, [r4, #8]
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	6022      	str	r2, [r4, #0]
 8004a1c:	701e      	strb	r6, [r3, #0]
 8004a1e:	6963      	ldr	r3, [r4, #20]
 8004a20:	4283      	cmp	r3, r0
 8004a22:	d004      	beq.n	8004a2e <__swbuf_r+0x62>
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	07db      	lsls	r3, r3, #31
 8004a28:	d506      	bpl.n	8004a38 <__swbuf_r+0x6c>
 8004a2a:	2e0a      	cmp	r6, #10
 8004a2c:	d104      	bne.n	8004a38 <__swbuf_r+0x6c>
 8004a2e:	4621      	mov	r1, r4
 8004a30:	4628      	mov	r0, r5
 8004a32:	f000 f90f 	bl	8004c54 <_fflush_r>
 8004a36:	b988      	cbnz	r0, 8004a5c <__swbuf_r+0x90>
 8004a38:	4638      	mov	r0, r7
 8004a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <__swbuf_r+0x9c>)
 8004a3e:	429c      	cmp	r4, r3
 8004a40:	d101      	bne.n	8004a46 <__swbuf_r+0x7a>
 8004a42:	68ac      	ldr	r4, [r5, #8]
 8004a44:	e7cf      	b.n	80049e6 <__swbuf_r+0x1a>
 8004a46:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <__swbuf_r+0xa0>)
 8004a48:	429c      	cmp	r4, r3
 8004a4a:	bf08      	it	eq
 8004a4c:	68ec      	ldreq	r4, [r5, #12]
 8004a4e:	e7ca      	b.n	80049e6 <__swbuf_r+0x1a>
 8004a50:	4621      	mov	r1, r4
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 f80c 	bl	8004a70 <__swsetup_r>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d0cb      	beq.n	80049f4 <__swbuf_r+0x28>
 8004a5c:	f04f 37ff 	mov.w	r7, #4294967295
 8004a60:	e7ea      	b.n	8004a38 <__swbuf_r+0x6c>
 8004a62:	bf00      	nop
 8004a64:	08005d2c 	.word	0x08005d2c
 8004a68:	08005d4c 	.word	0x08005d4c
 8004a6c:	08005d0c 	.word	0x08005d0c

08004a70 <__swsetup_r>:
 8004a70:	4b32      	ldr	r3, [pc, #200]	; (8004b3c <__swsetup_r+0xcc>)
 8004a72:	b570      	push	{r4, r5, r6, lr}
 8004a74:	681d      	ldr	r5, [r3, #0]
 8004a76:	4606      	mov	r6, r0
 8004a78:	460c      	mov	r4, r1
 8004a7a:	b125      	cbz	r5, 8004a86 <__swsetup_r+0x16>
 8004a7c:	69ab      	ldr	r3, [r5, #24]
 8004a7e:	b913      	cbnz	r3, 8004a86 <__swsetup_r+0x16>
 8004a80:	4628      	mov	r0, r5
 8004a82:	f000 f97b 	bl	8004d7c <__sinit>
 8004a86:	4b2e      	ldr	r3, [pc, #184]	; (8004b40 <__swsetup_r+0xd0>)
 8004a88:	429c      	cmp	r4, r3
 8004a8a:	d10f      	bne.n	8004aac <__swsetup_r+0x3c>
 8004a8c:	686c      	ldr	r4, [r5, #4]
 8004a8e:	89a3      	ldrh	r3, [r4, #12]
 8004a90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a94:	0719      	lsls	r1, r3, #28
 8004a96:	d42c      	bmi.n	8004af2 <__swsetup_r+0x82>
 8004a98:	06dd      	lsls	r5, r3, #27
 8004a9a:	d411      	bmi.n	8004ac0 <__swsetup_r+0x50>
 8004a9c:	2309      	movs	r3, #9
 8004a9e:	6033      	str	r3, [r6, #0]
 8004aa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa8:	81a3      	strh	r3, [r4, #12]
 8004aaa:	e03e      	b.n	8004b2a <__swsetup_r+0xba>
 8004aac:	4b25      	ldr	r3, [pc, #148]	; (8004b44 <__swsetup_r+0xd4>)
 8004aae:	429c      	cmp	r4, r3
 8004ab0:	d101      	bne.n	8004ab6 <__swsetup_r+0x46>
 8004ab2:	68ac      	ldr	r4, [r5, #8]
 8004ab4:	e7eb      	b.n	8004a8e <__swsetup_r+0x1e>
 8004ab6:	4b24      	ldr	r3, [pc, #144]	; (8004b48 <__swsetup_r+0xd8>)
 8004ab8:	429c      	cmp	r4, r3
 8004aba:	bf08      	it	eq
 8004abc:	68ec      	ldreq	r4, [r5, #12]
 8004abe:	e7e6      	b.n	8004a8e <__swsetup_r+0x1e>
 8004ac0:	0758      	lsls	r0, r3, #29
 8004ac2:	d512      	bpl.n	8004aea <__swsetup_r+0x7a>
 8004ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ac6:	b141      	cbz	r1, 8004ada <__swsetup_r+0x6a>
 8004ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004acc:	4299      	cmp	r1, r3
 8004ace:	d002      	beq.n	8004ad6 <__swsetup_r+0x66>
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f000 fa57 	bl	8004f84 <_free_r>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6363      	str	r3, [r4, #52]	; 0x34
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ae0:	81a3      	strh	r3, [r4, #12]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	6063      	str	r3, [r4, #4]
 8004ae6:	6923      	ldr	r3, [r4, #16]
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	f043 0308 	orr.w	r3, r3, #8
 8004af0:	81a3      	strh	r3, [r4, #12]
 8004af2:	6923      	ldr	r3, [r4, #16]
 8004af4:	b94b      	cbnz	r3, 8004b0a <__swsetup_r+0x9a>
 8004af6:	89a3      	ldrh	r3, [r4, #12]
 8004af8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b00:	d003      	beq.n	8004b0a <__swsetup_r+0x9a>
 8004b02:	4621      	mov	r1, r4
 8004b04:	4630      	mov	r0, r6
 8004b06:	f000 f9fd 	bl	8004f04 <__smakebuf_r>
 8004b0a:	89a0      	ldrh	r0, [r4, #12]
 8004b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b10:	f010 0301 	ands.w	r3, r0, #1
 8004b14:	d00a      	beq.n	8004b2c <__swsetup_r+0xbc>
 8004b16:	2300      	movs	r3, #0
 8004b18:	60a3      	str	r3, [r4, #8]
 8004b1a:	6963      	ldr	r3, [r4, #20]
 8004b1c:	425b      	negs	r3, r3
 8004b1e:	61a3      	str	r3, [r4, #24]
 8004b20:	6923      	ldr	r3, [r4, #16]
 8004b22:	b943      	cbnz	r3, 8004b36 <__swsetup_r+0xc6>
 8004b24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b28:	d1ba      	bne.n	8004aa0 <__swsetup_r+0x30>
 8004b2a:	bd70      	pop	{r4, r5, r6, pc}
 8004b2c:	0781      	lsls	r1, r0, #30
 8004b2e:	bf58      	it	pl
 8004b30:	6963      	ldrpl	r3, [r4, #20]
 8004b32:	60a3      	str	r3, [r4, #8]
 8004b34:	e7f4      	b.n	8004b20 <__swsetup_r+0xb0>
 8004b36:	2000      	movs	r0, #0
 8004b38:	e7f7      	b.n	8004b2a <__swsetup_r+0xba>
 8004b3a:	bf00      	nop
 8004b3c:	20000010 	.word	0x20000010
 8004b40:	08005d2c 	.word	0x08005d2c
 8004b44:	08005d4c 	.word	0x08005d4c
 8004b48:	08005d0c 	.word	0x08005d0c

08004b4c <__sflush_r>:
 8004b4c:	898a      	ldrh	r2, [r1, #12]
 8004b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b52:	4605      	mov	r5, r0
 8004b54:	0710      	lsls	r0, r2, #28
 8004b56:	460c      	mov	r4, r1
 8004b58:	d458      	bmi.n	8004c0c <__sflush_r+0xc0>
 8004b5a:	684b      	ldr	r3, [r1, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	dc05      	bgt.n	8004b6c <__sflush_r+0x20>
 8004b60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	dc02      	bgt.n	8004b6c <__sflush_r+0x20>
 8004b66:	2000      	movs	r0, #0
 8004b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b6e:	2e00      	cmp	r6, #0
 8004b70:	d0f9      	beq.n	8004b66 <__sflush_r+0x1a>
 8004b72:	2300      	movs	r3, #0
 8004b74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b78:	682f      	ldr	r7, [r5, #0]
 8004b7a:	602b      	str	r3, [r5, #0]
 8004b7c:	d032      	beq.n	8004be4 <__sflush_r+0x98>
 8004b7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	075a      	lsls	r2, r3, #29
 8004b84:	d505      	bpl.n	8004b92 <__sflush_r+0x46>
 8004b86:	6863      	ldr	r3, [r4, #4]
 8004b88:	1ac0      	subs	r0, r0, r3
 8004b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b8c:	b10b      	cbz	r3, 8004b92 <__sflush_r+0x46>
 8004b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b90:	1ac0      	subs	r0, r0, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	4602      	mov	r2, r0
 8004b96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b98:	4628      	mov	r0, r5
 8004b9a:	6a21      	ldr	r1, [r4, #32]
 8004b9c:	47b0      	blx	r6
 8004b9e:	1c43      	adds	r3, r0, #1
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	d106      	bne.n	8004bb2 <__sflush_r+0x66>
 8004ba4:	6829      	ldr	r1, [r5, #0]
 8004ba6:	291d      	cmp	r1, #29
 8004ba8:	d82c      	bhi.n	8004c04 <__sflush_r+0xb8>
 8004baa:	4a29      	ldr	r2, [pc, #164]	; (8004c50 <__sflush_r+0x104>)
 8004bac:	40ca      	lsrs	r2, r1
 8004bae:	07d6      	lsls	r6, r2, #31
 8004bb0:	d528      	bpl.n	8004c04 <__sflush_r+0xb8>
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	04d9      	lsls	r1, r3, #19
 8004bb6:	6062      	str	r2, [r4, #4]
 8004bb8:	6922      	ldr	r2, [r4, #16]
 8004bba:	6022      	str	r2, [r4, #0]
 8004bbc:	d504      	bpl.n	8004bc8 <__sflush_r+0x7c>
 8004bbe:	1c42      	adds	r2, r0, #1
 8004bc0:	d101      	bne.n	8004bc6 <__sflush_r+0x7a>
 8004bc2:	682b      	ldr	r3, [r5, #0]
 8004bc4:	b903      	cbnz	r3, 8004bc8 <__sflush_r+0x7c>
 8004bc6:	6560      	str	r0, [r4, #84]	; 0x54
 8004bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bca:	602f      	str	r7, [r5, #0]
 8004bcc:	2900      	cmp	r1, #0
 8004bce:	d0ca      	beq.n	8004b66 <__sflush_r+0x1a>
 8004bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bd4:	4299      	cmp	r1, r3
 8004bd6:	d002      	beq.n	8004bde <__sflush_r+0x92>
 8004bd8:	4628      	mov	r0, r5
 8004bda:	f000 f9d3 	bl	8004f84 <_free_r>
 8004bde:	2000      	movs	r0, #0
 8004be0:	6360      	str	r0, [r4, #52]	; 0x34
 8004be2:	e7c1      	b.n	8004b68 <__sflush_r+0x1c>
 8004be4:	6a21      	ldr	r1, [r4, #32]
 8004be6:	2301      	movs	r3, #1
 8004be8:	4628      	mov	r0, r5
 8004bea:	47b0      	blx	r6
 8004bec:	1c41      	adds	r1, r0, #1
 8004bee:	d1c7      	bne.n	8004b80 <__sflush_r+0x34>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0c4      	beq.n	8004b80 <__sflush_r+0x34>
 8004bf6:	2b1d      	cmp	r3, #29
 8004bf8:	d001      	beq.n	8004bfe <__sflush_r+0xb2>
 8004bfa:	2b16      	cmp	r3, #22
 8004bfc:	d101      	bne.n	8004c02 <__sflush_r+0xb6>
 8004bfe:	602f      	str	r7, [r5, #0]
 8004c00:	e7b1      	b.n	8004b66 <__sflush_r+0x1a>
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	e7ad      	b.n	8004b68 <__sflush_r+0x1c>
 8004c0c:	690f      	ldr	r7, [r1, #16]
 8004c0e:	2f00      	cmp	r7, #0
 8004c10:	d0a9      	beq.n	8004b66 <__sflush_r+0x1a>
 8004c12:	0793      	lsls	r3, r2, #30
 8004c14:	680e      	ldr	r6, [r1, #0]
 8004c16:	600f      	str	r7, [r1, #0]
 8004c18:	bf0c      	ite	eq
 8004c1a:	694b      	ldreq	r3, [r1, #20]
 8004c1c:	2300      	movne	r3, #0
 8004c1e:	eba6 0807 	sub.w	r8, r6, r7
 8004c22:	608b      	str	r3, [r1, #8]
 8004c24:	f1b8 0f00 	cmp.w	r8, #0
 8004c28:	dd9d      	ble.n	8004b66 <__sflush_r+0x1a>
 8004c2a:	4643      	mov	r3, r8
 8004c2c:	463a      	mov	r2, r7
 8004c2e:	6a21      	ldr	r1, [r4, #32]
 8004c30:	4628      	mov	r0, r5
 8004c32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c34:	47b0      	blx	r6
 8004c36:	2800      	cmp	r0, #0
 8004c38:	dc06      	bgt.n	8004c48 <__sflush_r+0xfc>
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c44:	81a3      	strh	r3, [r4, #12]
 8004c46:	e78f      	b.n	8004b68 <__sflush_r+0x1c>
 8004c48:	4407      	add	r7, r0
 8004c4a:	eba8 0800 	sub.w	r8, r8, r0
 8004c4e:	e7e9      	b.n	8004c24 <__sflush_r+0xd8>
 8004c50:	20400001 	.word	0x20400001

08004c54 <_fflush_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	690b      	ldr	r3, [r1, #16]
 8004c58:	4605      	mov	r5, r0
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	b913      	cbnz	r3, 8004c64 <_fflush_r+0x10>
 8004c5e:	2500      	movs	r5, #0
 8004c60:	4628      	mov	r0, r5
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	b118      	cbz	r0, 8004c6e <_fflush_r+0x1a>
 8004c66:	6983      	ldr	r3, [r0, #24]
 8004c68:	b90b      	cbnz	r3, 8004c6e <_fflush_r+0x1a>
 8004c6a:	f000 f887 	bl	8004d7c <__sinit>
 8004c6e:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <_fflush_r+0x6c>)
 8004c70:	429c      	cmp	r4, r3
 8004c72:	d11b      	bne.n	8004cac <_fflush_r+0x58>
 8004c74:	686c      	ldr	r4, [r5, #4]
 8004c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0ef      	beq.n	8004c5e <_fflush_r+0xa>
 8004c7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c80:	07d0      	lsls	r0, r2, #31
 8004c82:	d404      	bmi.n	8004c8e <_fflush_r+0x3a>
 8004c84:	0599      	lsls	r1, r3, #22
 8004c86:	d402      	bmi.n	8004c8e <_fflush_r+0x3a>
 8004c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c8a:	f000 f915 	bl	8004eb8 <__retarget_lock_acquire_recursive>
 8004c8e:	4628      	mov	r0, r5
 8004c90:	4621      	mov	r1, r4
 8004c92:	f7ff ff5b 	bl	8004b4c <__sflush_r>
 8004c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c98:	4605      	mov	r5, r0
 8004c9a:	07da      	lsls	r2, r3, #31
 8004c9c:	d4e0      	bmi.n	8004c60 <_fflush_r+0xc>
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	059b      	lsls	r3, r3, #22
 8004ca2:	d4dd      	bmi.n	8004c60 <_fflush_r+0xc>
 8004ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ca6:	f000 f908 	bl	8004eba <__retarget_lock_release_recursive>
 8004caa:	e7d9      	b.n	8004c60 <_fflush_r+0xc>
 8004cac:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <_fflush_r+0x70>)
 8004cae:	429c      	cmp	r4, r3
 8004cb0:	d101      	bne.n	8004cb6 <_fflush_r+0x62>
 8004cb2:	68ac      	ldr	r4, [r5, #8]
 8004cb4:	e7df      	b.n	8004c76 <_fflush_r+0x22>
 8004cb6:	4b04      	ldr	r3, [pc, #16]	; (8004cc8 <_fflush_r+0x74>)
 8004cb8:	429c      	cmp	r4, r3
 8004cba:	bf08      	it	eq
 8004cbc:	68ec      	ldreq	r4, [r5, #12]
 8004cbe:	e7da      	b.n	8004c76 <_fflush_r+0x22>
 8004cc0:	08005d2c 	.word	0x08005d2c
 8004cc4:	08005d4c 	.word	0x08005d4c
 8004cc8:	08005d0c 	.word	0x08005d0c

08004ccc <std>:
 8004ccc:	2300      	movs	r3, #0
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	6083      	str	r3, [r0, #8]
 8004cd4:	8181      	strh	r1, [r0, #12]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6643      	str	r3, [r0, #100]	; 0x64
 8004cda:	81c2      	strh	r2, [r0, #14]
 8004cdc:	2208      	movs	r2, #8
 8004cde:	6183      	str	r3, [r0, #24]
 8004ce0:	e9c0 3300 	strd	r3, r3, [r0]
 8004ce4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ce8:	305c      	adds	r0, #92	; 0x5c
 8004cea:	f7ff fda4 	bl	8004836 <memset>
 8004cee:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <std+0x38>)
 8004cf0:	6224      	str	r4, [r4, #32]
 8004cf2:	6263      	str	r3, [r4, #36]	; 0x24
 8004cf4:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <std+0x3c>)
 8004cf6:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cf8:	4b04      	ldr	r3, [pc, #16]	; (8004d0c <std+0x40>)
 8004cfa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <std+0x44>)
 8004cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	bf00      	nop
 8004d04:	08005991 	.word	0x08005991
 8004d08:	080059b3 	.word	0x080059b3
 8004d0c:	080059eb 	.word	0x080059eb
 8004d10:	08005a0f 	.word	0x08005a0f

08004d14 <_cleanup_r>:
 8004d14:	4901      	ldr	r1, [pc, #4]	; (8004d1c <_cleanup_r+0x8>)
 8004d16:	f000 b8af 	b.w	8004e78 <_fwalk_reent>
 8004d1a:	bf00      	nop
 8004d1c:	08004c55 	.word	0x08004c55

08004d20 <__sfmoreglue>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	1e4a      	subs	r2, r1, #1
 8004d24:	2568      	movs	r5, #104	; 0x68
 8004d26:	460e      	mov	r6, r1
 8004d28:	4355      	muls	r5, r2
 8004d2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d2e:	f000 f979 	bl	8005024 <_malloc_r>
 8004d32:	4604      	mov	r4, r0
 8004d34:	b140      	cbz	r0, 8004d48 <__sfmoreglue+0x28>
 8004d36:	2100      	movs	r1, #0
 8004d38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d3c:	e9c0 1600 	strd	r1, r6, [r0]
 8004d40:	300c      	adds	r0, #12
 8004d42:	60a0      	str	r0, [r4, #8]
 8004d44:	f7ff fd77 	bl	8004836 <memset>
 8004d48:	4620      	mov	r0, r4
 8004d4a:	bd70      	pop	{r4, r5, r6, pc}

08004d4c <__sfp_lock_acquire>:
 8004d4c:	4801      	ldr	r0, [pc, #4]	; (8004d54 <__sfp_lock_acquire+0x8>)
 8004d4e:	f000 b8b3 	b.w	8004eb8 <__retarget_lock_acquire_recursive>
 8004d52:	bf00      	nop
 8004d54:	20004004 	.word	0x20004004

08004d58 <__sfp_lock_release>:
 8004d58:	4801      	ldr	r0, [pc, #4]	; (8004d60 <__sfp_lock_release+0x8>)
 8004d5a:	f000 b8ae 	b.w	8004eba <__retarget_lock_release_recursive>
 8004d5e:	bf00      	nop
 8004d60:	20004004 	.word	0x20004004

08004d64 <__sinit_lock_acquire>:
 8004d64:	4801      	ldr	r0, [pc, #4]	; (8004d6c <__sinit_lock_acquire+0x8>)
 8004d66:	f000 b8a7 	b.w	8004eb8 <__retarget_lock_acquire_recursive>
 8004d6a:	bf00      	nop
 8004d6c:	20003fff 	.word	0x20003fff

08004d70 <__sinit_lock_release>:
 8004d70:	4801      	ldr	r0, [pc, #4]	; (8004d78 <__sinit_lock_release+0x8>)
 8004d72:	f000 b8a2 	b.w	8004eba <__retarget_lock_release_recursive>
 8004d76:	bf00      	nop
 8004d78:	20003fff 	.word	0x20003fff

08004d7c <__sinit>:
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	4604      	mov	r4, r0
 8004d80:	f7ff fff0 	bl	8004d64 <__sinit_lock_acquire>
 8004d84:	69a3      	ldr	r3, [r4, #24]
 8004d86:	b11b      	cbz	r3, 8004d90 <__sinit+0x14>
 8004d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d8c:	f7ff bff0 	b.w	8004d70 <__sinit_lock_release>
 8004d90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d94:	6523      	str	r3, [r4, #80]	; 0x50
 8004d96:	4620      	mov	r0, r4
 8004d98:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <__sinit+0x68>)
 8004d9a:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <__sinit+0x6c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	62a2      	str	r2, [r4, #40]	; 0x28
 8004da0:	42a3      	cmp	r3, r4
 8004da2:	bf04      	itt	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	61a3      	streq	r3, [r4, #24]
 8004da8:	f000 f820 	bl	8004dec <__sfp>
 8004dac:	6060      	str	r0, [r4, #4]
 8004dae:	4620      	mov	r0, r4
 8004db0:	f000 f81c 	bl	8004dec <__sfp>
 8004db4:	60a0      	str	r0, [r4, #8]
 8004db6:	4620      	mov	r0, r4
 8004db8:	f000 f818 	bl	8004dec <__sfp>
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2104      	movs	r1, #4
 8004dc0:	60e0      	str	r0, [r4, #12]
 8004dc2:	6860      	ldr	r0, [r4, #4]
 8004dc4:	f7ff ff82 	bl	8004ccc <std>
 8004dc8:	2201      	movs	r2, #1
 8004dca:	2109      	movs	r1, #9
 8004dcc:	68a0      	ldr	r0, [r4, #8]
 8004dce:	f7ff ff7d 	bl	8004ccc <std>
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	2112      	movs	r1, #18
 8004dd6:	68e0      	ldr	r0, [r4, #12]
 8004dd8:	f7ff ff78 	bl	8004ccc <std>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	61a3      	str	r3, [r4, #24]
 8004de0:	e7d2      	b.n	8004d88 <__sinit+0xc>
 8004de2:	bf00      	nop
 8004de4:	08005d08 	.word	0x08005d08
 8004de8:	08004d15 	.word	0x08004d15

08004dec <__sfp>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	4607      	mov	r7, r0
 8004df0:	f7ff ffac 	bl	8004d4c <__sfp_lock_acquire>
 8004df4:	4b1e      	ldr	r3, [pc, #120]	; (8004e70 <__sfp+0x84>)
 8004df6:	681e      	ldr	r6, [r3, #0]
 8004df8:	69b3      	ldr	r3, [r6, #24]
 8004dfa:	b913      	cbnz	r3, 8004e02 <__sfp+0x16>
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f7ff ffbd 	bl	8004d7c <__sinit>
 8004e02:	3648      	adds	r6, #72	; 0x48
 8004e04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	d503      	bpl.n	8004e14 <__sfp+0x28>
 8004e0c:	6833      	ldr	r3, [r6, #0]
 8004e0e:	b30b      	cbz	r3, 8004e54 <__sfp+0x68>
 8004e10:	6836      	ldr	r6, [r6, #0]
 8004e12:	e7f7      	b.n	8004e04 <__sfp+0x18>
 8004e14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e18:	b9d5      	cbnz	r5, 8004e50 <__sfp+0x64>
 8004e1a:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <__sfp+0x88>)
 8004e1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e20:	6665      	str	r5, [r4, #100]	; 0x64
 8004e22:	60e3      	str	r3, [r4, #12]
 8004e24:	f000 f847 	bl	8004eb6 <__retarget_lock_init_recursive>
 8004e28:	f7ff ff96 	bl	8004d58 <__sfp_lock_release>
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	4629      	mov	r1, r5
 8004e30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e34:	6025      	str	r5, [r4, #0]
 8004e36:	61a5      	str	r5, [r4, #24]
 8004e38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e40:	f7ff fcf9 	bl	8004836 <memset>
 8004e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e50:	3468      	adds	r4, #104	; 0x68
 8004e52:	e7d9      	b.n	8004e08 <__sfp+0x1c>
 8004e54:	2104      	movs	r1, #4
 8004e56:	4638      	mov	r0, r7
 8004e58:	f7ff ff62 	bl	8004d20 <__sfmoreglue>
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	6030      	str	r0, [r6, #0]
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d1d5      	bne.n	8004e10 <__sfp+0x24>
 8004e64:	f7ff ff78 	bl	8004d58 <__sfp_lock_release>
 8004e68:	230c      	movs	r3, #12
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	e7ee      	b.n	8004e4c <__sfp+0x60>
 8004e6e:	bf00      	nop
 8004e70:	08005d08 	.word	0x08005d08
 8004e74:	ffff0001 	.word	0xffff0001

08004e78 <_fwalk_reent>:
 8004e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e7c:	4606      	mov	r6, r0
 8004e7e:	4688      	mov	r8, r1
 8004e80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e84:	2700      	movs	r7, #0
 8004e86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e8a:	f1b9 0901 	subs.w	r9, r9, #1
 8004e8e:	d505      	bpl.n	8004e9c <_fwalk_reent+0x24>
 8004e90:	6824      	ldr	r4, [r4, #0]
 8004e92:	2c00      	cmp	r4, #0
 8004e94:	d1f7      	bne.n	8004e86 <_fwalk_reent+0xe>
 8004e96:	4638      	mov	r0, r7
 8004e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e9c:	89ab      	ldrh	r3, [r5, #12]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d907      	bls.n	8004eb2 <_fwalk_reent+0x3a>
 8004ea2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	d003      	beq.n	8004eb2 <_fwalk_reent+0x3a>
 8004eaa:	4629      	mov	r1, r5
 8004eac:	4630      	mov	r0, r6
 8004eae:	47c0      	blx	r8
 8004eb0:	4307      	orrs	r7, r0
 8004eb2:	3568      	adds	r5, #104	; 0x68
 8004eb4:	e7e9      	b.n	8004e8a <_fwalk_reent+0x12>

08004eb6 <__retarget_lock_init_recursive>:
 8004eb6:	4770      	bx	lr

08004eb8 <__retarget_lock_acquire_recursive>:
 8004eb8:	4770      	bx	lr

08004eba <__retarget_lock_release_recursive>:
 8004eba:	4770      	bx	lr

08004ebc <__swhatbuf_r>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	460e      	mov	r6, r1
 8004ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec4:	b096      	sub	sp, #88	; 0x58
 8004ec6:	4614      	mov	r4, r2
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	461d      	mov	r5, r3
 8004ecc:	da07      	bge.n	8004ede <__swhatbuf_r+0x22>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	602b      	str	r3, [r5, #0]
 8004ed2:	89b3      	ldrh	r3, [r6, #12]
 8004ed4:	061a      	lsls	r2, r3, #24
 8004ed6:	d410      	bmi.n	8004efa <__swhatbuf_r+0x3e>
 8004ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004edc:	e00e      	b.n	8004efc <__swhatbuf_r+0x40>
 8004ede:	466a      	mov	r2, sp
 8004ee0:	f000 fdbc 	bl	8005a5c <_fstat_r>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	dbf2      	blt.n	8004ece <__swhatbuf_r+0x12>
 8004ee8:	9a01      	ldr	r2, [sp, #4]
 8004eea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004eee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ef2:	425a      	negs	r2, r3
 8004ef4:	415a      	adcs	r2, r3
 8004ef6:	602a      	str	r2, [r5, #0]
 8004ef8:	e7ee      	b.n	8004ed8 <__swhatbuf_r+0x1c>
 8004efa:	2340      	movs	r3, #64	; 0x40
 8004efc:	2000      	movs	r0, #0
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	b016      	add	sp, #88	; 0x58
 8004f02:	bd70      	pop	{r4, r5, r6, pc}

08004f04 <__smakebuf_r>:
 8004f04:	898b      	ldrh	r3, [r1, #12]
 8004f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f08:	079d      	lsls	r5, r3, #30
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	d507      	bpl.n	8004f20 <__smakebuf_r+0x1c>
 8004f10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	6123      	str	r3, [r4, #16]
 8004f18:	2301      	movs	r3, #1
 8004f1a:	6163      	str	r3, [r4, #20]
 8004f1c:	b002      	add	sp, #8
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}
 8004f20:	ab01      	add	r3, sp, #4
 8004f22:	466a      	mov	r2, sp
 8004f24:	f7ff ffca 	bl	8004ebc <__swhatbuf_r>
 8004f28:	9900      	ldr	r1, [sp, #0]
 8004f2a:	4605      	mov	r5, r0
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	f000 f879 	bl	8005024 <_malloc_r>
 8004f32:	b948      	cbnz	r0, 8004f48 <__smakebuf_r+0x44>
 8004f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f38:	059a      	lsls	r2, r3, #22
 8004f3a:	d4ef      	bmi.n	8004f1c <__smakebuf_r+0x18>
 8004f3c:	f023 0303 	bic.w	r3, r3, #3
 8004f40:	f043 0302 	orr.w	r3, r3, #2
 8004f44:	81a3      	strh	r3, [r4, #12]
 8004f46:	e7e3      	b.n	8004f10 <__smakebuf_r+0xc>
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <__smakebuf_r+0x7c>)
 8004f4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	6020      	str	r0, [r4, #0]
 8004f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f54:	6120      	str	r0, [r4, #16]
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	9b00      	ldr	r3, [sp, #0]
 8004f5a:	6163      	str	r3, [r4, #20]
 8004f5c:	9b01      	ldr	r3, [sp, #4]
 8004f5e:	b15b      	cbz	r3, 8004f78 <__smakebuf_r+0x74>
 8004f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f64:	4630      	mov	r0, r6
 8004f66:	f000 fd8b 	bl	8005a80 <_isatty_r>
 8004f6a:	b128      	cbz	r0, 8004f78 <__smakebuf_r+0x74>
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	81a3      	strh	r3, [r4, #12]
 8004f78:	89a0      	ldrh	r0, [r4, #12]
 8004f7a:	4305      	orrs	r5, r0
 8004f7c:	81a5      	strh	r5, [r4, #12]
 8004f7e:	e7cd      	b.n	8004f1c <__smakebuf_r+0x18>
 8004f80:	08004d15 	.word	0x08004d15

08004f84 <_free_r>:
 8004f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f86:	2900      	cmp	r1, #0
 8004f88:	d047      	beq.n	800501a <_free_r+0x96>
 8004f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f8e:	1f0c      	subs	r4, r1, #4
 8004f90:	9001      	str	r0, [sp, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bfb8      	it	lt
 8004f96:	18e4      	addlt	r4, r4, r3
 8004f98:	f000 fdbc 	bl	8005b14 <__malloc_lock>
 8004f9c:	4a20      	ldr	r2, [pc, #128]	; (8005020 <_free_r+0x9c>)
 8004f9e:	9801      	ldr	r0, [sp, #4]
 8004fa0:	6813      	ldr	r3, [r2, #0]
 8004fa2:	4615      	mov	r5, r2
 8004fa4:	b933      	cbnz	r3, 8004fb4 <_free_r+0x30>
 8004fa6:	6063      	str	r3, [r4, #4]
 8004fa8:	6014      	str	r4, [r2, #0]
 8004faa:	b003      	add	sp, #12
 8004fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fb0:	f000 bdb6 	b.w	8005b20 <__malloc_unlock>
 8004fb4:	42a3      	cmp	r3, r4
 8004fb6:	d90b      	bls.n	8004fd0 <_free_r+0x4c>
 8004fb8:	6821      	ldr	r1, [r4, #0]
 8004fba:	1862      	adds	r2, r4, r1
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	bf02      	ittt	eq
 8004fc0:	681a      	ldreq	r2, [r3, #0]
 8004fc2:	685b      	ldreq	r3, [r3, #4]
 8004fc4:	1852      	addeq	r2, r2, r1
 8004fc6:	6063      	str	r3, [r4, #4]
 8004fc8:	bf08      	it	eq
 8004fca:	6022      	streq	r2, [r4, #0]
 8004fcc:	602c      	str	r4, [r5, #0]
 8004fce:	e7ec      	b.n	8004faa <_free_r+0x26>
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	b10b      	cbz	r3, 8004fda <_free_r+0x56>
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	d9fa      	bls.n	8004fd0 <_free_r+0x4c>
 8004fda:	6811      	ldr	r1, [r2, #0]
 8004fdc:	1855      	adds	r5, r2, r1
 8004fde:	42a5      	cmp	r5, r4
 8004fe0:	d10b      	bne.n	8004ffa <_free_r+0x76>
 8004fe2:	6824      	ldr	r4, [r4, #0]
 8004fe4:	4421      	add	r1, r4
 8004fe6:	1854      	adds	r4, r2, r1
 8004fe8:	6011      	str	r1, [r2, #0]
 8004fea:	42a3      	cmp	r3, r4
 8004fec:	d1dd      	bne.n	8004faa <_free_r+0x26>
 8004fee:	681c      	ldr	r4, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	4421      	add	r1, r4
 8004ff4:	6053      	str	r3, [r2, #4]
 8004ff6:	6011      	str	r1, [r2, #0]
 8004ff8:	e7d7      	b.n	8004faa <_free_r+0x26>
 8004ffa:	d902      	bls.n	8005002 <_free_r+0x7e>
 8004ffc:	230c      	movs	r3, #12
 8004ffe:	6003      	str	r3, [r0, #0]
 8005000:	e7d3      	b.n	8004faa <_free_r+0x26>
 8005002:	6825      	ldr	r5, [r4, #0]
 8005004:	1961      	adds	r1, r4, r5
 8005006:	428b      	cmp	r3, r1
 8005008:	bf02      	ittt	eq
 800500a:	6819      	ldreq	r1, [r3, #0]
 800500c:	685b      	ldreq	r3, [r3, #4]
 800500e:	1949      	addeq	r1, r1, r5
 8005010:	6063      	str	r3, [r4, #4]
 8005012:	bf08      	it	eq
 8005014:	6021      	streq	r1, [r4, #0]
 8005016:	6054      	str	r4, [r2, #4]
 8005018:	e7c7      	b.n	8004faa <_free_r+0x26>
 800501a:	b003      	add	sp, #12
 800501c:	bd30      	pop	{r4, r5, pc}
 800501e:	bf00      	nop
 8005020:	20003f58 	.word	0x20003f58

08005024 <_malloc_r>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	1ccd      	adds	r5, r1, #3
 8005028:	4606      	mov	r6, r0
 800502a:	f025 0503 	bic.w	r5, r5, #3
 800502e:	3508      	adds	r5, #8
 8005030:	2d0c      	cmp	r5, #12
 8005032:	bf38      	it	cc
 8005034:	250c      	movcc	r5, #12
 8005036:	2d00      	cmp	r5, #0
 8005038:	db01      	blt.n	800503e <_malloc_r+0x1a>
 800503a:	42a9      	cmp	r1, r5
 800503c:	d903      	bls.n	8005046 <_malloc_r+0x22>
 800503e:	230c      	movs	r3, #12
 8005040:	6033      	str	r3, [r6, #0]
 8005042:	2000      	movs	r0, #0
 8005044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005046:	f000 fd65 	bl	8005b14 <__malloc_lock>
 800504a:	4921      	ldr	r1, [pc, #132]	; (80050d0 <_malloc_r+0xac>)
 800504c:	680a      	ldr	r2, [r1, #0]
 800504e:	4614      	mov	r4, r2
 8005050:	b99c      	cbnz	r4, 800507a <_malloc_r+0x56>
 8005052:	4f20      	ldr	r7, [pc, #128]	; (80050d4 <_malloc_r+0xb0>)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	b923      	cbnz	r3, 8005062 <_malloc_r+0x3e>
 8005058:	4621      	mov	r1, r4
 800505a:	4630      	mov	r0, r6
 800505c:	f000 fc88 	bl	8005970 <_sbrk_r>
 8005060:	6038      	str	r0, [r7, #0]
 8005062:	4629      	mov	r1, r5
 8005064:	4630      	mov	r0, r6
 8005066:	f000 fc83 	bl	8005970 <_sbrk_r>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	d123      	bne.n	80050b6 <_malloc_r+0x92>
 800506e:	230c      	movs	r3, #12
 8005070:	4630      	mov	r0, r6
 8005072:	6033      	str	r3, [r6, #0]
 8005074:	f000 fd54 	bl	8005b20 <__malloc_unlock>
 8005078:	e7e3      	b.n	8005042 <_malloc_r+0x1e>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	1b5b      	subs	r3, r3, r5
 800507e:	d417      	bmi.n	80050b0 <_malloc_r+0x8c>
 8005080:	2b0b      	cmp	r3, #11
 8005082:	d903      	bls.n	800508c <_malloc_r+0x68>
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	441c      	add	r4, r3
 8005088:	6025      	str	r5, [r4, #0]
 800508a:	e004      	b.n	8005096 <_malloc_r+0x72>
 800508c:	6863      	ldr	r3, [r4, #4]
 800508e:	42a2      	cmp	r2, r4
 8005090:	bf0c      	ite	eq
 8005092:	600b      	streq	r3, [r1, #0]
 8005094:	6053      	strne	r3, [r2, #4]
 8005096:	4630      	mov	r0, r6
 8005098:	f000 fd42 	bl	8005b20 <__malloc_unlock>
 800509c:	f104 000b 	add.w	r0, r4, #11
 80050a0:	1d23      	adds	r3, r4, #4
 80050a2:	f020 0007 	bic.w	r0, r0, #7
 80050a6:	1ac2      	subs	r2, r0, r3
 80050a8:	d0cc      	beq.n	8005044 <_malloc_r+0x20>
 80050aa:	1a1b      	subs	r3, r3, r0
 80050ac:	50a3      	str	r3, [r4, r2]
 80050ae:	e7c9      	b.n	8005044 <_malloc_r+0x20>
 80050b0:	4622      	mov	r2, r4
 80050b2:	6864      	ldr	r4, [r4, #4]
 80050b4:	e7cc      	b.n	8005050 <_malloc_r+0x2c>
 80050b6:	1cc4      	adds	r4, r0, #3
 80050b8:	f024 0403 	bic.w	r4, r4, #3
 80050bc:	42a0      	cmp	r0, r4
 80050be:	d0e3      	beq.n	8005088 <_malloc_r+0x64>
 80050c0:	1a21      	subs	r1, r4, r0
 80050c2:	4630      	mov	r0, r6
 80050c4:	f000 fc54 	bl	8005970 <_sbrk_r>
 80050c8:	3001      	adds	r0, #1
 80050ca:	d1dd      	bne.n	8005088 <_malloc_r+0x64>
 80050cc:	e7cf      	b.n	800506e <_malloc_r+0x4a>
 80050ce:	bf00      	nop
 80050d0:	20003f58 	.word	0x20003f58
 80050d4:	20003f5c 	.word	0x20003f5c

080050d8 <__ssputs_r>:
 80050d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050dc:	688e      	ldr	r6, [r1, #8]
 80050de:	4682      	mov	sl, r0
 80050e0:	460c      	mov	r4, r1
 80050e2:	4690      	mov	r8, r2
 80050e4:	429e      	cmp	r6, r3
 80050e6:	461f      	mov	r7, r3
 80050e8:	d838      	bhi.n	800515c <__ssputs_r+0x84>
 80050ea:	898a      	ldrh	r2, [r1, #12]
 80050ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050f0:	d032      	beq.n	8005158 <__ssputs_r+0x80>
 80050f2:	6825      	ldr	r5, [r4, #0]
 80050f4:	3301      	adds	r3, #1
 80050f6:	6909      	ldr	r1, [r1, #16]
 80050f8:	eba5 0901 	sub.w	r9, r5, r1
 80050fc:	6965      	ldr	r5, [r4, #20]
 80050fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005102:	444b      	add	r3, r9
 8005104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005108:	106d      	asrs	r5, r5, #1
 800510a:	429d      	cmp	r5, r3
 800510c:	bf38      	it	cc
 800510e:	461d      	movcc	r5, r3
 8005110:	0553      	lsls	r3, r2, #21
 8005112:	d531      	bpl.n	8005178 <__ssputs_r+0xa0>
 8005114:	4629      	mov	r1, r5
 8005116:	f7ff ff85 	bl	8005024 <_malloc_r>
 800511a:	4606      	mov	r6, r0
 800511c:	b950      	cbnz	r0, 8005134 <__ssputs_r+0x5c>
 800511e:	230c      	movs	r3, #12
 8005120:	f04f 30ff 	mov.w	r0, #4294967295
 8005124:	f8ca 3000 	str.w	r3, [sl]
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800512e:	81a3      	strh	r3, [r4, #12]
 8005130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005134:	464a      	mov	r2, r9
 8005136:	6921      	ldr	r1, [r4, #16]
 8005138:	f7ff fb70 	bl	800481c <memcpy>
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005146:	81a3      	strh	r3, [r4, #12]
 8005148:	6126      	str	r6, [r4, #16]
 800514a:	444e      	add	r6, r9
 800514c:	6165      	str	r5, [r4, #20]
 800514e:	eba5 0509 	sub.w	r5, r5, r9
 8005152:	6026      	str	r6, [r4, #0]
 8005154:	463e      	mov	r6, r7
 8005156:	60a5      	str	r5, [r4, #8]
 8005158:	42be      	cmp	r6, r7
 800515a:	d900      	bls.n	800515e <__ssputs_r+0x86>
 800515c:	463e      	mov	r6, r7
 800515e:	4632      	mov	r2, r6
 8005160:	4641      	mov	r1, r8
 8005162:	6820      	ldr	r0, [r4, #0]
 8005164:	f000 fcbc 	bl	8005ae0 <memmove>
 8005168:	68a3      	ldr	r3, [r4, #8]
 800516a:	6822      	ldr	r2, [r4, #0]
 800516c:	2000      	movs	r0, #0
 800516e:	1b9b      	subs	r3, r3, r6
 8005170:	4432      	add	r2, r6
 8005172:	60a3      	str	r3, [r4, #8]
 8005174:	6022      	str	r2, [r4, #0]
 8005176:	e7db      	b.n	8005130 <__ssputs_r+0x58>
 8005178:	462a      	mov	r2, r5
 800517a:	f000 fcd7 	bl	8005b2c <_realloc_r>
 800517e:	4606      	mov	r6, r0
 8005180:	2800      	cmp	r0, #0
 8005182:	d1e1      	bne.n	8005148 <__ssputs_r+0x70>
 8005184:	6921      	ldr	r1, [r4, #16]
 8005186:	4650      	mov	r0, sl
 8005188:	f7ff fefc 	bl	8004f84 <_free_r>
 800518c:	e7c7      	b.n	800511e <__ssputs_r+0x46>
	...

08005190 <_svfiprintf_r>:
 8005190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005194:	4698      	mov	r8, r3
 8005196:	898b      	ldrh	r3, [r1, #12]
 8005198:	b09d      	sub	sp, #116	; 0x74
 800519a:	4607      	mov	r7, r0
 800519c:	061b      	lsls	r3, r3, #24
 800519e:	460d      	mov	r5, r1
 80051a0:	4614      	mov	r4, r2
 80051a2:	d50e      	bpl.n	80051c2 <_svfiprintf_r+0x32>
 80051a4:	690b      	ldr	r3, [r1, #16]
 80051a6:	b963      	cbnz	r3, 80051c2 <_svfiprintf_r+0x32>
 80051a8:	2140      	movs	r1, #64	; 0x40
 80051aa:	f7ff ff3b 	bl	8005024 <_malloc_r>
 80051ae:	6028      	str	r0, [r5, #0]
 80051b0:	6128      	str	r0, [r5, #16]
 80051b2:	b920      	cbnz	r0, 80051be <_svfiprintf_r+0x2e>
 80051b4:	230c      	movs	r3, #12
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	e0d1      	b.n	8005362 <_svfiprintf_r+0x1d2>
 80051be:	2340      	movs	r3, #64	; 0x40
 80051c0:	616b      	str	r3, [r5, #20]
 80051c2:	2300      	movs	r3, #0
 80051c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80051c8:	f04f 0901 	mov.w	r9, #1
 80051cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800537c <_svfiprintf_r+0x1ec>
 80051d0:	9309      	str	r3, [sp, #36]	; 0x24
 80051d2:	2320      	movs	r3, #32
 80051d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051d8:	2330      	movs	r3, #48	; 0x30
 80051da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051de:	4623      	mov	r3, r4
 80051e0:	469a      	mov	sl, r3
 80051e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051e6:	b10a      	cbz	r2, 80051ec <_svfiprintf_r+0x5c>
 80051e8:	2a25      	cmp	r2, #37	; 0x25
 80051ea:	d1f9      	bne.n	80051e0 <_svfiprintf_r+0x50>
 80051ec:	ebba 0b04 	subs.w	fp, sl, r4
 80051f0:	d00b      	beq.n	800520a <_svfiprintf_r+0x7a>
 80051f2:	465b      	mov	r3, fp
 80051f4:	4622      	mov	r2, r4
 80051f6:	4629      	mov	r1, r5
 80051f8:	4638      	mov	r0, r7
 80051fa:	f7ff ff6d 	bl	80050d8 <__ssputs_r>
 80051fe:	3001      	adds	r0, #1
 8005200:	f000 80aa 	beq.w	8005358 <_svfiprintf_r+0x1c8>
 8005204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005206:	445a      	add	r2, fp
 8005208:	9209      	str	r2, [sp, #36]	; 0x24
 800520a:	f89a 3000 	ldrb.w	r3, [sl]
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 80a2 	beq.w	8005358 <_svfiprintf_r+0x1c8>
 8005214:	2300      	movs	r3, #0
 8005216:	f04f 32ff 	mov.w	r2, #4294967295
 800521a:	f10a 0a01 	add.w	sl, sl, #1
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	9307      	str	r3, [sp, #28]
 8005222:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005226:	931a      	str	r3, [sp, #104]	; 0x68
 8005228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800522c:	4654      	mov	r4, sl
 800522e:	2205      	movs	r2, #5
 8005230:	4852      	ldr	r0, [pc, #328]	; (800537c <_svfiprintf_r+0x1ec>)
 8005232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005236:	f000 fc45 	bl	8005ac4 <memchr>
 800523a:	9a04      	ldr	r2, [sp, #16]
 800523c:	b9d8      	cbnz	r0, 8005276 <_svfiprintf_r+0xe6>
 800523e:	06d0      	lsls	r0, r2, #27
 8005240:	bf44      	itt	mi
 8005242:	2320      	movmi	r3, #32
 8005244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005248:	0711      	lsls	r1, r2, #28
 800524a:	bf44      	itt	mi
 800524c:	232b      	movmi	r3, #43	; 0x2b
 800524e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005252:	f89a 3000 	ldrb.w	r3, [sl]
 8005256:	2b2a      	cmp	r3, #42	; 0x2a
 8005258:	d015      	beq.n	8005286 <_svfiprintf_r+0xf6>
 800525a:	9a07      	ldr	r2, [sp, #28]
 800525c:	4654      	mov	r4, sl
 800525e:	2000      	movs	r0, #0
 8005260:	f04f 0c0a 	mov.w	ip, #10
 8005264:	4621      	mov	r1, r4
 8005266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800526a:	3b30      	subs	r3, #48	; 0x30
 800526c:	2b09      	cmp	r3, #9
 800526e:	d94e      	bls.n	800530e <_svfiprintf_r+0x17e>
 8005270:	b1b0      	cbz	r0, 80052a0 <_svfiprintf_r+0x110>
 8005272:	9207      	str	r2, [sp, #28]
 8005274:	e014      	b.n	80052a0 <_svfiprintf_r+0x110>
 8005276:	eba0 0308 	sub.w	r3, r0, r8
 800527a:	46a2      	mov	sl, r4
 800527c:	fa09 f303 	lsl.w	r3, r9, r3
 8005280:	4313      	orrs	r3, r2
 8005282:	9304      	str	r3, [sp, #16]
 8005284:	e7d2      	b.n	800522c <_svfiprintf_r+0x9c>
 8005286:	9b03      	ldr	r3, [sp, #12]
 8005288:	1d19      	adds	r1, r3, #4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	9103      	str	r1, [sp, #12]
 8005290:	bfbb      	ittet	lt
 8005292:	425b      	neglt	r3, r3
 8005294:	f042 0202 	orrlt.w	r2, r2, #2
 8005298:	9307      	strge	r3, [sp, #28]
 800529a:	9307      	strlt	r3, [sp, #28]
 800529c:	bfb8      	it	lt
 800529e:	9204      	strlt	r2, [sp, #16]
 80052a0:	7823      	ldrb	r3, [r4, #0]
 80052a2:	2b2e      	cmp	r3, #46	; 0x2e
 80052a4:	d10c      	bne.n	80052c0 <_svfiprintf_r+0x130>
 80052a6:	7863      	ldrb	r3, [r4, #1]
 80052a8:	2b2a      	cmp	r3, #42	; 0x2a
 80052aa:	d135      	bne.n	8005318 <_svfiprintf_r+0x188>
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	3402      	adds	r4, #2
 80052b0:	1d1a      	adds	r2, r3, #4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	9203      	str	r2, [sp, #12]
 80052b8:	bfb8      	it	lt
 80052ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80052be:	9305      	str	r3, [sp, #20]
 80052c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800538c <_svfiprintf_r+0x1fc>
 80052c4:	2203      	movs	r2, #3
 80052c6:	7821      	ldrb	r1, [r4, #0]
 80052c8:	4650      	mov	r0, sl
 80052ca:	f000 fbfb 	bl	8005ac4 <memchr>
 80052ce:	b140      	cbz	r0, 80052e2 <_svfiprintf_r+0x152>
 80052d0:	2340      	movs	r3, #64	; 0x40
 80052d2:	eba0 000a 	sub.w	r0, r0, sl
 80052d6:	3401      	adds	r4, #1
 80052d8:	fa03 f000 	lsl.w	r0, r3, r0
 80052dc:	9b04      	ldr	r3, [sp, #16]
 80052de:	4303      	orrs	r3, r0
 80052e0:	9304      	str	r3, [sp, #16]
 80052e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e6:	2206      	movs	r2, #6
 80052e8:	4825      	ldr	r0, [pc, #148]	; (8005380 <_svfiprintf_r+0x1f0>)
 80052ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052ee:	f000 fbe9 	bl	8005ac4 <memchr>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d038      	beq.n	8005368 <_svfiprintf_r+0x1d8>
 80052f6:	4b23      	ldr	r3, [pc, #140]	; (8005384 <_svfiprintf_r+0x1f4>)
 80052f8:	bb1b      	cbnz	r3, 8005342 <_svfiprintf_r+0x1b2>
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	3307      	adds	r3, #7
 80052fe:	f023 0307 	bic.w	r3, r3, #7
 8005302:	3308      	adds	r3, #8
 8005304:	9303      	str	r3, [sp, #12]
 8005306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005308:	4433      	add	r3, r6
 800530a:	9309      	str	r3, [sp, #36]	; 0x24
 800530c:	e767      	b.n	80051de <_svfiprintf_r+0x4e>
 800530e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005312:	460c      	mov	r4, r1
 8005314:	2001      	movs	r0, #1
 8005316:	e7a5      	b.n	8005264 <_svfiprintf_r+0xd4>
 8005318:	2300      	movs	r3, #0
 800531a:	3401      	adds	r4, #1
 800531c:	f04f 0c0a 	mov.w	ip, #10
 8005320:	4619      	mov	r1, r3
 8005322:	9305      	str	r3, [sp, #20]
 8005324:	4620      	mov	r0, r4
 8005326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800532a:	3a30      	subs	r2, #48	; 0x30
 800532c:	2a09      	cmp	r2, #9
 800532e:	d903      	bls.n	8005338 <_svfiprintf_r+0x1a8>
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0c5      	beq.n	80052c0 <_svfiprintf_r+0x130>
 8005334:	9105      	str	r1, [sp, #20]
 8005336:	e7c3      	b.n	80052c0 <_svfiprintf_r+0x130>
 8005338:	fb0c 2101 	mla	r1, ip, r1, r2
 800533c:	4604      	mov	r4, r0
 800533e:	2301      	movs	r3, #1
 8005340:	e7f0      	b.n	8005324 <_svfiprintf_r+0x194>
 8005342:	ab03      	add	r3, sp, #12
 8005344:	462a      	mov	r2, r5
 8005346:	a904      	add	r1, sp, #16
 8005348:	4638      	mov	r0, r7
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <_svfiprintf_r+0x1f8>)
 800534e:	e000      	b.n	8005352 <_svfiprintf_r+0x1c2>
 8005350:	bf00      	nop
 8005352:	1c42      	adds	r2, r0, #1
 8005354:	4606      	mov	r6, r0
 8005356:	d1d6      	bne.n	8005306 <_svfiprintf_r+0x176>
 8005358:	89ab      	ldrh	r3, [r5, #12]
 800535a:	065b      	lsls	r3, r3, #25
 800535c:	f53f af2c 	bmi.w	80051b8 <_svfiprintf_r+0x28>
 8005360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005362:	b01d      	add	sp, #116	; 0x74
 8005364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005368:	ab03      	add	r3, sp, #12
 800536a:	462a      	mov	r2, r5
 800536c:	a904      	add	r1, sp, #16
 800536e:	4638      	mov	r0, r7
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	4b05      	ldr	r3, [pc, #20]	; (8005388 <_svfiprintf_r+0x1f8>)
 8005374:	f000 f9d6 	bl	8005724 <_printf_i>
 8005378:	e7eb      	b.n	8005352 <_svfiprintf_r+0x1c2>
 800537a:	bf00      	nop
 800537c:	08005d6c 	.word	0x08005d6c
 8005380:	08005d76 	.word	0x08005d76
 8005384:	00000000 	.word	0x00000000
 8005388:	080050d9 	.word	0x080050d9
 800538c:	08005d72 	.word	0x08005d72

08005390 <__sfputc_r>:
 8005390:	6893      	ldr	r3, [r2, #8]
 8005392:	3b01      	subs	r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	6093      	str	r3, [r2, #8]
 8005398:	b410      	push	{r4}
 800539a:	da08      	bge.n	80053ae <__sfputc_r+0x1e>
 800539c:	6994      	ldr	r4, [r2, #24]
 800539e:	42a3      	cmp	r3, r4
 80053a0:	db01      	blt.n	80053a6 <__sfputc_r+0x16>
 80053a2:	290a      	cmp	r1, #10
 80053a4:	d103      	bne.n	80053ae <__sfputc_r+0x1e>
 80053a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053aa:	f7ff bb0f 	b.w	80049cc <__swbuf_r>
 80053ae:	6813      	ldr	r3, [r2, #0]
 80053b0:	1c58      	adds	r0, r3, #1
 80053b2:	6010      	str	r0, [r2, #0]
 80053b4:	4608      	mov	r0, r1
 80053b6:	7019      	strb	r1, [r3, #0]
 80053b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053bc:	4770      	bx	lr

080053be <__sfputs_r>:
 80053be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c0:	4606      	mov	r6, r0
 80053c2:	460f      	mov	r7, r1
 80053c4:	4614      	mov	r4, r2
 80053c6:	18d5      	adds	r5, r2, r3
 80053c8:	42ac      	cmp	r4, r5
 80053ca:	d101      	bne.n	80053d0 <__sfputs_r+0x12>
 80053cc:	2000      	movs	r0, #0
 80053ce:	e007      	b.n	80053e0 <__sfputs_r+0x22>
 80053d0:	463a      	mov	r2, r7
 80053d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053d6:	4630      	mov	r0, r6
 80053d8:	f7ff ffda 	bl	8005390 <__sfputc_r>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d1f3      	bne.n	80053c8 <__sfputs_r+0xa>
 80053e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053e4 <_vfiprintf_r>:
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	460d      	mov	r5, r1
 80053ea:	b09d      	sub	sp, #116	; 0x74
 80053ec:	4614      	mov	r4, r2
 80053ee:	4698      	mov	r8, r3
 80053f0:	4606      	mov	r6, r0
 80053f2:	b118      	cbz	r0, 80053fc <_vfiprintf_r+0x18>
 80053f4:	6983      	ldr	r3, [r0, #24]
 80053f6:	b90b      	cbnz	r3, 80053fc <_vfiprintf_r+0x18>
 80053f8:	f7ff fcc0 	bl	8004d7c <__sinit>
 80053fc:	4b89      	ldr	r3, [pc, #548]	; (8005624 <_vfiprintf_r+0x240>)
 80053fe:	429d      	cmp	r5, r3
 8005400:	d11b      	bne.n	800543a <_vfiprintf_r+0x56>
 8005402:	6875      	ldr	r5, [r6, #4]
 8005404:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005406:	07d9      	lsls	r1, r3, #31
 8005408:	d405      	bmi.n	8005416 <_vfiprintf_r+0x32>
 800540a:	89ab      	ldrh	r3, [r5, #12]
 800540c:	059a      	lsls	r2, r3, #22
 800540e:	d402      	bmi.n	8005416 <_vfiprintf_r+0x32>
 8005410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005412:	f7ff fd51 	bl	8004eb8 <__retarget_lock_acquire_recursive>
 8005416:	89ab      	ldrh	r3, [r5, #12]
 8005418:	071b      	lsls	r3, r3, #28
 800541a:	d501      	bpl.n	8005420 <_vfiprintf_r+0x3c>
 800541c:	692b      	ldr	r3, [r5, #16]
 800541e:	b9eb      	cbnz	r3, 800545c <_vfiprintf_r+0x78>
 8005420:	4629      	mov	r1, r5
 8005422:	4630      	mov	r0, r6
 8005424:	f7ff fb24 	bl	8004a70 <__swsetup_r>
 8005428:	b1c0      	cbz	r0, 800545c <_vfiprintf_r+0x78>
 800542a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800542c:	07dc      	lsls	r4, r3, #31
 800542e:	d50e      	bpl.n	800544e <_vfiprintf_r+0x6a>
 8005430:	f04f 30ff 	mov.w	r0, #4294967295
 8005434:	b01d      	add	sp, #116	; 0x74
 8005436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543a:	4b7b      	ldr	r3, [pc, #492]	; (8005628 <_vfiprintf_r+0x244>)
 800543c:	429d      	cmp	r5, r3
 800543e:	d101      	bne.n	8005444 <_vfiprintf_r+0x60>
 8005440:	68b5      	ldr	r5, [r6, #8]
 8005442:	e7df      	b.n	8005404 <_vfiprintf_r+0x20>
 8005444:	4b79      	ldr	r3, [pc, #484]	; (800562c <_vfiprintf_r+0x248>)
 8005446:	429d      	cmp	r5, r3
 8005448:	bf08      	it	eq
 800544a:	68f5      	ldreq	r5, [r6, #12]
 800544c:	e7da      	b.n	8005404 <_vfiprintf_r+0x20>
 800544e:	89ab      	ldrh	r3, [r5, #12]
 8005450:	0598      	lsls	r0, r3, #22
 8005452:	d4ed      	bmi.n	8005430 <_vfiprintf_r+0x4c>
 8005454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005456:	f7ff fd30 	bl	8004eba <__retarget_lock_release_recursive>
 800545a:	e7e9      	b.n	8005430 <_vfiprintf_r+0x4c>
 800545c:	2300      	movs	r3, #0
 800545e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005462:	f04f 0901 	mov.w	r9, #1
 8005466:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8005630 <_vfiprintf_r+0x24c>
 800546a:	9309      	str	r3, [sp, #36]	; 0x24
 800546c:	2320      	movs	r3, #32
 800546e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005472:	2330      	movs	r3, #48	; 0x30
 8005474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005478:	4623      	mov	r3, r4
 800547a:	469a      	mov	sl, r3
 800547c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005480:	b10a      	cbz	r2, 8005486 <_vfiprintf_r+0xa2>
 8005482:	2a25      	cmp	r2, #37	; 0x25
 8005484:	d1f9      	bne.n	800547a <_vfiprintf_r+0x96>
 8005486:	ebba 0b04 	subs.w	fp, sl, r4
 800548a:	d00b      	beq.n	80054a4 <_vfiprintf_r+0xc0>
 800548c:	465b      	mov	r3, fp
 800548e:	4622      	mov	r2, r4
 8005490:	4629      	mov	r1, r5
 8005492:	4630      	mov	r0, r6
 8005494:	f7ff ff93 	bl	80053be <__sfputs_r>
 8005498:	3001      	adds	r0, #1
 800549a:	f000 80aa 	beq.w	80055f2 <_vfiprintf_r+0x20e>
 800549e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054a0:	445a      	add	r2, fp
 80054a2:	9209      	str	r2, [sp, #36]	; 0x24
 80054a4:	f89a 3000 	ldrb.w	r3, [sl]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80a2 	beq.w	80055f2 <_vfiprintf_r+0x20e>
 80054ae:	2300      	movs	r3, #0
 80054b0:	f04f 32ff 	mov.w	r2, #4294967295
 80054b4:	f10a 0a01 	add.w	sl, sl, #1
 80054b8:	9304      	str	r3, [sp, #16]
 80054ba:	9307      	str	r3, [sp, #28]
 80054bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054c0:	931a      	str	r3, [sp, #104]	; 0x68
 80054c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054c6:	4654      	mov	r4, sl
 80054c8:	2205      	movs	r2, #5
 80054ca:	4859      	ldr	r0, [pc, #356]	; (8005630 <_vfiprintf_r+0x24c>)
 80054cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d0:	f000 faf8 	bl	8005ac4 <memchr>
 80054d4:	9a04      	ldr	r2, [sp, #16]
 80054d6:	b9d8      	cbnz	r0, 8005510 <_vfiprintf_r+0x12c>
 80054d8:	06d1      	lsls	r1, r2, #27
 80054da:	bf44      	itt	mi
 80054dc:	2320      	movmi	r3, #32
 80054de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054e2:	0713      	lsls	r3, r2, #28
 80054e4:	bf44      	itt	mi
 80054e6:	232b      	movmi	r3, #43	; 0x2b
 80054e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054ec:	f89a 3000 	ldrb.w	r3, [sl]
 80054f0:	2b2a      	cmp	r3, #42	; 0x2a
 80054f2:	d015      	beq.n	8005520 <_vfiprintf_r+0x13c>
 80054f4:	9a07      	ldr	r2, [sp, #28]
 80054f6:	4654      	mov	r4, sl
 80054f8:	2000      	movs	r0, #0
 80054fa:	f04f 0c0a 	mov.w	ip, #10
 80054fe:	4621      	mov	r1, r4
 8005500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005504:	3b30      	subs	r3, #48	; 0x30
 8005506:	2b09      	cmp	r3, #9
 8005508:	d94e      	bls.n	80055a8 <_vfiprintf_r+0x1c4>
 800550a:	b1b0      	cbz	r0, 800553a <_vfiprintf_r+0x156>
 800550c:	9207      	str	r2, [sp, #28]
 800550e:	e014      	b.n	800553a <_vfiprintf_r+0x156>
 8005510:	eba0 0308 	sub.w	r3, r0, r8
 8005514:	46a2      	mov	sl, r4
 8005516:	fa09 f303 	lsl.w	r3, r9, r3
 800551a:	4313      	orrs	r3, r2
 800551c:	9304      	str	r3, [sp, #16]
 800551e:	e7d2      	b.n	80054c6 <_vfiprintf_r+0xe2>
 8005520:	9b03      	ldr	r3, [sp, #12]
 8005522:	1d19      	adds	r1, r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	9103      	str	r1, [sp, #12]
 800552a:	bfbb      	ittet	lt
 800552c:	425b      	neglt	r3, r3
 800552e:	f042 0202 	orrlt.w	r2, r2, #2
 8005532:	9307      	strge	r3, [sp, #28]
 8005534:	9307      	strlt	r3, [sp, #28]
 8005536:	bfb8      	it	lt
 8005538:	9204      	strlt	r2, [sp, #16]
 800553a:	7823      	ldrb	r3, [r4, #0]
 800553c:	2b2e      	cmp	r3, #46	; 0x2e
 800553e:	d10c      	bne.n	800555a <_vfiprintf_r+0x176>
 8005540:	7863      	ldrb	r3, [r4, #1]
 8005542:	2b2a      	cmp	r3, #42	; 0x2a
 8005544:	d135      	bne.n	80055b2 <_vfiprintf_r+0x1ce>
 8005546:	9b03      	ldr	r3, [sp, #12]
 8005548:	3402      	adds	r4, #2
 800554a:	1d1a      	adds	r2, r3, #4
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	9203      	str	r2, [sp, #12]
 8005552:	bfb8      	it	lt
 8005554:	f04f 33ff 	movlt.w	r3, #4294967295
 8005558:	9305      	str	r3, [sp, #20]
 800555a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005640 <_vfiprintf_r+0x25c>
 800555e:	2203      	movs	r2, #3
 8005560:	7821      	ldrb	r1, [r4, #0]
 8005562:	4650      	mov	r0, sl
 8005564:	f000 faae 	bl	8005ac4 <memchr>
 8005568:	b140      	cbz	r0, 800557c <_vfiprintf_r+0x198>
 800556a:	2340      	movs	r3, #64	; 0x40
 800556c:	eba0 000a 	sub.w	r0, r0, sl
 8005570:	3401      	adds	r4, #1
 8005572:	fa03 f000 	lsl.w	r0, r3, r0
 8005576:	9b04      	ldr	r3, [sp, #16]
 8005578:	4303      	orrs	r3, r0
 800557a:	9304      	str	r3, [sp, #16]
 800557c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005580:	2206      	movs	r2, #6
 8005582:	482c      	ldr	r0, [pc, #176]	; (8005634 <_vfiprintf_r+0x250>)
 8005584:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005588:	f000 fa9c 	bl	8005ac4 <memchr>
 800558c:	2800      	cmp	r0, #0
 800558e:	d03f      	beq.n	8005610 <_vfiprintf_r+0x22c>
 8005590:	4b29      	ldr	r3, [pc, #164]	; (8005638 <_vfiprintf_r+0x254>)
 8005592:	bb1b      	cbnz	r3, 80055dc <_vfiprintf_r+0x1f8>
 8005594:	9b03      	ldr	r3, [sp, #12]
 8005596:	3307      	adds	r3, #7
 8005598:	f023 0307 	bic.w	r3, r3, #7
 800559c:	3308      	adds	r3, #8
 800559e:	9303      	str	r3, [sp, #12]
 80055a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a2:	443b      	add	r3, r7
 80055a4:	9309      	str	r3, [sp, #36]	; 0x24
 80055a6:	e767      	b.n	8005478 <_vfiprintf_r+0x94>
 80055a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80055ac:	460c      	mov	r4, r1
 80055ae:	2001      	movs	r0, #1
 80055b0:	e7a5      	b.n	80054fe <_vfiprintf_r+0x11a>
 80055b2:	2300      	movs	r3, #0
 80055b4:	3401      	adds	r4, #1
 80055b6:	f04f 0c0a 	mov.w	ip, #10
 80055ba:	4619      	mov	r1, r3
 80055bc:	9305      	str	r3, [sp, #20]
 80055be:	4620      	mov	r0, r4
 80055c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055c4:	3a30      	subs	r2, #48	; 0x30
 80055c6:	2a09      	cmp	r2, #9
 80055c8:	d903      	bls.n	80055d2 <_vfiprintf_r+0x1ee>
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0c5      	beq.n	800555a <_vfiprintf_r+0x176>
 80055ce:	9105      	str	r1, [sp, #20]
 80055d0:	e7c3      	b.n	800555a <_vfiprintf_r+0x176>
 80055d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80055d6:	4604      	mov	r4, r0
 80055d8:	2301      	movs	r3, #1
 80055da:	e7f0      	b.n	80055be <_vfiprintf_r+0x1da>
 80055dc:	ab03      	add	r3, sp, #12
 80055de:	462a      	mov	r2, r5
 80055e0:	a904      	add	r1, sp, #16
 80055e2:	4630      	mov	r0, r6
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	4b15      	ldr	r3, [pc, #84]	; (800563c <_vfiprintf_r+0x258>)
 80055e8:	e000      	b.n	80055ec <_vfiprintf_r+0x208>
 80055ea:	bf00      	nop
 80055ec:	4607      	mov	r7, r0
 80055ee:	1c78      	adds	r0, r7, #1
 80055f0:	d1d6      	bne.n	80055a0 <_vfiprintf_r+0x1bc>
 80055f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055f4:	07d9      	lsls	r1, r3, #31
 80055f6:	d405      	bmi.n	8005604 <_vfiprintf_r+0x220>
 80055f8:	89ab      	ldrh	r3, [r5, #12]
 80055fa:	059a      	lsls	r2, r3, #22
 80055fc:	d402      	bmi.n	8005604 <_vfiprintf_r+0x220>
 80055fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005600:	f7ff fc5b 	bl	8004eba <__retarget_lock_release_recursive>
 8005604:	89ab      	ldrh	r3, [r5, #12]
 8005606:	065b      	lsls	r3, r3, #25
 8005608:	f53f af12 	bmi.w	8005430 <_vfiprintf_r+0x4c>
 800560c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800560e:	e711      	b.n	8005434 <_vfiprintf_r+0x50>
 8005610:	ab03      	add	r3, sp, #12
 8005612:	462a      	mov	r2, r5
 8005614:	a904      	add	r1, sp, #16
 8005616:	4630      	mov	r0, r6
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	4b08      	ldr	r3, [pc, #32]	; (800563c <_vfiprintf_r+0x258>)
 800561c:	f000 f882 	bl	8005724 <_printf_i>
 8005620:	e7e4      	b.n	80055ec <_vfiprintf_r+0x208>
 8005622:	bf00      	nop
 8005624:	08005d2c 	.word	0x08005d2c
 8005628:	08005d4c 	.word	0x08005d4c
 800562c:	08005d0c 	.word	0x08005d0c
 8005630:	08005d6c 	.word	0x08005d6c
 8005634:	08005d76 	.word	0x08005d76
 8005638:	00000000 	.word	0x00000000
 800563c:	080053bf 	.word	0x080053bf
 8005640:	08005d72 	.word	0x08005d72

08005644 <_printf_common>:
 8005644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005648:	4616      	mov	r6, r2
 800564a:	4699      	mov	r9, r3
 800564c:	688a      	ldr	r2, [r1, #8]
 800564e:	4607      	mov	r7, r0
 8005650:	690b      	ldr	r3, [r1, #16]
 8005652:	460c      	mov	r4, r1
 8005654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005658:	4293      	cmp	r3, r2
 800565a:	bfb8      	it	lt
 800565c:	4613      	movlt	r3, r2
 800565e:	6033      	str	r3, [r6, #0]
 8005660:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005664:	b10a      	cbz	r2, 800566a <_printf_common+0x26>
 8005666:	3301      	adds	r3, #1
 8005668:	6033      	str	r3, [r6, #0]
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	0699      	lsls	r1, r3, #26
 800566e:	bf42      	ittt	mi
 8005670:	6833      	ldrmi	r3, [r6, #0]
 8005672:	3302      	addmi	r3, #2
 8005674:	6033      	strmi	r3, [r6, #0]
 8005676:	6825      	ldr	r5, [r4, #0]
 8005678:	f015 0506 	ands.w	r5, r5, #6
 800567c:	d106      	bne.n	800568c <_printf_common+0x48>
 800567e:	f104 0a19 	add.w	sl, r4, #25
 8005682:	68e3      	ldr	r3, [r4, #12]
 8005684:	6832      	ldr	r2, [r6, #0]
 8005686:	1a9b      	subs	r3, r3, r2
 8005688:	42ab      	cmp	r3, r5
 800568a:	dc29      	bgt.n	80056e0 <_printf_common+0x9c>
 800568c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005690:	1e13      	subs	r3, r2, #0
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	bf18      	it	ne
 8005696:	2301      	movne	r3, #1
 8005698:	0692      	lsls	r2, r2, #26
 800569a:	d42e      	bmi.n	80056fa <_printf_common+0xb6>
 800569c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056a0:	4649      	mov	r1, r9
 80056a2:	4638      	mov	r0, r7
 80056a4:	47c0      	blx	r8
 80056a6:	3001      	adds	r0, #1
 80056a8:	d021      	beq.n	80056ee <_printf_common+0xaa>
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	341a      	adds	r4, #26
 80056ae:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 80056b2:	f003 0306 	and.w	r3, r3, #6
 80056b6:	6832      	ldr	r2, [r6, #0]
 80056b8:	2600      	movs	r6, #0
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80056c0:	bf08      	it	eq
 80056c2:	1aad      	subeq	r5, r5, r2
 80056c4:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80056c8:	bf14      	ite	ne
 80056ca:	2500      	movne	r5, #0
 80056cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056d0:	4293      	cmp	r3, r2
 80056d2:	bfc4      	itt	gt
 80056d4:	1a9b      	subgt	r3, r3, r2
 80056d6:	18ed      	addgt	r5, r5, r3
 80056d8:	42b5      	cmp	r5, r6
 80056da:	d11a      	bne.n	8005712 <_printf_common+0xce>
 80056dc:	2000      	movs	r0, #0
 80056de:	e008      	b.n	80056f2 <_printf_common+0xae>
 80056e0:	2301      	movs	r3, #1
 80056e2:	4652      	mov	r2, sl
 80056e4:	4649      	mov	r1, r9
 80056e6:	4638      	mov	r0, r7
 80056e8:	47c0      	blx	r8
 80056ea:	3001      	adds	r0, #1
 80056ec:	d103      	bne.n	80056f6 <_printf_common+0xb2>
 80056ee:	f04f 30ff 	mov.w	r0, #4294967295
 80056f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f6:	3501      	adds	r5, #1
 80056f8:	e7c3      	b.n	8005682 <_printf_common+0x3e>
 80056fa:	18e1      	adds	r1, r4, r3
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	2030      	movs	r0, #48	; 0x30
 8005700:	3302      	adds	r3, #2
 8005702:	4422      	add	r2, r4
 8005704:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800570c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005710:	e7c4      	b.n	800569c <_printf_common+0x58>
 8005712:	2301      	movs	r3, #1
 8005714:	4622      	mov	r2, r4
 8005716:	4649      	mov	r1, r9
 8005718:	4638      	mov	r0, r7
 800571a:	47c0      	blx	r8
 800571c:	3001      	adds	r0, #1
 800571e:	d0e6      	beq.n	80056ee <_printf_common+0xaa>
 8005720:	3601      	adds	r6, #1
 8005722:	e7d9      	b.n	80056d8 <_printf_common+0x94>

08005724 <_printf_i>:
 8005724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005728:	460c      	mov	r4, r1
 800572a:	4691      	mov	r9, r2
 800572c:	4680      	mov	r8, r0
 800572e:	469a      	mov	sl, r3
 8005730:	7e27      	ldrb	r7, [r4, #24]
 8005732:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005736:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005738:	2f78      	cmp	r7, #120	; 0x78
 800573a:	d807      	bhi.n	800574c <_printf_i+0x28>
 800573c:	2f62      	cmp	r7, #98	; 0x62
 800573e:	d80a      	bhi.n	8005756 <_printf_i+0x32>
 8005740:	2f00      	cmp	r7, #0
 8005742:	f000 80d8 	beq.w	80058f6 <_printf_i+0x1d2>
 8005746:	2f58      	cmp	r7, #88	; 0x58
 8005748:	f000 80a3 	beq.w	8005892 <_printf_i+0x16e>
 800574c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005750:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005754:	e03a      	b.n	80057cc <_printf_i+0xa8>
 8005756:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800575a:	2b15      	cmp	r3, #21
 800575c:	d8f6      	bhi.n	800574c <_printf_i+0x28>
 800575e:	a001      	add	r0, pc, #4	; (adr r0, 8005764 <_printf_i+0x40>)
 8005760:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005764:	080057bd 	.word	0x080057bd
 8005768:	080057d1 	.word	0x080057d1
 800576c:	0800574d 	.word	0x0800574d
 8005770:	0800574d 	.word	0x0800574d
 8005774:	0800574d 	.word	0x0800574d
 8005778:	0800574d 	.word	0x0800574d
 800577c:	080057d1 	.word	0x080057d1
 8005780:	0800574d 	.word	0x0800574d
 8005784:	0800574d 	.word	0x0800574d
 8005788:	0800574d 	.word	0x0800574d
 800578c:	0800574d 	.word	0x0800574d
 8005790:	080058dd 	.word	0x080058dd
 8005794:	08005801 	.word	0x08005801
 8005798:	080058bf 	.word	0x080058bf
 800579c:	0800574d 	.word	0x0800574d
 80057a0:	0800574d 	.word	0x0800574d
 80057a4:	080058ff 	.word	0x080058ff
 80057a8:	0800574d 	.word	0x0800574d
 80057ac:	08005801 	.word	0x08005801
 80057b0:	0800574d 	.word	0x0800574d
 80057b4:	0800574d 	.word	0x0800574d
 80057b8:	080058c7 	.word	0x080058c7
 80057bc:	680b      	ldr	r3, [r1, #0]
 80057be:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057c2:	1d1a      	adds	r2, r3, #4
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	600a      	str	r2, [r1, #0]
 80057c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0a3      	b.n	8005918 <_printf_i+0x1f4>
 80057d0:	6825      	ldr	r5, [r4, #0]
 80057d2:	6808      	ldr	r0, [r1, #0]
 80057d4:	062e      	lsls	r6, r5, #24
 80057d6:	f100 0304 	add.w	r3, r0, #4
 80057da:	d50a      	bpl.n	80057f2 <_printf_i+0xce>
 80057dc:	6805      	ldr	r5, [r0, #0]
 80057de:	600b      	str	r3, [r1, #0]
 80057e0:	2d00      	cmp	r5, #0
 80057e2:	da03      	bge.n	80057ec <_printf_i+0xc8>
 80057e4:	232d      	movs	r3, #45	; 0x2d
 80057e6:	426d      	negs	r5, r5
 80057e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ec:	485e      	ldr	r0, [pc, #376]	; (8005968 <_printf_i+0x244>)
 80057ee:	230a      	movs	r3, #10
 80057f0:	e019      	b.n	8005826 <_printf_i+0x102>
 80057f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80057f6:	6805      	ldr	r5, [r0, #0]
 80057f8:	600b      	str	r3, [r1, #0]
 80057fa:	bf18      	it	ne
 80057fc:	b22d      	sxthne	r5, r5
 80057fe:	e7ef      	b.n	80057e0 <_printf_i+0xbc>
 8005800:	680b      	ldr	r3, [r1, #0]
 8005802:	6825      	ldr	r5, [r4, #0]
 8005804:	1d18      	adds	r0, r3, #4
 8005806:	6008      	str	r0, [r1, #0]
 8005808:	0628      	lsls	r0, r5, #24
 800580a:	d501      	bpl.n	8005810 <_printf_i+0xec>
 800580c:	681d      	ldr	r5, [r3, #0]
 800580e:	e002      	b.n	8005816 <_printf_i+0xf2>
 8005810:	0669      	lsls	r1, r5, #25
 8005812:	d5fb      	bpl.n	800580c <_printf_i+0xe8>
 8005814:	881d      	ldrh	r5, [r3, #0]
 8005816:	2f6f      	cmp	r7, #111	; 0x6f
 8005818:	4853      	ldr	r0, [pc, #332]	; (8005968 <_printf_i+0x244>)
 800581a:	bf0c      	ite	eq
 800581c:	2308      	moveq	r3, #8
 800581e:	230a      	movne	r3, #10
 8005820:	2100      	movs	r1, #0
 8005822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005826:	6866      	ldr	r6, [r4, #4]
 8005828:	2e00      	cmp	r6, #0
 800582a:	60a6      	str	r6, [r4, #8]
 800582c:	bfa2      	ittt	ge
 800582e:	6821      	ldrge	r1, [r4, #0]
 8005830:	f021 0104 	bicge.w	r1, r1, #4
 8005834:	6021      	strge	r1, [r4, #0]
 8005836:	b90d      	cbnz	r5, 800583c <_printf_i+0x118>
 8005838:	2e00      	cmp	r6, #0
 800583a:	d04d      	beq.n	80058d8 <_printf_i+0x1b4>
 800583c:	4616      	mov	r6, r2
 800583e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005842:	fb03 5711 	mls	r7, r3, r1, r5
 8005846:	5dc7      	ldrb	r7, [r0, r7]
 8005848:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800584c:	462f      	mov	r7, r5
 800584e:	460d      	mov	r5, r1
 8005850:	42bb      	cmp	r3, r7
 8005852:	d9f4      	bls.n	800583e <_printf_i+0x11a>
 8005854:	2b08      	cmp	r3, #8
 8005856:	d10b      	bne.n	8005870 <_printf_i+0x14c>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	07df      	lsls	r7, r3, #31
 800585c:	d508      	bpl.n	8005870 <_printf_i+0x14c>
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	6861      	ldr	r1, [r4, #4]
 8005862:	4299      	cmp	r1, r3
 8005864:	bfde      	ittt	le
 8005866:	2330      	movle	r3, #48	; 0x30
 8005868:	f806 3c01 	strble.w	r3, [r6, #-1]
 800586c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005870:	1b92      	subs	r2, r2, r6
 8005872:	6122      	str	r2, [r4, #16]
 8005874:	464b      	mov	r3, r9
 8005876:	aa03      	add	r2, sp, #12
 8005878:	4621      	mov	r1, r4
 800587a:	4640      	mov	r0, r8
 800587c:	f8cd a000 	str.w	sl, [sp]
 8005880:	f7ff fee0 	bl	8005644 <_printf_common>
 8005884:	3001      	adds	r0, #1
 8005886:	d14c      	bne.n	8005922 <_printf_i+0x1fe>
 8005888:	f04f 30ff 	mov.w	r0, #4294967295
 800588c:	b004      	add	sp, #16
 800588e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005892:	4835      	ldr	r0, [pc, #212]	; (8005968 <_printf_i+0x244>)
 8005894:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	680e      	ldr	r6, [r1, #0]
 800589c:	061f      	lsls	r7, r3, #24
 800589e:	f856 5b04 	ldr.w	r5, [r6], #4
 80058a2:	600e      	str	r6, [r1, #0]
 80058a4:	d514      	bpl.n	80058d0 <_printf_i+0x1ac>
 80058a6:	07d9      	lsls	r1, r3, #31
 80058a8:	bf44      	itt	mi
 80058aa:	f043 0320 	orrmi.w	r3, r3, #32
 80058ae:	6023      	strmi	r3, [r4, #0]
 80058b0:	b91d      	cbnz	r5, 80058ba <_printf_i+0x196>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	f023 0320 	bic.w	r3, r3, #32
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	2310      	movs	r3, #16
 80058bc:	e7b0      	b.n	8005820 <_printf_i+0xfc>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	f043 0320 	orr.w	r3, r3, #32
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	2378      	movs	r3, #120	; 0x78
 80058c8:	4828      	ldr	r0, [pc, #160]	; (800596c <_printf_i+0x248>)
 80058ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058ce:	e7e3      	b.n	8005898 <_printf_i+0x174>
 80058d0:	065e      	lsls	r6, r3, #25
 80058d2:	bf48      	it	mi
 80058d4:	b2ad      	uxthmi	r5, r5
 80058d6:	e7e6      	b.n	80058a6 <_printf_i+0x182>
 80058d8:	4616      	mov	r6, r2
 80058da:	e7bb      	b.n	8005854 <_printf_i+0x130>
 80058dc:	680b      	ldr	r3, [r1, #0]
 80058de:	6826      	ldr	r6, [r4, #0]
 80058e0:	1d1d      	adds	r5, r3, #4
 80058e2:	6960      	ldr	r0, [r4, #20]
 80058e4:	600d      	str	r5, [r1, #0]
 80058e6:	0635      	lsls	r5, r6, #24
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	d501      	bpl.n	80058f0 <_printf_i+0x1cc>
 80058ec:	6018      	str	r0, [r3, #0]
 80058ee:	e002      	b.n	80058f6 <_printf_i+0x1d2>
 80058f0:	0671      	lsls	r1, r6, #25
 80058f2:	d5fb      	bpl.n	80058ec <_printf_i+0x1c8>
 80058f4:	8018      	strh	r0, [r3, #0]
 80058f6:	2300      	movs	r3, #0
 80058f8:	4616      	mov	r6, r2
 80058fa:	6123      	str	r3, [r4, #16]
 80058fc:	e7ba      	b.n	8005874 <_printf_i+0x150>
 80058fe:	680b      	ldr	r3, [r1, #0]
 8005900:	1d1a      	adds	r2, r3, #4
 8005902:	600a      	str	r2, [r1, #0]
 8005904:	2100      	movs	r1, #0
 8005906:	681e      	ldr	r6, [r3, #0]
 8005908:	6862      	ldr	r2, [r4, #4]
 800590a:	4630      	mov	r0, r6
 800590c:	f000 f8da 	bl	8005ac4 <memchr>
 8005910:	b108      	cbz	r0, 8005916 <_printf_i+0x1f2>
 8005912:	1b80      	subs	r0, r0, r6
 8005914:	6060      	str	r0, [r4, #4]
 8005916:	6863      	ldr	r3, [r4, #4]
 8005918:	6123      	str	r3, [r4, #16]
 800591a:	2300      	movs	r3, #0
 800591c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005920:	e7a8      	b.n	8005874 <_printf_i+0x150>
 8005922:	6923      	ldr	r3, [r4, #16]
 8005924:	4632      	mov	r2, r6
 8005926:	4649      	mov	r1, r9
 8005928:	4640      	mov	r0, r8
 800592a:	47d0      	blx	sl
 800592c:	3001      	adds	r0, #1
 800592e:	d0ab      	beq.n	8005888 <_printf_i+0x164>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	079b      	lsls	r3, r3, #30
 8005934:	d413      	bmi.n	800595e <_printf_i+0x23a>
 8005936:	68e0      	ldr	r0, [r4, #12]
 8005938:	9b03      	ldr	r3, [sp, #12]
 800593a:	4298      	cmp	r0, r3
 800593c:	bfb8      	it	lt
 800593e:	4618      	movlt	r0, r3
 8005940:	e7a4      	b.n	800588c <_printf_i+0x168>
 8005942:	2301      	movs	r3, #1
 8005944:	4632      	mov	r2, r6
 8005946:	4649      	mov	r1, r9
 8005948:	4640      	mov	r0, r8
 800594a:	47d0      	blx	sl
 800594c:	3001      	adds	r0, #1
 800594e:	d09b      	beq.n	8005888 <_printf_i+0x164>
 8005950:	3501      	adds	r5, #1
 8005952:	68e3      	ldr	r3, [r4, #12]
 8005954:	9903      	ldr	r1, [sp, #12]
 8005956:	1a5b      	subs	r3, r3, r1
 8005958:	42ab      	cmp	r3, r5
 800595a:	dcf2      	bgt.n	8005942 <_printf_i+0x21e>
 800595c:	e7eb      	b.n	8005936 <_printf_i+0x212>
 800595e:	2500      	movs	r5, #0
 8005960:	f104 0619 	add.w	r6, r4, #25
 8005964:	e7f5      	b.n	8005952 <_printf_i+0x22e>
 8005966:	bf00      	nop
 8005968:	08005d7d 	.word	0x08005d7d
 800596c:	08005d8e 	.word	0x08005d8e

08005970 <_sbrk_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	2300      	movs	r3, #0
 8005974:	4d05      	ldr	r5, [pc, #20]	; (800598c <_sbrk_r+0x1c>)
 8005976:	4604      	mov	r4, r0
 8005978:	4608      	mov	r0, r1
 800597a:	602b      	str	r3, [r5, #0]
 800597c:	f7fa feea 	bl	8000754 <_sbrk>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	d102      	bne.n	800598a <_sbrk_r+0x1a>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	b103      	cbz	r3, 800598a <_sbrk_r+0x1a>
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	20004008 	.word	0x20004008

08005990 <__sread>:
 8005990:	b510      	push	{r4, lr}
 8005992:	460c      	mov	r4, r1
 8005994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005998:	f000 f8ee 	bl	8005b78 <_read_r>
 800599c:	2800      	cmp	r0, #0
 800599e:	bfab      	itete	ge
 80059a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059a2:	89a3      	ldrhlt	r3, [r4, #12]
 80059a4:	181b      	addge	r3, r3, r0
 80059a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059aa:	bfac      	ite	ge
 80059ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80059ae:	81a3      	strhlt	r3, [r4, #12]
 80059b0:	bd10      	pop	{r4, pc}

080059b2 <__swrite>:
 80059b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b6:	461f      	mov	r7, r3
 80059b8:	898b      	ldrh	r3, [r1, #12]
 80059ba:	4605      	mov	r5, r0
 80059bc:	460c      	mov	r4, r1
 80059be:	05db      	lsls	r3, r3, #23
 80059c0:	4616      	mov	r6, r2
 80059c2:	d505      	bpl.n	80059d0 <__swrite+0x1e>
 80059c4:	2302      	movs	r3, #2
 80059c6:	2200      	movs	r2, #0
 80059c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059cc:	f000 f868 	bl	8005aa0 <_lseek_r>
 80059d0:	89a3      	ldrh	r3, [r4, #12]
 80059d2:	4632      	mov	r2, r6
 80059d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059d8:	4628      	mov	r0, r5
 80059da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059de:	81a3      	strh	r3, [r4, #12]
 80059e0:	463b      	mov	r3, r7
 80059e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059e6:	f000 b817 	b.w	8005a18 <_write_r>

080059ea <__sseek>:
 80059ea:	b510      	push	{r4, lr}
 80059ec:	460c      	mov	r4, r1
 80059ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f2:	f000 f855 	bl	8005aa0 <_lseek_r>
 80059f6:	1c43      	adds	r3, r0, #1
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	bf15      	itete	ne
 80059fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80059fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a06:	81a3      	strheq	r3, [r4, #12]
 8005a08:	bf18      	it	ne
 8005a0a:	81a3      	strhne	r3, [r4, #12]
 8005a0c:	bd10      	pop	{r4, pc}

08005a0e <__sclose>:
 8005a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a12:	f000 b813 	b.w	8005a3c <_close_r>
	...

08005a18 <_write_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	4d06      	ldr	r5, [pc, #24]	; (8005a38 <_write_r+0x20>)
 8005a1e:	4608      	mov	r0, r1
 8005a20:	4611      	mov	r1, r2
 8005a22:	2200      	movs	r2, #0
 8005a24:	602a      	str	r2, [r5, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f7fa fe43 	bl	80006b2 <_write>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d102      	bne.n	8005a36 <_write_r+0x1e>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <_write_r+0x1e>
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	20004008 	.word	0x20004008

08005a3c <_close_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	2300      	movs	r3, #0
 8005a40:	4d05      	ldr	r5, [pc, #20]	; (8005a58 <_close_r+0x1c>)
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	f7fa fe4f 	bl	80006ea <_close>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_close_r+0x1a>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_close_r+0x1a>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	20004008 	.word	0x20004008

08005a5c <_fstat_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	2300      	movs	r3, #0
 8005a60:	4d06      	ldr	r5, [pc, #24]	; (8005a7c <_fstat_r+0x20>)
 8005a62:	4604      	mov	r4, r0
 8005a64:	4608      	mov	r0, r1
 8005a66:	4611      	mov	r1, r2
 8005a68:	602b      	str	r3, [r5, #0]
 8005a6a:	f7fa fe4a 	bl	8000702 <_fstat>
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	d102      	bne.n	8005a78 <_fstat_r+0x1c>
 8005a72:	682b      	ldr	r3, [r5, #0]
 8005a74:	b103      	cbz	r3, 8005a78 <_fstat_r+0x1c>
 8005a76:	6023      	str	r3, [r4, #0]
 8005a78:	bd38      	pop	{r3, r4, r5, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20004008 	.word	0x20004008

08005a80 <_isatty_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	2300      	movs	r3, #0
 8005a84:	4d05      	ldr	r5, [pc, #20]	; (8005a9c <_isatty_r+0x1c>)
 8005a86:	4604      	mov	r4, r0
 8005a88:	4608      	mov	r0, r1
 8005a8a:	602b      	str	r3, [r5, #0]
 8005a8c:	f7fa fe49 	bl	8000722 <_isatty>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_isatty_r+0x1a>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_isatty_r+0x1a>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	20004008 	.word	0x20004008

08005aa0 <_lseek_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	4d06      	ldr	r5, [pc, #24]	; (8005ac0 <_lseek_r+0x20>)
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	602a      	str	r2, [r5, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f7fa fe42 	bl	8000738 <_lseek>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_lseek_r+0x1e>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_lseek_r+0x1e>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	20004008 	.word	0x20004008

08005ac4 <memchr>:
 8005ac4:	b2c9      	uxtb	r1, r1
 8005ac6:	4402      	add	r2, r0
 8005ac8:	b510      	push	{r4, lr}
 8005aca:	4290      	cmp	r0, r2
 8005acc:	4603      	mov	r3, r0
 8005ace:	d101      	bne.n	8005ad4 <memchr+0x10>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e003      	b.n	8005adc <memchr+0x18>
 8005ad4:	781c      	ldrb	r4, [r3, #0]
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	428c      	cmp	r4, r1
 8005ada:	d1f6      	bne.n	8005aca <memchr+0x6>
 8005adc:	4618      	mov	r0, r3
 8005ade:	bd10      	pop	{r4, pc}

08005ae0 <memmove>:
 8005ae0:	4288      	cmp	r0, r1
 8005ae2:	b510      	push	{r4, lr}
 8005ae4:	eb01 0402 	add.w	r4, r1, r2
 8005ae8:	d902      	bls.n	8005af0 <memmove+0x10>
 8005aea:	4284      	cmp	r4, r0
 8005aec:	4623      	mov	r3, r4
 8005aee:	d807      	bhi.n	8005b00 <memmove+0x20>
 8005af0:	1e43      	subs	r3, r0, #1
 8005af2:	42a1      	cmp	r1, r4
 8005af4:	d008      	beq.n	8005b08 <memmove+0x28>
 8005af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005afa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005afe:	e7f8      	b.n	8005af2 <memmove+0x12>
 8005b00:	4402      	add	r2, r0
 8005b02:	4601      	mov	r1, r0
 8005b04:	428a      	cmp	r2, r1
 8005b06:	d100      	bne.n	8005b0a <memmove+0x2a>
 8005b08:	bd10      	pop	{r4, pc}
 8005b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b12:	e7f7      	b.n	8005b04 <memmove+0x24>

08005b14 <__malloc_lock>:
 8005b14:	4801      	ldr	r0, [pc, #4]	; (8005b1c <__malloc_lock+0x8>)
 8005b16:	f7ff b9cf 	b.w	8004eb8 <__retarget_lock_acquire_recursive>
 8005b1a:	bf00      	nop
 8005b1c:	20004000 	.word	0x20004000

08005b20 <__malloc_unlock>:
 8005b20:	4801      	ldr	r0, [pc, #4]	; (8005b28 <__malloc_unlock+0x8>)
 8005b22:	f7ff b9ca 	b.w	8004eba <__retarget_lock_release_recursive>
 8005b26:	bf00      	nop
 8005b28:	20004000 	.word	0x20004000

08005b2c <_realloc_r>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	4607      	mov	r7, r0
 8005b30:	4614      	mov	r4, r2
 8005b32:	460e      	mov	r6, r1
 8005b34:	b921      	cbnz	r1, 8005b40 <_realloc_r+0x14>
 8005b36:	4611      	mov	r1, r2
 8005b38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b3c:	f7ff ba72 	b.w	8005024 <_malloc_r>
 8005b40:	b922      	cbnz	r2, 8005b4c <_realloc_r+0x20>
 8005b42:	4625      	mov	r5, r4
 8005b44:	f7ff fa1e 	bl	8004f84 <_free_r>
 8005b48:	4628      	mov	r0, r5
 8005b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b4c:	f000 f826 	bl	8005b9c <_malloc_usable_size_r>
 8005b50:	42a0      	cmp	r0, r4
 8005b52:	d20f      	bcs.n	8005b74 <_realloc_r+0x48>
 8005b54:	4621      	mov	r1, r4
 8005b56:	4638      	mov	r0, r7
 8005b58:	f7ff fa64 	bl	8005024 <_malloc_r>
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d0f2      	beq.n	8005b48 <_realloc_r+0x1c>
 8005b62:	4631      	mov	r1, r6
 8005b64:	4622      	mov	r2, r4
 8005b66:	f7fe fe59 	bl	800481c <memcpy>
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	f7ff fa09 	bl	8004f84 <_free_r>
 8005b72:	e7e9      	b.n	8005b48 <_realloc_r+0x1c>
 8005b74:	4635      	mov	r5, r6
 8005b76:	e7e7      	b.n	8005b48 <_realloc_r+0x1c>

08005b78 <_read_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	4d06      	ldr	r5, [pc, #24]	; (8005b98 <_read_r+0x20>)
 8005b7e:	4608      	mov	r0, r1
 8005b80:	4611      	mov	r1, r2
 8005b82:	2200      	movs	r2, #0
 8005b84:	602a      	str	r2, [r5, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f7fa fd76 	bl	8000678 <_read>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_read_r+0x1e>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_read_r+0x1e>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	20004008 	.word	0x20004008

08005b9c <_malloc_usable_size_r>:
 8005b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ba0:	1f18      	subs	r0, r3, #4
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bfbc      	itt	lt
 8005ba6:	580b      	ldrlt	r3, [r1, r0]
 8005ba8:	18c0      	addlt	r0, r0, r3
 8005baa:	4770      	bx	lr

08005bac <_init>:
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	bf00      	nop
 8005bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb2:	bc08      	pop	{r3}
 8005bb4:	469e      	mov	lr, r3
 8005bb6:	4770      	bx	lr

08005bb8 <_fini>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	bf00      	nop
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr
 8005bc4:	0000      	movs	r0, r0
	...
