
FreeRTOS_ThreadCreation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005890  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be8  08005be8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005be8  08005be8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005be8  08005be8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f98  20000080  08005c78  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20004018  08005c78  00024018  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_line   00016e4c  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0001b595  00000000  00000000  00036f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036fc  00000000  00000000  00052497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  00055b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00115918  00000000  00000000  000571a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001488  00000000  00000000  0016cac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004d31  00000000  00000000  0016df48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172c79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006298  00000000  00000000  00172ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08005a78 	.word	0x08005a78

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08005a78 	.word	0x08005a78

08000240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000278 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000244:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000246:	e003      	b.n	8000250 <LoopCopyDataInit>

08000248 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800024a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800024c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800024e:	3104      	adds	r1, #4

08000250 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000254:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000256:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000258:	d3f6      	bcc.n	8000248 <CopyDataInit>
	ldr	r2, =_sbss
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <LoopForever+0x12>)
	b	LoopFillZerobss
 800025c:	e002      	b.n	8000264 <LoopFillZerobss>

0800025e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800025e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000260:	f842 3b04 	str.w	r3, [r2], #4

08000264 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <LoopForever+0x16>)
	cmp	r2, r3
 8000266:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000268:	d3f9      	bcc.n	800025e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800026a:	f000 fabf 	bl	80007ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f004 fc65 	bl	8004b3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000272:	f000 f80f 	bl	8000294 <main>

08000276 <LoopForever>:

LoopForever:
    b LoopForever
 8000276:	e7fe      	b.n	8000276 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000278:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800027c:	08005bf8 	.word	0x08005bf8
	ldr	r0, =_sdata
 8000280:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000284:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8000288:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 800028c:	20004018 	.word	0x20004018

08000290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC1_2_IRQHandler>
	...

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fb65 	bl	8000968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029e:	f000 f83f 	bl	8000320 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize LEDs */
  BSP_LED_Init(LED9);
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 fa28 	bl	80006f8 <BSP_LED_Init>
  BSP_LED_Init(LED10);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 fa25 	bl	80006f8 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 80002ae:	f000 f888 	bl	80003c2 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
 
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002b2:	f002 f9ed 	bl	8002690 <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of THREAD1 */
  //THREAD1Handle = osThreadNew(LED_Thread1, NULL, &THREAD1_attributes);
    status = xTaskCreate(LED_Thread1, "Task1", 200, "Task-1 is running", 2, &task1_handle);
 80002b6:	4b12      	ldr	r3, [pc, #72]	; (8000300 <main+0x6c>)
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	2302      	movs	r3, #2
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <main+0x70>)
 80002c0:	22c8      	movs	r2, #200	; 0xc8
 80002c2:	4911      	ldr	r1, [pc, #68]	; (8000308 <main+0x74>)
 80002c4:	4811      	ldr	r0, [pc, #68]	; (800030c <main+0x78>)
 80002c6:	f003 fb50 	bl	800396a <xTaskCreate>
 80002ca:	6078      	str	r0, [r7, #4]

    status1 = xTaskCreate(LED_Thread2, "Task2", 200, "Task-2 is running", 2, &task2_handle);
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <main+0x7c>)
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	2302      	movs	r3, #2
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <main+0x80>)
 80002d6:	22c8      	movs	r2, #200	; 0xc8
 80002d8:	490f      	ldr	r1, [pc, #60]	; (8000318 <main+0x84>)
 80002da:	4810      	ldr	r0, [pc, #64]	; (800031c <main+0x88>)
 80002dc:	f003 fb45 	bl	800396a <xTaskCreate>
 80002e0:	6038      	str	r0, [r7, #0]
    configASSERT(status == pdPASS);
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d002      	beq.n	80002ee <main+0x5a>
 80002e8:	f002 fe66 	bl	8002fb8 <ulSetInterruptMask>
 80002ec:	e7fe      	b.n	80002ec <main+0x58>
    configASSERT(status1 == pdPASS);
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d002      	beq.n	80002fa <main+0x66>
 80002f4:	f002 fe60 	bl	8002fb8 <ulSetInterruptMask>
 80002f8:	e7fe      	b.n	80002f8 <main+0x64>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002fa:	f002 f9ed 	bl	80026d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002fe:	e7fe      	b.n	80002fe <main+0x6a>
 8000300:	20003f68 	.word	0x20003f68
 8000304:	08005aa0 	.word	0x08005aa0
 8000308:	08005ab4 	.word	0x08005ab4
 800030c:	080003e9 	.word	0x080003e9
 8000310:	20003f6c 	.word	0x20003f6c
 8000314:	08005abc 	.word	0x08005abc
 8000318:	08005ad0 	.word	0x08005ad0
 800031c:	08000405 	.word	0x08000405

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b098      	sub	sp, #96	; 0x60
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0318 	add.w	r3, r7, #24
 800032a:	2248      	movs	r2, #72	; 0x48
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f004 fc35 	bl	8004b9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000342:	2000      	movs	r0, #0
 8000344:	f000 fe1a 	bl	8000f7c <HAL_PWREx_ControlVoltageScaling>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800034e:	f000 f879 	bl	8000444 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000352:	2310      	movs	r3, #16
 8000354:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800035a:	2300      	movs	r3, #0
 800035c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800035e:	2360      	movs	r3, #96	; 0x60
 8000360:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	2302      	movs	r3, #2
 8000364:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000366:	2301      	movs	r3, #1
 8000368:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800036a:	2301      	movs	r3, #1
 800036c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800036e:	2337      	movs	r3, #55	; 0x37
 8000370:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000372:	2307      	movs	r3, #7
 8000374:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000376:	2302      	movs	r3, #2
 8000378:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800037a:	2302      	movs	r3, #2
 800037c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	f107 0318 	add.w	r3, r7, #24
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fe9a 	bl	80010bc <HAL_RCC_OscConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800038e:	f000 f859 	bl	8000444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000392:	230f      	movs	r3, #15
 8000394:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000396:	2303      	movs	r3, #3
 8000398:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2105      	movs	r1, #5
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 fb5c 	bl	8001a68 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003b6:	f000 f845 	bl	8000444 <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3760      	adds	r7, #96	; 0x60
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80003c6:	2000      	movs	r0, #0
 80003c8:	f000 fd9a 	bl	8000f00 <HAL_ICACHE_ConfigAssociativityMode>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80003d2:	f000 f837 	bl	8000444 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003d6:	f000 fdb3 	bl	8000f40 <HAL_ICACHE_Enable>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003e0:	f000 f830 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <LED_Thread1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_LED_Thread1 */
void LED_Thread1(void *argument)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  /*Query the priority at which this task is running - passing in NULL means "return the calling task’s priority". */
   //uxPriority = uxTaskPriorityGet( NULL );

	  while(1)
    {
      BSP_LED_Toggle(LED9);
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f9df 	bl	80007b4 <BSP_LED_Toggle>
      printf("%s:\n",argument);
 80003f6:	6879      	ldr	r1, [r7, #4]
 80003f8:	4801      	ldr	r0, [pc, #4]	; (8000400 <LED_Thread1+0x18>)
 80003fa:	f004 fbd9 	bl	8004bb0 <iprintf>
    {
 80003fe:	e7f7      	b.n	80003f0 <LED_Thread1+0x8>
 8000400:	08005ad8 	.word	0x08005ad8

08000404 <LED_Thread2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_Thread2 */
void LED_Thread2(void *argument)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  /*Query the priority at which this task is running - passing in NULL means "return the calling task’s priority". */
  //uxPriority = uxTaskPriorityGet( NULL );

	  while(1)
    {
      BSP_LED_Toggle(LED10);
 800040c:	2001      	movs	r0, #1
 800040e:	f000 f9d1 	bl	80007b4 <BSP_LED_Toggle>
      printf("%s:\n",argument);
 8000412:	6879      	ldr	r1, [r7, #4]
 8000414:	4801      	ldr	r0, [pc, #4]	; (800041c <LED_Thread2+0x18>)
 8000416:	f004 fbcb 	bl	8004bb0 <iprintf>
    {
 800041a:	e7f7      	b.n	800040c <LED_Thread2+0x8>
 800041c:	08005ad8 	.word	0x08005ad8

08000420 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d101      	bne.n	8000436 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000432:	f000 fab3 	bl	800099c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40001000 	.word	0x40001000

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8000448:	e7fe      	b.n	8000448 <Error_Handler+0x4>
	...

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_MspInit+0x50>)
 8000454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000456:	4a11      	ldr	r2, [pc, #68]	; (800049c <HAL_MspInit+0x50>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6613      	str	r3, [r2, #96]	; 0x60
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x50>)
 8000460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x50>)
 800046c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800046e:	4a0b      	ldr	r2, [pc, #44]	; (800049c <HAL_MspInit+0x50>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000474:	6593      	str	r3, [r2, #88]	; 0x58
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <HAL_MspInit+0x50>)
 8000478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800047a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8000482:	2200      	movs	r2, #0
 8000484:	2107      	movs	r1, #7
 8000486:	f06f 0001 	mvn.w	r0, #1
 800048a:	f000 fb5f 	bl	8000b4c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800048e:	f000 fde1 	bl	8001054 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000

080004a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08c      	sub	sp, #48	; 0x30
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	6879      	ldr	r1, [r7, #4]
 80004b4:	2031      	movs	r0, #49	; 0x31
 80004b6:	f000 fb49 	bl	8000b4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80004ba:	2031      	movs	r0, #49	; 0x31
 80004bc:	f000 fb60 	bl	8000b80 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80004c0:	4b1e      	ldr	r3, [pc, #120]	; (800053c <HAL_InitTick+0x9c>)
 80004c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c4:	4a1d      	ldr	r2, [pc, #116]	; (800053c <HAL_InitTick+0x9c>)
 80004c6:	f043 0310 	orr.w	r3, r3, #16
 80004ca:	6593      	str	r3, [r2, #88]	; 0x58
 80004cc:	4b1b      	ldr	r3, [pc, #108]	; (800053c <HAL_InitTick+0x9c>)
 80004ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d0:	f003 0310 	and.w	r3, r3, #16
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004d8:	f107 0210 	add.w	r2, r7, #16
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4611      	mov	r1, r2
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 fcbc 	bl	8001e60 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004e8:	f001 fca6 	bl	8001e38 <HAL_RCC_GetPCLK1Freq>
 80004ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <HAL_InitTick+0xa0>)
 80004f2:	fba2 2303 	umull	r2, r3, r2, r3
 80004f6:	0c9b      	lsrs	r3, r3, #18
 80004f8:	3b01      	subs	r3, #1
 80004fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <HAL_InitTick+0xa4>)
 80004fe:	4a12      	ldr	r2, [pc, #72]	; (8000548 <HAL_InitTick+0xa8>)
 8000500:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <HAL_InitTick+0xa4>)
 8000504:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000508:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <HAL_InitTick+0xa4>)
 800050c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800050e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_InitTick+0xa4>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_InitTick+0xa4>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800051c:	4809      	ldr	r0, [pc, #36]	; (8000544 <HAL_InitTick+0xa4>)
 800051e:	f001 fda1 	bl	8002064 <HAL_TIM_Base_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d104      	bne.n	8000532 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000528:	4806      	ldr	r0, [pc, #24]	; (8000544 <HAL_InitTick+0xa4>)
 800052a:	f001 fdfd 	bl	8002128 <HAL_TIM_Base_Start_IT>
 800052e:	4603      	mov	r3, r0
 8000530:	e000      	b.n	8000534 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000532:	2301      	movs	r3, #1
}
 8000534:	4618      	mov	r0, r3
 8000536:	3730      	adds	r7, #48	; 0x30
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	431bde83 	.word	0x431bde83
 8000544:	20003f78 	.word	0x20003f78
 8000548:	40001000 	.word	0x40001000

0800054c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <TIM6_IRQHandler+0x10>)
 8000552:	f001 fe59 	bl	8002208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20003f78 	.word	0x20003f78

08000560 <ITM_SendChar>:
 /*ITM register addresses*/
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <ITM_SendChar+0x48>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <ITM_SendChar+0x48>)
 8000570:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000574:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <ITM_SendChar+0x4c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <ITM_SendChar+0x4c>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000582:	bf00      	nop
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0f8      	beq.n	8000584 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000592:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	6013      	str	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	e000edfc 	.word	0xe000edfc
 80005ac:	e0000e00 	.word	0xe0000e00

080005b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	e00a      	b.n	80005d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005c2:	e000      	b.n	80005c6 <_read+0x16>
 80005c4:	bf00      	nop
 80005c6:	4601      	mov	r1, r0
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	60ba      	str	r2, [r7, #8]
 80005ce:	b2ca      	uxtb	r2, r1
 80005d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	3301      	adds	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	429a      	cmp	r2, r3
 80005de:	dbf0      	blt.n	80005c2 <_read+0x12>
  }

  return len;
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b086      	sub	sp, #24
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	60f8      	str	r0, [r7, #12]
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	e009      	b.n	8000610 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	60ba      	str	r2, [r7, #8]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ffab 	bl	8000560 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	3301      	adds	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	dbf1      	blt.n	80005fc <_write+0x12>
  }
  return len;
 8000618:	687b      	ldr	r3, [r7, #4]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <_close>:

int _close(int file)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800063a:	b480      	push	{r7}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800064a:	605a      	str	r2, [r3, #4]
  return 0;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <_isatty>:

int _isatty(int file)
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
	...

0800068c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <_sbrk+0x5c>)
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <_sbrk+0x60>)
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <_sbrk+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d102      	bne.n	80006ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <_sbrk+0x64>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <_sbrk+0x68>)
 80006ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <_sbrk+0x64>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d207      	bcs.n	80006cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006bc:	f004 fa38 	bl	8004b30 <__errno>
 80006c0:	4603      	mov	r3, r0
 80006c2:	220c      	movs	r2, #12
 80006c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	e009      	b.n	80006e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <_sbrk+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <_sbrk+0x64>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <_sbrk+0x64>)
 80006dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006de:	68fb      	ldr	r3, [r7, #12]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20030000 	.word	0x20030000
 80006ec:	00000800 	.word	0x00000800
 80006f0:	2000009c 	.word	0x2000009c
 80006f4:	20004018 	.word	0x20004018

080006f8 <BSP_LED_Init>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08c      	sub	sp, #48	; 0x30
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
  int32_t          status = BSP_ERROR_NONE;
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED9)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d10c      	bne.n	8000726 <BSP_LED_Init+0x2e>
  {
    LED9_GPIO_CLK_ENABLE();
 800070c:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <BSP_LED_Init+0xb0>)
 800070e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000710:	4a25      	ldr	r2, [pc, #148]	; (80007a8 <BSP_LED_Init+0xb0>)
 8000712:	f043 0308 	orr.w	r3, r3, #8
 8000716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000718:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <BSP_LED_Init+0xb0>)
 800071a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071c:	f003 0308 	and.w	r3, r3, #8
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	e019      	b.n	800075a <BSP_LED_Init+0x62>
  }
  else /* Led = LED10 */
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <BSP_LED_Init+0xb0>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <BSP_LED_Init+0xb0>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6593      	str	r3, [r2, #88]	; 0x58
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <BSP_LED_Init+0xb0>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 800073e:	f000 fc79 	bl	8001034 <HAL_PWREx_EnableVddIO2>
    LED10_GPIO_CLK_ENABLE();
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <BSP_LED_Init+0xb0>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <BSP_LED_Init+0xb0>)
 8000748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <BSP_LED_Init+0xb0>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	4a13      	ldr	r2, [pc, #76]	; (80007ac <BSP_LED_Init+0xb4>)
 800075e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000768:	2301      	movs	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <BSP_LED_Init+0xb8>)
 8000774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000778:	f107 0218 	add.w	r2, r7, #24
 800077c:	4611      	mov	r1, r2
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fa0c 	bl	8000b9c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <BSP_LED_Init+0xb8>)
 8000788:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	4a07      	ldr	r2, [pc, #28]	; (80007ac <BSP_LED_Init+0xb4>)
 8000790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000794:	2201      	movs	r2, #1
 8000796:	4619      	mov	r1, r3
 8000798:	f000 fb80 	bl	8000e9c <HAL_GPIO_WritePin>

  return status;
 800079c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3730      	adds	r7, #48	; 0x30
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000004 	.word	0x20000004

080007b4 <BSP_LED_Toggle>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval BSP error code
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4a07      	ldr	r2, [pc, #28]	; (80007e4 <BSP_LED_Toggle+0x30>)
 80007c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4906      	ldr	r1, [pc, #24]	; (80007e8 <BSP_LED_Toggle+0x34>)
 80007ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007d2:	4619      	mov	r1, r3
 80007d4:	4610      	mov	r0, r2
 80007d6:	f000 fb79 	bl	8000ecc <HAL_GPIO_TogglePin>

  return status;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000004 	.word	0x20000004
 80007e8:	20000000 	.word	0x20000000

080007ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <SystemInit+0x20>)
 80007f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <SystemInit+0x20>)
 80007f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000816:	4b4f      	ldr	r3, [pc, #316]	; (8000954 <SystemCoreClockUpdate+0x144>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	2b00      	cmp	r3, #0
 8000820:	d107      	bne.n	8000832 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000822:	4b4c      	ldr	r3, [pc, #304]	; (8000954 <SystemCoreClockUpdate+0x144>)
 8000824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	e005      	b.n	800083e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000832:	4b48      	ldr	r3, [pc, #288]	; (8000954 <SystemCoreClockUpdate+0x144>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	091b      	lsrs	r3, r3, #4
 8000838:	f003 030f 	and.w	r3, r3, #15
 800083c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800083e:	4a46      	ldr	r2, [pc, #280]	; (8000958 <SystemCoreClockUpdate+0x148>)
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000846:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000848:	4b42      	ldr	r3, [pc, #264]	; (8000954 <SystemCoreClockUpdate+0x144>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	f003 030c 	and.w	r3, r3, #12
 8000850:	2b0c      	cmp	r3, #12
 8000852:	d866      	bhi.n	8000922 <SystemCoreClockUpdate+0x112>
 8000854:	a201      	add	r2, pc, #4	; (adr r2, 800085c <SystemCoreClockUpdate+0x4c>)
 8000856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085a:	bf00      	nop
 800085c:	08000891 	.word	0x08000891
 8000860:	08000923 	.word	0x08000923
 8000864:	08000923 	.word	0x08000923
 8000868:	08000923 	.word	0x08000923
 800086c:	08000899 	.word	0x08000899
 8000870:	08000923 	.word	0x08000923
 8000874:	08000923 	.word	0x08000923
 8000878:	08000923 	.word	0x08000923
 800087c:	080008a1 	.word	0x080008a1
 8000880:	08000923 	.word	0x08000923
 8000884:	08000923 	.word	0x08000923
 8000888:	08000923 	.word	0x08000923
 800088c:	080008a9 	.word	0x080008a9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000890:	4a32      	ldr	r2, [pc, #200]	; (800095c <SystemCoreClockUpdate+0x14c>)
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	6013      	str	r3, [r2, #0]
      break;
 8000896:	e048      	b.n	800092a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000898:	4b30      	ldr	r3, [pc, #192]	; (800095c <SystemCoreClockUpdate+0x14c>)
 800089a:	4a31      	ldr	r2, [pc, #196]	; (8000960 <SystemCoreClockUpdate+0x150>)
 800089c:	601a      	str	r2, [r3, #0]
      break;
 800089e:	e044      	b.n	800092a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80008a0:	4b2e      	ldr	r3, [pc, #184]	; (800095c <SystemCoreClockUpdate+0x14c>)
 80008a2:	4a2f      	ldr	r2, [pc, #188]	; (8000960 <SystemCoreClockUpdate+0x150>)
 80008a4:	601a      	str	r2, [r3, #0]
      break;
 80008a6:	e040      	b.n	800092a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80008a8:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <SystemCoreClockUpdate+0x144>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	f003 0303 	and.w	r3, r3, #3
 80008b0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <SystemCoreClockUpdate+0x144>)
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	091b      	lsrs	r3, r3, #4
 80008b8:	f003 030f 	and.w	r3, r3, #15
 80008bc:	3301      	adds	r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d003      	beq.n	80008ce <SystemCoreClockUpdate+0xbe>
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	2b03      	cmp	r3, #3
 80008ca:	d006      	beq.n	80008da <SystemCoreClockUpdate+0xca>
 80008cc:	e00b      	b.n	80008e6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80008ce:	4a24      	ldr	r2, [pc, #144]	; (8000960 <SystemCoreClockUpdate+0x150>)
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	613b      	str	r3, [r7, #16]
          break;
 80008d8:	e00b      	b.n	80008f2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80008da:	4a21      	ldr	r2, [pc, #132]	; (8000960 <SystemCoreClockUpdate+0x150>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	613b      	str	r3, [r7, #16]
          break;
 80008e4:	e005      	b.n	80008f2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ee:	613b      	str	r3, [r7, #16]
          break;
 80008f0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <SystemCoreClockUpdate+0x144>)
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	0a1b      	lsrs	r3, r3, #8
 80008f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	fb02 f303 	mul.w	r3, r2, r3
 8000902:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <SystemCoreClockUpdate+0x144>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	0e5b      	lsrs	r3, r3, #25
 800090a:	f003 0303 	and.w	r3, r3, #3
 800090e:	3301      	adds	r3, #1
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	fbb2 f3f3 	udiv	r3, r2, r3
 800091c:	4a0f      	ldr	r2, [pc, #60]	; (800095c <SystemCoreClockUpdate+0x14c>)
 800091e:	6013      	str	r3, [r2, #0]
      break;
 8000920:	e003      	b.n	800092a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <SystemCoreClockUpdate+0x14c>)
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	6013      	str	r3, [r2, #0]
      break;
 8000928:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <SystemCoreClockUpdate+0x144>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	091b      	lsrs	r3, r3, #4
 8000930:	f003 030f 	and.w	r3, r3, #15
 8000934:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <SystemCoreClockUpdate+0x154>)
 8000936:	5cd3      	ldrb	r3, [r2, r3]
 8000938:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <SystemCoreClockUpdate+0x14c>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	fa22 f303 	lsr.w	r3, r2, r3
 8000944:	4a05      	ldr	r2, [pc, #20]	; (800095c <SystemCoreClockUpdate+0x14c>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	371c      	adds	r7, #28
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40021000 	.word	0x40021000
 8000958:	08005b10 	.word	0x08005b10
 800095c:	2000000c 	.word	0x2000000c
 8000960:	00f42400 	.word	0x00f42400
 8000964:	08005af8 	.word	0x08005af8

08000968 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000972:	2004      	movs	r0, #4
 8000974:	f000 f8df 	bl	8000b36 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000978:	f7ff ff4a 	bl	8000810 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800097c:	2000      	movs	r0, #0
 800097e:	f7ff fd8f 	bl	80004a0 <HAL_InitTick>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d002      	beq.n	800098e <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	e001      	b.n	8000992 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800098e:	f7ff fd5d 	bl	800044c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000992:	79fb      	ldrb	r3, [r7, #7]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000014 	.word	0x20000014
 80009c0:	20003fc4 	.word	0x20003fc4

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20003fc4 	.word	0x20003fc4

080009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	db0b      	blt.n	8000a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f003 021f 	and.w	r2, r3, #31
 8000a58:	4907      	ldr	r1, [pc, #28]	; (8000a78 <__NVIC_EnableIRQ+0x38>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	095b      	lsrs	r3, r3, #5
 8000a60:	2001      	movs	r0, #1
 8000a62:	fa00 f202 	lsl.w	r2, r0, r2
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	0152      	lsls	r2, r2, #5
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	; (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0152      	lsls	r2, r2, #5
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	bf28      	it	cs
 8000aee:	2303      	movcs	r3, #3
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3303      	adds	r3, #3
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b04      	subs	r3, #4
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ff4c 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5a:	f7ff ff63 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000b5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	6978      	ldr	r0, [r7, #20]
 8000b66:	f7ff ffb3 	bl	8000ad0 <NVIC_EncodePriority>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff82 	bl	8000a7c <__NVIC_SetPriority>
}
 8000b78:	bf00      	nop
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff56 	bl	8000a40 <__NVIC_EnableIRQ>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b087      	sub	sp, #28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000baa:	e158      	b.n	8000e5e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 814a 	beq.w	8000e58 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d005      	beq.n	8000bdc <HAL_GPIO_Init+0x40>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d130      	bne.n	8000c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2203      	movs	r2, #3
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c12:	2201      	movs	r2, #1
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	f003 0201 	and.w	r2, r3, #1
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d017      	beq.n	8000c7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	2203      	movs	r2, #3
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d123      	bne.n	8000cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	691a      	ldr	r2, [r3, #16]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	08da      	lsrs	r2, r3, #3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3208      	adds	r2, #8
 8000cc8:	6939      	ldr	r1, [r7, #16]
 8000cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0203 	and.w	r2, r3, #3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80a4 	beq.w	8000e58 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000d10:	4a5a      	ldr	r2, [pc, #360]	; (8000e7c <HAL_GPIO_Init+0x2e0>)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	089b      	lsrs	r3, r3, #2
 8000d16:	3318      	adds	r3, #24
 8000d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	220f      	movs	r2, #15
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a52      	ldr	r2, [pc, #328]	; (8000e80 <HAL_GPIO_Init+0x2e4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d025      	beq.n	8000d88 <HAL_GPIO_Init+0x1ec>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a51      	ldr	r2, [pc, #324]	; (8000e84 <HAL_GPIO_Init+0x2e8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d01f      	beq.n	8000d84 <HAL_GPIO_Init+0x1e8>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a50      	ldr	r2, [pc, #320]	; (8000e88 <HAL_GPIO_Init+0x2ec>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d019      	beq.n	8000d80 <HAL_GPIO_Init+0x1e4>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a4f      	ldr	r2, [pc, #316]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d013      	beq.n	8000d7c <HAL_GPIO_Init+0x1e0>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a4e      	ldr	r2, [pc, #312]	; (8000e90 <HAL_GPIO_Init+0x2f4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d00d      	beq.n	8000d78 <HAL_GPIO_Init+0x1dc>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a4d      	ldr	r2, [pc, #308]	; (8000e94 <HAL_GPIO_Init+0x2f8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0x1d8>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a4c      	ldr	r2, [pc, #304]	; (8000e98 <HAL_GPIO_Init+0x2fc>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d101      	bne.n	8000d70 <HAL_GPIO_Init+0x1d4>
 8000d6c:	2306      	movs	r3, #6
 8000d6e:	e00c      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d70:	2307      	movs	r3, #7
 8000d72:	e00a      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d74:	2305      	movs	r3, #5
 8000d76:	e008      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d78:	2304      	movs	r3, #4
 8000d7a:	e006      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e004      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d80:	2302      	movs	r3, #2
 8000d82:	e002      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e000      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	f002 0203 	and.w	r2, r2, #3
 8000d90:	00d2      	lsls	r2, r2, #3
 8000d92:	4093      	lsls	r3, r2
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000d9a:	4938      	ldr	r1, [pc, #224]	; (8000e7c <HAL_GPIO_Init+0x2e0>)
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	3318      	adds	r3, #24
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000da8:	4b34      	ldr	r3, [pc, #208]	; (8000e7c <HAL_GPIO_Init+0x2e0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dcc:	4a2b      	ldr	r2, [pc, #172]	; (8000e7c <HAL_GPIO_Init+0x2e0>)
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <HAL_GPIO_Init+0x2e0>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000df6:	4a21      	ldr	r2, [pc, #132]	; (8000e7c <HAL_GPIO_Init+0x2e0>)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <HAL_GPIO_Init+0x2e0>)
 8000dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e22:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <HAL_GPIO_Init+0x2e0>)
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_GPIO_Init+0x2e0>)
 8000e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_GPIO_Init+0x2e0>)
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	fa22 f303 	lsr.w	r3, r2, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f47f ae9f 	bne.w	8000bac <HAL_GPIO_Init+0x10>
  }
}
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	371c      	adds	r7, #28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	4002f400 	.word	0x4002f400
 8000e80:	42020000 	.word	0x42020000
 8000e84:	42020400 	.word	0x42020400
 8000e88:	42020800 	.word	0x42020800
 8000e8c:	42020c00 	.word	0x42020c00
 8000e90:	42021000 	.word	0x42021000
 8000e94:	42021400 	.word	0x42021400
 8000e98:	42021800 	.word	0x42021800

08000e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eac:	787b      	ldrb	r3, [r7, #1]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eb2:	887a      	ldrh	r2, [r7, #2]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eb8:	e002      	b.n	8000ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	041a      	lsls	r2, r3, #16
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43d9      	mvns	r1, r3
 8000eea:	887b      	ldrh	r3, [r7, #2]
 8000eec:	400b      	ands	r3, r1
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	619a      	str	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e007      	b.n	8000f2e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 0204 	bic.w	r2, r3, #4
 8000f26:	4905      	ldr	r1, [pc, #20]	; (8000f3c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	40030400 	.word	0x40030400

08000f40 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_ICACHE_Enable+0x1c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_ICACHE_Enable+0x1c>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	40030400 	.word	0x40030400

08000f60 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40007000 	.word	0x40007000

08000f7c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f8c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8000f8e:	f000 f871 	bl	8001074 <HAL_PWREx_SMPS_GetEffectiveMode>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f98:	d101      	bne.n	8000f9e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e03e      	b.n	800101c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000faa:	d101      	bne.n	8000fb0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e035      	b.n	800101c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d101      	bne.n	8000fbc <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e02f      	b.n	800101c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000fc4:	4917      	ldr	r1, [pc, #92]	; (8001024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	095b      	lsrs	r3, r3, #5
 8000fd2:	4a16      	ldr	r2, [pc, #88]	; (800102c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd8:	09db      	lsrs	r3, r3, #7
 8000fda:	2232      	movs	r2, #50	; 0x32
 8000fdc:	fb02 f303 	mul.w	r3, r2, r3
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8000fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe6:	08db      	lsrs	r3, r3, #3
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fec:	e002      	b.n	8000ff4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001000:	d102      	bne.n	8001008 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f2      	bne.n	8000fee <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001014:	d101      	bne.n	800101a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e000      	b.n	800101c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40007000 	.word	0x40007000
 8001028:	2000000c 	.word	0x2000000c
 800102c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001030:	cccccccd 	.word	0xcccccccd

08001034 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_PWREx_EnableVddIO2+0x1c>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_PWREx_EnableVddIO2+0x1c>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001042:	6053      	str	r3, [r2, #4]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40007000 	.word	0x40007000

08001054 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800105e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001062:	6093      	str	r3, [r2, #8]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40007000 	.word	0x40007000

08001074 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800108a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	e00a      	b.n	80010a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d103      	bne.n	80010a4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800109c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	e001      	b.n	80010a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80010a8:	687b      	ldr	r3, [r7, #4]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40007000 	.word	0x40007000

080010bc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d102      	bne.n	80010d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	f000 bcc2 	b.w	8001a54 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010d0:	4ba3      	ldr	r3, [pc, #652]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010da:	4ba1      	ldr	r3, [pc, #644]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 80e9 	beq.w	80012c4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_RCC_OscConfig+0x4a>
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	2b0c      	cmp	r3, #12
 80010fc:	f040 8083 	bne.w	8001206 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d17f      	bne.n	8001206 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001106:	4b96      	ldr	r3, [pc, #600]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <HAL_RCC_OscConfig+0x64>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d102      	bne.n	8001120 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	f000 bc9a 	b.w	8001a54 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001124:	4b8e      	ldr	r3, [pc, #568]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d004      	beq.n	800113a <HAL_RCC_OscConfig+0x7e>
 8001130:	4b8b      	ldr	r3, [pc, #556]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001138:	e005      	b.n	8001146 <HAL_RCC_OscConfig+0x8a>
 800113a:	4b89      	ldr	r3, [pc, #548]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 800113c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001146:	4293      	cmp	r3, r2
 8001148:	d224      	bcs.n	8001194 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	4618      	mov	r0, r3
 8001150:	f000 feb8 	bl	8001ec4 <RCC_SetFlashLatencyFromMSIRange>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	f000 bc7a 	b.w	8001a54 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001160:	4b7f      	ldr	r3, [pc, #508]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a7e      	ldr	r2, [pc, #504]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b7c      	ldr	r3, [pc, #496]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	4979      	ldr	r1, [pc, #484]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 800117a:	4313      	orrs	r3, r2
 800117c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800117e:	4b78      	ldr	r3, [pc, #480]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	4974      	ldr	r1, [pc, #464]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 800118e:	4313      	orrs	r3, r2
 8001190:	604b      	str	r3, [r1, #4]
 8001192:	e026      	b.n	80011e2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001194:	4b72      	ldr	r3, [pc, #456]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a71      	ldr	r2, [pc, #452]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b6f      	ldr	r3, [pc, #444]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	496c      	ldr	r1, [pc, #432]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b2:	4b6b      	ldr	r3, [pc, #428]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	4967      	ldr	r1, [pc, #412]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10a      	bne.n	80011e2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 fe77 	bl	8001ec4 <RCC_SetFlashLatencyFromMSIRange>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	f000 bc39 	b.w	8001a54 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80011e2:	f000 fe15 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a5e      	ldr	r2, [pc, #376]	; (8001364 <HAL_RCC_OscConfig+0x2a8>)
 80011ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011ec:	4b5e      	ldr	r3, [pc, #376]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f955 	bl	80004a0 <HAL_InitTick>
 80011f6:	4603      	mov	r3, r0
 80011f8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d060      	beq.n	80012c2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	f000 bc27 	b.w	8001a54 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d039      	beq.n	8001282 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800120e:	4b54      	ldr	r3, [pc, #336]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a53      	ldr	r2, [pc, #332]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800121a:	f7ff fbd3 	bl	80009c4 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001220:	e00f      	b.n	8001242 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001222:	f7ff fbcf 	bl	80009c4 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d908      	bls.n	8001242 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001230:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	f000 bc09 	b.w	8001a54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001242:	4b47      	ldr	r3, [pc, #284]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0e9      	beq.n	8001222 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800124e:	4b44      	ldr	r3, [pc, #272]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a43      	ldr	r2, [pc, #268]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b41      	ldr	r3, [pc, #260]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	493e      	ldr	r1, [pc, #248]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800126c:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	4939      	ldr	r1, [pc, #228]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
 8001280:	e020      	b.n	80012c4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001282:	4b37      	ldr	r3, [pc, #220]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a36      	ldr	r2, [pc, #216]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800128e:	f7ff fb99 	bl	80009c4 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001294:	e00e      	b.n	80012b4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001296:	f7ff fb95 	bl	80009c4 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d907      	bls.n	80012b4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012a4:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e3cf      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012b4:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ea      	bne.n	8001296 <HAL_RCC_OscConfig+0x1da>
 80012c0:	e000      	b.n	80012c4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d07e      	beq.n	80013ce <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d005      	beq.n	80012e2 <HAL_RCC_OscConfig+0x226>
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d10e      	bne.n	80012fa <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d10b      	bne.n	80012fa <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d06e      	beq.n	80013cc <HAL_RCC_OscConfig+0x310>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d16a      	bne.n	80013cc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e3ac      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001302:	d106      	bne.n	8001312 <HAL_RCC_OscConfig+0x256>
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a15      	ldr	r2, [pc, #84]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 800130a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	e01d      	b.n	800134e <HAL_RCC_OscConfig+0x292>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800131a:	d10c      	bne.n	8001336 <HAL_RCC_OscConfig+0x27a>
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 800132e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e00b      	b.n	800134e <HAL_RCC_OscConfig+0x292>
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a09      	ldr	r2, [pc, #36]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 800133c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_RCC_OscConfig+0x2a4>)
 8001348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d020      	beq.n	8001398 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001356:	f7ff fb35 	bl	80009c4 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800135c:	e015      	b.n	800138a <HAL_RCC_OscConfig+0x2ce>
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	2000000c 	.word	0x2000000c
 8001368:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fb2a 	bl	80009c4 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	d907      	bls.n	800138a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800137a:	4b9f      	ldr	r3, [pc, #636]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e364      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800138a:	4b9b      	ldr	r3, [pc, #620]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0ea      	beq.n	800136c <HAL_RCC_OscConfig+0x2b0>
 8001396:	e01a      	b.n	80013ce <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fb14 	bl	80009c4 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800139e:	e00e      	b.n	80013be <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fb10 	bl	80009c4 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d907      	bls.n	80013be <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ae:	4b92      	ldr	r3, [pc, #584]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e34a      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013be:	4b8e      	ldr	r3, [pc, #568]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1ea      	bne.n	80013a0 <HAL_RCC_OscConfig+0x2e4>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d06c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d005      	beq.n	80013ec <HAL_RCC_OscConfig+0x330>
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d119      	bne.n	800141a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d116      	bne.n	800141a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ec:	4b82      	ldr	r3, [pc, #520]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_OscConfig+0x348>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e327      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	4b7c      	ldr	r3, [pc, #496]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	061b      	lsls	r3, r3, #24
 8001412:	4979      	ldr	r1, [pc, #484]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001418:	e04c      	b.n	80014b4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d029      	beq.n	8001476 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001422:	4b75      	ldr	r3, [pc, #468]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a74      	ldr	r2, [pc, #464]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 8001428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fac9 	bl	80009c4 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001434:	e00e      	b.n	8001454 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fac5 	bl	80009c4 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d907      	bls.n	8001454 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001444:	4b6c      	ldr	r3, [pc, #432]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e2ff      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001454:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0ea      	beq.n	8001436 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b65      	ldr	r3, [pc, #404]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	061b      	lsls	r3, r3, #24
 800146e:	4962      	ldr	r1, [pc, #392]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
 8001474:	e01e      	b.n	80014b4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001476:	4b60      	ldr	r3, [pc, #384]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a5f      	ldr	r2, [pc, #380]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 800147c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001482:	f7ff fa9f 	bl	80009c4 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001488:	e00e      	b.n	80014a8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148a:	f7ff fa9b 	bl	80009c4 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d907      	bls.n	80014a8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001498:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e2d5      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014a8:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ea      	bne.n	800148a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d05f      	beq.n	8001580 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d038      	beq.n	800153a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d108      	bne.n	80014e2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80014d0:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 80014d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d6:	4a48      	ldr	r2, [pc, #288]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 80014d8:	f023 0310 	bic.w	r3, r3, #16
 80014dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80014e0:	e007      	b.n	80014f2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80014e2:	4b45      	ldr	r3, [pc, #276]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 80014e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e8:	4a43      	ldr	r2, [pc, #268]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 80014ea:	f043 0310 	orr.w	r3, r3, #16
 80014ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 80014f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f8:	4a3f      	ldr	r2, [pc, #252]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001502:	f7ff fa5f 	bl	80009c4 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001508:	e00f      	b.n	800152a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150a:	f7ff fa5b 	bl	80009c4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b07      	cmp	r3, #7
 8001516:	d908      	bls.n	800152a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001518:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 800151a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e294      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800152a:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 800152c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0e8      	beq.n	800150a <HAL_RCC_OscConfig+0x44e>
 8001538:	e022      	b.n	8001580 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153a:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 800153c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001540:	4a2d      	ldr	r2, [pc, #180]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154a:	f7ff fa3b 	bl	80009c4 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001550:	e00f      	b.n	8001572 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001552:	f7ff fa37 	bl	80009c4 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b07      	cmp	r3, #7
 800155e:	d908      	bls.n	8001572 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 8001562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e270      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 8001574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e8      	bne.n	8001552 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8131 	beq.w	80017f0 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10d      	bne.n	80015ba <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a2:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6593      	str	r3, [r2, #88]	; 0x58
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_RCC_OscConfig+0x53c>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b6:	2301      	movs	r3, #1
 80015b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_RCC_OscConfig+0x540>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d122      	bne.n	800160c <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_RCC_OscConfig+0x540>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <HAL_RCC_OscConfig+0x540>)
 80015cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d2:	f7ff f9f7 	bl	80009c4 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d8:	e012      	b.n	8001600 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015da:	f7ff f9f3 	bl	80009c4 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d90b      	bls.n	8001600 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_RCC_OscConfig+0x540>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d105      	bne.n	8001600 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e22d      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001600:	4bb8      	ldr	r3, [pc, #736]	; (80018e4 <HAL_RCC_OscConfig+0x828>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0e6      	beq.n	80015da <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01f      	beq.n	8001658 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d010      	beq.n	8001646 <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001624:	4bb0      	ldr	r3, [pc, #704]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162a:	4aaf      	ldr	r2, [pc, #700]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001634:	4bac      	ldr	r3, [pc, #688]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 8001636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163a:	4aab      	ldr	r2, [pc, #684]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001644:	e018      	b.n	8001678 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001646:	4ba8      	ldr	r3, [pc, #672]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 8001648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164c:	4aa6      	ldr	r2, [pc, #664]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001656:	e00f      	b.n	8001678 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001658:	4ba3      	ldr	r3, [pc, #652]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800165a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165e:	4aa2      	ldr	r2, [pc, #648]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001668:	4b9f      	ldr	r3, [pc, #636]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800166a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166e:	4a9e      	ldr	r2, [pc, #632]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d068      	beq.n	8001752 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff f9a0 	bl	80009c4 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001686:	e011      	b.n	80016ac <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001688:	f7ff f99c 	bl	80009c4 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	; 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d908      	bls.n	80016ac <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800169a:	4b93      	ldr	r3, [pc, #588]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800169c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e1d3      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ac:	4b8e      	ldr	r3, [pc, #568]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 80016ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0e6      	beq.n	8001688 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d022      	beq.n	800170c <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80016c6:	4b88      	ldr	r3, [pc, #544]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016cc:	4a86      	ldr	r2, [pc, #536]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 80016ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80016d6:	e011      	b.n	80016fc <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d8:	f7ff f974 	bl	80009c4 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d908      	bls.n	80016fc <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80016ea:	4b7f      	ldr	r3, [pc, #508]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 80016ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e1ab      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80016fc:	4b7a      	ldr	r3, [pc, #488]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0e6      	beq.n	80016d8 <HAL_RCC_OscConfig+0x61c>
 800170a:	e068      	b.n	80017de <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800170c:	4b76      	ldr	r3, [pc, #472]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001712:	4a75      	ldr	r2, [pc, #468]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 8001714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800171c:	e011      	b.n	8001742 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff f951 	bl	80009c4 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f241 3288 	movw	r2, #5000	; 0x1388
 800172c:	4293      	cmp	r3, r2
 800172e:	d908      	bls.n	8001742 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001730:	4b6d      	ldr	r3, [pc, #436]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 8001732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e188      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001742:	4b69      	ldr	r3, [pc, #420]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 8001744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1e6      	bne.n	800171e <HAL_RCC_OscConfig+0x662>
 8001750:	e045      	b.n	80017de <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001752:	f7ff f937 	bl	80009c4 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001758:	e011      	b.n	800177e <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff f933 	bl	80009c4 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d908      	bls.n	800177e <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800176c:	4b5e      	ldr	r3, [pc, #376]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e16a      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800177e:	4b5a      	ldr	r3, [pc, #360]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e6      	bne.n	800175a <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800178c:	4b56      	ldr	r3, [pc, #344]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001796:	2b00      	cmp	r3, #0
 8001798:	d021      	beq.n	80017de <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800179a:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800179c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a0:	4a51      	ldr	r2, [pc, #324]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 80017a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017aa:	e011      	b.n	80017d0 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ac:	f7ff f90a 	bl	80009c4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d908      	bls.n	80017d0 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017be:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 80017c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e141      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017d0:	4b45      	ldr	r3, [pc, #276]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1e6      	bne.n	80017ac <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017de:	7ffb      	ldrb	r3, [r7, #31]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e4:	4b40      	ldr	r3, [pc, #256]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	4a3f      	ldr	r2, [pc, #252]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 80017ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0320 	and.w	r3, r3, #32
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d04a      	beq.n	8001892 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	2b00      	cmp	r3, #0
 8001802:	d023      	beq.n	800184c <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001804:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 8001806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800180a:	4a37      	ldr	r2, [pc, #220]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001814:	f7ff f8d6 	bl	80009c4 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800181a:	e00f      	b.n	800183c <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800181c:	f7ff f8d2 	bl	80009c4 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d908      	bls.n	800183c <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800182a:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800182c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e10b      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800183c:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800183e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0e8      	beq.n	800181c <HAL_RCC_OscConfig+0x760>
 800184a:	e022      	b.n	8001892 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800184c:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800184e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001852:	4a25      	ldr	r2, [pc, #148]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185c:	f7ff f8b2 	bl	80009c4 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001862:	e00f      	b.n	8001884 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001864:	f7ff f8ae 	bl	80009c4 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d908      	bls.n	8001884 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 8001874:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0e7      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 8001886:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1e8      	bne.n	8001864 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 80db 	beq.w	8001a52 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	f000 8095 	beq.w	80019d4 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d16a      	bne.n	8001988 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 80018b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7ff f881 	bl	80009c4 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c4:	e012      	b.n	80018ec <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c6:	f7ff f87d 	bl	80009c4 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d90b      	bls.n	80018ec <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_RCC_OscConfig+0x82c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0b7      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
 80018e4:	40007000 	.word	0x40007000
 80018e8:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ec:	4b5b      	ldr	r3, [pc, #364]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1e6      	bne.n	80018c6 <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f8:	4b58      	ldr	r3, [pc, #352]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	4b58      	ldr	r3, [pc, #352]	; (8001a60 <HAL_RCC_OscConfig+0x9a4>)
 80018fe:	4013      	ands	r3, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001908:	3a01      	subs	r2, #1
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	4311      	orrs	r1, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001912:	0212      	lsls	r2, r2, #8
 8001914:	4311      	orrs	r1, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800191a:	0852      	lsrs	r2, r2, #1
 800191c:	3a01      	subs	r2, #1
 800191e:	0552      	lsls	r2, r2, #21
 8001920:	4311      	orrs	r1, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001926:	0852      	lsrs	r2, r2, #1
 8001928:	3a01      	subs	r2, #1
 800192a:	0652      	lsls	r2, r2, #25
 800192c:	4311      	orrs	r1, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001932:	06d2      	lsls	r2, r2, #27
 8001934:	430a      	orrs	r2, r1
 8001936:	4949      	ldr	r1, [pc, #292]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 8001938:	4313      	orrs	r3, r2
 800193a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800193c:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a46      	ldr	r2, [pc, #280]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 8001942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001946:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001948:	4b44      	ldr	r3, [pc, #272]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4a43      	ldr	r2, [pc, #268]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 800194e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001952:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff f836 	bl	80009c4 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195a:	e00e      	b.n	800197a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff f832 	bl	80009c4 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d907      	bls.n	800197a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196a:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e06c      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0ea      	beq.n	800195c <HAL_RCC_OscConfig+0x8a0>
 8001986:	e064      	b.n	8001a52 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a33      	ldr	r2, [pc, #204]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 800198e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff f816 	bl	80009c4 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199a:	e00e      	b.n	80019ba <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f812 	bl	80009c4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d907      	bls.n	80019ba <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e04c      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ea      	bne.n	800199c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019c6:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	4924      	ldr	r1, [pc, #144]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_RCC_OscConfig+0x9a8>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	60cb      	str	r3, [r1, #12]
 80019d2:	e03e      	b.n	8001a52 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e039      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <HAL_RCC_OscConfig+0x9a0>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 0203 	and.w	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d12c      	bne.n	8001a4e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fe:	3b01      	subs	r3, #1
 8001a00:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d123      	bne.n	8001a4e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a10:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d11b      	bne.n	8001a4e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a20:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d113      	bne.n	8001a4e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	3b01      	subs	r3, #1
 8001a34:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d109      	bne.n	8001a4e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	085b      	lsrs	r3, r3, #1
 8001a46:	3b01      	subs	r3, #1
 8001a48:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	019f800c 	.word	0x019f800c
 8001a64:	feeefffc 	.word	0xfeeefffc

08001a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e11c      	b.n	8001cba <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b90      	ldr	r3, [pc, #576]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d910      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b8d      	ldr	r3, [pc, #564]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 020f 	bic.w	r2, r3, #15
 8001a96:	498b      	ldr	r1, [pc, #556]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b89      	ldr	r3, [pc, #548]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e104      	b.n	8001cba <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b81      	ldr	r3, [pc, #516]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d908      	bls.n	8001ade <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b7e      	ldr	r3, [pc, #504]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	497b      	ldr	r1, [pc, #492]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8085 	beq.w	8001bf6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d11f      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af4:	4b74      	ldr	r3, [pc, #464]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0da      	b.n	8001cba <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b04:	f000 fa42 	bl	8001f8c <RCC_GetSysClockFreqFromPLLSource>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4a6f      	ldr	r2, [pc, #444]	; (8001ccc <HAL_RCC_ClockConfig+0x264>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d947      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b12:	4b6d      	ldr	r3, [pc, #436]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d141      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b1e:	4b6a      	ldr	r3, [pc, #424]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b26:	4a68      	ldr	r2, [pc, #416]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e036      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3c:	4b62      	ldr	r3, [pc, #392]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d115      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0b6      	b.n	8001cba <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b54:	4b5c      	ldr	r3, [pc, #368]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d109      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0aa      	b.n	8001cba <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b64:	4b58      	ldr	r3, [pc, #352]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0a2      	b.n	8001cba <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b74:	f000 f8b0 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4a53      	ldr	r2, [pc, #332]	; (8001ccc <HAL_RCC_ClockConfig+0x264>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d90f      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b82:	4b51      	ldr	r3, [pc, #324]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b8e:	4b4e      	ldr	r3, [pc, #312]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b96:	4a4c      	ldr	r2, [pc, #304]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ba2:	4b49      	ldr	r3, [pc, #292]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 0203 	bic.w	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4946      	ldr	r1, [pc, #280]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb4:	f7fe ff06 	bl	80009c4 <HAL_GetTick>
 8001bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	e013      	b.n	8001be4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbc:	f7fe ff02 	bl	80009c4 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d90a      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 020c 	and.w	r2, r3, #12
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e06a      	b.n	8001cba <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be4:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 020c 	and.w	r2, r3, #12
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d1e2      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b80      	cmp	r3, #128	; 0x80
 8001bfa:	d105      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bfc:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a31      	ldr	r2, [pc, #196]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c06:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d010      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d208      	bcs.n	8001c36 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4925      	ldr	r1, [pc, #148]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d210      	bcs.n	8001c66 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 020f 	bic.w	r2, r3, #15
 8001c4c:	491d      	ldr	r1, [pc, #116]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e029      	b.n	8001cba <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	4912      	ldr	r1, [pc, #72]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d009      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c90:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	490a      	ldr	r1, [pc, #40]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ca4:	f000 f8b4 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <HAL_RCC_ClockConfig+0x268>)
 8001cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_RCC_ClockConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fbf4 	bl	80004a0 <HAL_InitTick>
 8001cb8:	4603      	mov	r3, r0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	04c4b400 	.word	0x04c4b400
 8001cd0:	2000000c 	.word	0x2000000c
 8001cd4:	20000010 	.word	0x20000010

08001cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf0:	4b44      	ldr	r3, [pc, #272]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x34>
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2b0c      	cmp	r3, #12
 8001d04:	d121      	bne.n	8001d4a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d11e      	bne.n	8001d4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d0c:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d18:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	e005      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001d34:	4a34      	ldr	r2, [pc, #208]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x130>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10d      	bne.n	8001d60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d102      	bne.n	8001d56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d50:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x134>)
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	e004      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x134>)
 8001d5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	d146      	bne.n	8001df4 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d66:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d70:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d003      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0xb4>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d00d      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0xce>
 8001d8a:	e019      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d8c:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x134>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d94:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d96:	68d2      	ldr	r2, [r2, #12]
 8001d98:	0a12      	lsrs	r2, r2, #8
 8001d9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
        break;
 8001da4:	e019      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001da6:	4a19      	ldr	r2, [pc, #100]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x134>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001db0:	68d2      	ldr	r2, [r2, #12]
 8001db2:	0a12      	lsrs	r2, r2, #8
 8001db4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001db8:	fb02 f303 	mul.w	r3, r2, r3
 8001dbc:	617b      	str	r3, [r7, #20]
        break;
 8001dbe:	e00c      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001dca:	68d2      	ldr	r2, [r2, #12]
 8001dcc:	0a12      	lsrs	r2, r2, #8
 8001dce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dd2:	fb02 f303 	mul.w	r3, r2, r3
 8001dd6:	617b      	str	r3, [r7, #20]
        break;
 8001dd8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	0e5b      	lsrs	r3, r3, #25
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	3301      	adds	r3, #1
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001df4:	69bb      	ldr	r3, [r7, #24]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08005b10 	.word	0x08005b10
 8001e0c:	00f42400 	.word	0x00f42400

08001e10 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8001e14:	f7ff ff60 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_GetHCLKFreq+0x20>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	4903      	ldr	r1, [pc, #12]	; (8001e34 <HAL_RCC_GetHCLKFreq+0x24>)
 8001e26:	5ccb      	ldrb	r3, [r1, r3]
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000
 8001e34:	08005af8 	.word	0x08005af8

08001e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e3c:	f7ff ffe8 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	4903      	ldr	r1, [pc, #12]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08005b08 	.word	0x08005b08

08001e60 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_RCC_GetClockConfig+0x5c>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0203 	and.w	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_RCC_GetClockConfig+0x5c>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_RCC_GetClockConfig+0x5c>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_RCC_GetClockConfig+0x5c>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	08db      	lsrs	r3, r3, #3
 8001e9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ea2:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <HAL_RCC_GetClockConfig+0x60>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 020f 	and.w	r2, r3, #15
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	601a      	str	r2, [r3, #0]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40022000 	.word	0x40022000

08001ec4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001edc:	f7ff f840 	bl	8000f60 <HAL_PWREx_GetVoltageRange>
 8001ee0:	6138      	str	r0, [r7, #16]
 8001ee2:	e014      	b.n	8001f0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	4a26      	ldr	r2, [pc, #152]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eee:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001efc:	f7ff f830 	bl	8000f60 <HAL_PWREx_GetVoltageRange>
 8001f00:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	4a1f      	ldr	r2, [pc, #124]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f1a:	d10b      	bne.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b80      	cmp	r3, #128	; 0x80
 8001f20:	d919      	bls.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2ba0      	cmp	r3, #160	; 0xa0
 8001f26:	d902      	bls.n	8001f2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f28:	2302      	movs	r3, #2
 8001f2a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001f2c:	e013      	b.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f2e:	2301      	movs	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001f32:	e010      	b.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b80      	cmp	r3, #128	; 0x80
 8001f38:	d902      	bls.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e00a      	b.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b80      	cmp	r3, #128	; 0x80
 8001f44:	d102      	bne.n	8001f4c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f46:	2302      	movs	r3, #2
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e004      	b.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b70      	cmp	r3, #112	; 0x70
 8001f50:	d101      	bne.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f52:	2301      	movs	r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 020f 	bic.w	r2, r3, #15
 8001f5e:	490a      	ldr	r1, [pc, #40]	; (8001f88 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40022000 	.word	0x40022000

08001f8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f92:	4b31      	ldr	r3, [pc, #196]	; (8002058 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f9c:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d015      	beq.n	8001fdc <RCC_GetSysClockFreqFromPLLSource+0x50>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d839      	bhi.n	800202a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d01c      	beq.n	8001ff6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d133      	bne.n	800202a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fc2:	4a26      	ldr	r2, [pc, #152]	; (800205c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	4a23      	ldr	r2, [pc, #140]	; (8002058 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001fcc:	68d2      	ldr	r2, [r2, #12]
 8001fce:	0a12      	lsrs	r2, r2, #8
 8001fd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fd4:	fb02 f303 	mul.w	r3, r2, r3
 8001fd8:	613b      	str	r3, [r7, #16]
      break;
 8001fda:	e029      	b.n	8002030 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fdc:	4a1f      	ldr	r2, [pc, #124]	; (800205c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001fe6:	68d2      	ldr	r2, [r2, #12]
 8001fe8:	0a12      	lsrs	r2, r2, #8
 8001fea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	613b      	str	r3, [r7, #16]
      break;
 8001ff4:	e01c      	b.n	8002030 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d107      	bne.n	8002012 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	e005      	b.n	800201e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800201e:	4a10      	ldr	r2, [pc, #64]	; (8002060 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	613b      	str	r3, [r7, #16]
        break;
 8002028:	e002      	b.n	8002030 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
      break;
 800202e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0e5b      	lsrs	r3, r3, #25
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	3301      	adds	r3, #1
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800204a:	683b      	ldr	r3, [r7, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40021000 	.word	0x40021000
 800205c:	00f42400 	.word	0x00f42400
 8002060:	08005b10 	.word	0x08005b10

08002064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e049      	b.n	800210a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f841 	bl	8002112 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3304      	adds	r3, #4
 80020a0:	4619      	mov	r1, r3
 80020a2:	4610      	mov	r0, r2
 80020a4:	f000 f9f8 	bl	8002498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d001      	beq.n	8002140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e04f      	b.n	80021e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a23      	ldr	r2, [pc, #140]	; (80021ec <HAL_TIM_Base_Start_IT+0xc4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01d      	beq.n	800219e <HAL_TIM_Base_Start_IT+0x76>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216a:	d018      	beq.n	800219e <HAL_TIM_Base_Start_IT+0x76>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_TIM_Base_Start_IT+0x76>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00e      	beq.n	800219e <HAL_TIM_Base_Start_IT+0x76>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_TIM_Base_Start_IT+0x76>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_TIM_Base_Start_IT+0xd4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_TIM_Base_Start_IT+0x76>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a19      	ldr	r2, [pc, #100]	; (8002200 <HAL_TIM_Base_Start_IT+0xd8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d115      	bne.n	80021ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_TIM_Base_Start_IT+0xdc>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b06      	cmp	r3, #6
 80021ae:	d015      	beq.n	80021dc <HAL_TIM_Base_Start_IT+0xb4>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b6:	d011      	beq.n	80021dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c8:	e008      	b.n	80021dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e000      	b.n	80021de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	40012c00 	.word	0x40012c00
 80021f0:	40000400 	.word	0x40000400
 80021f4:	40000800 	.word	0x40000800
 80021f8:	40000c00 	.word	0x40000c00
 80021fc:	40013400 	.word	0x40013400
 8002200:	40014000 	.word	0x40014000
 8002204:	00010007 	.word	0x00010007

08002208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b02      	cmp	r3, #2
 800221c:	d122      	bne.n	8002264 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b02      	cmp	r3, #2
 800222a:	d11b      	bne.n	8002264 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0202 	mvn.w	r2, #2
 8002234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f905 	bl	800245a <HAL_TIM_IC_CaptureCallback>
 8002250:	e005      	b.n	800225e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8f7 	bl	8002446 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f908 	bl	800246e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b04      	cmp	r3, #4
 8002270:	d122      	bne.n	80022b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b04      	cmp	r3, #4
 800227e:	d11b      	bne.n	80022b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0204 	mvn.w	r2, #4
 8002288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f8db 	bl	800245a <HAL_TIM_IC_CaptureCallback>
 80022a4:	e005      	b.n	80022b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f8cd 	bl	8002446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f8de 	bl	800246e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d122      	bne.n	800230c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d11b      	bne.n	800230c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0208 	mvn.w	r2, #8
 80022dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2204      	movs	r2, #4
 80022e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f8b1 	bl	800245a <HAL_TIM_IC_CaptureCallback>
 80022f8:	e005      	b.n	8002306 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f8a3 	bl	8002446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f8b4 	bl	800246e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b10      	cmp	r3, #16
 8002318:	d122      	bne.n	8002360 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b10      	cmp	r3, #16
 8002326:	d11b      	bne.n	8002360 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0210 	mvn.w	r2, #16
 8002330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2208      	movs	r2, #8
 8002336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f887 	bl	800245a <HAL_TIM_IC_CaptureCallback>
 800234c:	e005      	b.n	800235a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f879 	bl	8002446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f88a 	bl	800246e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10e      	bne.n	800238c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d107      	bne.n	800238c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0201 	mvn.w	r2, #1
 8002384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7fe f84a 	bl	8000420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	2b80      	cmp	r3, #128	; 0x80
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a4:	2b80      	cmp	r3, #128	; 0x80
 80023a6:	d107      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f914 	bl	80025e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023c6:	d10e      	bne.n	80023e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b80      	cmp	r3, #128	; 0x80
 80023d4:	d107      	bne.n	80023e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80023de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f907 	bl	80025f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f0:	2b40      	cmp	r3, #64	; 0x40
 80023f2:	d10e      	bne.n	8002412 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fe:	2b40      	cmp	r3, #64	; 0x40
 8002400:	d107      	bne.n	8002412 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800240a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f838 	bl	8002482 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b20      	cmp	r3, #32
 800241e:	d10e      	bne.n	800243e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	2b20      	cmp	r3, #32
 800242c:	d107      	bne.n	800243e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f06f 0220 	mvn.w	r2, #32
 8002436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f8c7 	bl	80025cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a40      	ldr	r2, [pc, #256]	; (80025ac <TIM_Base_SetConfig+0x114>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d013      	beq.n	80024d8 <TIM_Base_SetConfig+0x40>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b6:	d00f      	beq.n	80024d8 <TIM_Base_SetConfig+0x40>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a3d      	ldr	r2, [pc, #244]	; (80025b0 <TIM_Base_SetConfig+0x118>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00b      	beq.n	80024d8 <TIM_Base_SetConfig+0x40>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a3c      	ldr	r2, [pc, #240]	; (80025b4 <TIM_Base_SetConfig+0x11c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d007      	beq.n	80024d8 <TIM_Base_SetConfig+0x40>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a3b      	ldr	r2, [pc, #236]	; (80025b8 <TIM_Base_SetConfig+0x120>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d003      	beq.n	80024d8 <TIM_Base_SetConfig+0x40>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a3a      	ldr	r2, [pc, #232]	; (80025bc <TIM_Base_SetConfig+0x124>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d108      	bne.n	80024ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a2f      	ldr	r2, [pc, #188]	; (80025ac <TIM_Base_SetConfig+0x114>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d01f      	beq.n	8002532 <TIM_Base_SetConfig+0x9a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f8:	d01b      	beq.n	8002532 <TIM_Base_SetConfig+0x9a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a2c      	ldr	r2, [pc, #176]	; (80025b0 <TIM_Base_SetConfig+0x118>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d017      	beq.n	8002532 <TIM_Base_SetConfig+0x9a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a2b      	ldr	r2, [pc, #172]	; (80025b4 <TIM_Base_SetConfig+0x11c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d013      	beq.n	8002532 <TIM_Base_SetConfig+0x9a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a2a      	ldr	r2, [pc, #168]	; (80025b8 <TIM_Base_SetConfig+0x120>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00f      	beq.n	8002532 <TIM_Base_SetConfig+0x9a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a29      	ldr	r2, [pc, #164]	; (80025bc <TIM_Base_SetConfig+0x124>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00b      	beq.n	8002532 <TIM_Base_SetConfig+0x9a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a28      	ldr	r2, [pc, #160]	; (80025c0 <TIM_Base_SetConfig+0x128>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d007      	beq.n	8002532 <TIM_Base_SetConfig+0x9a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <TIM_Base_SetConfig+0x12c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d003      	beq.n	8002532 <TIM_Base_SetConfig+0x9a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a26      	ldr	r2, [pc, #152]	; (80025c8 <TIM_Base_SetConfig+0x130>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d108      	bne.n	8002544 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a10      	ldr	r2, [pc, #64]	; (80025ac <TIM_Base_SetConfig+0x114>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00f      	beq.n	8002590 <TIM_Base_SetConfig+0xf8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a12      	ldr	r2, [pc, #72]	; (80025bc <TIM_Base_SetConfig+0x124>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00b      	beq.n	8002590 <TIM_Base_SetConfig+0xf8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a11      	ldr	r2, [pc, #68]	; (80025c0 <TIM_Base_SetConfig+0x128>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d007      	beq.n	8002590 <TIM_Base_SetConfig+0xf8>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <TIM_Base_SetConfig+0x12c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d003      	beq.n	8002590 <TIM_Base_SetConfig+0xf8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <TIM_Base_SetConfig+0x130>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d103      	bne.n	8002598 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	615a      	str	r2, [r3, #20]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	40000400 	.word	0x40000400
 80025b4:	40000800 	.word	0x40000800
 80025b8:	40000c00 	.word	0x40000c00
 80025bc:	40013400 	.word	0x40013400
 80025c0:	40014000 	.word	0x40014000
 80025c4:	40014400 	.word	0x40014400
 80025c8:	40014800 	.word	0x40014800

080025cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <__NVIC_SetPriority>:
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	2b00      	cmp	r3, #0
 800261a:	db0a      	blt.n	8002632 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	490c      	ldr	r1, [pc, #48]	; (8002654 <__NVIC_SetPriority+0x4c>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	0152      	lsls	r2, r2, #5
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	440b      	add	r3, r1
 800262c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002630:	e00a      	b.n	8002648 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4908      	ldr	r1, [pc, #32]	; (8002658 <__NVIC_SetPriority+0x50>)
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	3b04      	subs	r3, #4
 8002640:	0152      	lsls	r2, r2, #5
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	440b      	add	r3, r1
 8002646:	761a      	strb	r2, [r3, #24]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000e100 	.word	0xe000e100
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <SysTick_Handler+0x1c>)
 8002662:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002664:	f001 fe86 	bl	8004374 <xTaskGetSchedulerState>
 8002668:	4603      	mov	r3, r0
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800266e:	f000 fb97 	bl	8002da0 <xPortSysTickHandler>
  }
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	e000e010 	.word	0xe000e010

0800267c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002680:	2100      	movs	r1, #0
 8002682:	f06f 0004 	mvn.w	r0, #4
 8002686:	f7ff ffbf 	bl	8002608 <__NVIC_SetPriority>
#endif
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002696:	f3ef 8305 	mrs	r3, IPSR
 800269a:	603b      	str	r3, [r7, #0]
  return(result);
 800269c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80026a2:	f06f 0305 	mvn.w	r3, #5
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	e00c      	b.n	80026c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <osKernelInitialize+0x44>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <osKernelInitialize+0x44>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	e002      	b.n	80026c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
 80026c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80026c4:	687b      	ldr	r3, [r7, #4]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	200000a0 	.word	0x200000a0

080026d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026de:	f3ef 8305 	mrs	r3, IPSR
 80026e2:	603b      	str	r3, [r7, #0]
  return(result);
 80026e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80026ea:	f06f 0305 	mvn.w	r3, #5
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	e010      	b.n	8002714 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <osKernelStart+0x48>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d109      	bne.n	800270e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80026fa:	f7ff ffbf 	bl	800267c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <osKernelStart+0x48>)
 8002700:	2202      	movs	r2, #2
 8002702:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002704:	f001 fa68 	bl	8003bd8 <vTaskStartScheduler>
      stat = osOK;
 8002708:	2300      	movs	r3, #0
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	e002      	b.n	8002714 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002714:	687b      	ldr	r3, [r7, #4]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200000a0 	.word	0x200000a0

08002724 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a07      	ldr	r2, [pc, #28]	; (8002750 <vApplicationGetIdleTaskMemory+0x2c>)
 8002734:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	4a06      	ldr	r2, [pc, #24]	; (8002754 <vApplicationGetIdleTaskMemory+0x30>)
 800273a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002742:	601a      	str	r2, [r3, #0]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	200000a4 	.word	0x200000a4
 8002754:	20000100 	.word	0x20000100

08002758 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4a07      	ldr	r2, [pc, #28]	; (8002784 <vApplicationGetTimerTaskMemory+0x2c>)
 8002768:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4a06      	ldr	r2, [pc, #24]	; (8002788 <vApplicationGetTimerTaskMemory+0x30>)
 800276e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002776:	601a      	str	r2, [r3, #0]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	20000900 	.word	0x20000900
 8002788:	2000095c 	.word	0x2000095c

0800278c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8002798:	f001 fa74 	bl	8003c84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800279c:	4b4f      	ldr	r3, [pc, #316]	; (80028dc <pvPortMalloc+0x150>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80027a4:	f000 f8f8 	bl	8002998 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80027a8:	4b4d      	ldr	r3, [pc, #308]	; (80028e0 <pvPortMalloc+0x154>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f040 8083 	bne.w	80028bc <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d015      	beq.n	80027e8 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 80027bc:	2208      	movs	r2, #8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00c      	beq.n	80027e8 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f023 0307 	bic.w	r3, r3, #7
 80027d4:	3308      	adds	r3, #8
 80027d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <pvPortMalloc+0x5c>
 80027e2:	f000 fbe9 	bl	8002fb8 <ulSetInterruptMask>
 80027e6:	e7fe      	b.n	80027e6 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d066      	beq.n	80028bc <pvPortMalloc+0x130>
 80027ee:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <pvPortMalloc+0x158>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d861      	bhi.n	80028bc <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80027f8:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <pvPortMalloc+0x15c>)
 80027fa:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80027fc:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <pvPortMalloc+0x15c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002802:	e004      	b.n	800280e <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	d903      	bls.n	8002820 <pvPortMalloc+0x94>
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f1      	bne.n	8002804 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002820:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <pvPortMalloc+0x150>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	429a      	cmp	r2, r3
 8002828:	d048      	beq.n	80028bc <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2208      	movs	r2, #8
 8002830:	4413      	add	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	1ad2      	subs	r2, r2, r3
 8002844:	2308      	movs	r3, #8
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	429a      	cmp	r2, r3
 800284a:	d917      	bls.n	800287c <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <pvPortMalloc+0xd8>
 800285e:	f000 fbab 	bl	8002fb8 <ulSetInterruptMask>
 8002862:	e7fe      	b.n	8002862 <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	1ad2      	subs	r2, r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002876:	68b8      	ldr	r0, [r7, #8]
 8002878:	f000 f8f0 	bl	8002a5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <pvPortMalloc+0x158>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <pvPortMalloc+0x158>)
 8002888:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <pvPortMalloc+0x158>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4b17      	ldr	r3, [pc, #92]	; (80028ec <pvPortMalloc+0x160>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d203      	bcs.n	800289e <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002896:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <pvPortMalloc+0x158>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a14      	ldr	r2, [pc, #80]	; (80028ec <pvPortMalloc+0x160>)
 800289c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <pvPortMalloc+0x154>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80028b2:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <pvPortMalloc+0x164>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	3301      	adds	r3, #1
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <pvPortMalloc+0x164>)
 80028ba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80028bc:	f001 f9f0 	bl	8003ca0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <pvPortMalloc+0x144>
 80028ca:	f000 fb75 	bl	8002fb8 <ulSetInterruptMask>
 80028ce:	e7fe      	b.n	80028ce <pvPortMalloc+0x142>
	return pvReturn;
 80028d0:	68fb      	ldr	r3, [r7, #12]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	2000391c 	.word	0x2000391c
 80028e0:	20003930 	.word	0x20003930
 80028e4:	20003920 	.word	0x20003920
 80028e8:	20003914 	.word	0x20003914
 80028ec:	20003924 	.word	0x20003924
 80028f0:	20003928 	.word	0x20003928

080028f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d03d      	beq.n	8002982 <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002906:	2308      	movs	r3, #8
 8002908:	425b      	negs	r3, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4413      	add	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4b1c      	ldr	r3, [pc, #112]	; (800298c <vPortFree+0x98>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <vPortFree+0x34>
 8002922:	f000 fb49 	bl	8002fb8 <ulSetInterruptMask>
 8002926:	e7fe      	b.n	8002926 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <vPortFree+0x42>
 8002930:	f000 fb42 	bl	8002fb8 <ulSetInterruptMask>
 8002934:	e7fe      	b.n	8002934 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4b14      	ldr	r3, [pc, #80]	; (800298c <vPortFree+0x98>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01e      	beq.n	8002982 <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d11a      	bne.n	8002982 <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	4b0e      	ldr	r3, [pc, #56]	; (800298c <vPortFree+0x98>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	43db      	mvns	r3, r3
 8002956:	401a      	ands	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800295c:	f001 f992 	bl	8003c84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <vPortFree+0x9c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4413      	add	r3, r2
 800296a:	4a09      	ldr	r2, [pc, #36]	; (8002990 <vPortFree+0x9c>)
 800296c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800296e:	68b8      	ldr	r0, [r7, #8]
 8002970:	f000 f874 	bl	8002a5c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002974:	4b07      	ldr	r3, [pc, #28]	; (8002994 <vPortFree+0xa0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3301      	adds	r3, #1
 800297a:	4a06      	ldr	r2, [pc, #24]	; (8002994 <vPortFree+0xa0>)
 800297c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800297e:	f001 f98f 	bl	8003ca0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20003930 	.word	0x20003930
 8002990:	20003920 	.word	0x20003920
 8002994:	2000392c 	.word	0x2000392c

08002998 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800299e:	f641 73b8 	movw	r3, #8120	; 0x1fb8
 80029a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80029a4:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <prvHeapInit+0xac>)
 80029a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00c      	beq.n	80029cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3307      	adds	r3, #7
 80029b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0307 	bic.w	r3, r3, #7
 80029be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <prvHeapInit+0xac>)
 80029c8:	4413      	add	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80029d0:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <prvHeapInit+0xb0>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80029d6:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <prvHeapInit+0xb0>)
 80029d8:	2200      	movs	r2, #0
 80029da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	4413      	add	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80029e4:	2208      	movs	r2, #8
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0307 	bic.w	r3, r3, #7
 80029f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <prvHeapInit+0xb4>)
 80029f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <prvHeapInit+0xb4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2200      	movs	r2, #0
 8002a00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a02:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <prvHeapInit+0xb4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	1ad2      	subs	r2, r2, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <prvHeapInit+0xb4>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <prvHeapInit+0xb8>)
 8002a26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4a09      	ldr	r2, [pc, #36]	; (8002a54 <prvHeapInit+0xbc>)
 8002a2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <prvHeapInit+0xc0>)
 8002a32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a36:	601a      	str	r2, [r3, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	2000195c 	.word	0x2000195c
 8002a48:	20003914 	.word	0x20003914
 8002a4c:	2000391c 	.word	0x2000391c
 8002a50:	20003924 	.word	0x20003924
 8002a54:	20003920 	.word	0x20003920
 8002a58:	20003930 	.word	0x20003930

08002a5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a64:	4b28      	ldr	r3, [pc, #160]	; (8002b08 <prvInsertBlockIntoFreeList+0xac>)
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e002      	b.n	8002a70 <prvInsertBlockIntoFreeList+0x14>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d8f7      	bhi.n	8002a6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	4413      	add	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d108      	bne.n	8002a9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	441a      	add	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	441a      	add	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d118      	bne.n	8002ae4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <prvInsertBlockIntoFreeList+0xb0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d00d      	beq.n	8002ada <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	441a      	add	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e008      	b.n	8002aec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <prvInsertBlockIntoFreeList+0xb0>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e003      	b.n	8002aec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d002      	beq.n	8002afa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20003914 	.word	0x20003914
 8002b0c:	2000391c 	.word	0x2000391c

08002b10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f103 0208 	add.w	r2, r3, #8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f04f 32ff 	mov.w	r2, #4294967295
 8002b28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f103 0208 	add.w	r2, r3, #8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f103 0208 	add.w	r2, r3, #8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	601a      	str	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b085      	sub	sp, #20
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d103      	bne.n	8002bd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e00c      	b.n	8002bec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	e002      	b.n	8002be0 <vListInsert+0x2e>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d2f6      	bcs.n	8002bda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	601a      	str	r2, [r3, #0]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6892      	ldr	r2, [r2, #8]
 8002c3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6852      	ldr	r2, [r2, #4]
 8002c44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d103      	bne.n	8002c58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	1e5a      	subs	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <vPortSetupTimerInterrupt+0x34>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <vPortSetupTimerInterrupt+0x38>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <vPortSetupTimerInterrupt+0x3c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <vPortSetupTimerInterrupt+0x40>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	099b      	lsrs	r3, r3, #6
 8002c94:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <vPortSetupTimerInterrupt+0x44>)
 8002c96:	3b01      	subs	r3, #1
 8002c98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <vPortSetupTimerInterrupt+0x34>)
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010
 8002cb0:	e000e018 	.word	0xe000e018
 8002cb4:	2000000c 	.word	0x2000000c
 8002cb8:	10624dd3 	.word	0x10624dd3
 8002cbc:	e000e014 	.word	0xe000e014

08002cc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <prvTaskExitError+0x30>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	d002      	beq.n	8002cda <prvTaskExitError+0x1a>
 8002cd4:	f000 f970 	bl	8002fb8 <ulSetInterruptMask>
 8002cd8:	e7fe      	b.n	8002cd8 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 8002cda:	f000 f96d 	bl	8002fb8 <ulSetInterruptMask>

	while( ulDummy == 0 )
 8002cde:	bf00      	nop
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0fc      	beq.n	8002ce0 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 8002ce6:	bf00      	nop
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000018 	.word	0x20000018

08002cf4 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if( configENABLE_FPU == 1 )
	static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
	{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
		#endif /* configENABLE_TRUSTZONE */

		/* CP10 = 11 ==> Full access to FPU i.e. both privileged and
		 * unprivileged code should be able to access FPU. CP11 should be
		 * programmed to the same value as CP10. */
		*( portCPACR ) |=	(	( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 8002cf8:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <prvSetupFPU+0x28>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a07      	ldr	r2, [pc, #28]	; (8002d1c <prvSetupFPU+0x28>)
 8002cfe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d02:	6013      	str	r3, [r2, #0]
							);

		/* ASPEN = 1 ==> Hardware should automatically preserve floating point
		 * context on exception entry and restore on exception return.
		 * LSPEN = 1 ==> Enable lazy context save of FP state. */
		*( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <prvSetupFPU+0x2c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a05      	ldr	r2, [pc, #20]	; (8002d20 <prvSetupFPU+0x2c>)
 8002d0a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002d0e:	6013      	str	r3, [r2, #0]
	}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000ed88 	.word	0xe000ed88
 8002d20:	e000ef34 	.word	0xe000ef34

08002d24 <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <vPortYield+0x20>)
 8002d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d2e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002d30:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002d34:	f3bf 8f6f 	isb	sy
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000ed04 	.word	0xe000ed04

08002d48 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8002d4c:	f000 f934 	bl	8002fb8 <ulSetInterruptMask>
	ulCriticalNesting++;
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <vPortEnterCritical+0x20>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3301      	adds	r3, #1
 8002d56:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <vPortEnterCritical+0x20>)
 8002d58:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002d5a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002d5e:	f3bf 8f6f 	isb	sy
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000018 	.word	0x20000018

08002d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 8002d70:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <vPortExitCritical+0x30>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <vPortExitCritical+0x12>
 8002d78:	f000 f91e 	bl	8002fb8 <ulSetInterruptMask>
 8002d7c:	e7fe      	b.n	8002d7c <vPortExitCritical+0x10>
	ulCriticalNesting--;
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <vPortExitCritical+0x30>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	4a05      	ldr	r2, [pc, #20]	; (8002d9c <vPortExitCritical+0x30>)
 8002d86:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <vPortExitCritical+0x30>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 8002d90:	2000      	movs	r0, #0
 8002d92:	f000 f91e 	bl	8002fd2 <vClearInterruptMask>
	}
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000018 	.word	0x20000018

08002da0 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002da6:	f000 f907 	bl	8002fb8 <ulSetInterruptMask>
 8002daa:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002dac:	f001 f816 	bl	8003ddc <xTaskIncrementTick>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <xPortSysTickHandler+0x2c>)
 8002db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dbc:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f907 	bl	8002fd2 <vClearInterruptMask>
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	e000ed04 	.word	0xe000ed04

08002dd0 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3b02      	subs	r3, #2
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 8002de6:	7afb      	ldrb	r3, [r7, #11]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d104      	bne.n	8002df6 <vPortSVCHandler_C+0x26>
			#endif /* configENABLE_TRUSTZONE */

			#if( configENABLE_FPU == 1 )
			{
				/* Setup the Floating Point Unit (FPU). */
				prvSetupFPU();
 8002dec:	f7ff ff82 	bl	8002cf4 <prvSetupFPU>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8002df0:	f000 f8b6 	bl	8002f60 <vRestoreContextOfFirstTask>
		}
		break;
 8002df4:	e002      	b.n	8002dfc <vPortSVCHandler_C+0x2c>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8002df6:	f000 f8df 	bl	8002fb8 <ulSetInterruptMask>
 8002dfa:	e7fe      	b.n	8002dfa <vPortSVCHandler_C+0x2a>
		}
	}
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3b04      	subs	r3, #4
 8002e16:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e1e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3b04      	subs	r3, #4
 8002e24:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3b04      	subs	r3, #4
 8002e30:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e32:	4a38      	ldr	r2, [pc, #224]	; (8002f14 <pxPortInitialiseStack+0x110>)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8002e44:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3b04      	subs	r3, #4
 8002e4a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8002e52:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3b04      	subs	r3, #4
 8002e58:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8002e60:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3b04      	subs	r3, #4
 8002e66:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8002e6e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3b04      	subs	r3, #4
 8002e74:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3b04      	subs	r3, #4
 8002e80:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8002e88:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3b04      	subs	r3, #4
 8002e8e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8002e96:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3b04      	subs	r3, #4
 8002e9c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8002ea4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3b04      	subs	r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8002eb2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3b04      	subs	r3, #4
 8002eb8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8002ec0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3b04      	subs	r3, #4
 8002ec6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8002ece:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3b04      	subs	r3, #4
 8002ed4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8002edc:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3b04      	subs	r3, #4
 8002ee2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8002eea:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3b04      	subs	r3, #4
 8002ef0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8002ef8:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3b04      	subs	r3, #4
 8002efe:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	08002cc1 	.word	0x08002cc1

08002f18 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <xPortStartScheduler+0x38>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <xPortStartScheduler+0x38>)
 8002f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f28:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <xPortStartScheduler+0x38>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a08      	ldr	r2, [pc, #32]	; (8002f50 <xPortStartScheduler+0x38>)
 8002f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f32:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 8002f34:	f7ff fea0 	bl	8002c78 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <xPortStartScheduler+0x3c>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 8002f3e:	f000 f827 	bl	8002f90 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 8002f42:	f000 ffed 	bl	8003f20 <vTaskSwitchContext>
	prvTaskExitError();
 8002f46:	f7ff febb 	bl	8002cc0 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	e000ed20 	.word	0xe000ed20
 8002f54:	20000018 	.word	0x20000018
	...

08002f60 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002f60:	4a07      	ldr	r2, [pc, #28]	; (8002f80 <pxCurrentTCBConst2>)
 8002f62:	6811      	ldr	r1, [r2, #0]
 8002f64:	6808      	ldr	r0, [r1, #0]
 8002f66:	c806      	ldmia	r0!, {r1, r2}
 8002f68:	f381 880b 	msr	PSPLIM, r1
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	f381 8814 	msr	CONTROL, r1
 8002f72:	3020      	adds	r0, #32
 8002f74:	f380 8809 	msr	PSP, r0
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	4710      	bx	r2
 8002f7e:	bf00      	nop

08002f80 <pxCurrentTCBConst2>:
 8002f80:	20003934 	.word	0x20003934
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
	...

08002f90 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002f90:	4807      	ldr	r0, [pc, #28]	; (8002fb0 <xVTORConst>)
 8002f92:	6800      	ldr	r0, [r0, #0]
 8002f94:	6800      	ldr	r0, [r0, #0]
 8002f96:	f380 8808 	msr	MSP, r0
 8002f9a:	b662      	cpsie	i
 8002f9c:	b661      	cpsie	f
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	df02      	svc	2
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	f3af 8000 	nop.w

08002fb0 <xVTORConst>:
 8002fb0:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop

08002fb8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002fb8:	f3ef 8011 	mrs	r0, BASEPRI
 8002fbc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 8002fc0:	f381 8811 	msr	BASEPRI, r1
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fce:	bf00      	nop
 8002fd0:	4618      	mov	r0, r3

08002fd2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002fd2:	f380 8811 	msr	BASEPRI, r0
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 8002fe0:	bf00      	nop
	...

08002ff0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002ff0:	f3ef 8009 	mrs	r0, PSP
 8002ff4:	f01e 0f10 	tst.w	lr, #16
 8002ff8:	bf08      	it	eq
 8002ffa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ffe:	f3ef 820b 	mrs	r2, PSPLIM
 8003002:	4673      	mov	r3, lr
 8003004:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8003008:	4a11      	ldr	r2, [pc, #68]	; (8003050 <pxCurrentTCBConst>)
 800300a:	6811      	ldr	r1, [r2, #0]
 800300c:	6008      	str	r0, [r1, #0]
 800300e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8003012:	f380 8811 	msr	BASEPRI, r0
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f000 ff7f 	bl	8003f20 <vTaskSwitchContext>
 8003022:	f04f 0000 	mov.w	r0, #0
 8003026:	f380 8811 	msr	BASEPRI, r0
 800302a:	4a09      	ldr	r2, [pc, #36]	; (8003050 <pxCurrentTCBConst>)
 800302c:	6811      	ldr	r1, [r2, #0]
 800302e:	6808      	ldr	r0, [r1, #0]
 8003030:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8003034:	f013 0f10 	tst.w	r3, #16
 8003038:	bf08      	it	eq
 800303a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800303e:	f382 880b 	msr	PSPLIM, r2
 8003042:	f380 8809 	msr	PSP, r0
 8003046:	4718      	bx	r3
 8003048:	f3af 8000 	nop.w
 800304c:	f3af 8000 	nop.w

08003050 <pxCurrentTCBConst>:
 8003050:	20003934 	.word	0x20003934
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8003054:	bf00      	nop
 8003056:	bf00      	nop
	...

08003060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8003060:	f01e 0f04 	tst.w	lr, #4
 8003064:	bf0c      	ite	eq
 8003066:	f3ef 8008 	mrseq	r0, MSP
 800306a:	f3ef 8009 	mrsne	r0, PSP
 800306e:	4904      	ldr	r1, [pc, #16]	; (8003080 <svchandler_address_const>)
 8003070:	4708      	bx	r1
 8003072:	bf00      	nop
 8003074:	f3af 8000 	nop.w
 8003078:	f3af 8000 	nop.w
 800307c:	f3af 8000 	nop.w

08003080 <svchandler_address_const>:
 8003080:	08002dd1 	.word	0x08002dd1
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop

08003088 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <xQueueGenericReset+0x1a>
 800309c:	f7ff ff8c 	bl	8002fb8 <ulSetInterruptMask>
 80030a0:	e7fe      	b.n	80030a0 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80030a2:	f7ff fe51 	bl	8002d48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ae:	68f9      	ldr	r1, [r7, #12]
 80030b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	441a      	add	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d2:	3b01      	subs	r3, #1
 80030d4:	68f9      	ldr	r1, [r7, #12]
 80030d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	441a      	add	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	22ff      	movs	r2, #255	; 0xff
 80030e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	22ff      	movs	r2, #255	; 0xff
 80030ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10e      	bne.n	8003116 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d014      	beq.n	800312a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3310      	adds	r3, #16
 8003104:	4618      	mov	r0, r3
 8003106:	f000 ff9f 	bl	8004048 <xTaskRemoveFromEventList>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00c      	beq.n	800312a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003110:	f7ff fe08 	bl	8002d24 <vPortYield>
 8003114:	e009      	b.n	800312a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3310      	adds	r3, #16
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fcf8 	bl	8002b10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	3324      	adds	r3, #36	; 0x24
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fcf3 	bl	8002b10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800312a:	f7ff fe1f 	bl	8002d6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800312e:	2301      	movs	r3, #1
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <xQueueGenericCreateStatic+0x1a>
 800314c:	f7ff ff34 	bl	8002fb8 <ulSetInterruptMask>
 8003150:	e7fe      	b.n	8003150 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <xQueueGenericCreateStatic+0x26>
 8003158:	f7ff ff2e 	bl	8002fb8 <ulSetInterruptMask>
 800315c:	e7fe      	b.n	800315c <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <xQueueGenericCreateStatic+0x32>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <xQueueGenericCreateStatic+0x36>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <xQueueGenericCreateStatic+0x38>
 800316e:	2300      	movs	r3, #0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <xQueueGenericCreateStatic+0x42>
 8003174:	f7ff ff20 	bl	8002fb8 <ulSetInterruptMask>
 8003178:	e7fe      	b.n	8003178 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <xQueueGenericCreateStatic+0x4e>
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <xQueueGenericCreateStatic+0x52>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <xQueueGenericCreateStatic+0x54>
 800318a:	2300      	movs	r3, #0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <xQueueGenericCreateStatic+0x5e>
 8003190:	f7ff ff12 	bl	8002fb8 <ulSetInterruptMask>
 8003194:	e7fe      	b.n	8003194 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003196:	2350      	movs	r3, #80	; 0x50
 8003198:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b50      	cmp	r3, #80	; 0x50
 800319e:	d002      	beq.n	80031a6 <xQueueGenericCreateStatic+0x6e>
 80031a0:	f7ff ff0a 	bl	8002fb8 <ulSetInterruptMask>
 80031a4:	e7fe      	b.n	80031a4 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80031a6:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00d      	beq.n	80031ce <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f805 	bl	80031d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031ce:	697b      	ldr	r3, [r7, #20]
	}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d103      	bne.n	80031f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e002      	b.n	80031fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003206:	2101      	movs	r1, #1
 8003208:	69b8      	ldr	r0, [r7, #24]
 800320a:	f7ff ff3d 	bl	8003088 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b08a      	sub	sp, #40	; 0x28
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800322c:	2300      	movs	r3, #0
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <xQueueGenericSend+0x22>
 800323a:	f7ff febd 	bl	8002fb8 <ulSetInterruptMask>
 800323e:	e7fe      	b.n	800323e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d103      	bne.n	800324e <xQueueGenericSend+0x30>
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <xQueueGenericSend+0x34>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <xQueueGenericSend+0x36>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <xQueueGenericSend+0x40>
 8003258:	f7ff feae 	bl	8002fb8 <ulSetInterruptMask>
 800325c:	e7fe      	b.n	800325c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d103      	bne.n	800326c <xQueueGenericSend+0x4e>
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <xQueueGenericSend+0x52>
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <xQueueGenericSend+0x54>
 8003270:	2300      	movs	r3, #0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <xQueueGenericSend+0x5e>
 8003276:	f7ff fe9f 	bl	8002fb8 <ulSetInterruptMask>
 800327a:	e7fe      	b.n	800327a <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800327c:	f001 f87a 	bl	8004374 <xTaskGetSchedulerState>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d102      	bne.n	800328c <xQueueGenericSend+0x6e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <xQueueGenericSend+0x72>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <xQueueGenericSend+0x74>
 8003290:	2300      	movs	r3, #0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d102      	bne.n	800329c <xQueueGenericSend+0x7e>
 8003296:	f7ff fe8f 	bl	8002fb8 <ulSetInterruptMask>
 800329a:	e7fe      	b.n	800329a <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800329c:	f7ff fd54 	bl	8002d48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d302      	bcc.n	80032b2 <xQueueGenericSend+0x94>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d11d      	bne.n	80032ee <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	6a38      	ldr	r0, [r7, #32]
 80032b8:	f000 f9a4 	bl	8003604 <prvCopyDataToQueue>
 80032bc:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	3324      	adds	r3, #36	; 0x24
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 febc 	bl	8004048 <xTaskRemoveFromEventList>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032d6:	f7ff fd25 	bl	8002d24 <vPortYield>
 80032da:	e004      	b.n	80032e6 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032e2:	f7ff fd1f 	bl	8002d24 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032e6:	f7ff fd41 	bl	8002d6c <vPortExitCritical>
				return pdPASS;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e05c      	b.n	80033a8 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d103      	bne.n	80032fc <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032f4:	f7ff fd3a 	bl	8002d6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e055      	b.n	80033a8 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003302:	f107 0314 	add.w	r3, r7, #20
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fefa 	bl	8004100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800330c:	2301      	movs	r3, #1
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003310:	f7ff fd2c 	bl	8002d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003314:	f000 fcb6 	bl	8003c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003318:	f7ff fd16 	bl	8002d48 <vPortEnterCritical>
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003322:	b25b      	sxtb	r3, r3
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d103      	bne.n	8003332 <xQueueGenericSend+0x114>
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003338:	b25b      	sxtb	r3, r3
 800333a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333e:	d103      	bne.n	8003348 <xQueueGenericSend+0x12a>
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003348:	f7ff fd10 	bl	8002d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800334c:	1d3a      	adds	r2, r7, #4
 800334e:	f107 0314 	add.w	r3, r7, #20
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fee9 	bl	800412c <xTaskCheckForTimeOut>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d11d      	bne.n	800339c <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003360:	6a38      	ldr	r0, [r7, #32]
 8003362:	f000 fa47 	bl	80037f4 <prvIsQueueFull>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d011      	beq.n	8003390 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	3310      	adds	r3, #16
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fe27 	bl	8003fc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800337a:	6a38      	ldr	r0, [r7, #32]
 800337c:	f000 f9d2 	bl	8003724 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003380:	f000 fc8e 	bl	8003ca0 <xTaskResumeAll>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d188      	bne.n	800329c <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 800338a:	f7ff fccb 	bl	8002d24 <vPortYield>
 800338e:	e785      	b.n	800329c <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003390:	6a38      	ldr	r0, [r7, #32]
 8003392:	f000 f9c7 	bl	8003724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003396:	f000 fc83 	bl	8003ca0 <xTaskResumeAll>
 800339a:	e77f      	b.n	800329c <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800339c:	6a38      	ldr	r0, [r7, #32]
 800339e:	f000 f9c1 	bl	8003724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033a2:	f000 fc7d 	bl	8003ca0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80033a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3728      	adds	r7, #40	; 0x28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <xQueueGenericSendFromISR+0x1e>
 80033c8:	f7ff fdf6 	bl	8002fb8 <ulSetInterruptMask>
 80033cc:	e7fe      	b.n	80033cc <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d103      	bne.n	80033dc <xQueueGenericSendFromISR+0x2c>
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <xQueueGenericSendFromISR+0x30>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <xQueueGenericSendFromISR+0x32>
 80033e0:	2300      	movs	r3, #0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <xQueueGenericSendFromISR+0x3c>
 80033e6:	f7ff fde7 	bl	8002fb8 <ulSetInterruptMask>
 80033ea:	e7fe      	b.n	80033ea <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d103      	bne.n	80033fa <xQueueGenericSendFromISR+0x4a>
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <xQueueGenericSendFromISR+0x4e>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <xQueueGenericSendFromISR+0x50>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <xQueueGenericSendFromISR+0x5a>
 8003404:	f7ff fdd8 	bl	8002fb8 <ulSetInterruptMask>
 8003408:	e7fe      	b.n	8003408 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800340a:	f7ff fdd5 	bl	8002fb8 <ulSetInterruptMask>
 800340e:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	429a      	cmp	r2, r3
 800341a:	d302      	bcc.n	8003422 <xQueueGenericSendFromISR+0x72>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d12d      	bne.n	800347e <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003428:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	6a38      	ldr	r0, [r7, #32]
 8003436:	f000 f8e5 	bl	8003604 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800343a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003442:	d112      	bne.n	800346a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	2b00      	cmp	r3, #0
 800344a:	d015      	beq.n	8003478 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	3324      	adds	r3, #36	; 0x24
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fdf9 	bl	8004048 <xTaskRemoveFromEventList>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e006      	b.n	8003478 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800346a:	7efb      	ldrb	r3, [r7, #27]
 800346c:	3301      	adds	r3, #1
 800346e:	b2db      	uxtb	r3, r3
 8003470:	b25a      	sxtb	r2, r3
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003478:	2301      	movs	r3, #1
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800347c:	e001      	b.n	8003482 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800347e:	2300      	movs	r3, #0
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003482:	69f8      	ldr	r0, [r7, #28]
 8003484:	f7ff fda5 	bl	8002fd2 <vClearInterruptMask>

	return xReturn;
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800348a:	4618      	mov	r0, r3
 800348c:	3728      	adds	r7, #40	; 0x28
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b08a      	sub	sp, #40	; 0x28
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800349e:	2300      	movs	r3, #0
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d102      	bne.n	80034b2 <xQueueReceive+0x20>
 80034ac:	f7ff fd84 	bl	8002fb8 <ulSetInterruptMask>
 80034b0:	e7fe      	b.n	80034b0 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d103      	bne.n	80034c0 <xQueueReceive+0x2e>
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <xQueueReceive+0x32>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <xQueueReceive+0x34>
 80034c4:	2300      	movs	r3, #0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d102      	bne.n	80034d0 <xQueueReceive+0x3e>
 80034ca:	f7ff fd75 	bl	8002fb8 <ulSetInterruptMask>
 80034ce:	e7fe      	b.n	80034ce <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034d0:	f000 ff50 	bl	8004374 <xTaskGetSchedulerState>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <xQueueReceive+0x4e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <xQueueReceive+0x52>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <xQueueReceive+0x54>
 80034e4:	2300      	movs	r3, #0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d102      	bne.n	80034f0 <xQueueReceive+0x5e>
 80034ea:	f7ff fd65 	bl	8002fb8 <ulSetInterruptMask>
 80034ee:	e7fe      	b.n	80034ee <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034f0:	f7ff fc2a 	bl	8002d48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d019      	beq.n	8003534 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	6a38      	ldr	r0, [r7, #32]
 8003504:	f000 f8e8 	bl	80036d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	1e5a      	subs	r2, r3, #1
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d009      	beq.n	800352c <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	3310      	adds	r3, #16
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fd93 	bl	8004048 <xTaskRemoveFromEventList>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003528:	f7ff fbfc 	bl	8002d24 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800352c:	f7ff fc1e 	bl	8002d6c <vPortExitCritical>
				return pdPASS;
 8003530:	2301      	movs	r3, #1
 8003532:	e063      	b.n	80035fc <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800353a:	f7ff fc17 	bl	8002d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800353e:	2300      	movs	r3, #0
 8003540:	e05c      	b.n	80035fc <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	d106      	bne.n	8003556 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fdd7 	bl	8004100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003552:	2301      	movs	r3, #1
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003556:	f7ff fc09 	bl	8002d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800355a:	f000 fb93 	bl	8003c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800355e:	f7ff fbf3 	bl	8002d48 <vPortEnterCritical>
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003568:	b25b      	sxtb	r3, r3
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d103      	bne.n	8003578 <xQueueReceive+0xe6>
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800357e:	b25b      	sxtb	r3, r3
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d103      	bne.n	800358e <xQueueReceive+0xfc>
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800358e:	f7ff fbed 	bl	8002d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003592:	1d3a      	adds	r2, r7, #4
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fdc6 	bl	800412c <xTaskCheckForTimeOut>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d11d      	bne.n	80035e2 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035a6:	6a38      	ldr	r0, [r7, #32]
 80035a8:	f000 f90e 	bl	80037c8 <prvIsQueueEmpty>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d011      	beq.n	80035d6 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	3324      	adds	r3, #36	; 0x24
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fd04 	bl	8003fc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035c0:	6a38      	ldr	r0, [r7, #32]
 80035c2:	f000 f8af 	bl	8003724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035c6:	f000 fb6b 	bl	8003ca0 <xTaskResumeAll>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d18f      	bne.n	80034f0 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 80035d0:	f7ff fba8 	bl	8002d24 <vPortYield>
 80035d4:	e78c      	b.n	80034f0 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80035d6:	6a38      	ldr	r0, [r7, #32]
 80035d8:	f000 f8a4 	bl	8003724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035dc:	f000 fb60 	bl	8003ca0 <xTaskResumeAll>
 80035e0:	e786      	b.n	80034f0 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80035e2:	6a38      	ldr	r0, [r7, #32]
 80035e4:	f000 f89e 	bl	8003724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035e8:	f000 fb5a 	bl	8003ca0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035ec:	6a38      	ldr	r0, [r7, #32]
 80035ee:	f000 f8eb 	bl	80037c8 <prvIsQueueEmpty>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f43f af7b 	beq.w	80034f0 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3728      	adds	r7, #40	; 0x28
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10d      	bne.n	800363e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d14d      	bne.n	80036c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 febe 	bl	80043b0 <xTaskPriorityDisinherit>
 8003634:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	e043      	b.n	80036c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d119      	bne.n	8003678 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6858      	ldr	r0, [r3, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	461a      	mov	r2, r3
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	f001 fa98 	bl	8004b84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	441a      	add	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	429a      	cmp	r2, r3
 800366c:	d32b      	bcc.n	80036c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	e026      	b.n	80036c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68d8      	ldr	r0, [r3, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	461a      	mov	r2, r3
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	f001 fa7e 	bl	8004b84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	425b      	negs	r3, r3
 8003692:	441a      	add	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d207      	bcs.n	80036b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	425b      	negs	r3, r3
 80036ae:	441a      	add	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d105      	bne.n	80036c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80036ce:	697b      	ldr	r3, [r7, #20]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d018      	beq.n	800371c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	441a      	add	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	429a      	cmp	r2, r3
 8003702:	d303      	bcc.n	800370c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68d9      	ldr	r1, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	461a      	mov	r2, r3
 8003716:	6838      	ldr	r0, [r7, #0]
 8003718:	f001 fa34 	bl	8004b84 <memcpy>
	}
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800372c:	f7ff fb0c 	bl	8002d48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003736:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003738:	e011      	b.n	800375e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	2b00      	cmp	r3, #0
 8003740:	d012      	beq.n	8003768 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3324      	adds	r3, #36	; 0x24
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fc7e 	bl	8004048 <xTaskRemoveFromEventList>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003752:	f000 fd3d 	bl	80041d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	3b01      	subs	r3, #1
 800375a:	b2db      	uxtb	r3, r3
 800375c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800375e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	dce9      	bgt.n	800373a <prvUnlockQueue+0x16>
 8003766:	e000      	b.n	800376a <prvUnlockQueue+0x46>
					break;
 8003768:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	22ff      	movs	r2, #255	; 0xff
 800376e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003772:	f7ff fafb 	bl	8002d6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003776:	f7ff fae7 	bl	8002d48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003780:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003782:	e011      	b.n	80037a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d012      	beq.n	80037b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3310      	adds	r3, #16
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fc59 	bl	8004048 <xTaskRemoveFromEventList>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800379c:	f000 fd18 	bl	80041d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037a0:	7bbb      	ldrb	r3, [r7, #14]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	dce9      	bgt.n	8003784 <prvUnlockQueue+0x60>
 80037b0:	e000      	b.n	80037b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	22ff      	movs	r2, #255	; 0xff
 80037b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80037bc:	f7ff fad6 	bl	8002d6c <vPortExitCritical>
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037d0:	f7ff faba 	bl	8002d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d102      	bne.n	80037e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80037dc:	2301      	movs	r3, #1
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	e001      	b.n	80037e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037e6:	f7ff fac1 	bl	8002d6c <vPortExitCritical>

	return xReturn;
 80037ea:	68fb      	ldr	r3, [r7, #12]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037fc:	f7ff faa4 	bl	8002d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003808:	429a      	cmp	r2, r3
 800380a:	d102      	bne.n	8003812 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800380c:	2301      	movs	r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e001      	b.n	8003816 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003816:	f7ff faa9 	bl	8002d6c <vPortExitCritical>

	return xReturn;
 800381a:	68fb      	ldr	r3, [r7, #12]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	e014      	b.n	800385e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003834:	4a0f      	ldr	r2, [pc, #60]	; (8003874 <vQueueAddToRegistry+0x50>)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10b      	bne.n	8003858 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003840:	490c      	ldr	r1, [pc, #48]	; (8003874 <vQueueAddToRegistry+0x50>)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800384a:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <vQueueAddToRegistry+0x50>)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003856:	e006      	b.n	8003866 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3301      	adds	r3, #1
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b07      	cmp	r3, #7
 8003862:	d9e7      	bls.n	8003834 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003864:	bf00      	nop
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20003fc8 	.word	0x20003fc8

08003878 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003888:	f7ff fa5e 	bl	8002d48 <vPortEnterCritical>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003892:	b25b      	sxtb	r3, r3
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d103      	bne.n	80038a2 <vQueueWaitForMessageRestricted+0x2a>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a8:	b25b      	sxtb	r3, r3
 80038aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ae:	d103      	bne.n	80038b8 <vQueueWaitForMessageRestricted+0x40>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038b8:	f7ff fa58 	bl	8002d6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	3324      	adds	r3, #36	; 0x24
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fb97 	bl	8004000 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80038d2:	6978      	ldr	r0, [r7, #20]
 80038d4:	f7ff ff26 	bl	8003724 <prvUnlockQueue>
	}
 80038d8:	bf00      	nop
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08c      	sub	sp, #48	; 0x30
 80038e4:	af04      	add	r7, sp, #16
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d102      	bne.n	80038fa <xTaskCreateStatic+0x1a>
 80038f4:	f7ff fb60 	bl	8002fb8 <ulSetInterruptMask>
 80038f8:	e7fe      	b.n	80038f8 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d102      	bne.n	8003906 <xTaskCreateStatic+0x26>
 8003900:	f7ff fb5a 	bl	8002fb8 <ulSetInterruptMask>
 8003904:	e7fe      	b.n	8003904 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003906:	235c      	movs	r3, #92	; 0x5c
 8003908:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2b5c      	cmp	r3, #92	; 0x5c
 800390e:	d002      	beq.n	8003916 <xTaskCreateStatic+0x36>
 8003910:	f7ff fb52 	bl	8002fb8 <ulSetInterruptMask>
 8003914:	e7fe      	b.n	8003914 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003916:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	2b00      	cmp	r3, #0
 800391c:	d01e      	beq.n	800395c <xTaskCreateStatic+0x7c>
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01b      	beq.n	800395c <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800392c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	2202      	movs	r2, #2
 8003932:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003936:	2300      	movs	r3, #0
 8003938:	9303      	str	r3, [sp, #12]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	9302      	str	r3, [sp, #8]
 800393e:	f107 0318 	add.w	r3, r7, #24
 8003942:	9301      	str	r3, [sp, #4]
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f850 	bl	80039f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003954:	69f8      	ldr	r0, [r7, #28]
 8003956:	f000 f8d7 	bl	8003b08 <prvAddNewTaskToReadyList>
 800395a:	e001      	b.n	8003960 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003960:	69bb      	ldr	r3, [r7, #24]
	}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800396a:	b580      	push	{r7, lr}
 800396c:	b08c      	sub	sp, #48	; 0x30
 800396e:	af04      	add	r7, sp, #16
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe ff04 	bl	800278c <pvPortMalloc>
 8003984:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800398c:	205c      	movs	r0, #92	; 0x5c
 800398e:	f7fe fefd 	bl	800278c <pvPortMalloc>
 8003992:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
 80039a0:	e005      	b.n	80039ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039a2:	6978      	ldr	r0, [r7, #20]
 80039a4:	f7fe ffa6 	bl	80028f4 <vPortFree>
 80039a8:	e001      	b.n	80039ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d017      	beq.n	80039e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039bc:	88fa      	ldrh	r2, [r7, #6]
 80039be:	2300      	movs	r3, #0
 80039c0:	9303      	str	r3, [sp, #12]
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	9302      	str	r3, [sp, #8]
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f80e 	bl	80039f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039d8:	69f8      	ldr	r0, [r7, #28]
 80039da:	f000 f895 	bl	8003b08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039de:	2301      	movs	r3, #1
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	e002      	b.n	80039ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295
 80039e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039ea:	69bb      	ldr	r3, [r7, #24]
	}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	21a5      	movs	r1, #165	; 0xa5
 8003a0e:	f001 f8c6 	bl	8004b9e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f023 0307 	bic.w	r3, r3, #7
 8003a2a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <prvInitialiseNewTask+0x48>
 8003a36:	f7ff fabf 	bl	8002fb8 <ulSetInterruptMask>
 8003a3a:	e7fe      	b.n	8003a3a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01f      	beq.n	8003a82 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	e012      	b.n	8003a6e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	7819      	ldrb	r1, [r3, #0]
 8003a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	4413      	add	r3, r2
 8003a56:	3334      	adds	r3, #52	; 0x34
 8003a58:	460a      	mov	r2, r1
 8003a5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	4413      	add	r3, r2
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d006      	beq.n	8003a76 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b0f      	cmp	r3, #15
 8003a72:	d9e9      	bls.n	8003a48 <prvInitialiseNewTask+0x54>
 8003a74:	e000      	b.n	8003a78 <prvInitialiseNewTask+0x84>
			{
				break;
 8003a76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a80:	e003      	b.n	8003a8a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	2b37      	cmp	r3, #55	; 0x37
 8003a8e:	d901      	bls.n	8003a94 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a90:	2337      	movs	r3, #55	; 0x37
 8003a92:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	6a3a      	ldr	r2, [r7, #32]
 8003a98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	6a3a      	ldr	r2, [r7, #32]
 8003a9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff f850 	bl	8002b50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	3318      	adds	r3, #24
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff f84b 	bl	8002b50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003abe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8003ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	6938      	ldr	r0, [r7, #16]
 8003ae8:	f7ff f98c 	bl	8002e04 <pxPortInitialiseStack>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003afc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003afe:	bf00      	nop
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b10:	f7ff f91a 	bl	8002d48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b14:	4b2a      	ldr	r3, [pc, #168]	; (8003bc0 <prvAddNewTaskToReadyList+0xb8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	4a29      	ldr	r2, [pc, #164]	; (8003bc0 <prvAddNewTaskToReadyList+0xb8>)
 8003b1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b1e:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <prvAddNewTaskToReadyList+0xbc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b26:	4a27      	ldr	r2, [pc, #156]	; (8003bc4 <prvAddNewTaskToReadyList+0xbc>)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b2c:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <prvAddNewTaskToReadyList+0xb8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d110      	bne.n	8003b56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b34:	f000 fb68 	bl	8004208 <prvInitialiseTaskLists>
 8003b38:	e00d      	b.n	8003b56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b3a:	4b23      	ldr	r3, [pc, #140]	; (8003bc8 <prvAddNewTaskToReadyList+0xc0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b42:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <prvAddNewTaskToReadyList+0xbc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d802      	bhi.n	8003b56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b50:	4a1c      	ldr	r2, [pc, #112]	; (8003bc4 <prvAddNewTaskToReadyList+0xbc>)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b56:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <prvAddNewTaskToReadyList+0xc4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <prvAddNewTaskToReadyList+0xc4>)
 8003b5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b60:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <prvAddNewTaskToReadyList+0xc4>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6c:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <prvAddNewTaskToReadyList+0xc8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d903      	bls.n	8003b7c <prvAddNewTaskToReadyList+0x74>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	4a15      	ldr	r2, [pc, #84]	; (8003bd0 <prvAddNewTaskToReadyList+0xc8>)
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4a12      	ldr	r2, [pc, #72]	; (8003bd4 <prvAddNewTaskToReadyList+0xcc>)
 8003b8a:	441a      	add	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f7fe ffe9 	bl	8002b6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b98:	f7ff f8e8 	bl	8002d6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <prvAddNewTaskToReadyList+0xc0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ba4:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <prvAddNewTaskToReadyList+0xbc>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d201      	bcs.n	8003bb6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003bb2:	f7ff f8b7 	bl	8002d24 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20003e08 	.word	0x20003e08
 8003bc4:	20003934 	.word	0x20003934
 8003bc8:	20003e14 	.word	0x20003e14
 8003bcc:	20003e24 	.word	0x20003e24
 8003bd0:	20003e10 	.word	0x20003e10
 8003bd4:	20003938 	.word	0x20003938

08003bd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003be6:	463a      	mov	r2, r7
 8003be8:	1d39      	adds	r1, r7, #4
 8003bea:	f107 0308 	add.w	r3, r7, #8
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fd98 	bl	8002724 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bf4:	6839      	ldr	r1, [r7, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	9202      	str	r2, [sp, #8]
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	460a      	mov	r2, r1
 8003c06:	4919      	ldr	r1, [pc, #100]	; (8003c6c <vTaskStartScheduler+0x94>)
 8003c08:	4819      	ldr	r0, [pc, #100]	; (8003c70 <vTaskStartScheduler+0x98>)
 8003c0a:	f7ff fe69 	bl	80038e0 <xTaskCreateStatic>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <vTaskStartScheduler+0x9c>)
 8003c12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c14:	4b17      	ldr	r3, [pc, #92]	; (8003c74 <vTaskStartScheduler+0x9c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	e001      	b.n	8003c26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d102      	bne.n	8003c32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c2c:	f000 fc72 	bl	8004514 <xTimerCreateTimerTask>
 8003c30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d10e      	bne.n	8003c56 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003c38:	f7ff f9be 	bl	8002fb8 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c3c:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <vTaskStartScheduler+0xa0>)
 8003c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c44:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <vTaskStartScheduler+0xa4>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <vTaskStartScheduler+0xa8>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c50:	f7ff f962 	bl	8002f18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c54:	e006      	b.n	8003c64 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d102      	bne.n	8003c64 <vTaskStartScheduler+0x8c>
 8003c5e:	f7ff f9ab 	bl	8002fb8 <ulSetInterruptMask>
 8003c62:	e7fe      	b.n	8003c62 <vTaskStartScheduler+0x8a>
}
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	08005ae0 	.word	0x08005ae0
 8003c70:	080041e9 	.word	0x080041e9
 8003c74:	20003e2c 	.word	0x20003e2c
 8003c78:	20003e28 	.word	0x20003e28
 8003c7c:	20003e14 	.word	0x20003e14
 8003c80:	20003e0c 	.word	0x20003e0c

08003c84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <vTaskSuspendAll+0x18>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	4a03      	ldr	r2, [pc, #12]	; (8003c9c <vTaskSuspendAll+0x18>)
 8003c90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	20003e30 	.word	0x20003e30

08003ca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cae:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <xTaskResumeAll+0xfc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <xTaskResumeAll+0x1c>
 8003cb6:	f7ff f97f 	bl	8002fb8 <ulSetInterruptMask>
 8003cba:	e7fe      	b.n	8003cba <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cbc:	f7ff f844 	bl	8002d48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cc0:	4b36      	ldr	r3, [pc, #216]	; (8003d9c <xTaskResumeAll+0xfc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	4a35      	ldr	r2, [pc, #212]	; (8003d9c <xTaskResumeAll+0xfc>)
 8003cc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cca:	4b34      	ldr	r3, [pc, #208]	; (8003d9c <xTaskResumeAll+0xfc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d15c      	bne.n	8003d8c <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cd2:	4b33      	ldr	r3, [pc, #204]	; (8003da0 <xTaskResumeAll+0x100>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d058      	beq.n	8003d8c <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cda:	e02f      	b.n	8003d3c <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cdc:	4b31      	ldr	r3, [pc, #196]	; (8003da4 <xTaskResumeAll+0x104>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3318      	adds	r3, #24
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe ff9b 	bl	8002c24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe ff96 	bl	8002c24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	4b2a      	ldr	r3, [pc, #168]	; (8003da8 <xTaskResumeAll+0x108>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d903      	bls.n	8003d0c <xTaskResumeAll+0x6c>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	4a27      	ldr	r2, [pc, #156]	; (8003da8 <xTaskResumeAll+0x108>)
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4a24      	ldr	r2, [pc, #144]	; (8003dac <xTaskResumeAll+0x10c>)
 8003d1a:	441a      	add	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f7fe ff21 	bl	8002b6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <xTaskResumeAll+0x110>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8003d36:	4b1f      	ldr	r3, [pc, #124]	; (8003db4 <xTaskResumeAll+0x114>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d3c:	4b19      	ldr	r3, [pc, #100]	; (8003da4 <xTaskResumeAll+0x104>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1cb      	bne.n	8003cdc <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d4a:	f000 faf3 	bl	8004334 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <xTaskResumeAll+0x118>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d010      	beq.n	8003d7c <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d5a:	f000 f83f 	bl	8003ddc <xTaskIncrementTick>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 8003d64:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <xTaskResumeAll+0x114>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f1      	bne.n	8003d5a <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8003d76:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <xTaskResumeAll+0x118>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d7c:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <xTaskResumeAll+0x114>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d84:	2301      	movs	r3, #1
 8003d86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d88:	f7fe ffcc 	bl	8002d24 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d8c:	f7fe ffee 	bl	8002d6c <vPortExitCritical>

	return xAlreadyYielded;
 8003d90:	68bb      	ldr	r3, [r7, #8]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20003e30 	.word	0x20003e30
 8003da0:	20003e08 	.word	0x20003e08
 8003da4:	20003dc8 	.word	0x20003dc8
 8003da8:	20003e10 	.word	0x20003e10
 8003dac:	20003938 	.word	0x20003938
 8003db0:	20003934 	.word	0x20003934
 8003db4:	20003e1c 	.word	0x20003e1c
 8003db8:	20003e18 	.word	0x20003e18

08003dbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <xTaskGetTickCount+0x1c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003dc8:	687b      	ldr	r3, [r7, #4]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	20003e0c 	.word	0x20003e0c

08003ddc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de6:	4b43      	ldr	r3, [pc, #268]	; (8003ef4 <xTaskIncrementTick+0x118>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d178      	bne.n	8003ee0 <xTaskIncrementTick+0x104>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dee:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <xTaskIncrementTick+0x11c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003df6:	4a40      	ldr	r2, [pc, #256]	; (8003ef8 <xTaskIncrementTick+0x11c>)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d118      	bne.n	8003e34 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e02:	4b3e      	ldr	r3, [pc, #248]	; (8003efc <xTaskIncrementTick+0x120>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <xTaskIncrementTick+0x36>
 8003e0c:	f7ff f8d4 	bl	8002fb8 <ulSetInterruptMask>
 8003e10:	e7fe      	b.n	8003e10 <xTaskIncrementTick+0x34>
 8003e12:	4b3a      	ldr	r3, [pc, #232]	; (8003efc <xTaskIncrementTick+0x120>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <xTaskIncrementTick+0x124>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a37      	ldr	r2, [pc, #220]	; (8003efc <xTaskIncrementTick+0x120>)
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	4a37      	ldr	r2, [pc, #220]	; (8003f00 <xTaskIncrementTick+0x124>)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b37      	ldr	r3, [pc, #220]	; (8003f04 <xTaskIncrementTick+0x128>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	4a35      	ldr	r2, [pc, #212]	; (8003f04 <xTaskIncrementTick+0x128>)
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	f000 fa80 	bl	8004334 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e34:	4b34      	ldr	r3, [pc, #208]	; (8003f08 <xTaskIncrementTick+0x12c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d349      	bcc.n	8003ed2 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e3e:	4b2f      	ldr	r3, [pc, #188]	; (8003efc <xTaskIncrementTick+0x120>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e48:	4b2f      	ldr	r3, [pc, #188]	; (8003f08 <xTaskIncrementTick+0x12c>)
 8003e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4e:	601a      	str	r2, [r3, #0]
					break;
 8003e50:	e03f      	b.n	8003ed2 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e52:	4b2a      	ldr	r3, [pc, #168]	; (8003efc <xTaskIncrementTick+0x120>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d203      	bcs.n	8003e72 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e6a:	4a27      	ldr	r2, [pc, #156]	; (8003f08 <xTaskIncrementTick+0x12c>)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e70:	e02f      	b.n	8003ed2 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fed4 	bl	8002c24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	3318      	adds	r3, #24
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fe fecb 	bl	8002c24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e92:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <xTaskIncrementTick+0x130>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d903      	bls.n	8003ea2 <xTaskIncrementTick+0xc6>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <xTaskIncrementTick+0x130>)
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <xTaskIncrementTick+0x134>)
 8003eb0:	441a      	add	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4610      	mov	r0, r2
 8003eba:	f7fe fe56 	bl	8002b6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec2:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <xTaskIncrementTick+0x138>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d3b8      	bcc.n	8003e3e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ed0:	e7b5      	b.n	8003e3e <xTaskIncrementTick+0x62>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003ed2:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <xTaskIncrementTick+0x13c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <xTaskIncrementTick+0x10e>
			{
				xSwitchRequired = pdTRUE;
 8003eda:	2301      	movs	r3, #1
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e004      	b.n	8003eea <xTaskIncrementTick+0x10e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <xTaskIncrementTick+0x140>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	4a0d      	ldr	r2, [pc, #52]	; (8003f1c <xTaskIncrementTick+0x140>)
 8003ee8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003eea:	697b      	ldr	r3, [r7, #20]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20003e30 	.word	0x20003e30
 8003ef8:	20003e0c 	.word	0x20003e0c
 8003efc:	20003dc0 	.word	0x20003dc0
 8003f00:	20003dc4 	.word	0x20003dc4
 8003f04:	20003e20 	.word	0x20003e20
 8003f08:	20003e28 	.word	0x20003e28
 8003f0c:	20003e10 	.word	0x20003e10
 8003f10:	20003938 	.word	0x20003938
 8003f14:	20003934 	.word	0x20003934
 8003f18:	20003e1c 	.word	0x20003e1c
 8003f1c:	20003e18 	.word	0x20003e18

08003f20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f26:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <vTaskSwitchContext+0x94>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f2e:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <vTaskSwitchContext+0x98>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f34:	e039      	b.n	8003faa <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 8003f36:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <vTaskSwitchContext+0x98>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f3c:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <vTaskSwitchContext+0x9c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	607b      	str	r3, [r7, #4]
 8003f42:	e008      	b.n	8003f56 <vTaskSwitchContext+0x36>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d102      	bne.n	8003f50 <vTaskSwitchContext+0x30>
 8003f4a:	f7ff f835 	bl	8002fb8 <ulSetInterruptMask>
 8003f4e:	e7fe      	b.n	8003f4e <vTaskSwitchContext+0x2e>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	607b      	str	r3, [r7, #4]
 8003f56:	491a      	ldr	r1, [pc, #104]	; (8003fc0 <vTaskSwitchContext+0xa0>)
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0ec      	beq.n	8003f44 <vTaskSwitchContext+0x24>
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4a12      	ldr	r2, [pc, #72]	; (8003fc0 <vTaskSwitchContext+0xa0>)
 8003f76:	4413      	add	r3, r2
 8003f78:	603b      	str	r3, [r7, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	605a      	str	r2, [r3, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d104      	bne.n	8003f9a <vTaskSwitchContext+0x7a>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <vTaskSwitchContext+0xa4>)
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	4a05      	ldr	r2, [pc, #20]	; (8003fbc <vTaskSwitchContext+0x9c>)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6013      	str	r3, [r2, #0]
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20003e30 	.word	0x20003e30
 8003fb8:	20003e1c 	.word	0x20003e1c
 8003fbc:	20003e10 	.word	0x20003e10
 8003fc0:	20003938 	.word	0x20003938
 8003fc4:	20003934 	.word	0x20003934

08003fc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <vTaskPlaceOnEventList+0x16>
 8003fd8:	f7fe ffee 	bl	8002fb8 <ulSetInterruptMask>
 8003fdc:	e7fe      	b.n	8003fdc <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <vTaskPlaceOnEventList+0x34>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3318      	adds	r3, #24
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fe fde3 	bl	8002bb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fec:	2101      	movs	r1, #1
 8003fee:	6838      	ldr	r0, [r7, #0]
 8003ff0:	f000 fa3c 	bl	800446c <prvAddCurrentTaskToDelayedList>
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20003934 	.word	0x20003934

08004000 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <vTaskPlaceOnEventListRestricted+0x18>
 8004012:	f7fe ffd1 	bl	8002fb8 <ulSetInterruptMask>
 8004016:	e7fe      	b.n	8004016 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004018:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <vTaskPlaceOnEventListRestricted+0x44>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3318      	adds	r3, #24
 800401e:	4619      	mov	r1, r3
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7fe fda2 	bl	8002b6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 800402c:	f04f 33ff 	mov.w	r3, #4294967295
 8004030:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	68b8      	ldr	r0, [r7, #8]
 8004036:	f000 fa19 	bl	800446c <prvAddCurrentTaskToDelayedList>
	}
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20003934 	.word	0x20003934

08004048 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <xTaskRemoveFromEventList+0x1c>
 800405e:	f7fe ffab 	bl	8002fb8 <ulSetInterruptMask>
 8004062:	e7fe      	b.n	8004062 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	3318      	adds	r3, #24
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe fddb 	bl	8002c24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800406e:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <xTaskRemoveFromEventList+0xa0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d11d      	bne.n	80040b2 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	3304      	adds	r3, #4
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe fdd2 	bl	8002c24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	4b19      	ldr	r3, [pc, #100]	; (80040ec <xTaskRemoveFromEventList+0xa4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d903      	bls.n	8004094 <xTaskRemoveFromEventList+0x4c>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4a16      	ldr	r2, [pc, #88]	; (80040ec <xTaskRemoveFromEventList+0xa4>)
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <xTaskRemoveFromEventList+0xa8>)
 80040a2:	441a      	add	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f7fe fd5d 	bl	8002b6a <vListInsertEnd>
 80040b0:	e005      	b.n	80040be <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3318      	adds	r3, #24
 80040b6:	4619      	mov	r1, r3
 80040b8:	480e      	ldr	r0, [pc, #56]	; (80040f4 <xTaskRemoveFromEventList+0xac>)
 80040ba:	f7fe fd56 	bl	8002b6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <xTaskRemoveFromEventList+0xb0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d905      	bls.n	80040d8 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040cc:	2301      	movs	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <xTaskRemoveFromEventList+0xb4>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e001      	b.n	80040dc <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80040dc:	68fb      	ldr	r3, [r7, #12]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20003e30 	.word	0x20003e30
 80040ec:	20003e10 	.word	0x20003e10
 80040f0:	20003938 	.word	0x20003938
 80040f4:	20003dc8 	.word	0x20003dc8
 80040f8:	20003934 	.word	0x20003934
 80040fc:	20003e1c 	.word	0x20003e1c

08004100 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004108:	4b06      	ldr	r3, [pc, #24]	; (8004124 <vTaskInternalSetTimeOutState+0x24>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <vTaskInternalSetTimeOutState+0x28>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	605a      	str	r2, [r3, #4]
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	20003e20 	.word	0x20003e20
 8004128:	20003e0c 	.word	0x20003e0c

0800412c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <xTaskCheckForTimeOut+0x16>
 800413c:	f7fe ff3c 	bl	8002fb8 <ulSetInterruptMask>
 8004140:	e7fe      	b.n	8004140 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <xTaskCheckForTimeOut+0x22>
 8004148:	f7fe ff36 	bl	8002fb8 <ulSetInterruptMask>
 800414c:	e7fe      	b.n	800414c <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 800414e:	f7fe fdfb 	bl	8002d48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004152:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <xTaskCheckForTimeOut+0x9c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d102      	bne.n	8004172 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	e023      	b.n	80041ba <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b15      	ldr	r3, [pc, #84]	; (80041cc <xTaskCheckForTimeOut+0xa0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d007      	beq.n	800418e <xTaskCheckForTimeOut+0x62>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	429a      	cmp	r2, r3
 8004186:	d302      	bcc.n	800418e <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004188:	2301      	movs	r3, #1
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e015      	b.n	80041ba <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	429a      	cmp	r2, r3
 8004196:	d20b      	bcs.n	80041b0 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1ad2      	subs	r2, r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ffab 	bl	8004100 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	e004      	b.n	80041ba <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041b6:	2301      	movs	r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80041ba:	f7fe fdd7 	bl	8002d6c <vPortExitCritical>

	return xReturn;
 80041be:	697b      	ldr	r3, [r7, #20]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20003e0c 	.word	0x20003e0c
 80041cc:	20003e20 	.word	0x20003e20

080041d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <vTaskMissedYield+0x14>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
}
 80041da:	bf00      	nop
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	20003e1c 	.word	0x20003e1c

080041e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041f0:	f000 f84a 	bl	8004288 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041f4:	4b03      	ldr	r3, [pc, #12]	; (8004204 <prvIdleTask+0x1c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d9f9      	bls.n	80041f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041fc:	f7fe fd92 	bl	8002d24 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004200:	e7f6      	b.n	80041f0 <prvIdleTask+0x8>
 8004202:	bf00      	nop
 8004204:	20003938 	.word	0x20003938

08004208 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
 8004212:	e00c      	b.n	800422e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4a12      	ldr	r2, [pc, #72]	; (8004268 <prvInitialiseTaskLists+0x60>)
 8004220:	4413      	add	r3, r2
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fc74 	bl	8002b10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3301      	adds	r3, #1
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b37      	cmp	r3, #55	; 0x37
 8004232:	d9ef      	bls.n	8004214 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004234:	480d      	ldr	r0, [pc, #52]	; (800426c <prvInitialiseTaskLists+0x64>)
 8004236:	f7fe fc6b 	bl	8002b10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800423a:	480d      	ldr	r0, [pc, #52]	; (8004270 <prvInitialiseTaskLists+0x68>)
 800423c:	f7fe fc68 	bl	8002b10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004240:	480c      	ldr	r0, [pc, #48]	; (8004274 <prvInitialiseTaskLists+0x6c>)
 8004242:	f7fe fc65 	bl	8002b10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004246:	480c      	ldr	r0, [pc, #48]	; (8004278 <prvInitialiseTaskLists+0x70>)
 8004248:	f7fe fc62 	bl	8002b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800424c:	480b      	ldr	r0, [pc, #44]	; (800427c <prvInitialiseTaskLists+0x74>)
 800424e:	f7fe fc5f 	bl	8002b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004252:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <prvInitialiseTaskLists+0x78>)
 8004254:	4a05      	ldr	r2, [pc, #20]	; (800426c <prvInitialiseTaskLists+0x64>)
 8004256:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <prvInitialiseTaskLists+0x7c>)
 800425a:	4a05      	ldr	r2, [pc, #20]	; (8004270 <prvInitialiseTaskLists+0x68>)
 800425c:	601a      	str	r2, [r3, #0]
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20003938 	.word	0x20003938
 800426c:	20003d98 	.word	0x20003d98
 8004270:	20003dac 	.word	0x20003dac
 8004274:	20003dc8 	.word	0x20003dc8
 8004278:	20003ddc 	.word	0x20003ddc
 800427c:	20003df4 	.word	0x20003df4
 8004280:	20003dc0 	.word	0x20003dc0
 8004284:	20003dc4 	.word	0x20003dc4

08004288 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800428e:	e019      	b.n	80042c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004290:	f7fe fd5a 	bl	8002d48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004294:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <prvCheckTasksWaitingTermination+0x50>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3304      	adds	r3, #4
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe fcbf 	bl	8002c24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042a6:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <prvCheckTasksWaitingTermination+0x54>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	4a0b      	ldr	r2, [pc, #44]	; (80042dc <prvCheckTasksWaitingTermination+0x54>)
 80042ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <prvCheckTasksWaitingTermination+0x58>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <prvCheckTasksWaitingTermination+0x58>)
 80042b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042ba:	f7fe fd57 	bl	8002d6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f810 	bl	80042e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <prvCheckTasksWaitingTermination+0x58>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e1      	bne.n	8004290 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20003ddc 	.word	0x20003ddc
 80042dc:	20003e08 	.word	0x20003e08
 80042e0:	20003df0 	.word	0x20003df0

080042e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d108      	bne.n	8004308 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe fafa 	bl	80028f4 <vPortFree>
				vPortFree( pxTCB );
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7fe faf7 	bl	80028f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004306:	e010      	b.n	800432a <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800430e:	2b01      	cmp	r3, #1
 8004310:	d103      	bne.n	800431a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fe faee 	bl	80028f4 <vPortFree>
	}
 8004318:	e007      	b.n	800432a <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004320:	2b02      	cmp	r3, #2
 8004322:	d002      	beq.n	800432a <prvDeleteTCB+0x46>
 8004324:	f7fe fe48 	bl	8002fb8 <ulSetInterruptMask>
 8004328:	e7fe      	b.n	8004328 <prvDeleteTCB+0x44>
	}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800433a:	4b0c      	ldr	r3, [pc, #48]	; (800436c <prvResetNextTaskUnblockTime+0x38>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d104      	bne.n	800434e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <prvResetNextTaskUnblockTime+0x3c>)
 8004346:	f04f 32ff 	mov.w	r2, #4294967295
 800434a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800434c:	e008      	b.n	8004360 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800434e:	4b07      	ldr	r3, [pc, #28]	; (800436c <prvResetNextTaskUnblockTime+0x38>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4a04      	ldr	r2, [pc, #16]	; (8004370 <prvResetNextTaskUnblockTime+0x3c>)
 800435e:	6013      	str	r3, [r2, #0]
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	20003dc0 	.word	0x20003dc0
 8004370:	20003e28 	.word	0x20003e28

08004374 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800437a:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <xTaskGetSchedulerState+0x34>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004382:	2301      	movs	r3, #1
 8004384:	607b      	str	r3, [r7, #4]
 8004386:	e008      	b.n	800439a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <xTaskGetSchedulerState+0x38>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004390:	2302      	movs	r3, #2
 8004392:	607b      	str	r3, [r7, #4]
 8004394:	e001      	b.n	800439a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004396:	2300      	movs	r3, #0
 8004398:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800439a:	687b      	ldr	r3, [r7, #4]
	}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	20003e14 	.word	0x20003e14
 80043ac:	20003e30 	.word	0x20003e30

080043b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d046      	beq.n	8004454 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043c6:	4b26      	ldr	r3, [pc, #152]	; (8004460 <xTaskPriorityDisinherit+0xb0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d002      	beq.n	80043d6 <xTaskPriorityDisinherit+0x26>
 80043d0:	f7fe fdf2 	bl	8002fb8 <ulSetInterruptMask>
 80043d4:	e7fe      	b.n	80043d4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <xTaskPriorityDisinherit+0x34>
 80043de:	f7fe fdeb 	bl	8002fb8 <ulSetInterruptMask>
 80043e2:	e7fe      	b.n	80043e2 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	1e5a      	subs	r2, r3, #1
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d02c      	beq.n	8004454 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d128      	bne.n	8004454 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	3304      	adds	r3, #4
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fc0c 	bl	8002c24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004424:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <xTaskPriorityDisinherit+0xb4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d903      	bls.n	8004434 <xTaskPriorityDisinherit+0x84>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <xTaskPriorityDisinherit+0xb4>)
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4a09      	ldr	r2, [pc, #36]	; (8004468 <xTaskPriorityDisinherit+0xb8>)
 8004442:	441a      	add	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	3304      	adds	r3, #4
 8004448:	4619      	mov	r1, r3
 800444a:	4610      	mov	r0, r2
 800444c:	f7fe fb8d 	bl	8002b6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004450:	2301      	movs	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004454:	68fb      	ldr	r3, [r7, #12]
	}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20003934 	.word	0x20003934
 8004464:	20003e10 	.word	0x20003e10
 8004468:	20003938 	.word	0x20003938

0800446c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004476:	4b21      	ldr	r3, [pc, #132]	; (80044fc <prvAddCurrentTaskToDelayedList+0x90>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800447c:	4b20      	ldr	r3, [pc, #128]	; (8004500 <prvAddCurrentTaskToDelayedList+0x94>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3304      	adds	r3, #4
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe fbce 	bl	8002c24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448e:	d10a      	bne.n	80044a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004496:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <prvAddCurrentTaskToDelayedList+0x94>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4819      	ldr	r0, [pc, #100]	; (8004504 <prvAddCurrentTaskToDelayedList+0x98>)
 80044a0:	f7fe fb63 	bl	8002b6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044a4:	e026      	b.n	80044f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4413      	add	r3, r2
 80044ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044ae:	4b14      	ldr	r3, [pc, #80]	; (8004500 <prvAddCurrentTaskToDelayedList+0x94>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d209      	bcs.n	80044d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044be:	4b12      	ldr	r3, [pc, #72]	; (8004508 <prvAddCurrentTaskToDelayedList+0x9c>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <prvAddCurrentTaskToDelayedList+0x94>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f7fe fb71 	bl	8002bb2 <vListInsert>
}
 80044d0:	e010      	b.n	80044f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044d2:	4b0e      	ldr	r3, [pc, #56]	; (800450c <prvAddCurrentTaskToDelayedList+0xa0>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <prvAddCurrentTaskToDelayedList+0x94>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f7fe fb67 	bl	8002bb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044e4:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d202      	bcs.n	80044f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80044ee:	4a08      	ldr	r2, [pc, #32]	; (8004510 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	6013      	str	r3, [r2, #0]
}
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20003e0c 	.word	0x20003e0c
 8004500:	20003934 	.word	0x20003934
 8004504:	20003df4 	.word	0x20003df4
 8004508:	20003dc4 	.word	0x20003dc4
 800450c:	20003dc0 	.word	0x20003dc0
 8004510:	20003e28 	.word	0x20003e28

08004514 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800451e:	f000 fac7 	bl	8004ab0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004522:	4b18      	ldr	r3, [pc, #96]	; (8004584 <xTimerCreateTimerTask+0x70>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d020      	beq.n	800456c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004532:	463a      	mov	r2, r7
 8004534:	1d39      	adds	r1, r7, #4
 8004536:	f107 0308 	add.w	r3, r7, #8
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe f90c 	bl	8002758 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004540:	6839      	ldr	r1, [r7, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	9202      	str	r2, [sp, #8]
 8004548:	9301      	str	r3, [sp, #4]
 800454a:	2302      	movs	r3, #2
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	2300      	movs	r3, #0
 8004550:	460a      	mov	r2, r1
 8004552:	490d      	ldr	r1, [pc, #52]	; (8004588 <xTimerCreateTimerTask+0x74>)
 8004554:	480d      	ldr	r0, [pc, #52]	; (800458c <xTimerCreateTimerTask+0x78>)
 8004556:	f7ff f9c3 	bl	80038e0 <xTaskCreateStatic>
 800455a:	4603      	mov	r3, r0
 800455c:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <xTimerCreateTimerTask+0x7c>)
 800455e:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <xTimerCreateTimerTask+0x7c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8004568:	2301      	movs	r3, #1
 800456a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <xTimerCreateTimerTask+0x64>
 8004572:	f7fe fd21 	bl	8002fb8 <ulSetInterruptMask>
 8004576:	e7fe      	b.n	8004576 <xTimerCreateTimerTask+0x62>
	return xReturn;
 8004578:	68fb      	ldr	r3, [r7, #12]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20003e64 	.word	0x20003e64
 8004588:	08005ae8 	.word	0x08005ae8
 800458c:	080046a9 	.word	0x080046a9
 8004590:	20003e68 	.word	0x20003e68

08004594 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <xTimerGenericCommand+0x1e>
 80045ac:	f7fe fd04 	bl	8002fb8 <ulSetInterruptMask>
 80045b0:	e7fe      	b.n	80045b0 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045b2:	4b1a      	ldr	r3, [pc, #104]	; (800461c <xTimerGenericCommand+0x88>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d02a      	beq.n	8004610 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b05      	cmp	r3, #5
 80045ca:	dc18      	bgt.n	80045fe <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80045cc:	f7ff fed2 	bl	8004374 <xTaskGetSchedulerState>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d109      	bne.n	80045ea <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80045d6:	4b11      	ldr	r3, [pc, #68]	; (800461c <xTimerGenericCommand+0x88>)
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	f107 0114 	add.w	r1, r7, #20
 80045de:	2300      	movs	r3, #0
 80045e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e2:	f7fe fe1c 	bl	800321e <xQueueGenericSend>
 80045e6:	6278      	str	r0, [r7, #36]	; 0x24
 80045e8:	e012      	b.n	8004610 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045ea:	4b0c      	ldr	r3, [pc, #48]	; (800461c <xTimerGenericCommand+0x88>)
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	f107 0114 	add.w	r1, r7, #20
 80045f2:	2300      	movs	r3, #0
 80045f4:	2200      	movs	r2, #0
 80045f6:	f7fe fe12 	bl	800321e <xQueueGenericSend>
 80045fa:	6278      	str	r0, [r7, #36]	; 0x24
 80045fc:	e008      	b.n	8004610 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045fe:	4b07      	ldr	r3, [pc, #28]	; (800461c <xTimerGenericCommand+0x88>)
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	f107 0114 	add.w	r1, r7, #20
 8004606:	2300      	movs	r3, #0
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	f7fe fed1 	bl	80033b0 <xQueueGenericSendFromISR>
 800460e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004612:	4618      	mov	r0, r3
 8004614:	3728      	adds	r7, #40	; 0x28
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20003e64 	.word	0x20003e64

08004620 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af02      	add	r7, sp, #8
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800462a:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <prvProcessExpiredTimer+0x84>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	3304      	adds	r3, #4
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe faf3 	bl	8002c24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01a      	beq.n	8004682 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	699a      	ldr	r2, [r3, #24]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	18d1      	adds	r1, r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f8c1 	bl	80047e0 <prvInsertTimerInActiveList>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d017      	beq.n	8004694 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004664:	2300      	movs	r3, #0
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	2300      	movs	r3, #0
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	2100      	movs	r1, #0
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff ff90 	bl	8004594 <xTimerGenericCommand>
 8004674:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10b      	bne.n	8004694 <prvProcessExpiredTimer+0x74>
 800467c:	f7fe fc9c 	bl	8002fb8 <ulSetInterruptMask>
 8004680:	e7fe      	b.n	8004680 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	b2da      	uxtb	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	4798      	blx	r3
}
 800469c:	bf00      	nop
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20003e5c 	.word	0x20003e5c

080046a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046b0:	f107 0308 	add.w	r3, r7, #8
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 f84f 	bl	8004758 <prvGetNextExpireTime>
 80046ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4619      	mov	r1, r3
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f803 	bl	80046cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80046c6:	f000 f8cd 	bl	8004864 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046ca:	e7f1      	b.n	80046b0 <prvTimerTask+0x8>

080046cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80046d6:	f7ff fad5 	bl	8003c84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046da:	f107 0308 	add.w	r3, r7, #8
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f85e 	bl	80047a0 <prvSampleTimeNow>
 80046e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d12a      	bne.n	8004742 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <prvProcessTimerOrBlockTask+0x3c>
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d806      	bhi.n	8004708 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046fa:	f7ff fad1 	bl	8003ca0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046fe:	68f9      	ldr	r1, [r7, #12]
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff ff8d 	bl	8004620 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004706:	e01e      	b.n	8004746 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800470e:	4b10      	ldr	r3, [pc, #64]	; (8004750 <prvProcessTimerOrBlockTask+0x84>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <prvProcessTimerOrBlockTask+0x50>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <prvProcessTimerOrBlockTask+0x52>
 800471c:	2300      	movs	r3, #0
 800471e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004720:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <prvProcessTimerOrBlockTask+0x88>)
 8004722:	6818      	ldr	r0, [r3, #0]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	4619      	mov	r1, r3
 800472e:	f7ff f8a3 	bl	8003878 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004732:	f7ff fab5 	bl	8003ca0 <xTaskResumeAll>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d104      	bne.n	8004746 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800473c:	f7fe faf2 	bl	8002d24 <vPortYield>
}
 8004740:	e001      	b.n	8004746 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8004742:	f7ff faad 	bl	8003ca0 <xTaskResumeAll>
}
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20003e60 	.word	0x20003e60
 8004754:	20003e64 	.word	0x20003e64

08004758 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004760:	4b0e      	ldr	r3, [pc, #56]	; (800479c <prvGetNextExpireTime+0x44>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <prvGetNextExpireTime+0x16>
 800476a:	2201      	movs	r2, #1
 800476c:	e000      	b.n	8004770 <prvGetNextExpireTime+0x18>
 800476e:	2200      	movs	r2, #0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d105      	bne.n	8004788 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800477c:	4b07      	ldr	r3, [pc, #28]	; (800479c <prvGetNextExpireTime+0x44>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	e001      	b.n	800478c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800478c:	68fb      	ldr	r3, [r7, #12]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	20003e5c 	.word	0x20003e5c

080047a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80047a8:	f7ff fb08 	bl	8003dbc <xTaskGetTickCount>
 80047ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80047ae:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <prvSampleTimeNow+0x3c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d205      	bcs.n	80047c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80047b8:	f000 f91e 	bl	80049f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e002      	b.n	80047ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80047ca:	4a04      	ldr	r2, [pc, #16]	; (80047dc <prvSampleTimeNow+0x3c>)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80047d0:	68fb      	ldr	r3, [r7, #12]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20003e6c 	.word	0x20003e6c

080047e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	429a      	cmp	r2, r3
 8004804:	d812      	bhi.n	800482c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	1ad2      	subs	r2, r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	429a      	cmp	r2, r3
 8004812:	d302      	bcc.n	800481a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004814:	2301      	movs	r3, #1
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e01b      	b.n	8004852 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <prvInsertTimerInActiveList+0x7c>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3304      	adds	r3, #4
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f7fe f9c4 	bl	8002bb2 <vListInsert>
 800482a:	e012      	b.n	8004852 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d206      	bcs.n	8004842 <prvInsertTimerInActiveList+0x62>
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d302      	bcc.n	8004842 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800483c:	2301      	movs	r3, #1
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	e007      	b.n	8004852 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004842:	4b07      	ldr	r3, [pc, #28]	; (8004860 <prvInsertTimerInActiveList+0x80>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3304      	adds	r3, #4
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f7fe f9b0 	bl	8002bb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004852:	697b      	ldr	r3, [r7, #20]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20003e60 	.word	0x20003e60
 8004860:	20003e5c 	.word	0x20003e5c

08004864 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08c      	sub	sp, #48	; 0x30
 8004868:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800486a:	e0b2      	b.n	80049d2 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	da11      	bge.n	8004896 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004872:	f107 0308 	add.w	r3, r7, #8
 8004876:	3304      	adds	r3, #4
 8004878:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	d102      	bne.n	8004886 <prvProcessReceivedCommands+0x22>
 8004880:	f7fe fb9a 	bl	8002fb8 <ulSetInterruptMask>
 8004884:	e7fe      	b.n	8004884 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488c:	6850      	ldr	r0, [r2, #4]
 800488e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004890:	6892      	ldr	r2, [r2, #8]
 8004892:	4611      	mov	r1, r2
 8004894:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	f2c0 8099 	blt.w	80049d0 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d004      	beq.n	80048b4 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	3304      	adds	r3, #4
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe f9b8 	bl	8002c24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048b4:	1d3b      	adds	r3, r7, #4
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff ff72 	bl	80047a0 <prvSampleTimeNow>
 80048bc:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b09      	cmp	r3, #9
 80048c2:	f200 8086 	bhi.w	80049d2 <prvProcessReceivedCommands+0x16e>
 80048c6:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <prvProcessReceivedCommands+0x68>)
 80048c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048cc:	080048f5 	.word	0x080048f5
 80048d0:	080048f5 	.word	0x080048f5
 80048d4:	080048f5 	.word	0x080048f5
 80048d8:	08004959 	.word	0x08004959
 80048dc:	0800496d 	.word	0x0800496d
 80048e0:	080049a7 	.word	0x080049a7
 80048e4:	080048f5 	.word	0x080048f5
 80048e8:	080048f5 	.word	0x080048f5
 80048ec:	08004959 	.word	0x08004959
 80048f0:	0800496d 	.word	0x0800496d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	18d1      	adds	r1, r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	6a38      	ldr	r0, [r7, #32]
 8004914:	f7ff ff64 	bl	80047e0 <prvInsertTimerInActiveList>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d059      	beq.n	80049d2 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	6a38      	ldr	r0, [r7, #32]
 8004924:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d04e      	beq.n	80049d2 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	441a      	add	r2, r3
 800493c:	2300      	movs	r3, #0
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	2300      	movs	r3, #0
 8004942:	2100      	movs	r1, #0
 8004944:	6a38      	ldr	r0, [r7, #32]
 8004946:	f7ff fe25 	bl	8004594 <xTimerGenericCommand>
 800494a:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d13f      	bne.n	80049d2 <prvProcessReceivedCommands+0x16e>
 8004952:	f7fe fb31 	bl	8002fb8 <ulSetInterruptMask>
 8004956:	e7fe      	b.n	8004956 <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	b2da      	uxtb	r2, r3
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800496a:	e032      	b.n	80049d2 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	b2da      	uxtb	r2, r3
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <prvProcessReceivedCommands+0x12e>
 800498c:	f7fe fb14 	bl	8002fb8 <ulSetInterruptMask>
 8004990:	e7fe      	b.n	8004990 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	18d1      	adds	r1, r2, r3
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	69fa      	ldr	r2, [r7, #28]
 800499e:	6a38      	ldr	r0, [r7, #32]
 80049a0:	f7ff ff1e 	bl	80047e0 <prvInsertTimerInActiveList>
					break;
 80049a4:	e015      	b.n	80049d2 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d103      	bne.n	80049bc <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 80049b4:	6a38      	ldr	r0, [r7, #32]
 80049b6:	f7fd ff9d 	bl	80028f4 <vPortFree>
 80049ba:	e00a      	b.n	80049d2 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049ce:	e000      	b.n	80049d2 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80049d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049d2:	4b08      	ldr	r3, [pc, #32]	; (80049f4 <prvProcessReceivedCommands+0x190>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f107 0108 	add.w	r1, r7, #8
 80049da:	2200      	movs	r2, #0
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fe fd58 	bl	8003492 <xQueueReceive>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f47f af41 	bne.w	800486c <prvProcessReceivedCommands+0x8>
	}
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	3728      	adds	r7, #40	; 0x28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20003e64 	.word	0x20003e64

080049f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049fe:	e040      	b.n	8004a82 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a00:	4b29      	ldr	r3, [pc, #164]	; (8004aa8 <prvSwitchTimerLists+0xb0>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a0a:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <prvSwitchTimerLists+0xb0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe f903 	bl	8002c24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d026      	beq.n	8004a82 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d90e      	bls.n	8004a64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a52:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <prvSwitchTimerLists+0xb0>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f7fe f8a8 	bl	8002bb2 <vListInsert>
 8004a62:	e00e      	b.n	8004a82 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a64:	2300      	movs	r3, #0
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7ff fd90 	bl	8004594 <xTimerGenericCommand>
 8004a74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <prvSwitchTimerLists+0x8a>
 8004a7c:	f7fe fa9c 	bl	8002fb8 <ulSetInterruptMask>
 8004a80:	e7fe      	b.n	8004a80 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a82:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <prvSwitchTimerLists+0xb0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1b9      	bne.n	8004a00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <prvSwitchTimerLists+0xb0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a92:	4b06      	ldr	r3, [pc, #24]	; (8004aac <prvSwitchTimerLists+0xb4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a04      	ldr	r2, [pc, #16]	; (8004aa8 <prvSwitchTimerLists+0xb0>)
 8004a98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a9a:	4a04      	ldr	r2, [pc, #16]	; (8004aac <prvSwitchTimerLists+0xb4>)
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20003e5c 	.word	0x20003e5c
 8004aac:	20003e60 	.word	0x20003e60

08004ab0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ab6:	f7fe f947 	bl	8002d48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004aba:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <prvCheckForValidListAndQueue+0x60>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d120      	bne.n	8004b04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ac2:	4814      	ldr	r0, [pc, #80]	; (8004b14 <prvCheckForValidListAndQueue+0x64>)
 8004ac4:	f7fe f824 	bl	8002b10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ac8:	4813      	ldr	r0, [pc, #76]	; (8004b18 <prvCheckForValidListAndQueue+0x68>)
 8004aca:	f7fe f821 	bl	8002b10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ace:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <prvCheckForValidListAndQueue+0x6c>)
 8004ad0:	4a10      	ldr	r2, [pc, #64]	; (8004b14 <prvCheckForValidListAndQueue+0x64>)
 8004ad2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ad4:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <prvCheckForValidListAndQueue+0x70>)
 8004ad6:	4a10      	ldr	r2, [pc, #64]	; (8004b18 <prvCheckForValidListAndQueue+0x68>)
 8004ad8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ada:	2300      	movs	r3, #0
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <prvCheckForValidListAndQueue+0x74>)
 8004ae0:	4a11      	ldr	r2, [pc, #68]	; (8004b28 <prvCheckForValidListAndQueue+0x78>)
 8004ae2:	2110      	movs	r1, #16
 8004ae4:	200a      	movs	r0, #10
 8004ae6:	f7fe fb27 	bl	8003138 <xQueueGenericCreateStatic>
 8004aea:	4603      	mov	r3, r0
 8004aec:	4a08      	ldr	r2, [pc, #32]	; (8004b10 <prvCheckForValidListAndQueue+0x60>)
 8004aee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004af0:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <prvCheckForValidListAndQueue+0x60>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004af8:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <prvCheckForValidListAndQueue+0x60>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	490b      	ldr	r1, [pc, #44]	; (8004b2c <prvCheckForValidListAndQueue+0x7c>)
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe fe90 	bl	8003824 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b04:	f7fe f932 	bl	8002d6c <vPortExitCritical>
}
 8004b08:	bf00      	nop
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20003e64 	.word	0x20003e64
 8004b14:	20003e34 	.word	0x20003e34
 8004b18:	20003e48 	.word	0x20003e48
 8004b1c:	20003e5c 	.word	0x20003e5c
 8004b20:	20003e60 	.word	0x20003e60
 8004b24:	20003f10 	.word	0x20003f10
 8004b28:	20003e70 	.word	0x20003e70
 8004b2c:	08005af0 	.word	0x08005af0

08004b30 <__errno>:
 8004b30:	4b01      	ldr	r3, [pc, #4]	; (8004b38 <__errno+0x8>)
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	2000001c 	.word	0x2000001c

08004b3c <__libc_init_array>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	4d0d      	ldr	r5, [pc, #52]	; (8004b74 <__libc_init_array+0x38>)
 8004b40:	2600      	movs	r6, #0
 8004b42:	4c0d      	ldr	r4, [pc, #52]	; (8004b78 <__libc_init_array+0x3c>)
 8004b44:	1b64      	subs	r4, r4, r5
 8004b46:	10a4      	asrs	r4, r4, #2
 8004b48:	42a6      	cmp	r6, r4
 8004b4a:	d109      	bne.n	8004b60 <__libc_init_array+0x24>
 8004b4c:	4d0b      	ldr	r5, [pc, #44]	; (8004b7c <__libc_init_array+0x40>)
 8004b4e:	2600      	movs	r6, #0
 8004b50:	4c0b      	ldr	r4, [pc, #44]	; (8004b80 <__libc_init_array+0x44>)
 8004b52:	f000 ff91 	bl	8005a78 <_init>
 8004b56:	1b64      	subs	r4, r4, r5
 8004b58:	10a4      	asrs	r4, r4, #2
 8004b5a:	42a6      	cmp	r6, r4
 8004b5c:	d105      	bne.n	8004b6a <__libc_init_array+0x2e>
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
 8004b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b64:	3601      	adds	r6, #1
 8004b66:	4798      	blx	r3
 8004b68:	e7ee      	b.n	8004b48 <__libc_init_array+0xc>
 8004b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b6e:	3601      	adds	r6, #1
 8004b70:	4798      	blx	r3
 8004b72:	e7f2      	b.n	8004b5a <__libc_init_array+0x1e>
 8004b74:	08005be8 	.word	0x08005be8
 8004b78:	08005be8 	.word	0x08005be8
 8004b7c:	08005be8 	.word	0x08005be8
 8004b80:	08005bec 	.word	0x08005bec

08004b84 <memcpy>:
 8004b84:	440a      	add	r2, r1
 8004b86:	1e43      	subs	r3, r0, #1
 8004b88:	4291      	cmp	r1, r2
 8004b8a:	d100      	bne.n	8004b8e <memcpy+0xa>
 8004b8c:	4770      	bx	lr
 8004b8e:	b510      	push	{r4, lr}
 8004b90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b94:	4291      	cmp	r1, r2
 8004b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b9a:	d1f9      	bne.n	8004b90 <memcpy+0xc>
 8004b9c:	bd10      	pop	{r4, pc}

08004b9e <memset>:
 8004b9e:	4402      	add	r2, r0
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d100      	bne.n	8004ba8 <memset+0xa>
 8004ba6:	4770      	bx	lr
 8004ba8:	f803 1b01 	strb.w	r1, [r3], #1
 8004bac:	e7f9      	b.n	8004ba2 <memset+0x4>
	...

08004bb0 <iprintf>:
 8004bb0:	b40f      	push	{r0, r1, r2, r3}
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <iprintf+0x2c>)
 8004bb4:	b513      	push	{r0, r1, r4, lr}
 8004bb6:	681c      	ldr	r4, [r3, #0]
 8004bb8:	b124      	cbz	r4, 8004bc4 <iprintf+0x14>
 8004bba:	69a3      	ldr	r3, [r4, #24]
 8004bbc:	b913      	cbnz	r3, 8004bc4 <iprintf+0x14>
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f000 f866 	bl	8004c90 <__sinit>
 8004bc4:	ab05      	add	r3, sp, #20
 8004bc6:	9a04      	ldr	r2, [sp, #16]
 8004bc8:	68a1      	ldr	r1, [r4, #8]
 8004bca:	4620      	mov	r0, r4
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	f000 f983 	bl	8004ed8 <_vfiprintf_r>
 8004bd2:	b002      	add	sp, #8
 8004bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd8:	b004      	add	sp, #16
 8004bda:	4770      	bx	lr
 8004bdc:	2000001c 	.word	0x2000001c

08004be0 <std>:
 8004be0:	2300      	movs	r3, #0
 8004be2:	b510      	push	{r4, lr}
 8004be4:	4604      	mov	r4, r0
 8004be6:	6083      	str	r3, [r0, #8]
 8004be8:	8181      	strh	r1, [r0, #12]
 8004bea:	4619      	mov	r1, r3
 8004bec:	6643      	str	r3, [r0, #100]	; 0x64
 8004bee:	81c2      	strh	r2, [r0, #14]
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	6183      	str	r3, [r0, #24]
 8004bf4:	e9c0 3300 	strd	r3, r3, [r0]
 8004bf8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bfc:	305c      	adds	r0, #92	; 0x5c
 8004bfe:	f7ff ffce 	bl	8004b9e <memset>
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <std+0x38>)
 8004c04:	6224      	str	r4, [r4, #32]
 8004c06:	6263      	str	r3, [r4, #36]	; 0x24
 8004c08:	4b04      	ldr	r3, [pc, #16]	; (8004c1c <std+0x3c>)
 8004c0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c0c:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <std+0x40>)
 8004c0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c10:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <std+0x44>)
 8004c12:	6323      	str	r3, [r4, #48]	; 0x30
 8004c14:	bd10      	pop	{r4, pc}
 8004c16:	bf00      	nop
 8004c18:	08005485 	.word	0x08005485
 8004c1c:	080054a7 	.word	0x080054a7
 8004c20:	080054df 	.word	0x080054df
 8004c24:	08005503 	.word	0x08005503

08004c28 <_cleanup_r>:
 8004c28:	4901      	ldr	r1, [pc, #4]	; (8004c30 <_cleanup_r+0x8>)
 8004c2a:	f000 b8af 	b.w	8004d8c <_fwalk_reent>
 8004c2e:	bf00      	nop
 8004c30:	080057d9 	.word	0x080057d9

08004c34 <__sfmoreglue>:
 8004c34:	b570      	push	{r4, r5, r6, lr}
 8004c36:	1e4a      	subs	r2, r1, #1
 8004c38:	2568      	movs	r5, #104	; 0x68
 8004c3a:	460e      	mov	r6, r1
 8004c3c:	4355      	muls	r5, r2
 8004c3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c42:	f000 f8c5 	bl	8004dd0 <_malloc_r>
 8004c46:	4604      	mov	r4, r0
 8004c48:	b140      	cbz	r0, 8004c5c <__sfmoreglue+0x28>
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c50:	e9c0 1600 	strd	r1, r6, [r0]
 8004c54:	300c      	adds	r0, #12
 8004c56:	60a0      	str	r0, [r4, #8]
 8004c58:	f7ff ffa1 	bl	8004b9e <memset>
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}

08004c60 <__sfp_lock_acquire>:
 8004c60:	4801      	ldr	r0, [pc, #4]	; (8004c68 <__sfp_lock_acquire+0x8>)
 8004c62:	f000 b8b3 	b.w	8004dcc <__retarget_lock_acquire_recursive>
 8004c66:	bf00      	nop
 8004c68:	20004010 	.word	0x20004010

08004c6c <__sfp_lock_release>:
 8004c6c:	4801      	ldr	r0, [pc, #4]	; (8004c74 <__sfp_lock_release+0x8>)
 8004c6e:	f000 b8ae 	b.w	8004dce <__retarget_lock_release_recursive>
 8004c72:	bf00      	nop
 8004c74:	20004010 	.word	0x20004010

08004c78 <__sinit_lock_acquire>:
 8004c78:	4801      	ldr	r0, [pc, #4]	; (8004c80 <__sinit_lock_acquire+0x8>)
 8004c7a:	f000 b8a7 	b.w	8004dcc <__retarget_lock_acquire_recursive>
 8004c7e:	bf00      	nop
 8004c80:	2000400b 	.word	0x2000400b

08004c84 <__sinit_lock_release>:
 8004c84:	4801      	ldr	r0, [pc, #4]	; (8004c8c <__sinit_lock_release+0x8>)
 8004c86:	f000 b8a2 	b.w	8004dce <__retarget_lock_release_recursive>
 8004c8a:	bf00      	nop
 8004c8c:	2000400b 	.word	0x2000400b

08004c90 <__sinit>:
 8004c90:	b510      	push	{r4, lr}
 8004c92:	4604      	mov	r4, r0
 8004c94:	f7ff fff0 	bl	8004c78 <__sinit_lock_acquire>
 8004c98:	69a3      	ldr	r3, [r4, #24]
 8004c9a:	b11b      	cbz	r3, 8004ca4 <__sinit+0x14>
 8004c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca0:	f7ff bff0 	b.w	8004c84 <__sinit_lock_release>
 8004ca4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ca8:	6523      	str	r3, [r4, #80]	; 0x50
 8004caa:	4620      	mov	r0, r4
 8004cac:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <__sinit+0x68>)
 8004cae:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <__sinit+0x6c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	62a2      	str	r2, [r4, #40]	; 0x28
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	bf04      	itt	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	61a3      	streq	r3, [r4, #24]
 8004cbc:	f000 f820 	bl	8004d00 <__sfp>
 8004cc0:	6060      	str	r0, [r4, #4]
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f000 f81c 	bl	8004d00 <__sfp>
 8004cc8:	60a0      	str	r0, [r4, #8]
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f000 f818 	bl	8004d00 <__sfp>
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2104      	movs	r1, #4
 8004cd4:	60e0      	str	r0, [r4, #12]
 8004cd6:	6860      	ldr	r0, [r4, #4]
 8004cd8:	f7ff ff82 	bl	8004be0 <std>
 8004cdc:	2201      	movs	r2, #1
 8004cde:	2109      	movs	r1, #9
 8004ce0:	68a0      	ldr	r0, [r4, #8]
 8004ce2:	f7ff ff7d 	bl	8004be0 <std>
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	2112      	movs	r1, #18
 8004cea:	68e0      	ldr	r0, [r4, #12]
 8004cec:	f7ff ff78 	bl	8004be0 <std>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	61a3      	str	r3, [r4, #24]
 8004cf4:	e7d2      	b.n	8004c9c <__sinit+0xc>
 8004cf6:	bf00      	nop
 8004cf8:	08005b50 	.word	0x08005b50
 8004cfc:	08004c29 	.word	0x08004c29

08004d00 <__sfp>:
 8004d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d02:	4607      	mov	r7, r0
 8004d04:	f7ff ffac 	bl	8004c60 <__sfp_lock_acquire>
 8004d08:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <__sfp+0x84>)
 8004d0a:	681e      	ldr	r6, [r3, #0]
 8004d0c:	69b3      	ldr	r3, [r6, #24]
 8004d0e:	b913      	cbnz	r3, 8004d16 <__sfp+0x16>
 8004d10:	4630      	mov	r0, r6
 8004d12:	f7ff ffbd 	bl	8004c90 <__sinit>
 8004d16:	3648      	adds	r6, #72	; 0x48
 8004d18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	d503      	bpl.n	8004d28 <__sfp+0x28>
 8004d20:	6833      	ldr	r3, [r6, #0]
 8004d22:	b30b      	cbz	r3, 8004d68 <__sfp+0x68>
 8004d24:	6836      	ldr	r6, [r6, #0]
 8004d26:	e7f7      	b.n	8004d18 <__sfp+0x18>
 8004d28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d2c:	b9d5      	cbnz	r5, 8004d64 <__sfp+0x64>
 8004d2e:	4b16      	ldr	r3, [pc, #88]	; (8004d88 <__sfp+0x88>)
 8004d30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d34:	6665      	str	r5, [r4, #100]	; 0x64
 8004d36:	60e3      	str	r3, [r4, #12]
 8004d38:	f000 f847 	bl	8004dca <__retarget_lock_init_recursive>
 8004d3c:	f7ff ff96 	bl	8004c6c <__sfp_lock_release>
 8004d40:	2208      	movs	r2, #8
 8004d42:	4629      	mov	r1, r5
 8004d44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d48:	6025      	str	r5, [r4, #0]
 8004d4a:	61a5      	str	r5, [r4, #24]
 8004d4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d54:	f7ff ff23 	bl	8004b9e <memset>
 8004d58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d60:	4620      	mov	r0, r4
 8004d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d64:	3468      	adds	r4, #104	; 0x68
 8004d66:	e7d9      	b.n	8004d1c <__sfp+0x1c>
 8004d68:	2104      	movs	r1, #4
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	f7ff ff62 	bl	8004c34 <__sfmoreglue>
 8004d70:	4604      	mov	r4, r0
 8004d72:	6030      	str	r0, [r6, #0]
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d1d5      	bne.n	8004d24 <__sfp+0x24>
 8004d78:	f7ff ff78 	bl	8004c6c <__sfp_lock_release>
 8004d7c:	230c      	movs	r3, #12
 8004d7e:	603b      	str	r3, [r7, #0]
 8004d80:	e7ee      	b.n	8004d60 <__sfp+0x60>
 8004d82:	bf00      	nop
 8004d84:	08005b50 	.word	0x08005b50
 8004d88:	ffff0001 	.word	0xffff0001

08004d8c <_fwalk_reent>:
 8004d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d90:	4606      	mov	r6, r0
 8004d92:	4688      	mov	r8, r1
 8004d94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d98:	2700      	movs	r7, #0
 8004d9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d9e:	f1b9 0901 	subs.w	r9, r9, #1
 8004da2:	d505      	bpl.n	8004db0 <_fwalk_reent+0x24>
 8004da4:	6824      	ldr	r4, [r4, #0]
 8004da6:	2c00      	cmp	r4, #0
 8004da8:	d1f7      	bne.n	8004d9a <_fwalk_reent+0xe>
 8004daa:	4638      	mov	r0, r7
 8004dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004db0:	89ab      	ldrh	r3, [r5, #12]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d907      	bls.n	8004dc6 <_fwalk_reent+0x3a>
 8004db6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	d003      	beq.n	8004dc6 <_fwalk_reent+0x3a>
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	47c0      	blx	r8
 8004dc4:	4307      	orrs	r7, r0
 8004dc6:	3568      	adds	r5, #104	; 0x68
 8004dc8:	e7e9      	b.n	8004d9e <_fwalk_reent+0x12>

08004dca <__retarget_lock_init_recursive>:
 8004dca:	4770      	bx	lr

08004dcc <__retarget_lock_acquire_recursive>:
 8004dcc:	4770      	bx	lr

08004dce <__retarget_lock_release_recursive>:
 8004dce:	4770      	bx	lr

08004dd0 <_malloc_r>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	1ccd      	adds	r5, r1, #3
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	f025 0503 	bic.w	r5, r5, #3
 8004dda:	3508      	adds	r5, #8
 8004ddc:	2d0c      	cmp	r5, #12
 8004dde:	bf38      	it	cc
 8004de0:	250c      	movcc	r5, #12
 8004de2:	2d00      	cmp	r5, #0
 8004de4:	db01      	blt.n	8004dea <_malloc_r+0x1a>
 8004de6:	42a9      	cmp	r1, r5
 8004de8:	d903      	bls.n	8004df2 <_malloc_r+0x22>
 8004dea:	230c      	movs	r3, #12
 8004dec:	6033      	str	r3, [r6, #0]
 8004dee:	2000      	movs	r0, #0
 8004df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df2:	f000 fdb1 	bl	8005958 <__malloc_lock>
 8004df6:	4921      	ldr	r1, [pc, #132]	; (8004e7c <_malloc_r+0xac>)
 8004df8:	680a      	ldr	r2, [r1, #0]
 8004dfa:	4614      	mov	r4, r2
 8004dfc:	b99c      	cbnz	r4, 8004e26 <_malloc_r+0x56>
 8004dfe:	4f20      	ldr	r7, [pc, #128]	; (8004e80 <_malloc_r+0xb0>)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	b923      	cbnz	r3, 8004e0e <_malloc_r+0x3e>
 8004e04:	4621      	mov	r1, r4
 8004e06:	4630      	mov	r0, r6
 8004e08:	f000 fb2c 	bl	8005464 <_sbrk_r>
 8004e0c:	6038      	str	r0, [r7, #0]
 8004e0e:	4629      	mov	r1, r5
 8004e10:	4630      	mov	r0, r6
 8004e12:	f000 fb27 	bl	8005464 <_sbrk_r>
 8004e16:	1c43      	adds	r3, r0, #1
 8004e18:	d123      	bne.n	8004e62 <_malloc_r+0x92>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	6033      	str	r3, [r6, #0]
 8004e20:	f000 fda0 	bl	8005964 <__malloc_unlock>
 8004e24:	e7e3      	b.n	8004dee <_malloc_r+0x1e>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	1b5b      	subs	r3, r3, r5
 8004e2a:	d417      	bmi.n	8004e5c <_malloc_r+0x8c>
 8004e2c:	2b0b      	cmp	r3, #11
 8004e2e:	d903      	bls.n	8004e38 <_malloc_r+0x68>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	441c      	add	r4, r3
 8004e34:	6025      	str	r5, [r4, #0]
 8004e36:	e004      	b.n	8004e42 <_malloc_r+0x72>
 8004e38:	6863      	ldr	r3, [r4, #4]
 8004e3a:	42a2      	cmp	r2, r4
 8004e3c:	bf0c      	ite	eq
 8004e3e:	600b      	streq	r3, [r1, #0]
 8004e40:	6053      	strne	r3, [r2, #4]
 8004e42:	4630      	mov	r0, r6
 8004e44:	f000 fd8e 	bl	8005964 <__malloc_unlock>
 8004e48:	f104 000b 	add.w	r0, r4, #11
 8004e4c:	1d23      	adds	r3, r4, #4
 8004e4e:	f020 0007 	bic.w	r0, r0, #7
 8004e52:	1ac2      	subs	r2, r0, r3
 8004e54:	d0cc      	beq.n	8004df0 <_malloc_r+0x20>
 8004e56:	1a1b      	subs	r3, r3, r0
 8004e58:	50a3      	str	r3, [r4, r2]
 8004e5a:	e7c9      	b.n	8004df0 <_malloc_r+0x20>
 8004e5c:	4622      	mov	r2, r4
 8004e5e:	6864      	ldr	r4, [r4, #4]
 8004e60:	e7cc      	b.n	8004dfc <_malloc_r+0x2c>
 8004e62:	1cc4      	adds	r4, r0, #3
 8004e64:	f024 0403 	bic.w	r4, r4, #3
 8004e68:	42a0      	cmp	r0, r4
 8004e6a:	d0e3      	beq.n	8004e34 <_malloc_r+0x64>
 8004e6c:	1a21      	subs	r1, r4, r0
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f000 faf8 	bl	8005464 <_sbrk_r>
 8004e74:	3001      	adds	r0, #1
 8004e76:	d1dd      	bne.n	8004e34 <_malloc_r+0x64>
 8004e78:	e7cf      	b.n	8004e1a <_malloc_r+0x4a>
 8004e7a:	bf00      	nop
 8004e7c:	20003f60 	.word	0x20003f60
 8004e80:	20003f64 	.word	0x20003f64

08004e84 <__sfputc_r>:
 8004e84:	6893      	ldr	r3, [r2, #8]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	6093      	str	r3, [r2, #8]
 8004e8c:	b410      	push	{r4}
 8004e8e:	da08      	bge.n	8004ea2 <__sfputc_r+0x1e>
 8004e90:	6994      	ldr	r4, [r2, #24]
 8004e92:	42a3      	cmp	r3, r4
 8004e94:	db01      	blt.n	8004e9a <__sfputc_r+0x16>
 8004e96:	290a      	cmp	r1, #10
 8004e98:	d103      	bne.n	8004ea2 <__sfputc_r+0x1e>
 8004e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e9e:	f000 bb35 	b.w	800550c <__swbuf_r>
 8004ea2:	6813      	ldr	r3, [r2, #0]
 8004ea4:	1c58      	adds	r0, r3, #1
 8004ea6:	6010      	str	r0, [r2, #0]
 8004ea8:	4608      	mov	r0, r1
 8004eaa:	7019      	strb	r1, [r3, #0]
 8004eac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <__sfputs_r>:
 8004eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb4:	4606      	mov	r6, r0
 8004eb6:	460f      	mov	r7, r1
 8004eb8:	4614      	mov	r4, r2
 8004eba:	18d5      	adds	r5, r2, r3
 8004ebc:	42ac      	cmp	r4, r5
 8004ebe:	d101      	bne.n	8004ec4 <__sfputs_r+0x12>
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	e007      	b.n	8004ed4 <__sfputs_r+0x22>
 8004ec4:	463a      	mov	r2, r7
 8004ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f7ff ffda 	bl	8004e84 <__sfputc_r>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	d1f3      	bne.n	8004ebc <__sfputs_r+0xa>
 8004ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ed8 <_vfiprintf_r>:
 8004ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004edc:	460d      	mov	r5, r1
 8004ede:	b09d      	sub	sp, #116	; 0x74
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	4698      	mov	r8, r3
 8004ee4:	4606      	mov	r6, r0
 8004ee6:	b118      	cbz	r0, 8004ef0 <_vfiprintf_r+0x18>
 8004ee8:	6983      	ldr	r3, [r0, #24]
 8004eea:	b90b      	cbnz	r3, 8004ef0 <_vfiprintf_r+0x18>
 8004eec:	f7ff fed0 	bl	8004c90 <__sinit>
 8004ef0:	4b89      	ldr	r3, [pc, #548]	; (8005118 <_vfiprintf_r+0x240>)
 8004ef2:	429d      	cmp	r5, r3
 8004ef4:	d11b      	bne.n	8004f2e <_vfiprintf_r+0x56>
 8004ef6:	6875      	ldr	r5, [r6, #4]
 8004ef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004efa:	07d9      	lsls	r1, r3, #31
 8004efc:	d405      	bmi.n	8004f0a <_vfiprintf_r+0x32>
 8004efe:	89ab      	ldrh	r3, [r5, #12]
 8004f00:	059a      	lsls	r2, r3, #22
 8004f02:	d402      	bmi.n	8004f0a <_vfiprintf_r+0x32>
 8004f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f06:	f7ff ff61 	bl	8004dcc <__retarget_lock_acquire_recursive>
 8004f0a:	89ab      	ldrh	r3, [r5, #12]
 8004f0c:	071b      	lsls	r3, r3, #28
 8004f0e:	d501      	bpl.n	8004f14 <_vfiprintf_r+0x3c>
 8004f10:	692b      	ldr	r3, [r5, #16]
 8004f12:	b9eb      	cbnz	r3, 8004f50 <_vfiprintf_r+0x78>
 8004f14:	4629      	mov	r1, r5
 8004f16:	4630      	mov	r0, r6
 8004f18:	f000 fb5c 	bl	80055d4 <__swsetup_r>
 8004f1c:	b1c0      	cbz	r0, 8004f50 <_vfiprintf_r+0x78>
 8004f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f20:	07dc      	lsls	r4, r3, #31
 8004f22:	d50e      	bpl.n	8004f42 <_vfiprintf_r+0x6a>
 8004f24:	f04f 30ff 	mov.w	r0, #4294967295
 8004f28:	b01d      	add	sp, #116	; 0x74
 8004f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2e:	4b7b      	ldr	r3, [pc, #492]	; (800511c <_vfiprintf_r+0x244>)
 8004f30:	429d      	cmp	r5, r3
 8004f32:	d101      	bne.n	8004f38 <_vfiprintf_r+0x60>
 8004f34:	68b5      	ldr	r5, [r6, #8]
 8004f36:	e7df      	b.n	8004ef8 <_vfiprintf_r+0x20>
 8004f38:	4b79      	ldr	r3, [pc, #484]	; (8005120 <_vfiprintf_r+0x248>)
 8004f3a:	429d      	cmp	r5, r3
 8004f3c:	bf08      	it	eq
 8004f3e:	68f5      	ldreq	r5, [r6, #12]
 8004f40:	e7da      	b.n	8004ef8 <_vfiprintf_r+0x20>
 8004f42:	89ab      	ldrh	r3, [r5, #12]
 8004f44:	0598      	lsls	r0, r3, #22
 8004f46:	d4ed      	bmi.n	8004f24 <_vfiprintf_r+0x4c>
 8004f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f4a:	f7ff ff40 	bl	8004dce <__retarget_lock_release_recursive>
 8004f4e:	e7e9      	b.n	8004f24 <_vfiprintf_r+0x4c>
 8004f50:	2300      	movs	r3, #0
 8004f52:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f56:	f04f 0901 	mov.w	r9, #1
 8004f5a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8005124 <_vfiprintf_r+0x24c>
 8004f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f60:	2320      	movs	r3, #32
 8004f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f66:	2330      	movs	r3, #48	; 0x30
 8004f68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f6c:	4623      	mov	r3, r4
 8004f6e:	469a      	mov	sl, r3
 8004f70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f74:	b10a      	cbz	r2, 8004f7a <_vfiprintf_r+0xa2>
 8004f76:	2a25      	cmp	r2, #37	; 0x25
 8004f78:	d1f9      	bne.n	8004f6e <_vfiprintf_r+0x96>
 8004f7a:	ebba 0b04 	subs.w	fp, sl, r4
 8004f7e:	d00b      	beq.n	8004f98 <_vfiprintf_r+0xc0>
 8004f80:	465b      	mov	r3, fp
 8004f82:	4622      	mov	r2, r4
 8004f84:	4629      	mov	r1, r5
 8004f86:	4630      	mov	r0, r6
 8004f88:	f7ff ff93 	bl	8004eb2 <__sfputs_r>
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	f000 80aa 	beq.w	80050e6 <_vfiprintf_r+0x20e>
 8004f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f94:	445a      	add	r2, fp
 8004f96:	9209      	str	r2, [sp, #36]	; 0x24
 8004f98:	f89a 3000 	ldrb.w	r3, [sl]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80a2 	beq.w	80050e6 <_vfiprintf_r+0x20e>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa8:	f10a 0a01 	add.w	sl, sl, #1
 8004fac:	9304      	str	r3, [sp, #16]
 8004fae:	9307      	str	r3, [sp, #28]
 8004fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8004fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fba:	4654      	mov	r4, sl
 8004fbc:	2205      	movs	r2, #5
 8004fbe:	4859      	ldr	r0, [pc, #356]	; (8005124 <_vfiprintf_r+0x24c>)
 8004fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc4:	f000 fcba 	bl	800593c <memchr>
 8004fc8:	9a04      	ldr	r2, [sp, #16]
 8004fca:	b9d8      	cbnz	r0, 8005004 <_vfiprintf_r+0x12c>
 8004fcc:	06d1      	lsls	r1, r2, #27
 8004fce:	bf44      	itt	mi
 8004fd0:	2320      	movmi	r3, #32
 8004fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd6:	0713      	lsls	r3, r2, #28
 8004fd8:	bf44      	itt	mi
 8004fda:	232b      	movmi	r3, #43	; 0x2b
 8004fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8004fe6:	d015      	beq.n	8005014 <_vfiprintf_r+0x13c>
 8004fe8:	9a07      	ldr	r2, [sp, #28]
 8004fea:	4654      	mov	r4, sl
 8004fec:	2000      	movs	r0, #0
 8004fee:	f04f 0c0a 	mov.w	ip, #10
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff8:	3b30      	subs	r3, #48	; 0x30
 8004ffa:	2b09      	cmp	r3, #9
 8004ffc:	d94e      	bls.n	800509c <_vfiprintf_r+0x1c4>
 8004ffe:	b1b0      	cbz	r0, 800502e <_vfiprintf_r+0x156>
 8005000:	9207      	str	r2, [sp, #28]
 8005002:	e014      	b.n	800502e <_vfiprintf_r+0x156>
 8005004:	eba0 0308 	sub.w	r3, r0, r8
 8005008:	46a2      	mov	sl, r4
 800500a:	fa09 f303 	lsl.w	r3, r9, r3
 800500e:	4313      	orrs	r3, r2
 8005010:	9304      	str	r3, [sp, #16]
 8005012:	e7d2      	b.n	8004fba <_vfiprintf_r+0xe2>
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	1d19      	adds	r1, r3, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	9103      	str	r1, [sp, #12]
 800501e:	bfbb      	ittet	lt
 8005020:	425b      	neglt	r3, r3
 8005022:	f042 0202 	orrlt.w	r2, r2, #2
 8005026:	9307      	strge	r3, [sp, #28]
 8005028:	9307      	strlt	r3, [sp, #28]
 800502a:	bfb8      	it	lt
 800502c:	9204      	strlt	r2, [sp, #16]
 800502e:	7823      	ldrb	r3, [r4, #0]
 8005030:	2b2e      	cmp	r3, #46	; 0x2e
 8005032:	d10c      	bne.n	800504e <_vfiprintf_r+0x176>
 8005034:	7863      	ldrb	r3, [r4, #1]
 8005036:	2b2a      	cmp	r3, #42	; 0x2a
 8005038:	d135      	bne.n	80050a6 <_vfiprintf_r+0x1ce>
 800503a:	9b03      	ldr	r3, [sp, #12]
 800503c:	3402      	adds	r4, #2
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	9203      	str	r2, [sp, #12]
 8005046:	bfb8      	it	lt
 8005048:	f04f 33ff 	movlt.w	r3, #4294967295
 800504c:	9305      	str	r3, [sp, #20]
 800504e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005134 <_vfiprintf_r+0x25c>
 8005052:	2203      	movs	r2, #3
 8005054:	7821      	ldrb	r1, [r4, #0]
 8005056:	4650      	mov	r0, sl
 8005058:	f000 fc70 	bl	800593c <memchr>
 800505c:	b140      	cbz	r0, 8005070 <_vfiprintf_r+0x198>
 800505e:	2340      	movs	r3, #64	; 0x40
 8005060:	eba0 000a 	sub.w	r0, r0, sl
 8005064:	3401      	adds	r4, #1
 8005066:	fa03 f000 	lsl.w	r0, r3, r0
 800506a:	9b04      	ldr	r3, [sp, #16]
 800506c:	4303      	orrs	r3, r0
 800506e:	9304      	str	r3, [sp, #16]
 8005070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005074:	2206      	movs	r2, #6
 8005076:	482c      	ldr	r0, [pc, #176]	; (8005128 <_vfiprintf_r+0x250>)
 8005078:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800507c:	f000 fc5e 	bl	800593c <memchr>
 8005080:	2800      	cmp	r0, #0
 8005082:	d03f      	beq.n	8005104 <_vfiprintf_r+0x22c>
 8005084:	4b29      	ldr	r3, [pc, #164]	; (800512c <_vfiprintf_r+0x254>)
 8005086:	bb1b      	cbnz	r3, 80050d0 <_vfiprintf_r+0x1f8>
 8005088:	9b03      	ldr	r3, [sp, #12]
 800508a:	3307      	adds	r3, #7
 800508c:	f023 0307 	bic.w	r3, r3, #7
 8005090:	3308      	adds	r3, #8
 8005092:	9303      	str	r3, [sp, #12]
 8005094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005096:	443b      	add	r3, r7
 8005098:	9309      	str	r3, [sp, #36]	; 0x24
 800509a:	e767      	b.n	8004f6c <_vfiprintf_r+0x94>
 800509c:	fb0c 3202 	mla	r2, ip, r2, r3
 80050a0:	460c      	mov	r4, r1
 80050a2:	2001      	movs	r0, #1
 80050a4:	e7a5      	b.n	8004ff2 <_vfiprintf_r+0x11a>
 80050a6:	2300      	movs	r3, #0
 80050a8:	3401      	adds	r4, #1
 80050aa:	f04f 0c0a 	mov.w	ip, #10
 80050ae:	4619      	mov	r1, r3
 80050b0:	9305      	str	r3, [sp, #20]
 80050b2:	4620      	mov	r0, r4
 80050b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050b8:	3a30      	subs	r2, #48	; 0x30
 80050ba:	2a09      	cmp	r2, #9
 80050bc:	d903      	bls.n	80050c6 <_vfiprintf_r+0x1ee>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0c5      	beq.n	800504e <_vfiprintf_r+0x176>
 80050c2:	9105      	str	r1, [sp, #20]
 80050c4:	e7c3      	b.n	800504e <_vfiprintf_r+0x176>
 80050c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ca:	4604      	mov	r4, r0
 80050cc:	2301      	movs	r3, #1
 80050ce:	e7f0      	b.n	80050b2 <_vfiprintf_r+0x1da>
 80050d0:	ab03      	add	r3, sp, #12
 80050d2:	462a      	mov	r2, r5
 80050d4:	a904      	add	r1, sp, #16
 80050d6:	4630      	mov	r0, r6
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <_vfiprintf_r+0x258>)
 80050dc:	e000      	b.n	80050e0 <_vfiprintf_r+0x208>
 80050de:	bf00      	nop
 80050e0:	4607      	mov	r7, r0
 80050e2:	1c78      	adds	r0, r7, #1
 80050e4:	d1d6      	bne.n	8005094 <_vfiprintf_r+0x1bc>
 80050e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050e8:	07d9      	lsls	r1, r3, #31
 80050ea:	d405      	bmi.n	80050f8 <_vfiprintf_r+0x220>
 80050ec:	89ab      	ldrh	r3, [r5, #12]
 80050ee:	059a      	lsls	r2, r3, #22
 80050f0:	d402      	bmi.n	80050f8 <_vfiprintf_r+0x220>
 80050f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050f4:	f7ff fe6b 	bl	8004dce <__retarget_lock_release_recursive>
 80050f8:	89ab      	ldrh	r3, [r5, #12]
 80050fa:	065b      	lsls	r3, r3, #25
 80050fc:	f53f af12 	bmi.w	8004f24 <_vfiprintf_r+0x4c>
 8005100:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005102:	e711      	b.n	8004f28 <_vfiprintf_r+0x50>
 8005104:	ab03      	add	r3, sp, #12
 8005106:	462a      	mov	r2, r5
 8005108:	a904      	add	r1, sp, #16
 800510a:	4630      	mov	r0, r6
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	4b08      	ldr	r3, [pc, #32]	; (8005130 <_vfiprintf_r+0x258>)
 8005110:	f000 f882 	bl	8005218 <_printf_i>
 8005114:	e7e4      	b.n	80050e0 <_vfiprintf_r+0x208>
 8005116:	bf00      	nop
 8005118:	08005b74 	.word	0x08005b74
 800511c:	08005b94 	.word	0x08005b94
 8005120:	08005b54 	.word	0x08005b54
 8005124:	08005bb4 	.word	0x08005bb4
 8005128:	08005bbe 	.word	0x08005bbe
 800512c:	00000000 	.word	0x00000000
 8005130:	08004eb3 	.word	0x08004eb3
 8005134:	08005bba 	.word	0x08005bba

08005138 <_printf_common>:
 8005138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800513c:	4616      	mov	r6, r2
 800513e:	4699      	mov	r9, r3
 8005140:	688a      	ldr	r2, [r1, #8]
 8005142:	4607      	mov	r7, r0
 8005144:	690b      	ldr	r3, [r1, #16]
 8005146:	460c      	mov	r4, r1
 8005148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800514c:	4293      	cmp	r3, r2
 800514e:	bfb8      	it	lt
 8005150:	4613      	movlt	r3, r2
 8005152:	6033      	str	r3, [r6, #0]
 8005154:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005158:	b10a      	cbz	r2, 800515e <_printf_common+0x26>
 800515a:	3301      	adds	r3, #1
 800515c:	6033      	str	r3, [r6, #0]
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	0699      	lsls	r1, r3, #26
 8005162:	bf42      	ittt	mi
 8005164:	6833      	ldrmi	r3, [r6, #0]
 8005166:	3302      	addmi	r3, #2
 8005168:	6033      	strmi	r3, [r6, #0]
 800516a:	6825      	ldr	r5, [r4, #0]
 800516c:	f015 0506 	ands.w	r5, r5, #6
 8005170:	d106      	bne.n	8005180 <_printf_common+0x48>
 8005172:	f104 0a19 	add.w	sl, r4, #25
 8005176:	68e3      	ldr	r3, [r4, #12]
 8005178:	6832      	ldr	r2, [r6, #0]
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	42ab      	cmp	r3, r5
 800517e:	dc29      	bgt.n	80051d4 <_printf_common+0x9c>
 8005180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005184:	1e13      	subs	r3, r2, #0
 8005186:	6822      	ldr	r2, [r4, #0]
 8005188:	bf18      	it	ne
 800518a:	2301      	movne	r3, #1
 800518c:	0692      	lsls	r2, r2, #26
 800518e:	d42e      	bmi.n	80051ee <_printf_common+0xb6>
 8005190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005194:	4649      	mov	r1, r9
 8005196:	4638      	mov	r0, r7
 8005198:	47c0      	blx	r8
 800519a:	3001      	adds	r0, #1
 800519c:	d021      	beq.n	80051e2 <_printf_common+0xaa>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	341a      	adds	r4, #26
 80051a2:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 80051a6:	f003 0306 	and.w	r3, r3, #6
 80051aa:	6832      	ldr	r2, [r6, #0]
 80051ac:	2600      	movs	r6, #0
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80051b4:	bf08      	it	eq
 80051b6:	1aad      	subeq	r5, r5, r2
 80051b8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80051bc:	bf14      	ite	ne
 80051be:	2500      	movne	r5, #0
 80051c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051c4:	4293      	cmp	r3, r2
 80051c6:	bfc4      	itt	gt
 80051c8:	1a9b      	subgt	r3, r3, r2
 80051ca:	18ed      	addgt	r5, r5, r3
 80051cc:	42b5      	cmp	r5, r6
 80051ce:	d11a      	bne.n	8005206 <_printf_common+0xce>
 80051d0:	2000      	movs	r0, #0
 80051d2:	e008      	b.n	80051e6 <_printf_common+0xae>
 80051d4:	2301      	movs	r3, #1
 80051d6:	4652      	mov	r2, sl
 80051d8:	4649      	mov	r1, r9
 80051da:	4638      	mov	r0, r7
 80051dc:	47c0      	blx	r8
 80051de:	3001      	adds	r0, #1
 80051e0:	d103      	bne.n	80051ea <_printf_common+0xb2>
 80051e2:	f04f 30ff 	mov.w	r0, #4294967295
 80051e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ea:	3501      	adds	r5, #1
 80051ec:	e7c3      	b.n	8005176 <_printf_common+0x3e>
 80051ee:	18e1      	adds	r1, r4, r3
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	2030      	movs	r0, #48	; 0x30
 80051f4:	3302      	adds	r3, #2
 80051f6:	4422      	add	r2, r4
 80051f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005204:	e7c4      	b.n	8005190 <_printf_common+0x58>
 8005206:	2301      	movs	r3, #1
 8005208:	4622      	mov	r2, r4
 800520a:	4649      	mov	r1, r9
 800520c:	4638      	mov	r0, r7
 800520e:	47c0      	blx	r8
 8005210:	3001      	adds	r0, #1
 8005212:	d0e6      	beq.n	80051e2 <_printf_common+0xaa>
 8005214:	3601      	adds	r6, #1
 8005216:	e7d9      	b.n	80051cc <_printf_common+0x94>

08005218 <_printf_i>:
 8005218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800521c:	460c      	mov	r4, r1
 800521e:	4691      	mov	r9, r2
 8005220:	4680      	mov	r8, r0
 8005222:	469a      	mov	sl, r3
 8005224:	7e27      	ldrb	r7, [r4, #24]
 8005226:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800522a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800522c:	2f78      	cmp	r7, #120	; 0x78
 800522e:	d807      	bhi.n	8005240 <_printf_i+0x28>
 8005230:	2f62      	cmp	r7, #98	; 0x62
 8005232:	d80a      	bhi.n	800524a <_printf_i+0x32>
 8005234:	2f00      	cmp	r7, #0
 8005236:	f000 80d8 	beq.w	80053ea <_printf_i+0x1d2>
 800523a:	2f58      	cmp	r7, #88	; 0x58
 800523c:	f000 80a3 	beq.w	8005386 <_printf_i+0x16e>
 8005240:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005244:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005248:	e03a      	b.n	80052c0 <_printf_i+0xa8>
 800524a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800524e:	2b15      	cmp	r3, #21
 8005250:	d8f6      	bhi.n	8005240 <_printf_i+0x28>
 8005252:	a001      	add	r0, pc, #4	; (adr r0, 8005258 <_printf_i+0x40>)
 8005254:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005258:	080052b1 	.word	0x080052b1
 800525c:	080052c5 	.word	0x080052c5
 8005260:	08005241 	.word	0x08005241
 8005264:	08005241 	.word	0x08005241
 8005268:	08005241 	.word	0x08005241
 800526c:	08005241 	.word	0x08005241
 8005270:	080052c5 	.word	0x080052c5
 8005274:	08005241 	.word	0x08005241
 8005278:	08005241 	.word	0x08005241
 800527c:	08005241 	.word	0x08005241
 8005280:	08005241 	.word	0x08005241
 8005284:	080053d1 	.word	0x080053d1
 8005288:	080052f5 	.word	0x080052f5
 800528c:	080053b3 	.word	0x080053b3
 8005290:	08005241 	.word	0x08005241
 8005294:	08005241 	.word	0x08005241
 8005298:	080053f3 	.word	0x080053f3
 800529c:	08005241 	.word	0x08005241
 80052a0:	080052f5 	.word	0x080052f5
 80052a4:	08005241 	.word	0x08005241
 80052a8:	08005241 	.word	0x08005241
 80052ac:	080053bb 	.word	0x080053bb
 80052b0:	680b      	ldr	r3, [r1, #0]
 80052b2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052b6:	1d1a      	adds	r2, r3, #4
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	600a      	str	r2, [r1, #0]
 80052bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0a3      	b.n	800540c <_printf_i+0x1f4>
 80052c4:	6825      	ldr	r5, [r4, #0]
 80052c6:	6808      	ldr	r0, [r1, #0]
 80052c8:	062e      	lsls	r6, r5, #24
 80052ca:	f100 0304 	add.w	r3, r0, #4
 80052ce:	d50a      	bpl.n	80052e6 <_printf_i+0xce>
 80052d0:	6805      	ldr	r5, [r0, #0]
 80052d2:	600b      	str	r3, [r1, #0]
 80052d4:	2d00      	cmp	r5, #0
 80052d6:	da03      	bge.n	80052e0 <_printf_i+0xc8>
 80052d8:	232d      	movs	r3, #45	; 0x2d
 80052da:	426d      	negs	r5, r5
 80052dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e0:	485e      	ldr	r0, [pc, #376]	; (800545c <_printf_i+0x244>)
 80052e2:	230a      	movs	r3, #10
 80052e4:	e019      	b.n	800531a <_printf_i+0x102>
 80052e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052ea:	6805      	ldr	r5, [r0, #0]
 80052ec:	600b      	str	r3, [r1, #0]
 80052ee:	bf18      	it	ne
 80052f0:	b22d      	sxthne	r5, r5
 80052f2:	e7ef      	b.n	80052d4 <_printf_i+0xbc>
 80052f4:	680b      	ldr	r3, [r1, #0]
 80052f6:	6825      	ldr	r5, [r4, #0]
 80052f8:	1d18      	adds	r0, r3, #4
 80052fa:	6008      	str	r0, [r1, #0]
 80052fc:	0628      	lsls	r0, r5, #24
 80052fe:	d501      	bpl.n	8005304 <_printf_i+0xec>
 8005300:	681d      	ldr	r5, [r3, #0]
 8005302:	e002      	b.n	800530a <_printf_i+0xf2>
 8005304:	0669      	lsls	r1, r5, #25
 8005306:	d5fb      	bpl.n	8005300 <_printf_i+0xe8>
 8005308:	881d      	ldrh	r5, [r3, #0]
 800530a:	2f6f      	cmp	r7, #111	; 0x6f
 800530c:	4853      	ldr	r0, [pc, #332]	; (800545c <_printf_i+0x244>)
 800530e:	bf0c      	ite	eq
 8005310:	2308      	moveq	r3, #8
 8005312:	230a      	movne	r3, #10
 8005314:	2100      	movs	r1, #0
 8005316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800531a:	6866      	ldr	r6, [r4, #4]
 800531c:	2e00      	cmp	r6, #0
 800531e:	60a6      	str	r6, [r4, #8]
 8005320:	bfa2      	ittt	ge
 8005322:	6821      	ldrge	r1, [r4, #0]
 8005324:	f021 0104 	bicge.w	r1, r1, #4
 8005328:	6021      	strge	r1, [r4, #0]
 800532a:	b90d      	cbnz	r5, 8005330 <_printf_i+0x118>
 800532c:	2e00      	cmp	r6, #0
 800532e:	d04d      	beq.n	80053cc <_printf_i+0x1b4>
 8005330:	4616      	mov	r6, r2
 8005332:	fbb5 f1f3 	udiv	r1, r5, r3
 8005336:	fb03 5711 	mls	r7, r3, r1, r5
 800533a:	5dc7      	ldrb	r7, [r0, r7]
 800533c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005340:	462f      	mov	r7, r5
 8005342:	460d      	mov	r5, r1
 8005344:	42bb      	cmp	r3, r7
 8005346:	d9f4      	bls.n	8005332 <_printf_i+0x11a>
 8005348:	2b08      	cmp	r3, #8
 800534a:	d10b      	bne.n	8005364 <_printf_i+0x14c>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	07df      	lsls	r7, r3, #31
 8005350:	d508      	bpl.n	8005364 <_printf_i+0x14c>
 8005352:	6923      	ldr	r3, [r4, #16]
 8005354:	6861      	ldr	r1, [r4, #4]
 8005356:	4299      	cmp	r1, r3
 8005358:	bfde      	ittt	le
 800535a:	2330      	movle	r3, #48	; 0x30
 800535c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005360:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005364:	1b92      	subs	r2, r2, r6
 8005366:	6122      	str	r2, [r4, #16]
 8005368:	464b      	mov	r3, r9
 800536a:	aa03      	add	r2, sp, #12
 800536c:	4621      	mov	r1, r4
 800536e:	4640      	mov	r0, r8
 8005370:	f8cd a000 	str.w	sl, [sp]
 8005374:	f7ff fee0 	bl	8005138 <_printf_common>
 8005378:	3001      	adds	r0, #1
 800537a:	d14c      	bne.n	8005416 <_printf_i+0x1fe>
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	b004      	add	sp, #16
 8005382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005386:	4835      	ldr	r0, [pc, #212]	; (800545c <_printf_i+0x244>)
 8005388:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	680e      	ldr	r6, [r1, #0]
 8005390:	061f      	lsls	r7, r3, #24
 8005392:	f856 5b04 	ldr.w	r5, [r6], #4
 8005396:	600e      	str	r6, [r1, #0]
 8005398:	d514      	bpl.n	80053c4 <_printf_i+0x1ac>
 800539a:	07d9      	lsls	r1, r3, #31
 800539c:	bf44      	itt	mi
 800539e:	f043 0320 	orrmi.w	r3, r3, #32
 80053a2:	6023      	strmi	r3, [r4, #0]
 80053a4:	b91d      	cbnz	r5, 80053ae <_printf_i+0x196>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	f023 0320 	bic.w	r3, r3, #32
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	2310      	movs	r3, #16
 80053b0:	e7b0      	b.n	8005314 <_printf_i+0xfc>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	f043 0320 	orr.w	r3, r3, #32
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	2378      	movs	r3, #120	; 0x78
 80053bc:	4828      	ldr	r0, [pc, #160]	; (8005460 <_printf_i+0x248>)
 80053be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053c2:	e7e3      	b.n	800538c <_printf_i+0x174>
 80053c4:	065e      	lsls	r6, r3, #25
 80053c6:	bf48      	it	mi
 80053c8:	b2ad      	uxthmi	r5, r5
 80053ca:	e7e6      	b.n	800539a <_printf_i+0x182>
 80053cc:	4616      	mov	r6, r2
 80053ce:	e7bb      	b.n	8005348 <_printf_i+0x130>
 80053d0:	680b      	ldr	r3, [r1, #0]
 80053d2:	6826      	ldr	r6, [r4, #0]
 80053d4:	1d1d      	adds	r5, r3, #4
 80053d6:	6960      	ldr	r0, [r4, #20]
 80053d8:	600d      	str	r5, [r1, #0]
 80053da:	0635      	lsls	r5, r6, #24
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	d501      	bpl.n	80053e4 <_printf_i+0x1cc>
 80053e0:	6018      	str	r0, [r3, #0]
 80053e2:	e002      	b.n	80053ea <_printf_i+0x1d2>
 80053e4:	0671      	lsls	r1, r6, #25
 80053e6:	d5fb      	bpl.n	80053e0 <_printf_i+0x1c8>
 80053e8:	8018      	strh	r0, [r3, #0]
 80053ea:	2300      	movs	r3, #0
 80053ec:	4616      	mov	r6, r2
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	e7ba      	b.n	8005368 <_printf_i+0x150>
 80053f2:	680b      	ldr	r3, [r1, #0]
 80053f4:	1d1a      	adds	r2, r3, #4
 80053f6:	600a      	str	r2, [r1, #0]
 80053f8:	2100      	movs	r1, #0
 80053fa:	681e      	ldr	r6, [r3, #0]
 80053fc:	6862      	ldr	r2, [r4, #4]
 80053fe:	4630      	mov	r0, r6
 8005400:	f000 fa9c 	bl	800593c <memchr>
 8005404:	b108      	cbz	r0, 800540a <_printf_i+0x1f2>
 8005406:	1b80      	subs	r0, r0, r6
 8005408:	6060      	str	r0, [r4, #4]
 800540a:	6863      	ldr	r3, [r4, #4]
 800540c:	6123      	str	r3, [r4, #16]
 800540e:	2300      	movs	r3, #0
 8005410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005414:	e7a8      	b.n	8005368 <_printf_i+0x150>
 8005416:	6923      	ldr	r3, [r4, #16]
 8005418:	4632      	mov	r2, r6
 800541a:	4649      	mov	r1, r9
 800541c:	4640      	mov	r0, r8
 800541e:	47d0      	blx	sl
 8005420:	3001      	adds	r0, #1
 8005422:	d0ab      	beq.n	800537c <_printf_i+0x164>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	079b      	lsls	r3, r3, #30
 8005428:	d413      	bmi.n	8005452 <_printf_i+0x23a>
 800542a:	68e0      	ldr	r0, [r4, #12]
 800542c:	9b03      	ldr	r3, [sp, #12]
 800542e:	4298      	cmp	r0, r3
 8005430:	bfb8      	it	lt
 8005432:	4618      	movlt	r0, r3
 8005434:	e7a4      	b.n	8005380 <_printf_i+0x168>
 8005436:	2301      	movs	r3, #1
 8005438:	4632      	mov	r2, r6
 800543a:	4649      	mov	r1, r9
 800543c:	4640      	mov	r0, r8
 800543e:	47d0      	blx	sl
 8005440:	3001      	adds	r0, #1
 8005442:	d09b      	beq.n	800537c <_printf_i+0x164>
 8005444:	3501      	adds	r5, #1
 8005446:	68e3      	ldr	r3, [r4, #12]
 8005448:	9903      	ldr	r1, [sp, #12]
 800544a:	1a5b      	subs	r3, r3, r1
 800544c:	42ab      	cmp	r3, r5
 800544e:	dcf2      	bgt.n	8005436 <_printf_i+0x21e>
 8005450:	e7eb      	b.n	800542a <_printf_i+0x212>
 8005452:	2500      	movs	r5, #0
 8005454:	f104 0619 	add.w	r6, r4, #25
 8005458:	e7f5      	b.n	8005446 <_printf_i+0x22e>
 800545a:	bf00      	nop
 800545c:	08005bc5 	.word	0x08005bc5
 8005460:	08005bd6 	.word	0x08005bd6

08005464 <_sbrk_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	2300      	movs	r3, #0
 8005468:	4d05      	ldr	r5, [pc, #20]	; (8005480 <_sbrk_r+0x1c>)
 800546a:	4604      	mov	r4, r0
 800546c:	4608      	mov	r0, r1
 800546e:	602b      	str	r3, [r5, #0]
 8005470:	f7fb f90c 	bl	800068c <_sbrk>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_sbrk_r+0x1a>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	b103      	cbz	r3, 800547e <_sbrk_r+0x1a>
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	20004014 	.word	0x20004014

08005484 <__sread>:
 8005484:	b510      	push	{r4, lr}
 8005486:	460c      	mov	r4, r1
 8005488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548c:	f000 fac0 	bl	8005a10 <_read_r>
 8005490:	2800      	cmp	r0, #0
 8005492:	bfab      	itete	ge
 8005494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005496:	89a3      	ldrhlt	r3, [r4, #12]
 8005498:	181b      	addge	r3, r3, r0
 800549a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800549e:	bfac      	ite	ge
 80054a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80054a2:	81a3      	strhlt	r3, [r4, #12]
 80054a4:	bd10      	pop	{r4, pc}

080054a6 <__swrite>:
 80054a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054aa:	461f      	mov	r7, r3
 80054ac:	898b      	ldrh	r3, [r1, #12]
 80054ae:	4605      	mov	r5, r0
 80054b0:	460c      	mov	r4, r1
 80054b2:	05db      	lsls	r3, r3, #23
 80054b4:	4616      	mov	r6, r2
 80054b6:	d505      	bpl.n	80054c4 <__swrite+0x1e>
 80054b8:	2302      	movs	r3, #2
 80054ba:	2200      	movs	r2, #0
 80054bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c0:	f000 f9c6 	bl	8005850 <_lseek_r>
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	4632      	mov	r2, r6
 80054c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054cc:	4628      	mov	r0, r5
 80054ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054d2:	81a3      	strh	r3, [r4, #12]
 80054d4:	463b      	mov	r3, r7
 80054d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054da:	f000 b869 	b.w	80055b0 <_write_r>

080054de <__sseek>:
 80054de:	b510      	push	{r4, lr}
 80054e0:	460c      	mov	r4, r1
 80054e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e6:	f000 f9b3 	bl	8005850 <_lseek_r>
 80054ea:	1c43      	adds	r3, r0, #1
 80054ec:	89a3      	ldrh	r3, [r4, #12]
 80054ee:	bf15      	itete	ne
 80054f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80054f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054fa:	81a3      	strheq	r3, [r4, #12]
 80054fc:	bf18      	it	ne
 80054fe:	81a3      	strhne	r3, [r4, #12]
 8005500:	bd10      	pop	{r4, pc}

08005502 <__sclose>:
 8005502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005506:	f000 b8d3 	b.w	80056b0 <_close_r>
	...

0800550c <__swbuf_r>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	460e      	mov	r6, r1
 8005510:	4614      	mov	r4, r2
 8005512:	4605      	mov	r5, r0
 8005514:	b118      	cbz	r0, 800551e <__swbuf_r+0x12>
 8005516:	6983      	ldr	r3, [r0, #24]
 8005518:	b90b      	cbnz	r3, 800551e <__swbuf_r+0x12>
 800551a:	f7ff fbb9 	bl	8004c90 <__sinit>
 800551e:	4b21      	ldr	r3, [pc, #132]	; (80055a4 <__swbuf_r+0x98>)
 8005520:	429c      	cmp	r4, r3
 8005522:	d12b      	bne.n	800557c <__swbuf_r+0x70>
 8005524:	686c      	ldr	r4, [r5, #4]
 8005526:	69a3      	ldr	r3, [r4, #24]
 8005528:	60a3      	str	r3, [r4, #8]
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	071a      	lsls	r2, r3, #28
 800552e:	d52f      	bpl.n	8005590 <__swbuf_r+0x84>
 8005530:	6923      	ldr	r3, [r4, #16]
 8005532:	b36b      	cbz	r3, 8005590 <__swbuf_r+0x84>
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	b2f6      	uxtb	r6, r6
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	4637      	mov	r7, r6
 800553c:	1ac0      	subs	r0, r0, r3
 800553e:	6963      	ldr	r3, [r4, #20]
 8005540:	4283      	cmp	r3, r0
 8005542:	dc04      	bgt.n	800554e <__swbuf_r+0x42>
 8005544:	4621      	mov	r1, r4
 8005546:	4628      	mov	r0, r5
 8005548:	f000 f946 	bl	80057d8 <_fflush_r>
 800554c:	bb30      	cbnz	r0, 800559c <__swbuf_r+0x90>
 800554e:	68a3      	ldr	r3, [r4, #8]
 8005550:	3001      	adds	r0, #1
 8005552:	3b01      	subs	r3, #1
 8005554:	60a3      	str	r3, [r4, #8]
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	6022      	str	r2, [r4, #0]
 800555c:	701e      	strb	r6, [r3, #0]
 800555e:	6963      	ldr	r3, [r4, #20]
 8005560:	4283      	cmp	r3, r0
 8005562:	d004      	beq.n	800556e <__swbuf_r+0x62>
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	07db      	lsls	r3, r3, #31
 8005568:	d506      	bpl.n	8005578 <__swbuf_r+0x6c>
 800556a:	2e0a      	cmp	r6, #10
 800556c:	d104      	bne.n	8005578 <__swbuf_r+0x6c>
 800556e:	4621      	mov	r1, r4
 8005570:	4628      	mov	r0, r5
 8005572:	f000 f931 	bl	80057d8 <_fflush_r>
 8005576:	b988      	cbnz	r0, 800559c <__swbuf_r+0x90>
 8005578:	4638      	mov	r0, r7
 800557a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800557c:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <__swbuf_r+0x9c>)
 800557e:	429c      	cmp	r4, r3
 8005580:	d101      	bne.n	8005586 <__swbuf_r+0x7a>
 8005582:	68ac      	ldr	r4, [r5, #8]
 8005584:	e7cf      	b.n	8005526 <__swbuf_r+0x1a>
 8005586:	4b09      	ldr	r3, [pc, #36]	; (80055ac <__swbuf_r+0xa0>)
 8005588:	429c      	cmp	r4, r3
 800558a:	bf08      	it	eq
 800558c:	68ec      	ldreq	r4, [r5, #12]
 800558e:	e7ca      	b.n	8005526 <__swbuf_r+0x1a>
 8005590:	4621      	mov	r1, r4
 8005592:	4628      	mov	r0, r5
 8005594:	f000 f81e 	bl	80055d4 <__swsetup_r>
 8005598:	2800      	cmp	r0, #0
 800559a:	d0cb      	beq.n	8005534 <__swbuf_r+0x28>
 800559c:	f04f 37ff 	mov.w	r7, #4294967295
 80055a0:	e7ea      	b.n	8005578 <__swbuf_r+0x6c>
 80055a2:	bf00      	nop
 80055a4:	08005b74 	.word	0x08005b74
 80055a8:	08005b94 	.word	0x08005b94
 80055ac:	08005b54 	.word	0x08005b54

080055b0 <_write_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4604      	mov	r4, r0
 80055b4:	4d06      	ldr	r5, [pc, #24]	; (80055d0 <_write_r+0x20>)
 80055b6:	4608      	mov	r0, r1
 80055b8:	4611      	mov	r1, r2
 80055ba:	2200      	movs	r2, #0
 80055bc:	602a      	str	r2, [r5, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	f7fb f813 	bl	80005ea <_write>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d102      	bne.n	80055ce <_write_r+0x1e>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	b103      	cbz	r3, 80055ce <_write_r+0x1e>
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	20004014 	.word	0x20004014

080055d4 <__swsetup_r>:
 80055d4:	4b32      	ldr	r3, [pc, #200]	; (80056a0 <__swsetup_r+0xcc>)
 80055d6:	b570      	push	{r4, r5, r6, lr}
 80055d8:	681d      	ldr	r5, [r3, #0]
 80055da:	4606      	mov	r6, r0
 80055dc:	460c      	mov	r4, r1
 80055de:	b125      	cbz	r5, 80055ea <__swsetup_r+0x16>
 80055e0:	69ab      	ldr	r3, [r5, #24]
 80055e2:	b913      	cbnz	r3, 80055ea <__swsetup_r+0x16>
 80055e4:	4628      	mov	r0, r5
 80055e6:	f7ff fb53 	bl	8004c90 <__sinit>
 80055ea:	4b2e      	ldr	r3, [pc, #184]	; (80056a4 <__swsetup_r+0xd0>)
 80055ec:	429c      	cmp	r4, r3
 80055ee:	d10f      	bne.n	8005610 <__swsetup_r+0x3c>
 80055f0:	686c      	ldr	r4, [r5, #4]
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055f8:	0719      	lsls	r1, r3, #28
 80055fa:	d42c      	bmi.n	8005656 <__swsetup_r+0x82>
 80055fc:	06dd      	lsls	r5, r3, #27
 80055fe:	d411      	bmi.n	8005624 <__swsetup_r+0x50>
 8005600:	2309      	movs	r3, #9
 8005602:	6033      	str	r3, [r6, #0]
 8005604:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	81a3      	strh	r3, [r4, #12]
 800560e:	e03e      	b.n	800568e <__swsetup_r+0xba>
 8005610:	4b25      	ldr	r3, [pc, #148]	; (80056a8 <__swsetup_r+0xd4>)
 8005612:	429c      	cmp	r4, r3
 8005614:	d101      	bne.n	800561a <__swsetup_r+0x46>
 8005616:	68ac      	ldr	r4, [r5, #8]
 8005618:	e7eb      	b.n	80055f2 <__swsetup_r+0x1e>
 800561a:	4b24      	ldr	r3, [pc, #144]	; (80056ac <__swsetup_r+0xd8>)
 800561c:	429c      	cmp	r4, r3
 800561e:	bf08      	it	eq
 8005620:	68ec      	ldreq	r4, [r5, #12]
 8005622:	e7e6      	b.n	80055f2 <__swsetup_r+0x1e>
 8005624:	0758      	lsls	r0, r3, #29
 8005626:	d512      	bpl.n	800564e <__swsetup_r+0x7a>
 8005628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800562a:	b141      	cbz	r1, 800563e <__swsetup_r+0x6a>
 800562c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005630:	4299      	cmp	r1, r3
 8005632:	d002      	beq.n	800563a <__swsetup_r+0x66>
 8005634:	4630      	mov	r0, r6
 8005636:	f000 f99b 	bl	8005970 <_free_r>
 800563a:	2300      	movs	r3, #0
 800563c:	6363      	str	r3, [r4, #52]	; 0x34
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005644:	81a3      	strh	r3, [r4, #12]
 8005646:	2300      	movs	r3, #0
 8005648:	6063      	str	r3, [r4, #4]
 800564a:	6923      	ldr	r3, [r4, #16]
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	89a3      	ldrh	r3, [r4, #12]
 8005650:	f043 0308 	orr.w	r3, r3, #8
 8005654:	81a3      	strh	r3, [r4, #12]
 8005656:	6923      	ldr	r3, [r4, #16]
 8005658:	b94b      	cbnz	r3, 800566e <__swsetup_r+0x9a>
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005664:	d003      	beq.n	800566e <__swsetup_r+0x9a>
 8005666:	4621      	mov	r1, r4
 8005668:	4630      	mov	r0, r6
 800566a:	f000 f927 	bl	80058bc <__smakebuf_r>
 800566e:	89a0      	ldrh	r0, [r4, #12]
 8005670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005674:	f010 0301 	ands.w	r3, r0, #1
 8005678:	d00a      	beq.n	8005690 <__swsetup_r+0xbc>
 800567a:	2300      	movs	r3, #0
 800567c:	60a3      	str	r3, [r4, #8]
 800567e:	6963      	ldr	r3, [r4, #20]
 8005680:	425b      	negs	r3, r3
 8005682:	61a3      	str	r3, [r4, #24]
 8005684:	6923      	ldr	r3, [r4, #16]
 8005686:	b943      	cbnz	r3, 800569a <__swsetup_r+0xc6>
 8005688:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800568c:	d1ba      	bne.n	8005604 <__swsetup_r+0x30>
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	0781      	lsls	r1, r0, #30
 8005692:	bf58      	it	pl
 8005694:	6963      	ldrpl	r3, [r4, #20]
 8005696:	60a3      	str	r3, [r4, #8]
 8005698:	e7f4      	b.n	8005684 <__swsetup_r+0xb0>
 800569a:	2000      	movs	r0, #0
 800569c:	e7f7      	b.n	800568e <__swsetup_r+0xba>
 800569e:	bf00      	nop
 80056a0:	2000001c 	.word	0x2000001c
 80056a4:	08005b74 	.word	0x08005b74
 80056a8:	08005b94 	.word	0x08005b94
 80056ac:	08005b54 	.word	0x08005b54

080056b0 <_close_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	2300      	movs	r3, #0
 80056b4:	4d05      	ldr	r5, [pc, #20]	; (80056cc <_close_r+0x1c>)
 80056b6:	4604      	mov	r4, r0
 80056b8:	4608      	mov	r0, r1
 80056ba:	602b      	str	r3, [r5, #0]
 80056bc:	f7fa ffb1 	bl	8000622 <_close>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d102      	bne.n	80056ca <_close_r+0x1a>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	b103      	cbz	r3, 80056ca <_close_r+0x1a>
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
 80056cc:	20004014 	.word	0x20004014

080056d0 <__sflush_r>:
 80056d0:	898a      	ldrh	r2, [r1, #12]
 80056d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d6:	4605      	mov	r5, r0
 80056d8:	0710      	lsls	r0, r2, #28
 80056da:	460c      	mov	r4, r1
 80056dc:	d458      	bmi.n	8005790 <__sflush_r+0xc0>
 80056de:	684b      	ldr	r3, [r1, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	dc05      	bgt.n	80056f0 <__sflush_r+0x20>
 80056e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	dc02      	bgt.n	80056f0 <__sflush_r+0x20>
 80056ea:	2000      	movs	r0, #0
 80056ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056f2:	2e00      	cmp	r6, #0
 80056f4:	d0f9      	beq.n	80056ea <__sflush_r+0x1a>
 80056f6:	2300      	movs	r3, #0
 80056f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056fc:	682f      	ldr	r7, [r5, #0]
 80056fe:	602b      	str	r3, [r5, #0]
 8005700:	d032      	beq.n	8005768 <__sflush_r+0x98>
 8005702:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005704:	89a3      	ldrh	r3, [r4, #12]
 8005706:	075a      	lsls	r2, r3, #29
 8005708:	d505      	bpl.n	8005716 <__sflush_r+0x46>
 800570a:	6863      	ldr	r3, [r4, #4]
 800570c:	1ac0      	subs	r0, r0, r3
 800570e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005710:	b10b      	cbz	r3, 8005716 <__sflush_r+0x46>
 8005712:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005714:	1ac0      	subs	r0, r0, r3
 8005716:	2300      	movs	r3, #0
 8005718:	4602      	mov	r2, r0
 800571a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800571c:	4628      	mov	r0, r5
 800571e:	6a21      	ldr	r1, [r4, #32]
 8005720:	47b0      	blx	r6
 8005722:	1c43      	adds	r3, r0, #1
 8005724:	89a3      	ldrh	r3, [r4, #12]
 8005726:	d106      	bne.n	8005736 <__sflush_r+0x66>
 8005728:	6829      	ldr	r1, [r5, #0]
 800572a:	291d      	cmp	r1, #29
 800572c:	d82c      	bhi.n	8005788 <__sflush_r+0xb8>
 800572e:	4a29      	ldr	r2, [pc, #164]	; (80057d4 <__sflush_r+0x104>)
 8005730:	40ca      	lsrs	r2, r1
 8005732:	07d6      	lsls	r6, r2, #31
 8005734:	d528      	bpl.n	8005788 <__sflush_r+0xb8>
 8005736:	2200      	movs	r2, #0
 8005738:	04d9      	lsls	r1, r3, #19
 800573a:	6062      	str	r2, [r4, #4]
 800573c:	6922      	ldr	r2, [r4, #16]
 800573e:	6022      	str	r2, [r4, #0]
 8005740:	d504      	bpl.n	800574c <__sflush_r+0x7c>
 8005742:	1c42      	adds	r2, r0, #1
 8005744:	d101      	bne.n	800574a <__sflush_r+0x7a>
 8005746:	682b      	ldr	r3, [r5, #0]
 8005748:	b903      	cbnz	r3, 800574c <__sflush_r+0x7c>
 800574a:	6560      	str	r0, [r4, #84]	; 0x54
 800574c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800574e:	602f      	str	r7, [r5, #0]
 8005750:	2900      	cmp	r1, #0
 8005752:	d0ca      	beq.n	80056ea <__sflush_r+0x1a>
 8005754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005758:	4299      	cmp	r1, r3
 800575a:	d002      	beq.n	8005762 <__sflush_r+0x92>
 800575c:	4628      	mov	r0, r5
 800575e:	f000 f907 	bl	8005970 <_free_r>
 8005762:	2000      	movs	r0, #0
 8005764:	6360      	str	r0, [r4, #52]	; 0x34
 8005766:	e7c1      	b.n	80056ec <__sflush_r+0x1c>
 8005768:	6a21      	ldr	r1, [r4, #32]
 800576a:	2301      	movs	r3, #1
 800576c:	4628      	mov	r0, r5
 800576e:	47b0      	blx	r6
 8005770:	1c41      	adds	r1, r0, #1
 8005772:	d1c7      	bne.n	8005704 <__sflush_r+0x34>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0c4      	beq.n	8005704 <__sflush_r+0x34>
 800577a:	2b1d      	cmp	r3, #29
 800577c:	d001      	beq.n	8005782 <__sflush_r+0xb2>
 800577e:	2b16      	cmp	r3, #22
 8005780:	d101      	bne.n	8005786 <__sflush_r+0xb6>
 8005782:	602f      	str	r7, [r5, #0]
 8005784:	e7b1      	b.n	80056ea <__sflush_r+0x1a>
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800578c:	81a3      	strh	r3, [r4, #12]
 800578e:	e7ad      	b.n	80056ec <__sflush_r+0x1c>
 8005790:	690f      	ldr	r7, [r1, #16]
 8005792:	2f00      	cmp	r7, #0
 8005794:	d0a9      	beq.n	80056ea <__sflush_r+0x1a>
 8005796:	0793      	lsls	r3, r2, #30
 8005798:	680e      	ldr	r6, [r1, #0]
 800579a:	600f      	str	r7, [r1, #0]
 800579c:	bf0c      	ite	eq
 800579e:	694b      	ldreq	r3, [r1, #20]
 80057a0:	2300      	movne	r3, #0
 80057a2:	eba6 0807 	sub.w	r8, r6, r7
 80057a6:	608b      	str	r3, [r1, #8]
 80057a8:	f1b8 0f00 	cmp.w	r8, #0
 80057ac:	dd9d      	ble.n	80056ea <__sflush_r+0x1a>
 80057ae:	4643      	mov	r3, r8
 80057b0:	463a      	mov	r2, r7
 80057b2:	6a21      	ldr	r1, [r4, #32]
 80057b4:	4628      	mov	r0, r5
 80057b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057b8:	47b0      	blx	r6
 80057ba:	2800      	cmp	r0, #0
 80057bc:	dc06      	bgt.n	80057cc <__sflush_r+0xfc>
 80057be:	89a3      	ldrh	r3, [r4, #12]
 80057c0:	f04f 30ff 	mov.w	r0, #4294967295
 80057c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057c8:	81a3      	strh	r3, [r4, #12]
 80057ca:	e78f      	b.n	80056ec <__sflush_r+0x1c>
 80057cc:	4407      	add	r7, r0
 80057ce:	eba8 0800 	sub.w	r8, r8, r0
 80057d2:	e7e9      	b.n	80057a8 <__sflush_r+0xd8>
 80057d4:	20400001 	.word	0x20400001

080057d8 <_fflush_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	690b      	ldr	r3, [r1, #16]
 80057dc:	4605      	mov	r5, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	b913      	cbnz	r3, 80057e8 <_fflush_r+0x10>
 80057e2:	2500      	movs	r5, #0
 80057e4:	4628      	mov	r0, r5
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
 80057e8:	b118      	cbz	r0, 80057f2 <_fflush_r+0x1a>
 80057ea:	6983      	ldr	r3, [r0, #24]
 80057ec:	b90b      	cbnz	r3, 80057f2 <_fflush_r+0x1a>
 80057ee:	f7ff fa4f 	bl	8004c90 <__sinit>
 80057f2:	4b14      	ldr	r3, [pc, #80]	; (8005844 <_fflush_r+0x6c>)
 80057f4:	429c      	cmp	r4, r3
 80057f6:	d11b      	bne.n	8005830 <_fflush_r+0x58>
 80057f8:	686c      	ldr	r4, [r5, #4]
 80057fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0ef      	beq.n	80057e2 <_fflush_r+0xa>
 8005802:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005804:	07d0      	lsls	r0, r2, #31
 8005806:	d404      	bmi.n	8005812 <_fflush_r+0x3a>
 8005808:	0599      	lsls	r1, r3, #22
 800580a:	d402      	bmi.n	8005812 <_fflush_r+0x3a>
 800580c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800580e:	f7ff fadd 	bl	8004dcc <__retarget_lock_acquire_recursive>
 8005812:	4628      	mov	r0, r5
 8005814:	4621      	mov	r1, r4
 8005816:	f7ff ff5b 	bl	80056d0 <__sflush_r>
 800581a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800581c:	4605      	mov	r5, r0
 800581e:	07da      	lsls	r2, r3, #31
 8005820:	d4e0      	bmi.n	80057e4 <_fflush_r+0xc>
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	059b      	lsls	r3, r3, #22
 8005826:	d4dd      	bmi.n	80057e4 <_fflush_r+0xc>
 8005828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800582a:	f7ff fad0 	bl	8004dce <__retarget_lock_release_recursive>
 800582e:	e7d9      	b.n	80057e4 <_fflush_r+0xc>
 8005830:	4b05      	ldr	r3, [pc, #20]	; (8005848 <_fflush_r+0x70>)
 8005832:	429c      	cmp	r4, r3
 8005834:	d101      	bne.n	800583a <_fflush_r+0x62>
 8005836:	68ac      	ldr	r4, [r5, #8]
 8005838:	e7df      	b.n	80057fa <_fflush_r+0x22>
 800583a:	4b04      	ldr	r3, [pc, #16]	; (800584c <_fflush_r+0x74>)
 800583c:	429c      	cmp	r4, r3
 800583e:	bf08      	it	eq
 8005840:	68ec      	ldreq	r4, [r5, #12]
 8005842:	e7da      	b.n	80057fa <_fflush_r+0x22>
 8005844:	08005b74 	.word	0x08005b74
 8005848:	08005b94 	.word	0x08005b94
 800584c:	08005b54 	.word	0x08005b54

08005850 <_lseek_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4604      	mov	r4, r0
 8005854:	4d06      	ldr	r5, [pc, #24]	; (8005870 <_lseek_r+0x20>)
 8005856:	4608      	mov	r0, r1
 8005858:	4611      	mov	r1, r2
 800585a:	2200      	movs	r2, #0
 800585c:	602a      	str	r2, [r5, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	f7fa ff06 	bl	8000670 <_lseek>
 8005864:	1c43      	adds	r3, r0, #1
 8005866:	d102      	bne.n	800586e <_lseek_r+0x1e>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	b103      	cbz	r3, 800586e <_lseek_r+0x1e>
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	20004014 	.word	0x20004014

08005874 <__swhatbuf_r>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	460e      	mov	r6, r1
 8005878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800587c:	b096      	sub	sp, #88	; 0x58
 800587e:	4614      	mov	r4, r2
 8005880:	2900      	cmp	r1, #0
 8005882:	461d      	mov	r5, r3
 8005884:	da07      	bge.n	8005896 <__swhatbuf_r+0x22>
 8005886:	2300      	movs	r3, #0
 8005888:	602b      	str	r3, [r5, #0]
 800588a:	89b3      	ldrh	r3, [r6, #12]
 800588c:	061a      	lsls	r2, r3, #24
 800588e:	d410      	bmi.n	80058b2 <__swhatbuf_r+0x3e>
 8005890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005894:	e00e      	b.n	80058b4 <__swhatbuf_r+0x40>
 8005896:	466a      	mov	r2, sp
 8005898:	f000 f8cc 	bl	8005a34 <_fstat_r>
 800589c:	2800      	cmp	r0, #0
 800589e:	dbf2      	blt.n	8005886 <__swhatbuf_r+0x12>
 80058a0:	9a01      	ldr	r2, [sp, #4]
 80058a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058aa:	425a      	negs	r2, r3
 80058ac:	415a      	adcs	r2, r3
 80058ae:	602a      	str	r2, [r5, #0]
 80058b0:	e7ee      	b.n	8005890 <__swhatbuf_r+0x1c>
 80058b2:	2340      	movs	r3, #64	; 0x40
 80058b4:	2000      	movs	r0, #0
 80058b6:	6023      	str	r3, [r4, #0]
 80058b8:	b016      	add	sp, #88	; 0x58
 80058ba:	bd70      	pop	{r4, r5, r6, pc}

080058bc <__smakebuf_r>:
 80058bc:	898b      	ldrh	r3, [r1, #12]
 80058be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058c0:	079d      	lsls	r5, r3, #30
 80058c2:	4606      	mov	r6, r0
 80058c4:	460c      	mov	r4, r1
 80058c6:	d507      	bpl.n	80058d8 <__smakebuf_r+0x1c>
 80058c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	6123      	str	r3, [r4, #16]
 80058d0:	2301      	movs	r3, #1
 80058d2:	6163      	str	r3, [r4, #20]
 80058d4:	b002      	add	sp, #8
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
 80058d8:	ab01      	add	r3, sp, #4
 80058da:	466a      	mov	r2, sp
 80058dc:	f7ff ffca 	bl	8005874 <__swhatbuf_r>
 80058e0:	9900      	ldr	r1, [sp, #0]
 80058e2:	4605      	mov	r5, r0
 80058e4:	4630      	mov	r0, r6
 80058e6:	f7ff fa73 	bl	8004dd0 <_malloc_r>
 80058ea:	b948      	cbnz	r0, 8005900 <__smakebuf_r+0x44>
 80058ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058f0:	059a      	lsls	r2, r3, #22
 80058f2:	d4ef      	bmi.n	80058d4 <__smakebuf_r+0x18>
 80058f4:	f023 0303 	bic.w	r3, r3, #3
 80058f8:	f043 0302 	orr.w	r3, r3, #2
 80058fc:	81a3      	strh	r3, [r4, #12]
 80058fe:	e7e3      	b.n	80058c8 <__smakebuf_r+0xc>
 8005900:	4b0d      	ldr	r3, [pc, #52]	; (8005938 <__smakebuf_r+0x7c>)
 8005902:	62b3      	str	r3, [r6, #40]	; 0x28
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	6020      	str	r0, [r4, #0]
 8005908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590c:	6120      	str	r0, [r4, #16]
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	9b00      	ldr	r3, [sp, #0]
 8005912:	6163      	str	r3, [r4, #20]
 8005914:	9b01      	ldr	r3, [sp, #4]
 8005916:	b15b      	cbz	r3, 8005930 <__smakebuf_r+0x74>
 8005918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800591c:	4630      	mov	r0, r6
 800591e:	f000 f89b 	bl	8005a58 <_isatty_r>
 8005922:	b128      	cbz	r0, 8005930 <__smakebuf_r+0x74>
 8005924:	89a3      	ldrh	r3, [r4, #12]
 8005926:	f023 0303 	bic.w	r3, r3, #3
 800592a:	f043 0301 	orr.w	r3, r3, #1
 800592e:	81a3      	strh	r3, [r4, #12]
 8005930:	89a0      	ldrh	r0, [r4, #12]
 8005932:	4305      	orrs	r5, r0
 8005934:	81a5      	strh	r5, [r4, #12]
 8005936:	e7cd      	b.n	80058d4 <__smakebuf_r+0x18>
 8005938:	08004c29 	.word	0x08004c29

0800593c <memchr>:
 800593c:	b2c9      	uxtb	r1, r1
 800593e:	4402      	add	r2, r0
 8005940:	b510      	push	{r4, lr}
 8005942:	4290      	cmp	r0, r2
 8005944:	4603      	mov	r3, r0
 8005946:	d101      	bne.n	800594c <memchr+0x10>
 8005948:	2300      	movs	r3, #0
 800594a:	e003      	b.n	8005954 <memchr+0x18>
 800594c:	781c      	ldrb	r4, [r3, #0]
 800594e:	3001      	adds	r0, #1
 8005950:	428c      	cmp	r4, r1
 8005952:	d1f6      	bne.n	8005942 <memchr+0x6>
 8005954:	4618      	mov	r0, r3
 8005956:	bd10      	pop	{r4, pc}

08005958 <__malloc_lock>:
 8005958:	4801      	ldr	r0, [pc, #4]	; (8005960 <__malloc_lock+0x8>)
 800595a:	f7ff ba37 	b.w	8004dcc <__retarget_lock_acquire_recursive>
 800595e:	bf00      	nop
 8005960:	2000400c 	.word	0x2000400c

08005964 <__malloc_unlock>:
 8005964:	4801      	ldr	r0, [pc, #4]	; (800596c <__malloc_unlock+0x8>)
 8005966:	f7ff ba32 	b.w	8004dce <__retarget_lock_release_recursive>
 800596a:	bf00      	nop
 800596c:	2000400c 	.word	0x2000400c

08005970 <_free_r>:
 8005970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005972:	2900      	cmp	r1, #0
 8005974:	d047      	beq.n	8005a06 <_free_r+0x96>
 8005976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800597a:	1f0c      	subs	r4, r1, #4
 800597c:	9001      	str	r0, [sp, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	bfb8      	it	lt
 8005982:	18e4      	addlt	r4, r4, r3
 8005984:	f7ff ffe8 	bl	8005958 <__malloc_lock>
 8005988:	4a20      	ldr	r2, [pc, #128]	; (8005a0c <_free_r+0x9c>)
 800598a:	9801      	ldr	r0, [sp, #4]
 800598c:	6813      	ldr	r3, [r2, #0]
 800598e:	4615      	mov	r5, r2
 8005990:	b933      	cbnz	r3, 80059a0 <_free_r+0x30>
 8005992:	6063      	str	r3, [r4, #4]
 8005994:	6014      	str	r4, [r2, #0]
 8005996:	b003      	add	sp, #12
 8005998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800599c:	f7ff bfe2 	b.w	8005964 <__malloc_unlock>
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	d90b      	bls.n	80059bc <_free_r+0x4c>
 80059a4:	6821      	ldr	r1, [r4, #0]
 80059a6:	1862      	adds	r2, r4, r1
 80059a8:	4293      	cmp	r3, r2
 80059aa:	bf02      	ittt	eq
 80059ac:	681a      	ldreq	r2, [r3, #0]
 80059ae:	685b      	ldreq	r3, [r3, #4]
 80059b0:	1852      	addeq	r2, r2, r1
 80059b2:	6063      	str	r3, [r4, #4]
 80059b4:	bf08      	it	eq
 80059b6:	6022      	streq	r2, [r4, #0]
 80059b8:	602c      	str	r4, [r5, #0]
 80059ba:	e7ec      	b.n	8005996 <_free_r+0x26>
 80059bc:	461a      	mov	r2, r3
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	b10b      	cbz	r3, 80059c6 <_free_r+0x56>
 80059c2:	42a3      	cmp	r3, r4
 80059c4:	d9fa      	bls.n	80059bc <_free_r+0x4c>
 80059c6:	6811      	ldr	r1, [r2, #0]
 80059c8:	1855      	adds	r5, r2, r1
 80059ca:	42a5      	cmp	r5, r4
 80059cc:	d10b      	bne.n	80059e6 <_free_r+0x76>
 80059ce:	6824      	ldr	r4, [r4, #0]
 80059d0:	4421      	add	r1, r4
 80059d2:	1854      	adds	r4, r2, r1
 80059d4:	6011      	str	r1, [r2, #0]
 80059d6:	42a3      	cmp	r3, r4
 80059d8:	d1dd      	bne.n	8005996 <_free_r+0x26>
 80059da:	681c      	ldr	r4, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4421      	add	r1, r4
 80059e0:	6053      	str	r3, [r2, #4]
 80059e2:	6011      	str	r1, [r2, #0]
 80059e4:	e7d7      	b.n	8005996 <_free_r+0x26>
 80059e6:	d902      	bls.n	80059ee <_free_r+0x7e>
 80059e8:	230c      	movs	r3, #12
 80059ea:	6003      	str	r3, [r0, #0]
 80059ec:	e7d3      	b.n	8005996 <_free_r+0x26>
 80059ee:	6825      	ldr	r5, [r4, #0]
 80059f0:	1961      	adds	r1, r4, r5
 80059f2:	428b      	cmp	r3, r1
 80059f4:	bf02      	ittt	eq
 80059f6:	6819      	ldreq	r1, [r3, #0]
 80059f8:	685b      	ldreq	r3, [r3, #4]
 80059fa:	1949      	addeq	r1, r1, r5
 80059fc:	6063      	str	r3, [r4, #4]
 80059fe:	bf08      	it	eq
 8005a00:	6021      	streq	r1, [r4, #0]
 8005a02:	6054      	str	r4, [r2, #4]
 8005a04:	e7c7      	b.n	8005996 <_free_r+0x26>
 8005a06:	b003      	add	sp, #12
 8005a08:	bd30      	pop	{r4, r5, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20003f60 	.word	0x20003f60

08005a10 <_read_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4604      	mov	r4, r0
 8005a14:	4d06      	ldr	r5, [pc, #24]	; (8005a30 <_read_r+0x20>)
 8005a16:	4608      	mov	r0, r1
 8005a18:	4611      	mov	r1, r2
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	602a      	str	r2, [r5, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f7fa fdc6 	bl	80005b0 <_read>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_read_r+0x1e>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_read_r+0x1e>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	20004014 	.word	0x20004014

08005a34 <_fstat_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	2300      	movs	r3, #0
 8005a38:	4d06      	ldr	r5, [pc, #24]	; (8005a54 <_fstat_r+0x20>)
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	4608      	mov	r0, r1
 8005a3e:	4611      	mov	r1, r2
 8005a40:	602b      	str	r3, [r5, #0]
 8005a42:	f7fa fdfa 	bl	800063a <_fstat>
 8005a46:	1c43      	adds	r3, r0, #1
 8005a48:	d102      	bne.n	8005a50 <_fstat_r+0x1c>
 8005a4a:	682b      	ldr	r3, [r5, #0]
 8005a4c:	b103      	cbz	r3, 8005a50 <_fstat_r+0x1c>
 8005a4e:	6023      	str	r3, [r4, #0]
 8005a50:	bd38      	pop	{r3, r4, r5, pc}
 8005a52:	bf00      	nop
 8005a54:	20004014 	.word	0x20004014

08005a58 <_isatty_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	4d05      	ldr	r5, [pc, #20]	; (8005a74 <_isatty_r+0x1c>)
 8005a5e:	4604      	mov	r4, r0
 8005a60:	4608      	mov	r0, r1
 8005a62:	602b      	str	r3, [r5, #0]
 8005a64:	f7fa fdf9 	bl	800065a <_isatty>
 8005a68:	1c43      	adds	r3, r0, #1
 8005a6a:	d102      	bne.n	8005a72 <_isatty_r+0x1a>
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	b103      	cbz	r3, 8005a72 <_isatty_r+0x1a>
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	bd38      	pop	{r3, r4, r5, pc}
 8005a74:	20004014 	.word	0x20004014

08005a78 <_init>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	bf00      	nop
 8005a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7e:	bc08      	pop	{r3}
 8005a80:	469e      	mov	lr, r3
 8005a82:	4770      	bx	lr

08005a84 <_fini>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	bf00      	nop
 8005a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8a:	bc08      	pop	{r3}
 8005a8c:	469e      	mov	lr, r3
 8005a8e:	4770      	bx	lr
