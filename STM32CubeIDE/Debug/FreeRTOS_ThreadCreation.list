
FreeRTOS_ThreadCreation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c40  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004e40  08004e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f00  08004f00  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004f00  08004f00  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f00  08004f00  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004f00  08004f00  00014f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f78  20000020  08004f30  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20003f98  08004f30  00023f98  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001613d  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00019b65  00000000  00000000  00036193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000328d  00000000  00000000  0004fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  00052f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011340d  00000000  00000000  000544c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000013d8  00000000  00000000  001678d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003567  00000000  00000000  00168cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c217  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057a8  00000000  00000000  0016c26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000020 	.word	0x20000020
 800021c:	00000000 	.word	0x00000000
 8000220:	08004e28 	.word	0x08004e28

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000024 	.word	0x20000024
 800023c:	08004e28 	.word	0x08004e28

08000240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000278 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000244:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000246:	e003      	b.n	8000250 <LoopCopyDataInit>

08000248 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800024a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800024c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800024e:	3104      	adds	r1, #4

08000250 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000254:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000256:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000258:	d3f6      	bcc.n	8000248 <CopyDataInit>
	ldr	r2, =_sbss
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <LoopForever+0x12>)
	b	LoopFillZerobss
 800025c:	e002      	b.n	8000264 <LoopFillZerobss>

0800025e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800025e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000260:	f842 3b04 	str.w	r3, [r2], #4

08000264 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <LoopForever+0x16>)
	cmp	r2, r3
 8000266:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000268:	d3f9      	bcc.n	800025e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800026a:	f000 fa71 	bl	8000750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f004 fda1 	bl	8004db4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000272:	f000 f80f 	bl	8000294 <main>

08000276 <LoopForever>:

LoopForever:
    b LoopForever
 8000276:	e7fe      	b.n	8000276 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000278:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800027c:	08004f10 	.word	0x08004f10
	ldr	r0, =_sdata
 8000280:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000284:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 8000288:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 800028c:	20003f98 	.word	0x20003f98

08000290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC1_2_IRQHandler>
	...

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fb17 	bl	80008cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029e:	f000 f83b 	bl	8000318 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize LEDs */
  BSP_LED_Init(LED9);
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 f9be 	bl	8000624 <BSP_LED_Init>
  BSP_LED_Init(LED10);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 f9bb 	bl	8000624 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 80002ae:	f000 f884 	bl	80003ba <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
 
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002b2:	f002 f99f 	bl	80025f4 <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of THREAD1 */
  //THREAD1Handle = osThreadNew(LED_Thread1, NULL, &THREAD1_attributes);
  status = xTaskCreate(LED_Thread1, "Task1", 200, "Hello World from Task-1", 2, &task1_handle);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	2302      	movs	r3, #2
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <main+0x6c>)
 80002c0:	22c8      	movs	r2, #200	; 0xc8
 80002c2:	4910      	ldr	r1, [pc, #64]	; (8000304 <main+0x70>)
 80002c4:	4810      	ldr	r0, [pc, #64]	; (8000308 <main+0x74>)
 80002c6:	f003 fb70 	bl	80039aa <xTaskCreate>
 80002ca:	60f8      	str	r0, [r7, #12]

  status1 = xTaskCreate(LED_Thread2, "Task2", 200, "Hello World from Task-2", 2, &task2_handle);
 80002cc:	463b      	mov	r3, r7
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	2302      	movs	r3, #2
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <main+0x78>)
 80002d6:	22c8      	movs	r2, #200	; 0xc8
 80002d8:	490d      	ldr	r1, [pc, #52]	; (8000310 <main+0x7c>)
 80002da:	480e      	ldr	r0, [pc, #56]	; (8000314 <main+0x80>)
 80002dc:	f003 fb65 	bl	80039aa <xTaskCreate>
 80002e0:	60b8      	str	r0, [r7, #8]
  configASSERT(status == pdPASS);
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d002      	beq.n	80002ee <main+0x5a>
 80002e8:	f002 fe86 	bl	8002ff8 <ulSetInterruptMask>
 80002ec:	e7fe      	b.n	80002ec <main+0x58>
  configASSERT(status1 == pdPASS);
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d002      	beq.n	80002fa <main+0x66>
 80002f4:	f002 fe80 	bl	8002ff8 <ulSetInterruptMask>
 80002f8:	e7fe      	b.n	80002f8 <main+0x64>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002fa:	f002 f99f 	bl	800263c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002fe:	e7fe      	b.n	80002fe <main+0x6a>
 8000300:	08004e50 	.word	0x08004e50
 8000304:	08004e68 	.word	0x08004e68
 8000308:	080003e1 	.word	0x080003e1
 800030c:	08004e70 	.word	0x08004e70
 8000310:	08004e88 	.word	0x08004e88
 8000314:	08000479 	.word	0x08000479

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b098      	sub	sp, #96	; 0x60
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0318 	add.w	r3, r7, #24
 8000322:	2248      	movs	r2, #72	; 0x48
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f004 fd75 	bl	8004e16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800033a:	2000      	movs	r0, #0
 800033c:	f000 fdd0 	bl	8000ee0 <HAL_PWREx_ControlVoltageScaling>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000346:	f000 f8df 	bl	8000508 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800034a:	2310      	movs	r3, #16
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800034e:	2301      	movs	r3, #1
 8000350:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000352:	2300      	movs	r3, #0
 8000354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000356:	2360      	movs	r3, #96	; 0x60
 8000358:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035a:	2302      	movs	r3, #2
 800035c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800035e:	2301      	movs	r3, #1
 8000360:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000362:	2301      	movs	r3, #1
 8000364:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000366:	2337      	movs	r3, #55	; 0x37
 8000368:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800036a:	2307      	movs	r3, #7
 800036c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800036e:	2302      	movs	r3, #2
 8000370:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000372:	2302      	movs	r3, #2
 8000374:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0318 	add.w	r3, r7, #24
 800037a:	4618      	mov	r0, r3
 800037c:	f000 fe50 	bl	8001020 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000386:	f000 f8bf 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2303      	movs	r3, #3
 8000390:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2105      	movs	r1, #5
 80003a2:	4618      	mov	r0, r3
 80003a4:	f001 fb12 	bl	80019cc <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ae:	f000 f8ab 	bl	8000508 <Error_Handler>
  }
}
 80003b2:	bf00      	nop
 80003b4:	3760      	adds	r7, #96	; 0x60
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80003be:	2000      	movs	r0, #0
 80003c0:	f000 fd50 	bl	8000e64 <HAL_ICACHE_ConfigAssociativityMode>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80003ca:	f000 f89d 	bl	8000508 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003ce:	f000 fd69 	bl	8000ea4 <HAL_ICACHE_Enable>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003d8:	f000 f896 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}

080003e0 <LED_Thread1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_LED_Thread1 */
void LED_Thread1(void *argument)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint32_t count = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  (void) argument;
  /* Infinite loop */
  for (;;)
  {
    count = osKernelGetTickCount() + 5000;
 80003ec:	f002 f94c 	bl	8002688 <osKernelGetTickCount>
 80003f0:	4603      	mov	r3, r0
 80003f2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80003f6:	3308      	adds	r3, #8
 80003f8:	60fb      	str	r3, [r7, #12]

    /* Toggle LED9 every 200 ms for 5 s */
    while (count > osKernelGetTickCount())
 80003fa:	e005      	b.n	8000408 <LED_Thread1+0x28>
    {
      BSP_LED_Toggle(LED9);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f98b 	bl	8000718 <BSP_LED_Toggle>

      osDelay(200);
 8000402:	20c8      	movs	r0, #200	; 0xc8
 8000404:	f002 f997 	bl	8002736 <osDelay>
    while (count > osKernelGetTickCount())
 8000408:	f002 f93e 	bl	8002688 <osKernelGetTickCount>
 800040c:	4602      	mov	r2, r0
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	4293      	cmp	r3, r2
 8000412:	d8f3      	bhi.n	80003fc <LED_Thread1+0x1c>
    }

    /* Turn off LED9 */
    BSP_LED_Off(LED9);
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f963 	bl	80006e0 <BSP_LED_Off>

    /* Suspend Thread 1 */
    OsStatus = osThreadSuspend(THREAD1Handle);
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <LED_Thread1+0x8c>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4618      	mov	r0, r3
 8000420:	f002 f947 	bl	80026b2 <osThreadSuspend>
 8000424:	4603      	mov	r3, r0
 8000426:	461a      	mov	r2, r3
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <LED_Thread1+0x90>)
 800042a:	601a      	str	r2, [r3, #0]

    count = osKernelGetTickCount() + 5000;
 800042c:	f002 f92c 	bl	8002688 <osKernelGetTickCount>
 8000430:	4603      	mov	r3, r0
 8000432:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000436:	3308      	adds	r3, #8
 8000438:	60fb      	str	r3, [r7, #12]

    /* Toggle LED9 every 500 ms for 5 s */
    while (count > osKernelGetTickCount())
 800043a:	e006      	b.n	800044a <LED_Thread1+0x6a>
    {
      BSP_LED_Toggle(LED9);
 800043c:	2000      	movs	r0, #0
 800043e:	f000 f96b 	bl	8000718 <BSP_LED_Toggle>

      osDelay(500);
 8000442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000446:	f002 f976 	bl	8002736 <osDelay>
    while (count > osKernelGetTickCount())
 800044a:	f002 f91d 	bl	8002688 <osKernelGetTickCount>
 800044e:	4602      	mov	r2, r0
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	4293      	cmp	r3, r2
 8000454:	d8f2      	bhi.n	800043c <LED_Thread1+0x5c>
    }

    /* Resume Thread 2*/
    OsStatus = osThreadResume(THREAD2Handle);
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <LED_Thread1+0x94>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f002 f94a 	bl	80026f4 <osThreadResume>
 8000460:	4603      	mov	r3, r0
 8000462:	461a      	mov	r2, r3
 8000464:	4b02      	ldr	r3, [pc, #8]	; (8000470 <LED_Thread1+0x90>)
 8000466:	601a      	str	r2, [r3, #0]
    count = osKernelGetTickCount() + 5000;
 8000468:	e7c0      	b.n	80003ec <LED_Thread1+0xc>
 800046a:	bf00      	nop
 800046c:	20003f00 	.word	0x20003f00
 8000470:	2000003c 	.word	0x2000003c
 8000474:	20003f04 	.word	0x20003f04

08000478 <LED_Thread2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_Thread2 */
void LED_Thread2(void *argument)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  (void) argument;
  /* Infinite loop */
  for (;;)
  {
    count = osKernelGetTickCount() + 10000;
 8000480:	f002 f902 	bl	8002688 <osKernelGetTickCount>
 8000484:	4603      	mov	r3, r0
 8000486:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800048a:	3310      	adds	r3, #16
 800048c:	60fb      	str	r3, [r7, #12]

    /* Toggle LED10 every 500 ms for 10 s */
    while (count > osKernelGetTickCount())
 800048e:	e006      	b.n	800049e <LED_Thread2+0x26>
    {
      BSP_LED_Toggle(LED10);
 8000490:	2001      	movs	r0, #1
 8000492:	f000 f941 	bl	8000718 <BSP_LED_Toggle>

      osDelay(500);
 8000496:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800049a:	f002 f94c 	bl	8002736 <osDelay>
    while (count > osKernelGetTickCount())
 800049e:	f002 f8f3 	bl	8002688 <osKernelGetTickCount>
 80004a2:	4602      	mov	r2, r0
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d8f2      	bhi.n	8000490 <LED_Thread2+0x18>
    }

    /* Turn off LED10 */
    BSP_LED_Off(LED10);
 80004aa:	2001      	movs	r0, #1
 80004ac:	f000 f918 	bl	80006e0 <BSP_LED_Off>

    /* Resume Thread 1 */
    OsStatus = osThreadResume(THREAD1Handle);
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <LED_Thread2+0x60>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f002 f91d 	bl	80026f4 <osThreadResume>
 80004ba:	4603      	mov	r3, r0
 80004bc:	461a      	mov	r2, r3
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <LED_Thread2+0x64>)
 80004c0:	601a      	str	r2, [r3, #0]

    /* Suspend Thread 2 */
    OsStatus = osThreadSuspend(THREAD2Handle);
 80004c2:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <LED_Thread2+0x68>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 f8f3 	bl	80026b2 <osThreadSuspend>
 80004cc:	4603      	mov	r3, r0
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b02      	ldr	r3, [pc, #8]	; (80004dc <LED_Thread2+0x64>)
 80004d2:	601a      	str	r2, [r3, #0]
    count = osKernelGetTickCount() + 10000;
 80004d4:	e7d4      	b.n	8000480 <LED_Thread2+0x8>
 80004d6:	bf00      	nop
 80004d8:	20003f00 	.word	0x20003f00
 80004dc:	2000003c 	.word	0x2000003c
 80004e0:	20003f04 	.word	0x20003f04

080004e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d101      	bne.n	80004fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004f6:	f000 fa03 	bl	8000900 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40001000 	.word	0x40001000

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x4>
	...

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000516:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_MspInit+0x50>)
 8000518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800051a:	4a11      	ldr	r2, [pc, #68]	; (8000560 <HAL_MspInit+0x50>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6613      	str	r3, [r2, #96]	; 0x60
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <HAL_MspInit+0x50>)
 8000524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <HAL_MspInit+0x50>)
 8000530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <HAL_MspInit+0x50>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	6593      	str	r3, [r2, #88]	; 0x58
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_MspInit+0x50>)
 800053c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2107      	movs	r1, #7
 800054a:	f06f 0001 	mvn.w	r0, #1
 800054e:	f000 faaf 	bl	8000ab0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000552:	f000 fd31 	bl	8000fb8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08c      	sub	sp, #48	; 0x30
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	2031      	movs	r0, #49	; 0x31
 800057a:	f000 fa99 	bl	8000ab0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800057e:	2031      	movs	r0, #49	; 0x31
 8000580:	f000 fab0 	bl	8000ae4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <HAL_InitTick+0x9c>)
 8000586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000588:	4a1d      	ldr	r2, [pc, #116]	; (8000600 <HAL_InitTick+0x9c>)
 800058a:	f043 0310 	orr.w	r3, r3, #16
 800058e:	6593      	str	r3, [r2, #88]	; 0x58
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <HAL_InitTick+0x9c>)
 8000592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000594:	f003 0310 	and.w	r3, r3, #16
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800059c:	f107 0210 	add.w	r2, r7, #16
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fc0c 	bl	8001dc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005ac:	f001 fbf6 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 80005b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b4:	4a13      	ldr	r2, [pc, #76]	; (8000604 <HAL_InitTick+0xa0>)
 80005b6:	fba2 2303 	umull	r2, r3, r2, r3
 80005ba:	0c9b      	lsrs	r3, r3, #18
 80005bc:	3b01      	subs	r3, #1
 80005be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <HAL_InitTick+0xa4>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	; (800060c <HAL_InitTick+0xa8>)
 80005c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <HAL_InitTick+0xa4>)
 80005c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005ce:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <HAL_InitTick+0xa4>)
 80005d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <HAL_InitTick+0xa4>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_InitTick+0xa4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80005e0:	4809      	ldr	r0, [pc, #36]	; (8000608 <HAL_InitTick+0xa4>)
 80005e2:	f001 fcf1 	bl	8001fc8 <HAL_TIM_Base_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d104      	bne.n	80005f6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80005ec:	4806      	ldr	r0, [pc, #24]	; (8000608 <HAL_InitTick+0xa4>)
 80005ee:	f001 fd4d 	bl	800208c <HAL_TIM_Base_Start_IT>
 80005f2:	4603      	mov	r3, r0
 80005f4:	e000      	b.n	80005f8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3730      	adds	r7, #48	; 0x30
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	431bde83 	.word	0x431bde83
 8000608:	20003f08 	.word	0x20003f08
 800060c:	40001000 	.word	0x40001000

08000610 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <TIM6_IRQHandler+0x10>)
 8000616:	f001 fda9 	bl	800216c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20003f08 	.word	0x20003f08

08000624 <BSP_LED_Init>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	; 0x30
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
  int32_t          status = BSP_ERROR_NONE;
 800062e:	2300      	movs	r3, #0
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED9)
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10c      	bne.n	8000652 <BSP_LED_Init+0x2e>
  {
    LED9_GPIO_CLK_ENABLE();
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <BSP_LED_Init+0xb0>)
 800063a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063c:	4a25      	ldr	r2, [pc, #148]	; (80006d4 <BSP_LED_Init+0xb0>)
 800063e:	f043 0308 	orr.w	r3, r3, #8
 8000642:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <BSP_LED_Init+0xb0>)
 8000646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000648:	f003 0308 	and.w	r3, r3, #8
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	e019      	b.n	8000686 <BSP_LED_Init+0x62>
  }
  else /* Led = LED10 */
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <BSP_LED_Init+0xb0>)
 8000654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000656:	4a1f      	ldr	r2, [pc, #124]	; (80006d4 <BSP_LED_Init+0xb0>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	6593      	str	r3, [r2, #88]	; 0x58
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <BSP_LED_Init+0xb0>)
 8000660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 800066a:	f000 fc95 	bl	8000f98 <HAL_PWREx_EnableVddIO2>
    LED10_GPIO_CLK_ENABLE();
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <BSP_LED_Init+0xb0>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <BSP_LED_Init+0xb0>)
 8000674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <BSP_LED_Init+0xb0>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <BSP_LED_Init+0xb4>)
 800068a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <BSP_LED_Init+0xb8>)
 80006a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a4:	f107 0218 	add.w	r2, r7, #24
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fa28 	bl	8000b00 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <BSP_LED_Init+0xb8>)
 80006b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <BSP_LED_Init+0xb4>)
 80006bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c0:	2201      	movs	r2, #1
 80006c2:	4619      	mov	r1, r3
 80006c4:	f000 fb9c 	bl	8000e00 <HAL_GPIO_WritePin>

  return status;
 80006c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3730      	adds	r7, #48	; 0x30
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000004 	.word	0x20000004

080006e0 <BSP_LED_Off>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval BSP error code
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4a07      	ldr	r2, [pc, #28]	; (8000710 <BSP_LED_Off+0x30>)
 80006f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4a06      	ldr	r2, [pc, #24]	; (8000714 <BSP_LED_Off+0x34>)
 80006fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006fe:	2201      	movs	r2, #1
 8000700:	4619      	mov	r1, r3
 8000702:	f000 fb7d 	bl	8000e00 <HAL_GPIO_WritePin>

  return status;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000004 	.word	0x20000004
 8000714:	20000000 	.word	0x20000000

08000718 <BSP_LED_Toggle>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval BSP error code
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <BSP_LED_Toggle+0x30>)
 800072a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4906      	ldr	r1, [pc, #24]	; (800074c <BSP_LED_Toggle+0x34>)
 8000732:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000736:	4619      	mov	r1, r3
 8000738:	4610      	mov	r0, r2
 800073a:	f000 fb79 	bl	8000e30 <HAL_GPIO_TogglePin>

  return status;
 800073e:	68fb      	ldr	r3, [r7, #12]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000004 	.word	0x20000004
 800074c:	20000000 	.word	0x20000000

08000750 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <SystemInit+0x20>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <SystemInit+0x20>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800077a:	4b4f      	ldr	r3, [pc, #316]	; (80008b8 <SystemCoreClockUpdate+0x144>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	2b00      	cmp	r3, #0
 8000784:	d107      	bne.n	8000796 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000786:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <SystemCoreClockUpdate+0x144>)
 8000788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e005      	b.n	80007a2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000796:	4b48      	ldr	r3, [pc, #288]	; (80008b8 <SystemCoreClockUpdate+0x144>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	091b      	lsrs	r3, r3, #4
 800079c:	f003 030f 	and.w	r3, r3, #15
 80007a0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80007a2:	4a46      	ldr	r2, [pc, #280]	; (80008bc <SystemCoreClockUpdate+0x148>)
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007aa:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80007ac:	4b42      	ldr	r3, [pc, #264]	; (80008b8 <SystemCoreClockUpdate+0x144>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	f003 030c 	and.w	r3, r3, #12
 80007b4:	2b0c      	cmp	r3, #12
 80007b6:	d866      	bhi.n	8000886 <SystemCoreClockUpdate+0x112>
 80007b8:	a201      	add	r2, pc, #4	; (adr r2, 80007c0 <SystemCoreClockUpdate+0x4c>)
 80007ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007be:	bf00      	nop
 80007c0:	080007f5 	.word	0x080007f5
 80007c4:	08000887 	.word	0x08000887
 80007c8:	08000887 	.word	0x08000887
 80007cc:	08000887 	.word	0x08000887
 80007d0:	080007fd 	.word	0x080007fd
 80007d4:	08000887 	.word	0x08000887
 80007d8:	08000887 	.word	0x08000887
 80007dc:	08000887 	.word	0x08000887
 80007e0:	08000805 	.word	0x08000805
 80007e4:	08000887 	.word	0x08000887
 80007e8:	08000887 	.word	0x08000887
 80007ec:	08000887 	.word	0x08000887
 80007f0:	0800080d 	.word	0x0800080d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80007f4:	4a32      	ldr	r2, [pc, #200]	; (80008c0 <SystemCoreClockUpdate+0x14c>)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	6013      	str	r3, [r2, #0]
      break;
 80007fa:	e048      	b.n	800088e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80007fc:	4b30      	ldr	r3, [pc, #192]	; (80008c0 <SystemCoreClockUpdate+0x14c>)
 80007fe:	4a31      	ldr	r2, [pc, #196]	; (80008c4 <SystemCoreClockUpdate+0x150>)
 8000800:	601a      	str	r2, [r3, #0]
      break;
 8000802:	e044      	b.n	800088e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000804:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <SystemCoreClockUpdate+0x14c>)
 8000806:	4a2f      	ldr	r2, [pc, #188]	; (80008c4 <SystemCoreClockUpdate+0x150>)
 8000808:	601a      	str	r2, [r3, #0]
      break;
 800080a:	e040      	b.n	800088e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800080c:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <SystemCoreClockUpdate+0x144>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000816:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <SystemCoreClockUpdate+0x144>)
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	091b      	lsrs	r3, r3, #4
 800081c:	f003 030f 	and.w	r3, r3, #15
 8000820:	3301      	adds	r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d003      	beq.n	8000832 <SystemCoreClockUpdate+0xbe>
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2b03      	cmp	r3, #3
 800082e:	d006      	beq.n	800083e <SystemCoreClockUpdate+0xca>
 8000830:	e00b      	b.n	800084a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000832:	4a24      	ldr	r2, [pc, #144]	; (80008c4 <SystemCoreClockUpdate+0x150>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	fbb2 f3f3 	udiv	r3, r2, r3
 800083a:	613b      	str	r3, [r7, #16]
          break;
 800083c:	e00b      	b.n	8000856 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800083e:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <SystemCoreClockUpdate+0x150>)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	613b      	str	r3, [r7, #16]
          break;
 8000848:	e005      	b.n	8000856 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000852:	613b      	str	r3, [r7, #16]
          break;
 8000854:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <SystemCoreClockUpdate+0x144>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	0a1b      	lsrs	r3, r3, #8
 800085c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	fb02 f303 	mul.w	r3, r2, r3
 8000866:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <SystemCoreClockUpdate+0x144>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	0e5b      	lsrs	r3, r3, #25
 800086e:	f003 0303 	and.w	r3, r3, #3
 8000872:	3301      	adds	r3, #1
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000880:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <SystemCoreClockUpdate+0x14c>)
 8000882:	6013      	str	r3, [r2, #0]
      break;
 8000884:	e003      	b.n	800088e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <SystemCoreClockUpdate+0x14c>)
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	6013      	str	r3, [r2, #0]
      break;
 800088c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <SystemCoreClockUpdate+0x144>)
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	091b      	lsrs	r3, r3, #4
 8000894:	f003 030f 	and.w	r3, r3, #15
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <SystemCoreClockUpdate+0x154>)
 800089a:	5cd3      	ldrb	r3, [r2, r3]
 800089c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <SystemCoreClockUpdate+0x14c>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	fa22 f303 	lsr.w	r3, r2, r3
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <SystemCoreClockUpdate+0x14c>)
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	371c      	adds	r7, #28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	40021000 	.word	0x40021000
 80008bc:	08004ec0 	.word	0x08004ec0
 80008c0:	2000000c 	.word	0x2000000c
 80008c4:	00f42400 	.word	0x00f42400
 80008c8:	08004ea8 	.word	0x08004ea8

080008cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80008d6:	2004      	movs	r0, #4
 80008d8:	f000 f8df 	bl	8000a9a <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80008dc:	f7ff ff4a 	bl	8000774 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fe3f 	bl	8000564 <HAL_InitTick>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	e001      	b.n	80008f6 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008f2:	f7ff fe0d 	bl	8000510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_IncTick+0x20>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_IncTick+0x24>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <HAL_IncTick+0x24>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000014 	.word	0x20000014
 8000924:	20003f54 	.word	0x20003f54

08000928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return uwTick;
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <HAL_GetTick+0x14>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20003f54 	.word	0x20003f54

08000940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	60d3      	str	r3, [r2, #12]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <__NVIC_GetPriorityGrouping+0x18>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	f003 0307 	and.w	r3, r3, #7
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	db0b      	blt.n	80009ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	f003 021f 	and.w	r2, r3, #31
 80009bc:	4907      	ldr	r1, [pc, #28]	; (80009dc <__NVIC_EnableIRQ+0x38>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	095b      	lsrs	r3, r3, #5
 80009c4:	2001      	movs	r0, #1
 80009c6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db0a      	blt.n	8000a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <__NVIC_SetPriority+0x4c>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	0152      	lsls	r2, r2, #5
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a08:	e00a      	b.n	8000a20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4908      	ldr	r1, [pc, #32]	; (8000a30 <__NVIC_SetPriority+0x50>)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	3b04      	subs	r3, #4
 8000a18:	0152      	lsls	r2, r2, #5
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	761a      	strb	r2, [r3, #24]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b089      	sub	sp, #36	; 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f1c3 0307 	rsb	r3, r3, #7
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	bf28      	it	cs
 8000a52:	2303      	movcs	r3, #3
 8000a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3303      	adds	r3, #3
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d902      	bls.n	8000a64 <NVIC_EncodePriority+0x30>
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3b04      	subs	r3, #4
 8000a62:	e000      	b.n	8000a66 <NVIC_EncodePriority+0x32>
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43d9      	mvns	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	4313      	orrs	r3, r2
         );
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3724      	adds	r7, #36	; 0x24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ff4c 	bl	8000940 <__NVIC_SetPriorityGrouping>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000abe:	f7ff ff63 	bl	8000988 <__NVIC_GetPriorityGrouping>
 8000ac2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	68b9      	ldr	r1, [r7, #8]
 8000ac8:	6978      	ldr	r0, [r7, #20]
 8000aca:	f7ff ffb3 	bl	8000a34 <NVIC_EncodePriority>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff82 	bl	80009e0 <__NVIC_SetPriority>
}
 8000adc:	bf00      	nop
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff56 	bl	80009a4 <__NVIC_EnableIRQ>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b0e:	e158      	b.n	8000dc2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 814a 	beq.w	8000dbc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d005      	beq.n	8000b40 <HAL_GPIO_Init+0x40>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d130      	bne.n	8000ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b76:	2201      	movs	r2, #1
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	091b      	lsrs	r3, r3, #4
 8000b8c:	f003 0201 	and.w	r2, r3, #1
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d017      	beq.n	8000bde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d123      	bne.n	8000c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	08da      	lsrs	r2, r3, #3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3208      	adds	r2, #8
 8000bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	220f      	movs	r2, #15
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	691a      	ldr	r2, [r3, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f003 0307 	and.w	r3, r3, #7
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	08da      	lsrs	r2, r3, #3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3208      	adds	r2, #8
 8000c2c:	6939      	ldr	r1, [r7, #16]
 8000c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0203 	and.w	r2, r3, #3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 80a4 	beq.w	8000dbc <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000c74:	4a5a      	ldr	r2, [pc, #360]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	089b      	lsrs	r3, r3, #2
 8000c7a:	3318      	adds	r3, #24
 8000c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	220f      	movs	r2, #15
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a52      	ldr	r2, [pc, #328]	; (8000de4 <HAL_GPIO_Init+0x2e4>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d025      	beq.n	8000cec <HAL_GPIO_Init+0x1ec>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a51      	ldr	r2, [pc, #324]	; (8000de8 <HAL_GPIO_Init+0x2e8>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d01f      	beq.n	8000ce8 <HAL_GPIO_Init+0x1e8>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a50      	ldr	r2, [pc, #320]	; (8000dec <HAL_GPIO_Init+0x2ec>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d019      	beq.n	8000ce4 <HAL_GPIO_Init+0x1e4>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a4f      	ldr	r2, [pc, #316]	; (8000df0 <HAL_GPIO_Init+0x2f0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d013      	beq.n	8000ce0 <HAL_GPIO_Init+0x1e0>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a4e      	ldr	r2, [pc, #312]	; (8000df4 <HAL_GPIO_Init+0x2f4>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d00d      	beq.n	8000cdc <HAL_GPIO_Init+0x1dc>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a4d      	ldr	r2, [pc, #308]	; (8000df8 <HAL_GPIO_Init+0x2f8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d007      	beq.n	8000cd8 <HAL_GPIO_Init+0x1d8>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a4c      	ldr	r2, [pc, #304]	; (8000dfc <HAL_GPIO_Init+0x2fc>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d101      	bne.n	8000cd4 <HAL_GPIO_Init+0x1d4>
 8000cd0:	2306      	movs	r3, #6
 8000cd2:	e00c      	b.n	8000cee <HAL_GPIO_Init+0x1ee>
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	e00a      	b.n	8000cee <HAL_GPIO_Init+0x1ee>
 8000cd8:	2305      	movs	r3, #5
 8000cda:	e008      	b.n	8000cee <HAL_GPIO_Init+0x1ee>
 8000cdc:	2304      	movs	r3, #4
 8000cde:	e006      	b.n	8000cee <HAL_GPIO_Init+0x1ee>
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e004      	b.n	8000cee <HAL_GPIO_Init+0x1ee>
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	e002      	b.n	8000cee <HAL_GPIO_Init+0x1ee>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e000      	b.n	8000cee <HAL_GPIO_Init+0x1ee>
 8000cec:	2300      	movs	r3, #0
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	f002 0203 	and.w	r2, r2, #3
 8000cf4:	00d2      	lsls	r2, r2, #3
 8000cf6:	4093      	lsls	r3, r2
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000cfe:	4938      	ldr	r1, [pc, #224]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	3318      	adds	r3, #24
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d0c:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	43db      	mvns	r3, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d30:	4a2b      	ldr	r2, [pc, #172]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d5a:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d86:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000db4:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f47f ae9f 	bne.w	8000b10 <HAL_GPIO_Init+0x10>
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
 8000dd6:	371c      	adds	r7, #28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	4002f400 	.word	0x4002f400
 8000de4:	42020000 	.word	0x42020000
 8000de8:	42020400 	.word	0x42020400
 8000dec:	42020800 	.word	0x42020800
 8000df0:	42020c00 	.word	0x42020c00
 8000df4:	42021000 	.word	0x42021000
 8000df8:	42021400 	.word	0x42021400
 8000dfc:	42021800 	.word	0x42021800

08000e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e10:	787b      	ldrb	r3, [r7, #1]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e16:	887a      	ldrh	r2, [r7, #2]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e1c:	e002      	b.n	8000e24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e1e:	887a      	ldrh	r2, [r7, #2]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4013      	ands	r3, r2
 8000e48:	041a      	lsls	r2, r3, #16
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	43d9      	mvns	r1, r3
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	400b      	ands	r3, r1
 8000e52:	431a      	orrs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	619a      	str	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e007      	b.n	8000e92 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f023 0204 	bic.w	r2, r3, #4
 8000e8a:	4905      	ldr	r1, [pc, #20]	; (8000ea0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	40030400 	.word	0x40030400

08000ea4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_ICACHE_Enable+0x1c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_ICACHE_Enable+0x1c>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	40030400 	.word	0x40030400

08000ec4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <HAL_PWREx_GetVoltageRange+0x18>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40007000 	.word	0x40007000

08000ee0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ef0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8000ef2:	f000 f871 	bl	8000fd8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000efc:	d101      	bne.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e03e      	b.n	8000f80 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f0e:	d101      	bne.n	8000f14 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e035      	b.n	8000f80 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d101      	bne.n	8000f20 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e02f      	b.n	8000f80 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000f28:	4917      	ldr	r1, [pc, #92]	; (8000f88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	095b      	lsrs	r3, r3, #5
 8000f36:	4a16      	ldr	r2, [pc, #88]	; (8000f90 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000f38:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3c:	09db      	lsrs	r3, r3, #7
 8000f3e:	2232      	movs	r2, #50	; 0x32
 8000f40:	fb02 f303 	mul.w	r3, r2, r3
 8000f44:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8000f46:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f50:	e002      	b.n	8000f58 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f64:	d102      	bne.n	8000f6c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f2      	bne.n	8000f52 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f78:	d101      	bne.n	8000f7e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e000      	b.n	8000f80 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40007000 	.word	0x40007000
 8000f8c:	2000000c 	.word	0x2000000c
 8000f90:	0a7c5ac5 	.word	0x0a7c5ac5
 8000f94:	cccccccd 	.word	0xcccccccd

08000f98 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6053      	str	r3, [r2, #4]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40007000 	.word	0x40007000

08000fb8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc6:	6093      	str	r3, [r2, #8]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	e00a      	b.n	800100c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d103      	bne.n	8001008 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	e001      	b.n	800100c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40007000 	.word	0x40007000

08001020 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	f000 bcc2 	b.w	80019b8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001034:	4ba3      	ldr	r3, [pc, #652]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800103e:	4ba1      	ldr	r3, [pc, #644]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0310 	and.w	r3, r3, #16
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80e9 	beq.w	8001228 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d006      	beq.n	800106a <HAL_RCC_OscConfig+0x4a>
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2b0c      	cmp	r3, #12
 8001060:	f040 8083 	bne.w	800116a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d17f      	bne.n	800116a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800106a:	4b96      	ldr	r3, [pc, #600]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <HAL_RCC_OscConfig+0x64>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d102      	bne.n	8001084 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	f000 bc9a 	b.w	80019b8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001088:	4b8e      	ldr	r3, [pc, #568]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <HAL_RCC_OscConfig+0x7e>
 8001094:	4b8b      	ldr	r3, [pc, #556]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800109c:	e005      	b.n	80010aa <HAL_RCC_OscConfig+0x8a>
 800109e:	4b89      	ldr	r3, [pc, #548]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80010a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d224      	bcs.n	80010f8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 feb8 	bl	8001e28 <RCC_SetFlashLatencyFromMSIRange>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	f000 bc7a 	b.w	80019b8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010c4:	4b7f      	ldr	r3, [pc, #508]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a7e      	ldr	r2, [pc, #504]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b7c      	ldr	r3, [pc, #496]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	4979      	ldr	r1, [pc, #484]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010e2:	4b78      	ldr	r3, [pc, #480]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	4974      	ldr	r1, [pc, #464]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	604b      	str	r3, [r1, #4]
 80010f6:	e026      	b.n	8001146 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010f8:	4b72      	ldr	r3, [pc, #456]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a71      	ldr	r2, [pc, #452]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b6f      	ldr	r3, [pc, #444]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	496c      	ldr	r1, [pc, #432]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 8001112:	4313      	orrs	r3, r2
 8001114:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001116:	4b6b      	ldr	r3, [pc, #428]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	4967      	ldr	r1, [pc, #412]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10a      	bne.n	8001146 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fe77 	bl	8001e28 <RCC_SetFlashLatencyFromMSIRange>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	f000 bc39 	b.w	80019b8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001146:	f000 fe15 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 800114a:	4603      	mov	r3, r0
 800114c:	4a5e      	ldr	r2, [pc, #376]	; (80012c8 <HAL_RCC_OscConfig+0x2a8>)
 800114e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001150:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fa05 	bl	8000564 <HAL_InitTick>
 800115a:	4603      	mov	r3, r0
 800115c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d060      	beq.n	8001226 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	f000 bc27 	b.w	80019b8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d039      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001172:	4b54      	ldr	r3, [pc, #336]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a53      	ldr	r2, [pc, #332]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800117e:	f7ff fbd3 	bl	8000928 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001184:	e00f      	b.n	80011a6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001186:	f7ff fbcf 	bl	8000928 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d908      	bls.n	80011a6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001194:	4b4b      	ldr	r3, [pc, #300]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	f000 bc09 	b.w	80019b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011a6:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0e9      	beq.n	8001186 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011b2:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a43      	ldr	r2, [pc, #268]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	493e      	ldr	r1, [pc, #248]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d0:	4b3c      	ldr	r3, [pc, #240]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	4939      	ldr	r1, [pc, #228]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
 80011e4:	e020      	b.n	8001228 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a36      	ldr	r2, [pc, #216]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80011ec:	f023 0301 	bic.w	r3, r3, #1
 80011f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fb99 	bl	8000928 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011f8:	e00e      	b.n	8001218 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011fa:	f7ff fb95 	bl	8000928 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d907      	bls.n	8001218 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001208:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e3cf      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001218:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1ea      	bne.n	80011fa <HAL_RCC_OscConfig+0x1da>
 8001224:	e000      	b.n	8001228 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001226:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d07e      	beq.n	8001332 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2b08      	cmp	r3, #8
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x226>
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b0c      	cmp	r3, #12
 800123e:	d10e      	bne.n	800125e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d10b      	bne.n	800125e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d06e      	beq.n	8001330 <HAL_RCC_OscConfig+0x310>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d16a      	bne.n	8001330 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e3ac      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001266:	d106      	bne.n	8001276 <HAL_RCC_OscConfig+0x256>
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 800126e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	e01d      	b.n	80012b2 <HAL_RCC_OscConfig+0x292>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800127e:	d10c      	bne.n	800129a <HAL_RCC_OscConfig+0x27a>
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 8001286:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 8001292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	e00b      	b.n	80012b2 <HAL_RCC_OscConfig+0x292>
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80012a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <HAL_RCC_OscConfig+0x2a4>)
 80012ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d020      	beq.n	80012fc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ba:	f7ff fb35 	bl	8000928 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c0:	e015      	b.n	80012ee <HAL_RCC_OscConfig+0x2ce>
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	2000000c 	.word	0x2000000c
 80012cc:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fb2a 	bl	8000928 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d907      	bls.n	80012ee <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012de:	4b9f      	ldr	r3, [pc, #636]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e364      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ee:	4b9b      	ldr	r3, [pc, #620]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0ea      	beq.n	80012d0 <HAL_RCC_OscConfig+0x2b0>
 80012fa:	e01a      	b.n	8001332 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fb14 	bl	8000928 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001302:	e00e      	b.n	8001322 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fb10 	bl	8000928 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d907      	bls.n	8001322 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001312:	4b92      	ldr	r3, [pc, #584]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e34a      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001322:	4b8e      	ldr	r3, [pc, #568]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ea      	bne.n	8001304 <HAL_RCC_OscConfig+0x2e4>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d06c      	beq.n	8001418 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d005      	beq.n	8001350 <HAL_RCC_OscConfig+0x330>
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b0c      	cmp	r3, #12
 8001348:	d119      	bne.n	800137e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d116      	bne.n	800137e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001350:	4b82      	ldr	r3, [pc, #520]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <HAL_RCC_OscConfig+0x348>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e327      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001368:	4b7c      	ldr	r3, [pc, #496]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	061b      	lsls	r3, r3, #24
 8001376:	4979      	ldr	r1, [pc, #484]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800137c:	e04c      	b.n	8001418 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d029      	beq.n	80013da <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001386:	4b75      	ldr	r3, [pc, #468]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a74      	ldr	r2, [pc, #464]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff fac9 	bl	8000928 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001398:	e00e      	b.n	80013b8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff fac5 	bl	8000928 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d907      	bls.n	80013b8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a8:	4b6c      	ldr	r3, [pc, #432]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e2ff      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b8:	4b68      	ldr	r3, [pc, #416]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0ea      	beq.n	800139a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4b65      	ldr	r3, [pc, #404]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	061b      	lsls	r3, r3, #24
 80013d2:	4962      	ldr	r1, [pc, #392]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]
 80013d8:	e01e      	b.n	8001418 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013da:	4b60      	ldr	r3, [pc, #384]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a5f      	ldr	r2, [pc, #380]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 80013e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e6:	f7ff fa9f 	bl	8000928 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ec:	e00e      	b.n	800140c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ee:	f7ff fa9b 	bl	8000928 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d907      	bls.n	800140c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013fc:	4b57      	ldr	r3, [pc, #348]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e2d5      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800140c:	4b53      	ldr	r3, [pc, #332]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ea      	bne.n	80013ee <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b00      	cmp	r3, #0
 8001422:	d05f      	beq.n	80014e4 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d038      	beq.n	800149e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d108      	bne.n	8001446 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001434:	4b49      	ldr	r3, [pc, #292]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 8001436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143a:	4a48      	ldr	r2, [pc, #288]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 800143c:	f023 0310 	bic.w	r3, r3, #16
 8001440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001444:	e007      	b.n	8001456 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001446:	4b45      	ldr	r3, [pc, #276]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 8001448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144c:	4a43      	ldr	r2, [pc, #268]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001456:	4b41      	ldr	r3, [pc, #260]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 8001458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145c:	4a3f      	ldr	r2, [pc, #252]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001466:	f7ff fa5f 	bl	8000928 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800146c:	e00f      	b.n	800148e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff fa5b 	bl	8000928 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b07      	cmp	r3, #7
 800147a:	d908      	bls.n	800148e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800147c:	4b37      	ldr	r3, [pc, #220]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 800147e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e294      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800148e:	4b33      	ldr	r3, [pc, #204]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 8001490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0e8      	beq.n	800146e <HAL_RCC_OscConfig+0x44e>
 800149c:	e022      	b.n	80014e4 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 80014a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a4:	4a2d      	ldr	r2, [pc, #180]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ae:	f7ff fa3b 	bl	8000928 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014b4:	e00f      	b.n	80014d6 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff fa37 	bl	8000928 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b07      	cmp	r3, #7
 80014c2:	d908      	bls.n	80014d6 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 80014c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e270      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 80014d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1e8      	bne.n	80014b6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8131 	beq.w	8001754 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10d      	bne.n	800151e <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	4a15      	ldr	r2, [pc, #84]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6593      	str	r3, [r2, #88]	; 0x58
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <HAL_RCC_OscConfig+0x53c>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151a:	2301      	movs	r3, #1
 800151c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_RCC_OscConfig+0x540>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d122      	bne.n	8001570 <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_RCC_OscConfig+0x540>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <HAL_RCC_OscConfig+0x540>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff f9f7 	bl	8000928 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800153c:	e012      	b.n	8001564 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153e:	f7ff f9f3 	bl	8000928 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d90b      	bls.n	8001564 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <HAL_RCC_OscConfig+0x540>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d105      	bne.n	8001564 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e22d      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
 800155c:	40021000 	.word	0x40021000
 8001560:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001564:	4bb8      	ldr	r3, [pc, #736]	; (8001848 <HAL_RCC_OscConfig+0x828>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0e6      	beq.n	800153e <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d01f      	beq.n	80015bc <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d010      	beq.n	80015aa <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001588:	4bb0      	ldr	r3, [pc, #704]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158e:	4aaf      	ldr	r2, [pc, #700]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001598:	4bac      	ldr	r3, [pc, #688]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 800159a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159e:	4aab      	ldr	r2, [pc, #684]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015a8:	e018      	b.n	80015dc <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015aa:	4ba8      	ldr	r3, [pc, #672]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80015ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b0:	4aa6      	ldr	r2, [pc, #664]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ba:	e00f      	b.n	80015dc <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015bc:	4ba3      	ldr	r3, [pc, #652]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80015be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c2:	4aa2      	ldr	r2, [pc, #648]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80015cc:	4b9f      	ldr	r3, [pc, #636]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80015ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d2:	4a9e      	ldr	r2, [pc, #632]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80015d4:	f023 0304 	bic.w	r3, r3, #4
 80015d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d068      	beq.n	80016b6 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff f9a0 	bl	8000928 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ea:	e011      	b.n	8001610 <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff f99c 	bl	8000928 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d908      	bls.n	8001610 <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015fe:	4b93      	ldr	r3, [pc, #588]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e1d3      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001610:	4b8e      	ldr	r3, [pc, #568]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0e6      	beq.n	80015ec <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001626:	2b00      	cmp	r3, #0
 8001628:	d022      	beq.n	8001670 <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800162a:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 800162c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001630:	4a86      	ldr	r2, [pc, #536]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800163a:	e011      	b.n	8001660 <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163c:	f7ff f974 	bl	8000928 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d908      	bls.n	8001660 <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800164e:	4b7f      	ldr	r3, [pc, #508]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1ab      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001660:	4b7a      	ldr	r3, [pc, #488]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0e6      	beq.n	800163c <HAL_RCC_OscConfig+0x61c>
 800166e:	e068      	b.n	8001742 <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001670:	4b76      	ldr	r3, [pc, #472]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001676:	4a75      	ldr	r2, [pc, #468]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800167c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001680:	e011      	b.n	80016a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7ff f951 	bl	8000928 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001690:	4293      	cmp	r3, r2
 8001692:	d908      	bls.n	80016a6 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001694:	4b6d      	ldr	r3, [pc, #436]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e188      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016a6:	4b69      	ldr	r3, [pc, #420]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80016a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1e6      	bne.n	8001682 <HAL_RCC_OscConfig+0x662>
 80016b4:	e045      	b.n	8001742 <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff f937 	bl	8000928 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016bc:	e011      	b.n	80016e2 <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff f933 	bl	8000928 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d908      	bls.n	80016e2 <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d0:	4b5e      	ldr	r3, [pc, #376]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80016d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e16a      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e2:	4b5a      	ldr	r3, [pc, #360]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80016e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1e6      	bne.n	80016be <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80016f0:	4b56      	ldr	r3, [pc, #344]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d021      	beq.n	8001742 <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80016fe:	4b53      	ldr	r3, [pc, #332]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001704:	4a51      	ldr	r2, [pc, #324]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800170a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800170e:	e011      	b.n	8001734 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff f90a 	bl	8000928 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d908      	bls.n	8001734 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001722:	4b4a      	ldr	r3, [pc, #296]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e141      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001734:	4b45      	ldr	r3, [pc, #276]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1e6      	bne.n	8001710 <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001742:	7ffb      	ldrb	r3, [r7, #31]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b40      	ldr	r3, [pc, #256]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	4a3f      	ldr	r2, [pc, #252]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 800174e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001752:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b00      	cmp	r3, #0
 800175e:	d04a      	beq.n	80017f6 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	d023      	beq.n	80017b0 <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001768:	4b38      	ldr	r3, [pc, #224]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 800176a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800176e:	4a37      	ldr	r2, [pc, #220]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff f8d6 	bl	8000928 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800177e:	e00f      	b.n	80017a0 <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001780:	f7ff f8d2 	bl	8000928 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d908      	bls.n	80017a0 <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800178e:	4b2f      	ldr	r3, [pc, #188]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e10b      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017a0:	4b2a      	ldr	r3, [pc, #168]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80017a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0e8      	beq.n	8001780 <HAL_RCC_OscConfig+0x760>
 80017ae:	e022      	b.n	80017f6 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017b0:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80017b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017b6:	4a25      	ldr	r2, [pc, #148]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff f8b2 	bl	8000928 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017c6:	e00f      	b.n	80017e8 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017c8:	f7ff f8ae 	bl	8000928 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d908      	bls.n	80017e8 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80017d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0e7      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 80017ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1e8      	bne.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80db 	beq.w	80019b6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b0c      	cmp	r3, #12
 800180a:	f000 8095 	beq.w	8001938 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	2b02      	cmp	r3, #2
 8001814:	d16a      	bne.n	80018ec <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a0c      	ldr	r2, [pc, #48]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 800181c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7ff f881 	bl	8000928 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001828:	e012      	b.n	8001850 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff f87d 	bl	8000928 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d90b      	bls.n	8001850 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_RCC_OscConfig+0x82c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e0b7      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
 8001848:	40007000 	.word	0x40007000
 800184c:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001850:	4b5b      	ldr	r3, [pc, #364]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1e6      	bne.n	800182a <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185c:	4b58      	ldr	r3, [pc, #352]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	4b58      	ldr	r3, [pc, #352]	; (80019c4 <HAL_RCC_OscConfig+0x9a4>)
 8001862:	4013      	ands	r3, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800186c:	3a01      	subs	r2, #1
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	4311      	orrs	r1, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001876:	0212      	lsls	r2, r2, #8
 8001878:	4311      	orrs	r1, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800187e:	0852      	lsrs	r2, r2, #1
 8001880:	3a01      	subs	r2, #1
 8001882:	0552      	lsls	r2, r2, #21
 8001884:	4311      	orrs	r1, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800188a:	0852      	lsrs	r2, r2, #1
 800188c:	3a01      	subs	r2, #1
 800188e:	0652      	lsls	r2, r2, #25
 8001890:	4311      	orrs	r1, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001896:	06d2      	lsls	r2, r2, #27
 8001898:	430a      	orrs	r2, r1
 800189a:	4949      	ldr	r1, [pc, #292]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 800189c:	4313      	orrs	r3, r2
 800189e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a0:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a46      	ldr	r2, [pc, #280]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 80018a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018ac:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4a43      	ldr	r2, [pc, #268]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 80018b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff f836 	bl	8000928 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018be:	e00e      	b.n	80018de <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff f832 	bl	8000928 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d907      	bls.n	80018de <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ce:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e06c      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0ea      	beq.n	80018c0 <HAL_RCC_OscConfig+0x8a0>
 80018ea:	e064      	b.n	80019b6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ec:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a33      	ldr	r2, [pc, #204]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 80018f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff f816 	bl	8000928 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fe:	e00e      	b.n	800191e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff f812 	bl	8000928 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d907      	bls.n	800191e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190e:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e04c      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191e:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1ea      	bne.n	8001900 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800192a:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	4924      	ldr	r1, [pc, #144]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <HAL_RCC_OscConfig+0x9a8>)
 8001932:	4013      	ands	r3, r2
 8001934:	60cb      	str	r3, [r1, #12]
 8001936:	e03e      	b.n	80019b6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e039      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <HAL_RCC_OscConfig+0x9a0>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0203 	and.w	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	429a      	cmp	r2, r3
 8001956:	d12c      	bne.n	80019b2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001962:	3b01      	subs	r3, #1
 8001964:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d123      	bne.n	80019b2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001974:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d11b      	bne.n	80019b2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001984:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d113      	bne.n	80019b2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	3b01      	subs	r3, #1
 8001998:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d109      	bne.n	80019b2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	3b01      	subs	r3, #1
 80019ac:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	019f800c 	.word	0x019f800c
 80019c8:	feeefffc 	.word	0xfeeefffc

080019cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e11c      	b.n	8001c1e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4b90      	ldr	r3, [pc, #576]	; (8001c28 <HAL_RCC_ClockConfig+0x25c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d910      	bls.n	8001a14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b8d      	ldr	r3, [pc, #564]	; (8001c28 <HAL_RCC_ClockConfig+0x25c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 020f 	bic.w	r2, r3, #15
 80019fa:	498b      	ldr	r1, [pc, #556]	; (8001c28 <HAL_RCC_ClockConfig+0x25c>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b89      	ldr	r3, [pc, #548]	; (8001c28 <HAL_RCC_ClockConfig+0x25c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e104      	b.n	8001c1e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d010      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4b81      	ldr	r3, [pc, #516]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d908      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b7e      	ldr	r3, [pc, #504]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	497b      	ldr	r1, [pc, #492]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 8085 	beq.w	8001b5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d11f      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a58:	4b74      	ldr	r3, [pc, #464]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0da      	b.n	8001c1e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a68:	f000 fa42 	bl	8001ef0 <RCC_GetSysClockFreqFromPLLSource>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4a6f      	ldr	r2, [pc, #444]	; (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d947      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a76:	4b6d      	ldr	r3, [pc, #436]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d141      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a82:	4b6a      	ldr	r3, [pc, #424]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a8a:	4a68      	ldr	r2, [pc, #416]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e036      	b.n	8001b06 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa0:	4b62      	ldr	r3, [pc, #392]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d115      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0b6      	b.n	8001c1e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ab8:	4b5c      	ldr	r3, [pc, #368]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d109      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0aa      	b.n	8001c1e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac8:	4b58      	ldr	r3, [pc, #352]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0a2      	b.n	8001c1e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ad8:	f000 f8b0 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4a53      	ldr	r2, [pc, #332]	; (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d90f      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ae6:	4b51      	ldr	r3, [pc, #324]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001af2:	4b4e      	ldr	r3, [pc, #312]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001afa:	4a4c      	ldr	r2, [pc, #304]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b06:	4b49      	ldr	r3, [pc, #292]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4946      	ldr	r1, [pc, #280]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b18:	f7fe ff06 	bl	8000928 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	e013      	b.n	8001b48 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7fe ff02 	bl	8000928 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d90a      	bls.n	8001b48 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	4b3e      	ldr	r3, [pc, #248]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 020c 	and.w	r2, r3, #12
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e06a      	b.n	8001c1e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b48:	4b38      	ldr	r3, [pc, #224]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 020c 	and.w	r2, r3, #12
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d1e2      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b80      	cmp	r3, #128	; 0x80
 8001b5e:	d105      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b60:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a31      	ldr	r2, [pc, #196]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b6a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d010      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d208      	bcs.n	8001b9a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4925      	ldr	r1, [pc, #148]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b9a:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <HAL_RCC_ClockConfig+0x25c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d210      	bcs.n	8001bca <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <HAL_RCC_ClockConfig+0x25c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 020f 	bic.w	r2, r3, #15
 8001bb0:	491d      	ldr	r1, [pc, #116]	; (8001c28 <HAL_RCC_ClockConfig+0x25c>)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_RCC_ClockConfig+0x25c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e029      	b.n	8001c1e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d008      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	4912      	ldr	r1, [pc, #72]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d009      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	490a      	ldr	r1, [pc, #40]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c08:	f000 f8b4 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x268>)
 8001c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fca4 	bl	8000564 <HAL_InitTick>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40022000 	.word	0x40022000
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	04c4b400 	.word	0x04c4b400
 8001c34:	2000000c 	.word	0x2000000c
 8001c38:	20000010 	.word	0x20000010

08001c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c54:	4b44      	ldr	r3, [pc, #272]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x34>
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	d121      	bne.n	8001cae <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d11e      	bne.n	8001cae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c70:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	e005      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c8c:	4b36      	ldr	r3, [pc, #216]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001c98:	4a34      	ldr	r2, [pc, #208]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x130>)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10d      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d102      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cb4:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x134>)
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	e004      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cc0:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x134>)
 8001cc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d146      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001cca:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3301      	adds	r3, #1
 8001ce0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d003      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xb4>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d00d      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0xce>
 8001cee:	e019      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x134>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	4a1b      	ldr	r2, [pc, #108]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001cfa:	68d2      	ldr	r2, [r2, #12]
 8001cfc:	0a12      	lsrs	r2, r2, #8
 8001cfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
        break;
 8001d08:	e019      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d0a:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4a15      	ldr	r2, [pc, #84]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d14:	68d2      	ldr	r2, [r2, #12]
 8001d16:	0a12      	lsrs	r2, r2, #8
 8001d18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
        break;
 8001d22:	e00c      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d2e:	68d2      	ldr	r2, [r2, #12]
 8001d30:	0a12      	lsrs	r2, r2, #8
 8001d32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	617b      	str	r3, [r7, #20]
        break;
 8001d3c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	0e5b      	lsrs	r3, r3, #25
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d58:	69bb      	ldr	r3, [r7, #24]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08004ec0 	.word	0x08004ec0
 8001d70:	00f42400 	.word	0x00f42400

08001d74 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8001d78:	f7ff ff60 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_GetHCLKFreq+0x20>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	4903      	ldr	r1, [pc, #12]	; (8001d98 <HAL_RCC_GetHCLKFreq+0x24>)
 8001d8a:	5ccb      	ldrb	r3, [r1, r3]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08004ea8 	.word	0x08004ea8

08001d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001da0:	f7ff ffe8 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4903      	ldr	r1, [pc, #12]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	08004eb8 	.word	0x08004eb8

08001dc4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_RCC_GetClockConfig+0x60>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 020f 	and.w	r2, r3, #15
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	601a      	str	r2, [r3, #0]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40022000 	.word	0x40022000

08001e28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e34:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e40:	f7ff f840 	bl	8000ec4 <HAL_PWREx_GetVoltageRange>
 8001e44:	6138      	str	r0, [r7, #16]
 8001e46:	e014      	b.n	8001e72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	4a26      	ldr	r2, [pc, #152]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e52:	6593      	str	r3, [r2, #88]	; 0x58
 8001e54:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e60:	f7ff f830 	bl	8000ec4 <HAL_PWREx_GetVoltageRange>
 8001e64:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e7e:	d10b      	bne.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b80      	cmp	r3, #128	; 0x80
 8001e84:	d919      	bls.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2ba0      	cmp	r3, #160	; 0xa0
 8001e8a:	d902      	bls.n	8001e92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001e90:	e013      	b.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e92:	2301      	movs	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001e96:	e010      	b.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b80      	cmp	r3, #128	; 0x80
 8001e9c:	d902      	bls.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e00a      	b.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b80      	cmp	r3, #128	; 0x80
 8001ea8:	d102      	bne.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eaa:	2302      	movs	r3, #2
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	e004      	b.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b70      	cmp	r3, #112	; 0x70
 8001eb4:	d101      	bne.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 020f 	bic.w	r2, r3, #15
 8001ec2:	490a      	ldr	r1, [pc, #40]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40022000 	.word	0x40022000

08001ef0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ef6:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f00:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d015      	beq.n	8001f40 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d839      	bhi.n	8001f8e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d01c      	beq.n	8001f5a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d133      	bne.n	8001f8e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f26:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f30:	68d2      	ldr	r2, [r2, #12]
 8001f32:	0a12      	lsrs	r2, r2, #8
 8001f34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	613b      	str	r3, [r7, #16]
      break;
 8001f3e:	e029      	b.n	8001f94 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f40:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f4a:	68d2      	ldr	r2, [r2, #12]
 8001f4c:	0a12      	lsrs	r2, r2, #8
 8001f4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	613b      	str	r3, [r7, #16]
      break;
 8001f58:	e01c      	b.n	8001f94 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d107      	bne.n	8001f76 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	e005      	b.n	8001f82 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8a:	613b      	str	r3, [r7, #16]
        break;
 8001f8c:	e002      	b.n	8001f94 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
      break;
 8001f92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0e5b      	lsrs	r3, r3, #25
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001fae:	683b      	ldr	r3, [r7, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	00f42400 	.word	0x00f42400
 8001fc4:	08004ec0 	.word	0x08004ec0

08001fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e049      	b.n	800206e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d106      	bne.n	8001ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f841 	bl	8002076 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3304      	adds	r3, #4
 8002004:	4619      	mov	r1, r3
 8002006:	4610      	mov	r0, r2
 8002008:	f000 f9f8 	bl	80023fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d001      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e04f      	b.n	8002144 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a23      	ldr	r2, [pc, #140]	; (8002150 <HAL_TIM_Base_Start_IT+0xc4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d01d      	beq.n	8002102 <HAL_TIM_Base_Start_IT+0x76>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ce:	d018      	beq.n	8002102 <HAL_TIM_Base_Start_IT+0x76>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1f      	ldr	r2, [pc, #124]	; (8002154 <HAL_TIM_Base_Start_IT+0xc8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_TIM_Base_Start_IT+0x76>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_TIM_Base_Start_IT+0xcc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00e      	beq.n	8002102 <HAL_TIM_Base_Start_IT+0x76>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a1c      	ldr	r2, [pc, #112]	; (800215c <HAL_TIM_Base_Start_IT+0xd0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d009      	beq.n	8002102 <HAL_TIM_Base_Start_IT+0x76>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <HAL_TIM_Base_Start_IT+0xd4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d004      	beq.n	8002102 <HAL_TIM_Base_Start_IT+0x76>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a19      	ldr	r2, [pc, #100]	; (8002164 <HAL_TIM_Base_Start_IT+0xd8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d115      	bne.n	800212e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_TIM_Base_Start_IT+0xdc>)
 800210a:	4013      	ands	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b06      	cmp	r3, #6
 8002112:	d015      	beq.n	8002140 <HAL_TIM_Base_Start_IT+0xb4>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211a:	d011      	beq.n	8002140 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212c:	e008      	b.n	8002140 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e000      	b.n	8002142 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002140:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800
 800215c:	40000c00 	.word	0x40000c00
 8002160:	40013400 	.word	0x40013400
 8002164:	40014000 	.word	0x40014000
 8002168:	00010007 	.word	0x00010007

0800216c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b02      	cmp	r3, #2
 8002180:	d122      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b02      	cmp	r3, #2
 800218e:	d11b      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0202 	mvn.w	r2, #2
 8002198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f905 	bl	80023be <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f8f7 	bl	80023aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f908 	bl	80023d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d122      	bne.n	800221c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d11b      	bne.n	800221c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0204 	mvn.w	r2, #4
 80021ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2202      	movs	r2, #2
 80021f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f8db 	bl	80023be <HAL_TIM_IC_CaptureCallback>
 8002208:	e005      	b.n	8002216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f8cd 	bl	80023aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f8de 	bl	80023d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b08      	cmp	r3, #8
 8002228:	d122      	bne.n	8002270 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b08      	cmp	r3, #8
 8002236:	d11b      	bne.n	8002270 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0208 	mvn.w	r2, #8
 8002240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2204      	movs	r2, #4
 8002246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f8b1 	bl	80023be <HAL_TIM_IC_CaptureCallback>
 800225c:	e005      	b.n	800226a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f8a3 	bl	80023aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f8b4 	bl	80023d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b10      	cmp	r3, #16
 800227c:	d122      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b10      	cmp	r3, #16
 800228a:	d11b      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0210 	mvn.w	r2, #16
 8002294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2208      	movs	r2, #8
 800229a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f887 	bl	80023be <HAL_TIM_IC_CaptureCallback>
 80022b0:	e005      	b.n	80022be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f879 	bl	80023aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f88a 	bl	80023d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d10e      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d107      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0201 	mvn.w	r2, #1
 80022e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe f8fa 	bl	80004e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fa:	2b80      	cmp	r3, #128	; 0x80
 80022fc:	d10e      	bne.n	800231c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002308:	2b80      	cmp	r3, #128	; 0x80
 800230a:	d107      	bne.n	800231c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f914 	bl	8002544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800232a:	d10e      	bne.n	800234a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002336:	2b80      	cmp	r3, #128	; 0x80
 8002338:	d107      	bne.n	800234a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f907 	bl	8002558 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002354:	2b40      	cmp	r3, #64	; 0x40
 8002356:	d10e      	bne.n	8002376 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	2b40      	cmp	r3, #64	; 0x40
 8002364:	d107      	bne.n	8002376 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800236e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f838 	bl	80023e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b20      	cmp	r3, #32
 8002382:	d10e      	bne.n	80023a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b20      	cmp	r3, #32
 8002390:	d107      	bne.n	80023a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f06f 0220 	mvn.w	r2, #32
 800239a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f8c7 	bl	8002530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a40      	ldr	r2, [pc, #256]	; (8002510 <TIM_Base_SetConfig+0x114>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d013      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241a:	d00f      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a3d      	ldr	r2, [pc, #244]	; (8002514 <TIM_Base_SetConfig+0x118>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00b      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a3c      	ldr	r2, [pc, #240]	; (8002518 <TIM_Base_SetConfig+0x11c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d007      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a3b      	ldr	r2, [pc, #236]	; (800251c <TIM_Base_SetConfig+0x120>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d003      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a3a      	ldr	r2, [pc, #232]	; (8002520 <TIM_Base_SetConfig+0x124>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d108      	bne.n	800244e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a2f      	ldr	r2, [pc, #188]	; (8002510 <TIM_Base_SetConfig+0x114>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01f      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d01b      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a2c      	ldr	r2, [pc, #176]	; (8002514 <TIM_Base_SetConfig+0x118>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d017      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a2b      	ldr	r2, [pc, #172]	; (8002518 <TIM_Base_SetConfig+0x11c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a2a      	ldr	r2, [pc, #168]	; (800251c <TIM_Base_SetConfig+0x120>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00f      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a29      	ldr	r2, [pc, #164]	; (8002520 <TIM_Base_SetConfig+0x124>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00b      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a28      	ldr	r2, [pc, #160]	; (8002524 <TIM_Base_SetConfig+0x128>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d007      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a27      	ldr	r2, [pc, #156]	; (8002528 <TIM_Base_SetConfig+0x12c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d003      	beq.n	8002496 <TIM_Base_SetConfig+0x9a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a26      	ldr	r2, [pc, #152]	; (800252c <TIM_Base_SetConfig+0x130>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d108      	bne.n	80024a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a10      	ldr	r2, [pc, #64]	; (8002510 <TIM_Base_SetConfig+0x114>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00f      	beq.n	80024f4 <TIM_Base_SetConfig+0xf8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a12      	ldr	r2, [pc, #72]	; (8002520 <TIM_Base_SetConfig+0x124>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00b      	beq.n	80024f4 <TIM_Base_SetConfig+0xf8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a11      	ldr	r2, [pc, #68]	; (8002524 <TIM_Base_SetConfig+0x128>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d007      	beq.n	80024f4 <TIM_Base_SetConfig+0xf8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a10      	ldr	r2, [pc, #64]	; (8002528 <TIM_Base_SetConfig+0x12c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d003      	beq.n	80024f4 <TIM_Base_SetConfig+0xf8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a0f      	ldr	r2, [pc, #60]	; (800252c <TIM_Base_SetConfig+0x130>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d103      	bne.n	80024fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	615a      	str	r2, [r3, #20]
}
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40012c00 	.word	0x40012c00
 8002514:	40000400 	.word	0x40000400
 8002518:	40000800 	.word	0x40000800
 800251c:	40000c00 	.word	0x40000c00
 8002520:	40013400 	.word	0x40013400
 8002524:	40014000 	.word	0x40014000
 8002528:	40014400 	.word	0x40014400
 800252c:	40014800 	.word	0x40014800

08002530 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <__NVIC_SetPriority>:
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	6039      	str	r1, [r7, #0]
 8002576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	2b00      	cmp	r3, #0
 800257e:	db0a      	blt.n	8002596 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	490c      	ldr	r1, [pc, #48]	; (80025b8 <__NVIC_SetPriority+0x4c>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	0152      	lsls	r2, r2, #5
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	440b      	add	r3, r1
 8002590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002594:	e00a      	b.n	80025ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4908      	ldr	r1, [pc, #32]	; (80025bc <__NVIC_SetPriority+0x50>)
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	3b04      	subs	r3, #4
 80025a4:	0152      	lsls	r2, r2, #5
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	440b      	add	r3, r1
 80025aa:	761a      	strb	r2, [r3, #24]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000e100 	.word	0xe000e100
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <SysTick_Handler+0x1c>)
 80025c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80025c8:	f002 f816 	bl	80045f8 <xTaskGetSchedulerState>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d001      	beq.n	80025d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80025d2:	f000 fc09 	bl	8002de8 <xPortSysTickHandler>
  }
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80025e4:	2100      	movs	r1, #0
 80025e6:	f06f 0004 	mvn.w	r0, #4
 80025ea:	f7ff ffbf 	bl	800256c <__NVIC_SetPriority>
#endif
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025fa:	f3ef 8305 	mrs	r3, IPSR
 80025fe:	603b      	str	r3, [r7, #0]
  return(result);
 8002600:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002606:	f06f 0305 	mvn.w	r3, #5
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	e00c      	b.n	8002628 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <osKernelInitialize+0x44>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d105      	bne.n	8002622 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <osKernelInitialize+0x44>)
 8002618:	2201      	movs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800261c:	2300      	movs	r3, #0
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	e002      	b.n	8002628 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
 8002626:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002628:	687b      	ldr	r3, [r7, #4]
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000040 	.word	0x20000040

0800263c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002642:	f3ef 8305 	mrs	r3, IPSR
 8002646:	603b      	str	r3, [r7, #0]
  return(result);
 8002648:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <osKernelStart+0x1a>
    stat = osErrorISR;
 800264e:	f06f 0305 	mvn.w	r3, #5
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	e010      	b.n	8002678 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <osKernelStart+0x48>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d109      	bne.n	8002672 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800265e:	f7ff ffbf 	bl	80025e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <osKernelStart+0x48>)
 8002664:	2202      	movs	r2, #2
 8002666:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002668:	f001 fbd6 	bl	8003e18 <vTaskStartScheduler>
      stat = osOK;
 800266c:	2300      	movs	r3, #0
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	e002      	b.n	8002678 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002672:	f04f 33ff 	mov.w	r3, #4294967295
 8002676:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002678:	687b      	ldr	r3, [r7, #4]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000040 	.word	0x20000040

08002688 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800268e:	f3ef 8305 	mrs	r3, IPSR
 8002692:	603b      	str	r3, [r7, #0]
  return(result);
 8002694:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800269a:	f001 fcbf 	bl	800401c <xTaskGetTickCountFromISR>
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	e002      	b.n	80026a8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80026a2:	f001 fcab 	bl	8003ffc <xTaskGetTickCount>
 80026a6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80026a8:	687b      	ldr	r3, [r7, #4]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026be:	f3ef 8305 	mrs	r3, IPSR
 80026c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80026c4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80026ca:	f06f 0305 	mvn.w	r3, #5
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	e00b      	b.n	80026ea <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d103      	bne.n	80026e0 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80026d8:	f06f 0303 	mvn.w	r3, #3
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e004      	b.n	80026ea <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80026e4:	6938      	ldr	r0, [r7, #16]
 80026e6:	f001 fabb 	bl	8003c60 <vTaskSuspend>
  }

  return (stat);
 80026ea:	697b      	ldr	r3, [r7, #20]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002700:	f3ef 8305 	mrs	r3, IPSR
 8002704:	60fb      	str	r3, [r7, #12]
  return(result);
 8002706:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <osThreadResume+0x20>
    stat = osErrorISR;
 800270c:	f06f 0305 	mvn.w	r3, #5
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	e00b      	b.n	800272c <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800271a:	f06f 0303 	mvn.w	r3, #3
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	e004      	b.n	800272c <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8002726:	6938      	ldr	r0, [r7, #16]
 8002728:	f001 fb28 	bl	8003d7c <vTaskResume>
  }

  return (stat);
 800272c:	697b      	ldr	r3, [r7, #20]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800273e:	f3ef 8305 	mrs	r3, IPSR
 8002742:	60bb      	str	r3, [r7, #8]
  return(result);
 8002744:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <osDelay+0x1c>
    stat = osErrorISR;
 800274a:	f06f 0305 	mvn.w	r3, #5
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e007      	b.n	8002762 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <osDelay+0x2c>
      vTaskDelay(ticks);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f001 fa5b 	bl	8003c18 <vTaskDelay>
    }
  }

  return (stat);
 8002762:	68fb      	ldr	r3, [r7, #12]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4a07      	ldr	r2, [pc, #28]	; (8002798 <vApplicationGetIdleTaskMemory+0x2c>)
 800277c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4a06      	ldr	r2, [pc, #24]	; (800279c <vApplicationGetIdleTaskMemory+0x30>)
 8002782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800278a:	601a      	str	r2, [r3, #0]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	20000044 	.word	0x20000044
 800279c:	200000a0 	.word	0x200000a0

080027a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4a07      	ldr	r2, [pc, #28]	; (80027cc <vApplicationGetTimerTaskMemory+0x2c>)
 80027b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <vApplicationGetTimerTaskMemory+0x30>)
 80027b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027be:	601a      	str	r2, [r3, #0]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	200008a0 	.word	0x200008a0
 80027d0:	200008fc 	.word	0x200008fc

080027d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80027e0:	f001 fb70 	bl	8003ec4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80027e4:	4b4f      	ldr	r3, [pc, #316]	; (8002924 <pvPortMalloc+0x150>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80027ec:	f000 f8f8 	bl	80029e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80027f0:	4b4d      	ldr	r3, [pc, #308]	; (8002928 <pvPortMalloc+0x154>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f040 8083 	bne.w	8002904 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d015      	beq.n	8002830 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8002804:	2208      	movs	r2, #8
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00c      	beq.n	8002830 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f023 0307 	bic.w	r3, r3, #7
 800281c:	3308      	adds	r3, #8
 800281e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <pvPortMalloc+0x5c>
 800282a:	f000 fbe5 	bl	8002ff8 <ulSetInterruptMask>
 800282e:	e7fe      	b.n	800282e <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d066      	beq.n	8002904 <pvPortMalloc+0x130>
 8002836:	4b3d      	ldr	r3, [pc, #244]	; (800292c <pvPortMalloc+0x158>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	429a      	cmp	r2, r3
 800283e:	d861      	bhi.n	8002904 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002840:	4b3b      	ldr	r3, [pc, #236]	; (8002930 <pvPortMalloc+0x15c>)
 8002842:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8002844:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <pvPortMalloc+0x15c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800284a:	e004      	b.n	8002856 <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	429a      	cmp	r2, r3
 800285e:	d903      	bls.n	8002868 <pvPortMalloc+0x94>
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f1      	bne.n	800284c <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002868:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <pvPortMalloc+0x150>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	429a      	cmp	r2, r3
 8002870:	d048      	beq.n	8002904 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2208      	movs	r2, #8
 8002878:	4413      	add	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	1ad2      	subs	r2, r2, r3
 800288c:	2308      	movs	r3, #8
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	429a      	cmp	r2, r3
 8002892:	d917      	bls.n	80028c4 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <pvPortMalloc+0xd8>
 80028a6:	f000 fba7 	bl	8002ff8 <ulSetInterruptMask>
 80028aa:	e7fe      	b.n	80028aa <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	1ad2      	subs	r2, r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80028be:	68b8      	ldr	r0, [r7, #8]
 80028c0:	f000 f8f0 	bl	8002aa4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <pvPortMalloc+0x158>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	4a17      	ldr	r2, [pc, #92]	; (800292c <pvPortMalloc+0x158>)
 80028d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80028d2:	4b16      	ldr	r3, [pc, #88]	; (800292c <pvPortMalloc+0x158>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b17      	ldr	r3, [pc, #92]	; (8002934 <pvPortMalloc+0x160>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d203      	bcs.n	80028e6 <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80028de:	4b13      	ldr	r3, [pc, #76]	; (800292c <pvPortMalloc+0x158>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a14      	ldr	r2, [pc, #80]	; (8002934 <pvPortMalloc+0x160>)
 80028e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <pvPortMalloc+0x154>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80028fa:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <pvPortMalloc+0x164>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <pvPortMalloc+0x164>)
 8002902:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002904:	f001 faec 	bl	8003ee0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <pvPortMalloc+0x144>
 8002912:	f000 fb71 	bl	8002ff8 <ulSetInterruptMask>
 8002916:	e7fe      	b.n	8002916 <pvPortMalloc+0x142>
	return pvReturn;
 8002918:	68fb      	ldr	r3, [r7, #12]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200038bc 	.word	0x200038bc
 8002928:	200038d0 	.word	0x200038d0
 800292c:	200038c0 	.word	0x200038c0
 8002930:	200038b4 	.word	0x200038b4
 8002934:	200038c4 	.word	0x200038c4
 8002938:	200038c8 	.word	0x200038c8

0800293c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d03d      	beq.n	80029ca <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800294e:	2308      	movs	r3, #8
 8002950:	425b      	negs	r3, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4413      	add	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <vPortFree+0x98>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <vPortFree+0x34>
 800296a:	f000 fb45 	bl	8002ff8 <ulSetInterruptMask>
 800296e:	e7fe      	b.n	800296e <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <vPortFree+0x42>
 8002978:	f000 fb3e 	bl	8002ff8 <ulSetInterruptMask>
 800297c:	e7fe      	b.n	800297c <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <vPortFree+0x98>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01e      	beq.n	80029ca <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d11a      	bne.n	80029ca <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <vPortFree+0x98>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	43db      	mvns	r3, r3
 800299e:	401a      	ands	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80029a4:	f001 fa8e 	bl	8003ec4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <vPortFree+0x9c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4413      	add	r3, r2
 80029b2:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <vPortFree+0x9c>)
 80029b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80029b6:	68b8      	ldr	r0, [r7, #8]
 80029b8:	f000 f874 	bl	8002aa4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <vPortFree+0xa0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	4a06      	ldr	r2, [pc, #24]	; (80029dc <vPortFree+0xa0>)
 80029c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80029c6:	f001 fa8b 	bl	8003ee0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200038d0 	.word	0x200038d0
 80029d8:	200038c0 	.word	0x200038c0
 80029dc:	200038cc 	.word	0x200038cc

080029e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80029e6:	f641 73b8 	movw	r3, #8120	; 0x1fb8
 80029ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <prvHeapInit+0xac>)
 80029ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3307      	adds	r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0307 	bic.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	4a1f      	ldr	r2, [pc, #124]	; (8002a8c <prvHeapInit+0xac>)
 8002a10:	4413      	add	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a18:	4a1d      	ldr	r2, [pc, #116]	; (8002a90 <prvHeapInit+0xb0>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <prvHeapInit+0xb0>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	4413      	add	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0307 	bic.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a15      	ldr	r2, [pc, #84]	; (8002a94 <prvHeapInit+0xb4>)
 8002a40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002a42:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <prvHeapInit+0xb4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <prvHeapInit+0xb4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	1ad2      	subs	r2, r2, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <prvHeapInit+0xb4>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <prvHeapInit+0xb8>)
 8002a6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <prvHeapInit+0xbc>)
 8002a76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <prvHeapInit+0xc0>)
 8002a7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a7e:	601a      	str	r2, [r3, #0]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	200018fc 	.word	0x200018fc
 8002a90:	200038b4 	.word	0x200038b4
 8002a94:	200038bc 	.word	0x200038bc
 8002a98:	200038c4 	.word	0x200038c4
 8002a9c:	200038c0 	.word	0x200038c0
 8002aa0:	200038d0 	.word	0x200038d0

08002aa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002aac:	4b28      	ldr	r3, [pc, #160]	; (8002b50 <prvInsertBlockIntoFreeList+0xac>)
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	e002      	b.n	8002ab8 <prvInsertBlockIntoFreeList+0x14>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d8f7      	bhi.n	8002ab2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	4413      	add	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d108      	bne.n	8002ae6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	441a      	add	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	441a      	add	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d118      	bne.n	8002b2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <prvInsertBlockIntoFreeList+0xb0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d00d      	beq.n	8002b22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	441a      	add	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e008      	b.n	8002b34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <prvInsertBlockIntoFreeList+0xb0>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e003      	b.n	8002b34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d002      	beq.n	8002b42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	200038b4 	.word	0x200038b4
 8002b54:	200038bc 	.word	0x200038bc

08002b58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f103 0208 	add.w	r2, r3, #8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f103 0208 	add.w	r2, r3, #8
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f103 0208 	add.w	r2, r3, #8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b085      	sub	sp, #20
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	601a      	str	r2, [r3, #0]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d103      	bne.n	8002c1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e00c      	b.n	8002c34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e002      	b.n	8002c28 <vListInsert+0x2e>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d2f6      	bcs.n	8002c22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	601a      	str	r2, [r3, #0]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6892      	ldr	r2, [r2, #8]
 8002c82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6852      	ldr	r2, [r2, #4]
 8002c8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d103      	bne.n	8002ca0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	1e5a      	subs	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <vPortSetupTimerInterrupt+0x34>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002cca:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <vPortSetupTimerInterrupt+0x38>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <vPortSetupTimerInterrupt+0x3c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <vPortSetupTimerInterrupt+0x40>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	099b      	lsrs	r3, r3, #6
 8002cdc:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <vPortSetupTimerInterrupt+0x44>)
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8002ce2:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <vPortSetupTimerInterrupt+0x34>)
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	601a      	str	r2, [r3, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000e010 	.word	0xe000e010
 8002cf8:	e000e018 	.word	0xe000e018
 8002cfc:	2000000c 	.word	0x2000000c
 8002d00:	10624dd3 	.word	0x10624dd3
 8002d04:	e000e014 	.word	0xe000e014

08002d08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <prvTaskExitError+0x30>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d002      	beq.n	8002d22 <prvTaskExitError+0x1a>
 8002d1c:	f000 f96c 	bl	8002ff8 <ulSetInterruptMask>
 8002d20:	e7fe      	b.n	8002d20 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 8002d22:	f000 f969 	bl	8002ff8 <ulSetInterruptMask>

	while( ulDummy == 0 )
 8002d26:	bf00      	nop
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0fc      	beq.n	8002d28 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 8002d2e:	bf00      	nop
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000018 	.word	0x20000018

08002d3c <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if( configENABLE_FPU == 1 )
	static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
	{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
		#endif /* configENABLE_TRUSTZONE */

		/* CP10 = 11 ==> Full access to FPU i.e. both privileged and
		 * unprivileged code should be able to access FPU. CP11 should be
		 * programmed to the same value as CP10. */
		*( portCPACR ) |=	(	( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <prvSetupFPU+0x28>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <prvSetupFPU+0x28>)
 8002d46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d4a:	6013      	str	r3, [r2, #0]
							);

		/* ASPEN = 1 ==> Hardware should automatically preserve floating point
		 * context on exception entry and restore on exception return.
		 * LSPEN = 1 ==> Enable lazy context save of FP state. */
		*( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <prvSetupFPU+0x2c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <prvSetupFPU+0x2c>)
 8002d52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002d56:	6013      	str	r3, [r2, #0]
	}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000ed88 	.word	0xe000ed88
 8002d68:	e000ef34 	.word	0xe000ef34

08002d6c <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <vPortYield+0x20>)
 8002d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d76:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002d78:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002d7c:	f3bf 8f6f 	isb	sy
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000ed04 	.word	0xe000ed04

08002d90 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8002d94:	f000 f930 	bl	8002ff8 <ulSetInterruptMask>
	ulCriticalNesting++;
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <vPortEnterCritical+0x20>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <vPortEnterCritical+0x20>)
 8002da0:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002da2:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002da6:	f3bf 8f6f 	isb	sy
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000018 	.word	0x20000018

08002db4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <vPortExitCritical+0x30>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <vPortExitCritical+0x12>
 8002dc0:	f000 f91a 	bl	8002ff8 <ulSetInterruptMask>
 8002dc4:	e7fe      	b.n	8002dc4 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 8002dc6:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <vPortExitCritical+0x30>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	4a05      	ldr	r2, [pc, #20]	; (8002de4 <vPortExitCritical+0x30>)
 8002dce:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <vPortExitCritical+0x30>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f000 f91a 	bl	8003012 <vClearInterruptMask>
	}
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000018 	.word	0x20000018

08002de8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dee:	f000 f903 	bl	8002ff8 <ulSetInterruptMask>
 8002df2:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002df4:	f001 f924 	bl	8004040 <xTaskIncrementTick>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <xPortSysTickHandler+0x2c>)
 8002e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e04:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f903 	bl	8003012 <vClearInterruptMask>
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	e000ed04 	.word	0xe000ed04

08002e18 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3b02      	subs	r3, #2
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 8002e2e:	7afb      	ldrb	r3, [r7, #11]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d104      	bne.n	8002e3e <vPortSVCHandler_C+0x26>
			#endif /* configENABLE_TRUSTZONE */

			#if( configENABLE_FPU == 1 )
			{
				/* Setup the Floating Point Unit (FPU). */
				prvSetupFPU();
 8002e34:	f7ff ff82 	bl	8002d3c <prvSetupFPU>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8002e38:	f000 f8b2 	bl	8002fa0 <vRestoreContextOfFirstTask>
		}
		break;
 8002e3c:	e002      	b.n	8002e44 <vPortSVCHandler_C+0x2c>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8002e3e:	f000 f8db 	bl	8002ff8 <ulSetInterruptMask>
 8002e42:	e7fe      	b.n	8002e42 <vPortSVCHandler_C+0x2a>
		}
	}
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3b04      	subs	r3, #4
 8002e5e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e66:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3b04      	subs	r3, #4
 8002e6c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	3b04      	subs	r3, #4
 8002e78:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e7a:	4a38      	ldr	r2, [pc, #224]	; (8002f5c <pxPortInitialiseStack+0x110>)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3b04      	subs	r3, #4
 8002e84:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8002e8c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3b04      	subs	r3, #4
 8002e92:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8002e9a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3b04      	subs	r3, #4
 8002ea0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8002ea8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3b04      	subs	r3, #4
 8002eae:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8002eb6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3b04      	subs	r3, #4
 8002ebc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3b04      	subs	r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8002ed0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3b04      	subs	r3, #4
 8002ed6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8002ede:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	3b04      	subs	r3, #4
 8002ee4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8002eec:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3b04      	subs	r3, #4
 8002ef2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8002efa:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3b04      	subs	r3, #4
 8002f00:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8002f08:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3b04      	subs	r3, #4
 8002f0e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8002f16:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	3b04      	subs	r3, #4
 8002f1c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8002f24:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3b04      	subs	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8002f32:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3b04      	subs	r3, #4
 8002f38:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8002f40:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3b04      	subs	r3, #4
 8002f46:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	08002d09 	.word	0x08002d09

08002f60 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <xPortStartScheduler+0x38>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <xPortStartScheduler+0x38>)
 8002f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f6e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <xPortStartScheduler+0x38>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <xPortStartScheduler+0x38>)
 8002f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f7a:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 8002f7c:	f7ff fea0 	bl	8002cc0 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <xPortStartScheduler+0x3c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 8002f86:	f000 f823 	bl	8002fd0 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 8002f8a:	f001 f90b 	bl	80041a4 <vTaskSwitchContext>
	prvTaskExitError();
 8002f8e:	f7ff febb 	bl	8002d08 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	e000ed20 	.word	0xe000ed20
 8002f9c:	20000018 	.word	0x20000018

08002fa0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002fa0:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <pxCurrentTCBConst2>)
 8002fa2:	6811      	ldr	r1, [r2, #0]
 8002fa4:	6808      	ldr	r0, [r1, #0]
 8002fa6:	c806      	ldmia	r0!, {r1, r2}
 8002fa8:	f381 880b 	msr	PSPLIM, r1
 8002fac:	2102      	movs	r1, #2
 8002fae:	f381 8814 	msr	CONTROL, r1
 8002fb2:	3020      	adds	r0, #32
 8002fb4:	f380 8809 	msr	PSP, r0
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	4710      	bx	r2
 8002fbe:	bf00      	nop

08002fc0 <pxCurrentTCBConst2>:
 8002fc0:	200038d4 	.word	0x200038d4
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
	...

08002fd0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002fd0:	4807      	ldr	r0, [pc, #28]	; (8002ff0 <xVTORConst>)
 8002fd2:	6800      	ldr	r0, [r0, #0]
 8002fd4:	6800      	ldr	r0, [r0, #0]
 8002fd6:	f380 8808 	msr	MSP, r0
 8002fda:	b662      	cpsie	i
 8002fdc:	b661      	cpsie	f
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	df02      	svc	2
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	f3af 8000 	nop.w

08002ff0 <xVTORConst>:
 8002ff0:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop

08002ff8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8002ff8:	f3ef 8011 	mrs	r0, BASEPRI
 8002ffc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 8003000:	f381 8811 	msr	BASEPRI, r1
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800300e:	bf00      	nop
 8003010:	4618      	mov	r0, r3

08003012 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8003012:	f380 8811 	msr	BASEPRI, r0
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 8003020:	bf00      	nop
	...

08003030 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8003030:	f3ef 8009 	mrs	r0, PSP
 8003034:	f01e 0f10 	tst.w	lr, #16
 8003038:	bf08      	it	eq
 800303a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800303e:	f3ef 820b 	mrs	r2, PSPLIM
 8003042:	4673      	mov	r3, lr
 8003044:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8003048:	4a11      	ldr	r2, [pc, #68]	; (8003090 <pxCurrentTCBConst>)
 800304a:	6811      	ldr	r1, [r2, #0]
 800304c:	6008      	str	r0, [r1, #0]
 800304e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8003052:	f380 8811 	msr	BASEPRI, r0
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f001 f8a1 	bl	80041a4 <vTaskSwitchContext>
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f380 8811 	msr	BASEPRI, r0
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <pxCurrentTCBConst>)
 800306c:	6811      	ldr	r1, [r2, #0]
 800306e:	6808      	ldr	r0, [r1, #0]
 8003070:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8003074:	f013 0f10 	tst.w	r3, #16
 8003078:	bf08      	it	eq
 800307a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800307e:	f382 880b 	msr	PSPLIM, r2
 8003082:	f380 8809 	msr	PSP, r0
 8003086:	4718      	bx	r3
 8003088:	f3af 8000 	nop.w
 800308c:	f3af 8000 	nop.w

08003090 <pxCurrentTCBConst>:
 8003090:	200038d4 	.word	0x200038d4
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
	...

080030a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80030a0:	f01e 0f04 	tst.w	lr, #4
 80030a4:	bf0c      	ite	eq
 80030a6:	f3ef 8008 	mrseq	r0, MSP
 80030aa:	f3ef 8009 	mrsne	r0, PSP
 80030ae:	4904      	ldr	r1, [pc, #16]	; (80030c0 <svchandler_address_const>)
 80030b0:	4708      	bx	r1
 80030b2:	bf00      	nop
 80030b4:	f3af 8000 	nop.w
 80030b8:	f3af 8000 	nop.w
 80030bc:	f3af 8000 	nop.w

080030c0 <svchandler_address_const>:
 80030c0:	08002e19 	.word	0x08002e19
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop

080030c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <xQueueGenericReset+0x1a>
 80030dc:	f7ff ff8c 	bl	8002ff8 <ulSetInterruptMask>
 80030e0:	e7fe      	b.n	80030e0 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80030e2:	f7ff fe55 	bl	8002d90 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	68f9      	ldr	r1, [r7, #12]
 80030f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	441a      	add	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003112:	3b01      	subs	r3, #1
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	441a      	add	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	22ff      	movs	r2, #255	; 0xff
 8003126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	22ff      	movs	r2, #255	; 0xff
 800312e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10e      	bne.n	8003156 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d014      	beq.n	800316a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3310      	adds	r3, #16
 8003144:	4618      	mov	r0, r3
 8003146:	f001 f8c1 	bl	80042cc <xTaskRemoveFromEventList>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00c      	beq.n	800316a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003150:	f7ff fe0c 	bl	8002d6c <vPortYield>
 8003154:	e009      	b.n	800316a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3310      	adds	r3, #16
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fcfc 	bl	8002b58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3324      	adds	r3, #36	; 0x24
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fcf7 	bl	8002b58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800316a:	f7ff fe23 	bl	8002db4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800316e:	2301      	movs	r3, #1
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af02      	add	r7, sp, #8
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <xQueueGenericCreateStatic+0x1a>
 800318c:	f7ff ff34 	bl	8002ff8 <ulSetInterruptMask>
 8003190:	e7fe      	b.n	8003190 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <xQueueGenericCreateStatic+0x26>
 8003198:	f7ff ff2e 	bl	8002ff8 <ulSetInterruptMask>
 800319c:	e7fe      	b.n	800319c <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <xQueueGenericCreateStatic+0x32>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <xQueueGenericCreateStatic+0x36>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <xQueueGenericCreateStatic+0x38>
 80031ae:	2300      	movs	r3, #0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <xQueueGenericCreateStatic+0x42>
 80031b4:	f7ff ff20 	bl	8002ff8 <ulSetInterruptMask>
 80031b8:	e7fe      	b.n	80031b8 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <xQueueGenericCreateStatic+0x4e>
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <xQueueGenericCreateStatic+0x52>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <xQueueGenericCreateStatic+0x54>
 80031ca:	2300      	movs	r3, #0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d102      	bne.n	80031d6 <xQueueGenericCreateStatic+0x5e>
 80031d0:	f7ff ff12 	bl	8002ff8 <ulSetInterruptMask>
 80031d4:	e7fe      	b.n	80031d4 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80031d6:	2350      	movs	r3, #80	; 0x50
 80031d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b50      	cmp	r3, #80	; 0x50
 80031de:	d002      	beq.n	80031e6 <xQueueGenericCreateStatic+0x6e>
 80031e0:	f7ff ff0a 	bl	8002ff8 <ulSetInterruptMask>
 80031e4:	e7fe      	b.n	80031e4 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80031e6:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00d      	beq.n	800320e <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f805 	bl	8003218 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800320e:	697b      	ldr	r3, [r7, #20]
	}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d103      	bne.n	8003234 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e002      	b.n	800323a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003246:	2101      	movs	r1, #1
 8003248:	69b8      	ldr	r0, [r7, #24]
 800324a:	f7ff ff3d 	bl	80030c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b08a      	sub	sp, #40	; 0x28
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800326c:	2300      	movs	r3, #0
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d102      	bne.n	8003280 <xQueueGenericSend+0x22>
 800327a:	f7ff febd 	bl	8002ff8 <ulSetInterruptMask>
 800327e:	e7fe      	b.n	800327e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d103      	bne.n	800328e <xQueueGenericSend+0x30>
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <xQueueGenericSend+0x34>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <xQueueGenericSend+0x36>
 8003292:	2300      	movs	r3, #0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <xQueueGenericSend+0x40>
 8003298:	f7ff feae 	bl	8002ff8 <ulSetInterruptMask>
 800329c:	e7fe      	b.n	800329c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d103      	bne.n	80032ac <xQueueGenericSend+0x4e>
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <xQueueGenericSend+0x52>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <xQueueGenericSend+0x54>
 80032b0:	2300      	movs	r3, #0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <xQueueGenericSend+0x5e>
 80032b6:	f7ff fe9f 	bl	8002ff8 <ulSetInterruptMask>
 80032ba:	e7fe      	b.n	80032ba <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032bc:	f001 f99c 	bl	80045f8 <xTaskGetSchedulerState>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d102      	bne.n	80032cc <xQueueGenericSend+0x6e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <xQueueGenericSend+0x72>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <xQueueGenericSend+0x74>
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <xQueueGenericSend+0x7e>
 80032d6:	f7ff fe8f 	bl	8002ff8 <ulSetInterruptMask>
 80032da:	e7fe      	b.n	80032da <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032dc:	f7ff fd58 	bl	8002d90 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d302      	bcc.n	80032f2 <xQueueGenericSend+0x94>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d11d      	bne.n	800332e <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	6a38      	ldr	r0, [r7, #32]
 80032f8:	f000 f9a4 	bl	8003644 <prvCopyDataToQueue>
 80032fc:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	3324      	adds	r3, #36	; 0x24
 800330a:	4618      	mov	r0, r3
 800330c:	f000 ffde 	bl	80042cc <xTaskRemoveFromEventList>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003316:	f7ff fd29 	bl	8002d6c <vPortYield>
 800331a:	e004      	b.n	8003326 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003322:	f7ff fd23 	bl	8002d6c <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003326:	f7ff fd45 	bl	8002db4 <vPortExitCritical>
				return pdPASS;
 800332a:	2301      	movs	r3, #1
 800332c:	e05c      	b.n	80033e8 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003334:	f7ff fd3e 	bl	8002db4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003338:	2300      	movs	r3, #0
 800333a:	e055      	b.n	80033e8 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003342:	f107 0314 	add.w	r3, r7, #20
 8003346:	4618      	mov	r0, r3
 8003348:	f001 f81c 	bl	8004384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800334c:	2301      	movs	r3, #1
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003350:	f7ff fd30 	bl	8002db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003354:	f000 fdb6 	bl	8003ec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003358:	f7ff fd1a 	bl	8002d90 <vPortEnterCritical>
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003362:	b25b      	sxtb	r3, r3
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d103      	bne.n	8003372 <xQueueGenericSend+0x114>
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003378:	b25b      	sxtb	r3, r3
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d103      	bne.n	8003388 <xQueueGenericSend+0x12a>
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003388:	f7ff fd14 	bl	8002db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800338c:	1d3a      	adds	r2, r7, #4
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f001 f80b 	bl	80043b0 <xTaskCheckForTimeOut>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d11d      	bne.n	80033dc <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033a0:	6a38      	ldr	r0, [r7, #32]
 80033a2:	f000 fa47 	bl	8003834 <prvIsQueueFull>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d011      	beq.n	80033d0 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	3310      	adds	r3, #16
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 ff49 	bl	800424c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033ba:	6a38      	ldr	r0, [r7, #32]
 80033bc:	f000 f9d2 	bl	8003764 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033c0:	f000 fd8e 	bl	8003ee0 <xTaskResumeAll>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d188      	bne.n	80032dc <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 80033ca:	f7ff fccf 	bl	8002d6c <vPortYield>
 80033ce:	e785      	b.n	80032dc <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033d0:	6a38      	ldr	r0, [r7, #32]
 80033d2:	f000 f9c7 	bl	8003764 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033d6:	f000 fd83 	bl	8003ee0 <xTaskResumeAll>
 80033da:	e77f      	b.n	80032dc <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033dc:	6a38      	ldr	r0, [r7, #32]
 80033de:	f000 f9c1 	bl	8003764 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033e2:	f000 fd7d 	bl	8003ee0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80033e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3728      	adds	r7, #40	; 0x28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <xQueueGenericSendFromISR+0x1e>
 8003408:	f7ff fdf6 	bl	8002ff8 <ulSetInterruptMask>
 800340c:	e7fe      	b.n	800340c <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d103      	bne.n	800341c <xQueueGenericSendFromISR+0x2c>
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <xQueueGenericSendFromISR+0x30>
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <xQueueGenericSendFromISR+0x32>
 8003420:	2300      	movs	r3, #0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <xQueueGenericSendFromISR+0x3c>
 8003426:	f7ff fde7 	bl	8002ff8 <ulSetInterruptMask>
 800342a:	e7fe      	b.n	800342a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d103      	bne.n	800343a <xQueueGenericSendFromISR+0x4a>
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <xQueueGenericSendFromISR+0x4e>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <xQueueGenericSendFromISR+0x50>
 800343e:	2300      	movs	r3, #0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <xQueueGenericSendFromISR+0x5a>
 8003444:	f7ff fdd8 	bl	8002ff8 <ulSetInterruptMask>
 8003448:	e7fe      	b.n	8003448 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800344a:	f7ff fdd5 	bl	8002ff8 <ulSetInterruptMask>
 800344e:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	429a      	cmp	r2, r3
 800345a:	d302      	bcc.n	8003462 <xQueueGenericSendFromISR+0x72>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d12d      	bne.n	80034be <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003468:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	6a38      	ldr	r0, [r7, #32]
 8003476:	f000 f8e5 	bl	8003644 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800347a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003482:	d112      	bne.n	80034aa <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2b00      	cmp	r3, #0
 800348a:	d015      	beq.n	80034b8 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	3324      	adds	r3, #36	; 0x24
 8003490:	4618      	mov	r0, r3
 8003492:	f000 ff1b 	bl	80042cc <xTaskRemoveFromEventList>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00d      	beq.n	80034b8 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	e006      	b.n	80034b8 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034aa:	7efb      	ldrb	r3, [r7, #27]
 80034ac:	3301      	adds	r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	b25a      	sxtb	r2, r3
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80034b8:	2301      	movs	r3, #1
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
		{
 80034bc:	e001      	b.n	80034c2 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80034c2:	69f8      	ldr	r0, [r7, #28]
 80034c4:	f7ff fda5 	bl	8003012 <vClearInterruptMask>

	return xReturn;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3728      	adds	r7, #40	; 0x28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b08a      	sub	sp, #40	; 0x28
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <xQueueReceive+0x20>
 80034ec:	f7ff fd84 	bl	8002ff8 <ulSetInterruptMask>
 80034f0:	e7fe      	b.n	80034f0 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d103      	bne.n	8003500 <xQueueReceive+0x2e>
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <xQueueReceive+0x32>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <xQueueReceive+0x34>
 8003504:	2300      	movs	r3, #0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d102      	bne.n	8003510 <xQueueReceive+0x3e>
 800350a:	f7ff fd75 	bl	8002ff8 <ulSetInterruptMask>
 800350e:	e7fe      	b.n	800350e <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003510:	f001 f872 	bl	80045f8 <xTaskGetSchedulerState>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <xQueueReceive+0x4e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <xQueueReceive+0x52>
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <xQueueReceive+0x54>
 8003524:	2300      	movs	r3, #0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d102      	bne.n	8003530 <xQueueReceive+0x5e>
 800352a:	f7ff fd65 	bl	8002ff8 <ulSetInterruptMask>
 800352e:	e7fe      	b.n	800352e <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003530:	f7ff fc2e 	bl	8002d90 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d019      	beq.n	8003574 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	6a38      	ldr	r0, [r7, #32]
 8003544:	f000 f8e8 	bl	8003718 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d009      	beq.n	800356c <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	3310      	adds	r3, #16
 800355c:	4618      	mov	r0, r3
 800355e:	f000 feb5 	bl	80042cc <xTaskRemoveFromEventList>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003568:	f7ff fc00 	bl	8002d6c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800356c:	f7ff fc22 	bl	8002db4 <vPortExitCritical>
				return pdPASS;
 8003570:	2301      	movs	r3, #1
 8003572:	e063      	b.n	800363c <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800357a:	f7ff fc1b 	bl	8002db4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800357e:	2300      	movs	r3, #0
 8003580:	e05c      	b.n	800363c <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fef9 	bl	8004384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003592:	2301      	movs	r3, #1
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003596:	f7ff fc0d 	bl	8002db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800359a:	f000 fc93 	bl	8003ec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800359e:	f7ff fbf7 	bl	8002d90 <vPortEnterCritical>
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a8:	b25b      	sxtb	r3, r3
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ae:	d103      	bne.n	80035b8 <xQueueReceive+0xe6>
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035be:	b25b      	sxtb	r3, r3
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d103      	bne.n	80035ce <xQueueReceive+0xfc>
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035ce:	f7ff fbf1 	bl	8002db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035d2:	1d3a      	adds	r2, r7, #4
 80035d4:	f107 0314 	add.w	r3, r7, #20
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fee8 	bl	80043b0 <xTaskCheckForTimeOut>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d11d      	bne.n	8003622 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035e6:	6a38      	ldr	r0, [r7, #32]
 80035e8:	f000 f90e 	bl	8003808 <prvIsQueueEmpty>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d011      	beq.n	8003616 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	3324      	adds	r3, #36	; 0x24
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fe26 	bl	800424c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003600:	6a38      	ldr	r0, [r7, #32]
 8003602:	f000 f8af 	bl	8003764 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003606:	f000 fc6b 	bl	8003ee0 <xTaskResumeAll>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d18f      	bne.n	8003530 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 8003610:	f7ff fbac 	bl	8002d6c <vPortYield>
 8003614:	e78c      	b.n	8003530 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003616:	6a38      	ldr	r0, [r7, #32]
 8003618:	f000 f8a4 	bl	8003764 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800361c:	f000 fc60 	bl	8003ee0 <xTaskResumeAll>
 8003620:	e786      	b.n	8003530 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003622:	6a38      	ldr	r0, [r7, #32]
 8003624:	f000 f89e 	bl	8003764 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003628:	f000 fc5a 	bl	8003ee0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800362c:	6a38      	ldr	r0, [r7, #32]
 800362e:	f000 f8eb 	bl	8003808 <prvIsQueueEmpty>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	f43f af7b 	beq.w	8003530 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800363a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800363c:	4618      	mov	r0, r3
 800363e:	3728      	adds	r7, #40	; 0x28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10d      	bne.n	800367e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d14d      	bne.n	8003706 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 ffe0 	bl	8004634 <xTaskPriorityDisinherit>
 8003674:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	e043      	b.n	8003706 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d119      	bne.n	80036b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6858      	ldr	r0, [r3, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	461a      	mov	r2, r3
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	f001 fbb4 	bl	8004dfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	441a      	add	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d32b      	bcc.n	8003706 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	e026      	b.n	8003706 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	68d8      	ldr	r0, [r3, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	461a      	mov	r2, r3
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	f001 fb9a 	bl	8004dfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	425b      	negs	r3, r3
 80036d2:	441a      	add	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d207      	bcs.n	80036f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	425b      	negs	r3, r3
 80036ee:	441a      	add	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d105      	bne.n	8003706 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	3b01      	subs	r3, #1
 8003704:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800370e:	697b      	ldr	r3, [r7, #20]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d018      	beq.n	800375c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	441a      	add	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	429a      	cmp	r2, r3
 8003742:	d303      	bcc.n	800374c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68d9      	ldr	r1, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	461a      	mov	r2, r3
 8003756:	6838      	ldr	r0, [r7, #0]
 8003758:	f001 fb50 	bl	8004dfc <memcpy>
	}
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800376c:	f7ff fb10 	bl	8002d90 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003776:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003778:	e011      	b.n	800379e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d012      	beq.n	80037a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3324      	adds	r3, #36	; 0x24
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fda0 	bl	80042cc <xTaskRemoveFromEventList>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003792:	f000 fe5f 	bl	8004454 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	3b01      	subs	r3, #1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800379e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	dce9      	bgt.n	800377a <prvUnlockQueue+0x16>
 80037a6:	e000      	b.n	80037aa <prvUnlockQueue+0x46>
					break;
 80037a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	22ff      	movs	r2, #255	; 0xff
 80037ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037b2:	f7ff faff 	bl	8002db4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037b6:	f7ff faeb 	bl	8002d90 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037c2:	e011      	b.n	80037e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d012      	beq.n	80037f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3310      	adds	r3, #16
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fd7b 	bl	80042cc <xTaskRemoveFromEventList>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037dc:	f000 fe3a 	bl	8004454 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037e0:	7bbb      	ldrb	r3, [r7, #14]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	dce9      	bgt.n	80037c4 <prvUnlockQueue+0x60>
 80037f0:	e000      	b.n	80037f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	22ff      	movs	r2, #255	; 0xff
 80037f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80037fc:	f7ff fada 	bl	8002db4 <vPortExitCritical>
}
 8003800:	bf00      	nop
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003810:	f7ff fabe 	bl	8002d90 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800381c:	2301      	movs	r3, #1
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e001      	b.n	8003826 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003826:	f7ff fac5 	bl	8002db4 <vPortExitCritical>

	return xReturn;
 800382a:	68fb      	ldr	r3, [r7, #12]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800383c:	f7ff faa8 	bl	8002d90 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003848:	429a      	cmp	r2, r3
 800384a:	d102      	bne.n	8003852 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800384c:	2301      	movs	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	e001      	b.n	8003856 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003856:	f7ff faad 	bl	8002db4 <vPortExitCritical>

	return xReturn;
 800385a:	68fb      	ldr	r3, [r7, #12]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	e014      	b.n	800389e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003874:	4a0f      	ldr	r2, [pc, #60]	; (80038b4 <vQueueAddToRegistry+0x50>)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003880:	490c      	ldr	r1, [pc, #48]	; (80038b4 <vQueueAddToRegistry+0x50>)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <vQueueAddToRegistry+0x50>)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003896:	e006      	b.n	80038a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	3301      	adds	r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b07      	cmp	r3, #7
 80038a2:	d9e7      	bls.n	8003874 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20003f58 	.word	0x20003f58

080038b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038c8:	f7ff fa62 	bl	8002d90 <vPortEnterCritical>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038d2:	b25b      	sxtb	r3, r3
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d103      	bne.n	80038e2 <vQueueWaitForMessageRestricted+0x2a>
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038e8:	b25b      	sxtb	r3, r3
 80038ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ee:	d103      	bne.n	80038f8 <vQueueWaitForMessageRestricted+0x40>
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038f8:	f7ff fa5c 	bl	8002db4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	2b00      	cmp	r3, #0
 8003902:	d106      	bne.n	8003912 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	3324      	adds	r3, #36	; 0x24
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fcb9 	bl	8004284 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003912:	6978      	ldr	r0, [r7, #20]
 8003914:	f7ff ff26 	bl	8003764 <prvUnlockQueue>
	}
 8003918:	bf00      	nop
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08c      	sub	sp, #48	; 0x30
 8003924:	af04      	add	r7, sp, #16
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800392e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <xTaskCreateStatic+0x1a>
 8003934:	f7ff fb60 	bl	8002ff8 <ulSetInterruptMask>
 8003938:	e7fe      	b.n	8003938 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	2b00      	cmp	r3, #0
 800393e:	d102      	bne.n	8003946 <xTaskCreateStatic+0x26>
 8003940:	f7ff fb5a 	bl	8002ff8 <ulSetInterruptMask>
 8003944:	e7fe      	b.n	8003944 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003946:	235c      	movs	r3, #92	; 0x5c
 8003948:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b5c      	cmp	r3, #92	; 0x5c
 800394e:	d002      	beq.n	8003956 <xTaskCreateStatic+0x36>
 8003950:	f7ff fb52 	bl	8002ff8 <ulSetInterruptMask>
 8003954:	e7fe      	b.n	8003954 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003956:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01e      	beq.n	800399c <xTaskCreateStatic+0x7c>
 800395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01b      	beq.n	800399c <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003966:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800396c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2202      	movs	r2, #2
 8003972:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003976:	2300      	movs	r3, #0
 8003978:	9303      	str	r3, [sp, #12]
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	9302      	str	r3, [sp, #8]
 800397e:	f107 0318 	add.w	r3, r7, #24
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f850 	bl	8003a34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003994:	69f8      	ldr	r0, [r7, #28]
 8003996:	f000 f8d7 	bl	8003b48 <prvAddNewTaskToReadyList>
 800399a:	e001      	b.n	80039a0 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 800399c:	2300      	movs	r3, #0
 800399e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039a0:	69bb      	ldr	r3, [r7, #24]
	}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b08c      	sub	sp, #48	; 0x30
 80039ae:	af04      	add	r7, sp, #16
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	603b      	str	r3, [r7, #0]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe ff08 	bl	80027d4 <pvPortMalloc>
 80039c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00e      	beq.n	80039ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039cc:	205c      	movs	r0, #92	; 0x5c
 80039ce:	f7fe ff01 	bl	80027d4 <pvPortMalloc>
 80039d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
 80039e0:	e005      	b.n	80039ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039e2:	6978      	ldr	r0, [r7, #20]
 80039e4:	f7fe ffaa 	bl	800293c <vPortFree>
 80039e8:	e001      	b.n	80039ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d017      	beq.n	8003a24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039fc:	88fa      	ldrh	r2, [r7, #6]
 80039fe:	2300      	movs	r3, #0
 8003a00:	9303      	str	r3, [sp, #12]
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	9302      	str	r3, [sp, #8]
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f80e 	bl	8003a34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a18:	69f8      	ldr	r0, [r7, #28]
 8003a1a:	f000 f895 	bl	8003b48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	e002      	b.n	8003a2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295
 8003a28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
	}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	21a5      	movs	r1, #165	; 0xa5
 8003a4e:	f001 f9e2 	bl	8004e16 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f023 0307 	bic.w	r3, r3, #7
 8003a6a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <prvInitialiseNewTask+0x48>
 8003a76:	f7ff fabf 	bl	8002ff8 <ulSetInterruptMask>
 8003a7a:	e7fe      	b.n	8003a7a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01f      	beq.n	8003ac2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	e012      	b.n	8003aae <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	7819      	ldrb	r1, [r3, #0]
 8003a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	4413      	add	r3, r2
 8003a96:	3334      	adds	r3, #52	; 0x34
 8003a98:	460a      	mov	r2, r1
 8003a9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d006      	beq.n	8003ab6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b0f      	cmp	r3, #15
 8003ab2:	d9e9      	bls.n	8003a88 <prvInitialiseNewTask+0x54>
 8003ab4:	e000      	b.n	8003ab8 <prvInitialiseNewTask+0x84>
			{
				break;
 8003ab6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac0:	e003      	b.n	8003aca <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	2b37      	cmp	r3, #55	; 0x37
 8003ace:	d901      	bls.n	8003ad4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ad0:	2337      	movs	r3, #55	; 0x37
 8003ad2:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	6a3a      	ldr	r2, [r7, #32]
 8003ad8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	6a3a      	ldr	r2, [r7, #32]
 8003ade:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff f854 	bl	8002b98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	3318      	adds	r3, #24
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff f84f 	bl	8002b98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003afe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	2200      	movs	r2, #0
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	6938      	ldr	r0, [r7, #16]
 8003b28:	f7ff f990 	bl	8002e4c <pxPortInitialiseStack>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b50:	f7ff f91e 	bl	8002d90 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b54:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <prvAddNewTaskToReadyList+0xb8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	4a29      	ldr	r2, [pc, #164]	; (8003c00 <prvAddNewTaskToReadyList+0xb8>)
 8003b5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b5e:	4b29      	ldr	r3, [pc, #164]	; (8003c04 <prvAddNewTaskToReadyList+0xbc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b66:	4a27      	ldr	r2, [pc, #156]	; (8003c04 <prvAddNewTaskToReadyList+0xbc>)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <prvAddNewTaskToReadyList+0xb8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d110      	bne.n	8003b96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b74:	f000 fc8a 	bl	800448c <prvInitialiseTaskLists>
 8003b78:	e00d      	b.n	8003b96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b7a:	4b23      	ldr	r3, [pc, #140]	; (8003c08 <prvAddNewTaskToReadyList+0xc0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <prvAddNewTaskToReadyList+0xbc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d802      	bhi.n	8003b96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b90:	4a1c      	ldr	r2, [pc, #112]	; (8003c04 <prvAddNewTaskToReadyList+0xbc>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b96:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <prvAddNewTaskToReadyList+0xc4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	4a1b      	ldr	r2, [pc, #108]	; (8003c0c <prvAddNewTaskToReadyList+0xc4>)
 8003b9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ba0:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <prvAddNewTaskToReadyList+0xc4>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bac:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <prvAddNewTaskToReadyList+0xc8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d903      	bls.n	8003bbc <prvAddNewTaskToReadyList+0x74>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	4a15      	ldr	r2, [pc, #84]	; (8003c10 <prvAddNewTaskToReadyList+0xc8>)
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4a12      	ldr	r2, [pc, #72]	; (8003c14 <prvAddNewTaskToReadyList+0xcc>)
 8003bca:	441a      	add	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f7fe ffed 	bl	8002bb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bd8:	f7ff f8ec 	bl	8002db4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <prvAddNewTaskToReadyList+0xc0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003be4:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <prvAddNewTaskToReadyList+0xbc>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d201      	bcs.n	8003bf6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003bf2:	f7ff f8bb 	bl	8002d6c <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20003da8 	.word	0x20003da8
 8003c04:	200038d4 	.word	0x200038d4
 8003c08:	20003db4 	.word	0x20003db4
 8003c0c:	20003dc4 	.word	0x20003dc4
 8003c10:	20003db0 	.word	0x20003db0
 8003c14:	200038d8 	.word	0x200038d8

08003c18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00f      	beq.n	8003c4a <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <vTaskDelay+0x44>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <vTaskDelay+0x20>
 8003c32:	f7ff f9e1 	bl	8002ff8 <ulSetInterruptMask>
 8003c36:	e7fe      	b.n	8003c36 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8003c38:	f000 f944 	bl	8003ec4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fd56 	bl	80046f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c44:	f000 f94c 	bl	8003ee0 <xTaskResumeAll>
 8003c48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 8003c50:	f7ff f88c 	bl	8002d6c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20003dd0 	.word	0x20003dd0

08003c60 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003c68:	f7ff f892 	bl	8002d90 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <vTaskSuspend+0x18>
 8003c72:	4b29      	ldr	r3, [pc, #164]	; (8003d18 <vTaskSuspend+0xb8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	e000      	b.n	8003c7a <vTaskSuspend+0x1a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe fff3 	bl	8002c6c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3318      	adds	r3, #24
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe ffea 	bl	8002c6c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	481f      	ldr	r0, [pc, #124]	; (8003d1c <vTaskSuspend+0xbc>)
 8003ca0:	f7fe ff87 	bl	8002bb2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d103      	bne.n	8003cb8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003cb8:	f7ff f87c 	bl	8002db4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003cbc:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <vTaskSuspend+0xc0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003cc4:	f7ff f864 	bl	8002d90 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003cc8:	f000 fc76 	bl	80045b8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003ccc:	f7ff f872 	bl	8002db4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003cd0:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <vTaskSuspend+0xb8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d119      	bne.n	8003d0e <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8003cda:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <vTaskSuspend+0xc0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003ce2:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <vTaskSuspend+0xc4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <vTaskSuspend+0x90>
 8003cea:	f7ff f985 	bl	8002ff8 <ulSetInterruptMask>
 8003cee:	e7fe      	b.n	8003cee <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8003cf0:	f7ff f83c 	bl	8002d6c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cf4:	e00b      	b.n	8003d0e <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <vTaskSuspend+0xbc>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <vTaskSuspend+0xc8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d103      	bne.n	8003d0a <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <vTaskSuspend+0xb8>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
	}
 8003d08:	e001      	b.n	8003d0e <vTaskSuspend+0xae>
					vTaskSwitchContext();
 8003d0a:	f000 fa4b 	bl	80041a4 <vTaskSwitchContext>
	}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	200038d4 	.word	0x200038d4
 8003d1c:	20003d94 	.word	0x20003d94
 8003d20:	20003db4 	.word	0x20003db4
 8003d24:	20003dd0 	.word	0x20003dd0
 8003d28:	20003da8 	.word	0x20003da8

08003d2c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <prvTaskIsTaskSuspended+0x1c>
 8003d42:	f7ff f959 	bl	8002ff8 <ulSetInterruptMask>
 8003d46:	e7fe      	b.n	8003d46 <prvTaskIsTaskSuspended+0x1a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <prvTaskIsTaskSuspended+0x48>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d10a      	bne.n	8003d68 <prvTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <prvTaskIsTaskSuspended+0x4c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d005      	beq.n	8003d68 <prvTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <prvTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
 8003d64:	2301      	movs	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d68:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20003d94 	.word	0x20003d94
 8003d78:	20003d68 	.word	0x20003d68

08003d7c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <vTaskResume+0x18>
 8003d8e:	f7ff f933 	bl	8002ff8 <ulSetInterruptMask>
 8003d92:	e7fe      	b.n	8003d92 <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003d94:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <vTaskResume+0x90>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d032      	beq.n	8003e04 <vTaskResume+0x88>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d02f      	beq.n	8003e04 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 8003da4:	f7fe fff4 	bl	8002d90 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7ff ffbf 	bl	8003d2c <prvTaskIsTaskSuspended>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d025      	beq.n	8003e00 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe ff57 	bl	8002c6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc2:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <vTaskResume+0x94>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d903      	bls.n	8003dd2 <vTaskResume+0x56>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	4a10      	ldr	r2, [pc, #64]	; (8003e10 <vTaskResume+0x94>)
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4a0d      	ldr	r2, [pc, #52]	; (8003e14 <vTaskResume+0x98>)
 8003de0:	441a      	add	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4619      	mov	r1, r3
 8003de8:	4610      	mov	r0, r2
 8003dea:	f7fe fee2 	bl	8002bb2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <vTaskResume+0x90>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d301      	bcc.n	8003e00 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003dfc:	f7fe ffb6 	bl	8002d6c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003e00:	f7fe ffd8 	bl	8002db4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	200038d4 	.word	0x200038d4
 8003e10:	20003db0 	.word	0x20003db0
 8003e14:	200038d8 	.word	0x200038d8

08003e18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e26:	463a      	mov	r2, r7
 8003e28:	1d39      	adds	r1, r7, #4
 8003e2a:	f107 0308 	add.w	r3, r7, #8
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fc9c 	bl	800276c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e34:	6839      	ldr	r1, [r7, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	9202      	str	r2, [sp, #8]
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2300      	movs	r3, #0
 8003e44:	460a      	mov	r2, r1
 8003e46:	4919      	ldr	r1, [pc, #100]	; (8003eac <vTaskStartScheduler+0x94>)
 8003e48:	4819      	ldr	r0, [pc, #100]	; (8003eb0 <vTaskStartScheduler+0x98>)
 8003e4a:	f7ff fd69 	bl	8003920 <xTaskCreateStatic>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <vTaskStartScheduler+0x9c>)
 8003e52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e54:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <vTaskStartScheduler+0x9c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	e001      	b.n	8003e66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d102      	bne.n	8003e72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e6c:	f000 fc94 	bl	8004798 <xTimerCreateTimerTask>
 8003e70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d10e      	bne.n	8003e96 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003e78:	f7ff f8be 	bl	8002ff8 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e7c:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <vTaskStartScheduler+0xa0>)
 8003e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e84:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <vTaskStartScheduler+0xa4>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <vTaskStartScheduler+0xa8>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e90:	f7ff f866 	bl	8002f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e94:	e006      	b.n	8003ea4 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9c:	d102      	bne.n	8003ea4 <vTaskStartScheduler+0x8c>
 8003e9e:	f7ff f8ab 	bl	8002ff8 <ulSetInterruptMask>
 8003ea2:	e7fe      	b.n	8003ea2 <vTaskStartScheduler+0x8a>
}
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	08004e90 	.word	0x08004e90
 8003eb0:	0800446d 	.word	0x0800446d
 8003eb4:	20003dcc 	.word	0x20003dcc
 8003eb8:	20003dc8 	.word	0x20003dc8
 8003ebc:	20003db4 	.word	0x20003db4
 8003ec0:	20003dac 	.word	0x20003dac

08003ec4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <vTaskSuspendAll+0x18>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	4a03      	ldr	r2, [pc, #12]	; (8003edc <vTaskSuspendAll+0x18>)
 8003ed0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ed2:	bf00      	nop
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	20003dd0 	.word	0x20003dd0

08003ee0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003eee:	4b3b      	ldr	r3, [pc, #236]	; (8003fdc <xTaskResumeAll+0xfc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d102      	bne.n	8003efc <xTaskResumeAll+0x1c>
 8003ef6:	f7ff f87f 	bl	8002ff8 <ulSetInterruptMask>
 8003efa:	e7fe      	b.n	8003efa <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003efc:	f7fe ff48 	bl	8002d90 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f00:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <xTaskResumeAll+0xfc>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	4a35      	ldr	r2, [pc, #212]	; (8003fdc <xTaskResumeAll+0xfc>)
 8003f08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f0a:	4b34      	ldr	r3, [pc, #208]	; (8003fdc <xTaskResumeAll+0xfc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d15c      	bne.n	8003fcc <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f12:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <xTaskResumeAll+0x100>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d058      	beq.n	8003fcc <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f1a:	e02f      	b.n	8003f7c <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f1c:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <xTaskResumeAll+0x104>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3318      	adds	r3, #24
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe fe9f 	bl	8002c6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe fe9a 	bl	8002c6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3c:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <xTaskResumeAll+0x108>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d903      	bls.n	8003f4c <xTaskResumeAll+0x6c>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	4a27      	ldr	r2, [pc, #156]	; (8003fe8 <xTaskResumeAll+0x108>)
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4a24      	ldr	r2, [pc, #144]	; (8003fec <xTaskResumeAll+0x10c>)
 8003f5a:	441a      	add	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f7fe fe25 	bl	8002bb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6c:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <xTaskResumeAll+0x110>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d302      	bcc.n	8003f7c <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8003f76:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <xTaskResumeAll+0x114>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f7c:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <xTaskResumeAll+0x104>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1cb      	bne.n	8003f1c <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f8a:	f000 fb15 	bl	80045b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <xTaskResumeAll+0x118>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d010      	beq.n	8003fbc <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f9a:	f000 f851 	bl	8004040 <xTaskIncrementTick>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <xTaskResumeAll+0x114>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f1      	bne.n	8003f9a <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <xTaskResumeAll+0x118>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fbc:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <xTaskResumeAll+0x114>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fc8:	f7fe fed0 	bl	8002d6c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fcc:	f7fe fef2 	bl	8002db4 <vPortExitCritical>

	return xAlreadyYielded;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20003dd0 	.word	0x20003dd0
 8003fe0:	20003da8 	.word	0x20003da8
 8003fe4:	20003d68 	.word	0x20003d68
 8003fe8:	20003db0 	.word	0x20003db0
 8003fec:	200038d8 	.word	0x200038d8
 8003ff0:	200038d4 	.word	0x200038d4
 8003ff4:	20003dbc 	.word	0x20003dbc
 8003ff8:	20003db8 	.word	0x20003db8

08003ffc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <xTaskGetTickCount+0x1c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004008:	687b      	ldr	r3, [r7, #4]
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20003dac 	.word	0x20003dac

0800401c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <xTaskGetTickCountFromISR+0x20>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800402c:	683b      	ldr	r3, [r7, #0]
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20003dac 	.word	0x20003dac

08004040 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800404a:	4b4b      	ldr	r3, [pc, #300]	; (8004178 <xTaskIncrementTick+0x138>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f040 8087 	bne.w	8004162 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004054:	4b49      	ldr	r3, [pc, #292]	; (800417c <xTaskIncrementTick+0x13c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3301      	adds	r3, #1
 800405a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800405c:	4a47      	ldr	r2, [pc, #284]	; (800417c <xTaskIncrementTick+0x13c>)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d118      	bne.n	800409a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004068:	4b45      	ldr	r3, [pc, #276]	; (8004180 <xTaskIncrementTick+0x140>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <xTaskIncrementTick+0x38>
 8004072:	f7fe ffc1 	bl	8002ff8 <ulSetInterruptMask>
 8004076:	e7fe      	b.n	8004076 <xTaskIncrementTick+0x36>
 8004078:	4b41      	ldr	r3, [pc, #260]	; (8004180 <xTaskIncrementTick+0x140>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	4b41      	ldr	r3, [pc, #260]	; (8004184 <xTaskIncrementTick+0x144>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a3f      	ldr	r2, [pc, #252]	; (8004180 <xTaskIncrementTick+0x140>)
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	4a3f      	ldr	r2, [pc, #252]	; (8004184 <xTaskIncrementTick+0x144>)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	4b3e      	ldr	r3, [pc, #248]	; (8004188 <xTaskIncrementTick+0x148>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3301      	adds	r3, #1
 8004092:	4a3d      	ldr	r2, [pc, #244]	; (8004188 <xTaskIncrementTick+0x148>)
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	f000 fa8f 	bl	80045b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800409a:	4b3c      	ldr	r3, [pc, #240]	; (800418c <xTaskIncrementTick+0x14c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d349      	bcc.n	8004138 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040a4:	4b36      	ldr	r3, [pc, #216]	; (8004180 <xTaskIncrementTick+0x140>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ae:	4b37      	ldr	r3, [pc, #220]	; (800418c <xTaskIncrementTick+0x14c>)
 80040b0:	f04f 32ff 	mov.w	r2, #4294967295
 80040b4:	601a      	str	r2, [r3, #0]
					break;
 80040b6:	e03f      	b.n	8004138 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b8:	4b31      	ldr	r3, [pc, #196]	; (8004180 <xTaskIncrementTick+0x140>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d203      	bcs.n	80040d8 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040d0:	4a2e      	ldr	r2, [pc, #184]	; (800418c <xTaskIncrementTick+0x14c>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040d6:	e02f      	b.n	8004138 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	3304      	adds	r3, #4
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fe fdc5 	bl	8002c6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d004      	beq.n	80040f4 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3318      	adds	r3, #24
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe fdbc 	bl	8002c6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f8:	4b25      	ldr	r3, [pc, #148]	; (8004190 <xTaskIncrementTick+0x150>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d903      	bls.n	8004108 <xTaskIncrementTick+0xc8>
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	4a22      	ldr	r2, [pc, #136]	; (8004190 <xTaskIncrementTick+0x150>)
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4a1f      	ldr	r2, [pc, #124]	; (8004194 <xTaskIncrementTick+0x154>)
 8004116:	441a      	add	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	3304      	adds	r3, #4
 800411c:	4619      	mov	r1, r3
 800411e:	4610      	mov	r0, r2
 8004120:	f7fe fd47 	bl	8002bb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004128:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <xTaskIncrementTick+0x158>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	429a      	cmp	r2, r3
 8004130:	d3b8      	bcc.n	80040a4 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8004132:	2301      	movs	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004136:	e7b5      	b.n	80040a4 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004138:	4b17      	ldr	r3, [pc, #92]	; (8004198 <xTaskIncrementTick+0x158>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413e:	4915      	ldr	r1, [pc, #84]	; (8004194 <xTaskIncrementTick+0x154>)
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d901      	bls.n	8004154 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 8004150:	2301      	movs	r3, #1
 8004152:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004154:	4b11      	ldr	r3, [pc, #68]	; (800419c <xTaskIncrementTick+0x15c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800415c:	2301      	movs	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	e004      	b.n	800416c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <xTaskIncrementTick+0x160>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3301      	adds	r3, #1
 8004168:	4a0d      	ldr	r2, [pc, #52]	; (80041a0 <xTaskIncrementTick+0x160>)
 800416a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800416c:	697b      	ldr	r3, [r7, #20]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20003dd0 	.word	0x20003dd0
 800417c:	20003dac 	.word	0x20003dac
 8004180:	20003d60 	.word	0x20003d60
 8004184:	20003d64 	.word	0x20003d64
 8004188:	20003dc0 	.word	0x20003dc0
 800418c:	20003dc8 	.word	0x20003dc8
 8004190:	20003db0 	.word	0x20003db0
 8004194:	200038d8 	.word	0x200038d8
 8004198:	200038d4 	.word	0x200038d4
 800419c:	20003dbc 	.word	0x20003dbc
 80041a0:	20003db8 	.word	0x20003db8

080041a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041aa:	4b23      	ldr	r3, [pc, #140]	; (8004238 <vTaskSwitchContext+0x94>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041b2:	4b22      	ldr	r3, [pc, #136]	; (800423c <vTaskSwitchContext+0x98>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041b8:	e039      	b.n	800422e <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <vTaskSwitchContext+0x98>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041c0:	4b1f      	ldr	r3, [pc, #124]	; (8004240 <vTaskSwitchContext+0x9c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	e008      	b.n	80041da <vTaskSwitchContext+0x36>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <vTaskSwitchContext+0x30>
 80041ce:	f7fe ff13 	bl	8002ff8 <ulSetInterruptMask>
 80041d2:	e7fe      	b.n	80041d2 <vTaskSwitchContext+0x2e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	607b      	str	r3, [r7, #4]
 80041da:	491a      	ldr	r1, [pc, #104]	; (8004244 <vTaskSwitchContext+0xa0>)
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0ec      	beq.n	80041c8 <vTaskSwitchContext+0x24>
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4a12      	ldr	r2, [pc, #72]	; (8004244 <vTaskSwitchContext+0xa0>)
 80041fa:	4413      	add	r3, r2
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	3308      	adds	r3, #8
 8004210:	429a      	cmp	r2, r3
 8004212:	d104      	bne.n	800421e <vTaskSwitchContext+0x7a>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4a08      	ldr	r2, [pc, #32]	; (8004248 <vTaskSwitchContext+0xa4>)
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	4a05      	ldr	r2, [pc, #20]	; (8004240 <vTaskSwitchContext+0x9c>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6013      	str	r3, [r2, #0]
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20003dd0 	.word	0x20003dd0
 800423c:	20003dbc 	.word	0x20003dbc
 8004240:	20003db0 	.word	0x20003db0
 8004244:	200038d8 	.word	0x200038d8
 8004248:	200038d4 	.word	0x200038d4

0800424c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d102      	bne.n	8004262 <vTaskPlaceOnEventList+0x16>
 800425c:	f7fe fecc 	bl	8002ff8 <ulSetInterruptMask>
 8004260:	e7fe      	b.n	8004260 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004262:	4b07      	ldr	r3, [pc, #28]	; (8004280 <vTaskPlaceOnEventList+0x34>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3318      	adds	r3, #24
 8004268:	4619      	mov	r1, r3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fe fcc5 	bl	8002bfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004270:	2101      	movs	r1, #1
 8004272:	6838      	ldr	r0, [r7, #0]
 8004274:	f000 fa3c 	bl	80046f0 <prvAddCurrentTaskToDelayedList>
}
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	200038d4 	.word	0x200038d4

08004284 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <vTaskPlaceOnEventListRestricted+0x18>
 8004296:	f7fe feaf 	bl	8002ff8 <ulSetInterruptMask>
 800429a:	e7fe      	b.n	800429a <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <vTaskPlaceOnEventListRestricted+0x44>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3318      	adds	r3, #24
 80042a2:	4619      	mov	r1, r3
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7fe fc84 	bl	8002bb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	68b8      	ldr	r0, [r7, #8]
 80042ba:	f000 fa19 	bl	80046f0 <prvAddCurrentTaskToDelayedList>
	}
 80042be:	bf00      	nop
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	200038d4 	.word	0x200038d4

080042cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d102      	bne.n	80042e8 <xTaskRemoveFromEventList+0x1c>
 80042e2:	f7fe fe89 	bl	8002ff8 <ulSetInterruptMask>
 80042e6:	e7fe      	b.n	80042e6 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	3318      	adds	r3, #24
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe fcbd 	bl	8002c6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042f2:	4b1e      	ldr	r3, [pc, #120]	; (800436c <xTaskRemoveFromEventList+0xa0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d11d      	bne.n	8004336 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	3304      	adds	r3, #4
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe fcb4 	bl	8002c6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004308:	4b19      	ldr	r3, [pc, #100]	; (8004370 <xTaskRemoveFromEventList+0xa4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d903      	bls.n	8004318 <xTaskRemoveFromEventList+0x4c>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	4a16      	ldr	r2, [pc, #88]	; (8004370 <xTaskRemoveFromEventList+0xa4>)
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	4613      	mov	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4a13      	ldr	r2, [pc, #76]	; (8004374 <xTaskRemoveFromEventList+0xa8>)
 8004326:	441a      	add	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	3304      	adds	r3, #4
 800432c:	4619      	mov	r1, r3
 800432e:	4610      	mov	r0, r2
 8004330:	f7fe fc3f 	bl	8002bb2 <vListInsertEnd>
 8004334:	e005      	b.n	8004342 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	3318      	adds	r3, #24
 800433a:	4619      	mov	r1, r3
 800433c:	480e      	ldr	r0, [pc, #56]	; (8004378 <xTaskRemoveFromEventList+0xac>)
 800433e:	f7fe fc38 	bl	8002bb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004346:	4b0d      	ldr	r3, [pc, #52]	; (800437c <xTaskRemoveFromEventList+0xb0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	429a      	cmp	r2, r3
 800434e:	d905      	bls.n	800435c <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004350:	2301      	movs	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004354:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <xTaskRemoveFromEventList+0xb4>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e001      	b.n	8004360 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8004360:	68fb      	ldr	r3, [r7, #12]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20003dd0 	.word	0x20003dd0
 8004370:	20003db0 	.word	0x20003db0
 8004374:	200038d8 	.word	0x200038d8
 8004378:	20003d68 	.word	0x20003d68
 800437c:	200038d4 	.word	0x200038d4
 8004380:	20003dbc 	.word	0x20003dbc

08004384 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <vTaskInternalSetTimeOutState+0x24>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <vTaskInternalSetTimeOutState+0x28>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	605a      	str	r2, [r3, #4]
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	20003dc0 	.word	0x20003dc0
 80043ac:	20003dac 	.word	0x20003dac

080043b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d102      	bne.n	80043c6 <xTaskCheckForTimeOut+0x16>
 80043c0:	f7fe fe1a 	bl	8002ff8 <ulSetInterruptMask>
 80043c4:	e7fe      	b.n	80043c4 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d102      	bne.n	80043d2 <xTaskCheckForTimeOut+0x22>
 80043cc:	f7fe fe14 	bl	8002ff8 <ulSetInterruptMask>
 80043d0:	e7fe      	b.n	80043d0 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 80043d2:	f7fe fcdd 	bl	8002d90 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043d6:	4b1d      	ldr	r3, [pc, #116]	; (800444c <xTaskCheckForTimeOut+0x9c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d102      	bne.n	80043f6 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	e023      	b.n	800443e <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4b15      	ldr	r3, [pc, #84]	; (8004450 <xTaskCheckForTimeOut+0xa0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d007      	beq.n	8004412 <xTaskCheckForTimeOut+0x62>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	429a      	cmp	r2, r3
 800440a:	d302      	bcc.n	8004412 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800440c:	2301      	movs	r3, #1
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	e015      	b.n	800443e <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	429a      	cmp	r2, r3
 800441a:	d20b      	bcs.n	8004434 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1ad2      	subs	r2, r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff ffab 	bl	8004384 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	e004      	b.n	800443e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800443a:	2301      	movs	r3, #1
 800443c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800443e:	f7fe fcb9 	bl	8002db4 <vPortExitCritical>

	return xReturn;
 8004442:	697b      	ldr	r3, [r7, #20]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20003dac 	.word	0x20003dac
 8004450:	20003dc0 	.word	0x20003dc0

08004454 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <vTaskMissedYield+0x14>)
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]
}
 800445e:	bf00      	nop
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	20003dbc 	.word	0x20003dbc

0800446c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004474:	f000 f84a 	bl	800450c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004478:	4b03      	ldr	r3, [pc, #12]	; (8004488 <prvIdleTask+0x1c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d9f9      	bls.n	8004474 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004480:	f7fe fc74 	bl	8002d6c <vPortYield>
		prvCheckTasksWaitingTermination();
 8004484:	e7f6      	b.n	8004474 <prvIdleTask+0x8>
 8004486:	bf00      	nop
 8004488:	200038d8 	.word	0x200038d8

0800448c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004492:	2300      	movs	r3, #0
 8004494:	607b      	str	r3, [r7, #4]
 8004496:	e00c      	b.n	80044b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4a12      	ldr	r2, [pc, #72]	; (80044ec <prvInitialiseTaskLists+0x60>)
 80044a4:	4413      	add	r3, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fe fb56 	bl	8002b58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3301      	adds	r3, #1
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b37      	cmp	r3, #55	; 0x37
 80044b6:	d9ef      	bls.n	8004498 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044b8:	480d      	ldr	r0, [pc, #52]	; (80044f0 <prvInitialiseTaskLists+0x64>)
 80044ba:	f7fe fb4d 	bl	8002b58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044be:	480d      	ldr	r0, [pc, #52]	; (80044f4 <prvInitialiseTaskLists+0x68>)
 80044c0:	f7fe fb4a 	bl	8002b58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044c4:	480c      	ldr	r0, [pc, #48]	; (80044f8 <prvInitialiseTaskLists+0x6c>)
 80044c6:	f7fe fb47 	bl	8002b58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044ca:	480c      	ldr	r0, [pc, #48]	; (80044fc <prvInitialiseTaskLists+0x70>)
 80044cc:	f7fe fb44 	bl	8002b58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044d0:	480b      	ldr	r0, [pc, #44]	; (8004500 <prvInitialiseTaskLists+0x74>)
 80044d2:	f7fe fb41 	bl	8002b58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <prvInitialiseTaskLists+0x78>)
 80044d8:	4a05      	ldr	r2, [pc, #20]	; (80044f0 <prvInitialiseTaskLists+0x64>)
 80044da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044dc:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <prvInitialiseTaskLists+0x7c>)
 80044de:	4a05      	ldr	r2, [pc, #20]	; (80044f4 <prvInitialiseTaskLists+0x68>)
 80044e0:	601a      	str	r2, [r3, #0]
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	200038d8 	.word	0x200038d8
 80044f0:	20003d38 	.word	0x20003d38
 80044f4:	20003d4c 	.word	0x20003d4c
 80044f8:	20003d68 	.word	0x20003d68
 80044fc:	20003d7c 	.word	0x20003d7c
 8004500:	20003d94 	.word	0x20003d94
 8004504:	20003d60 	.word	0x20003d60
 8004508:	20003d64 	.word	0x20003d64

0800450c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004512:	e019      	b.n	8004548 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004514:	f7fe fc3c 	bl	8002d90 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004518:	4b10      	ldr	r3, [pc, #64]	; (800455c <prvCheckTasksWaitingTermination+0x50>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3304      	adds	r3, #4
 8004524:	4618      	mov	r0, r3
 8004526:	f7fe fba1 	bl	8002c6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800452a:	4b0d      	ldr	r3, [pc, #52]	; (8004560 <prvCheckTasksWaitingTermination+0x54>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3b01      	subs	r3, #1
 8004530:	4a0b      	ldr	r2, [pc, #44]	; (8004560 <prvCheckTasksWaitingTermination+0x54>)
 8004532:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <prvCheckTasksWaitingTermination+0x58>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3b01      	subs	r3, #1
 800453a:	4a0a      	ldr	r2, [pc, #40]	; (8004564 <prvCheckTasksWaitingTermination+0x58>)
 800453c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800453e:	f7fe fc39 	bl	8002db4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f810 	bl	8004568 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004548:	4b06      	ldr	r3, [pc, #24]	; (8004564 <prvCheckTasksWaitingTermination+0x58>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e1      	bne.n	8004514 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004550:	bf00      	nop
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20003d7c 	.word	0x20003d7c
 8004560:	20003da8 	.word	0x20003da8
 8004564:	20003d90 	.word	0x20003d90

08004568 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004576:	2b00      	cmp	r3, #0
 8004578:	d108      	bne.n	800458c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe f9dc 	bl	800293c <vPortFree>
				vPortFree( pxTCB );
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fe f9d9 	bl	800293c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800458a:	e010      	b.n	80045ae <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004592:	2b01      	cmp	r3, #1
 8004594:	d103      	bne.n	800459e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fe f9d0 	bl	800293c <vPortFree>
	}
 800459c:	e007      	b.n	80045ae <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d002      	beq.n	80045ae <prvDeleteTCB+0x46>
 80045a8:	f7fe fd26 	bl	8002ff8 <ulSetInterruptMask>
 80045ac:	e7fe      	b.n	80045ac <prvDeleteTCB+0x44>
	}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <prvResetNextTaskUnblockTime+0x38>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d104      	bne.n	80045d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <prvResetNextTaskUnblockTime+0x3c>)
 80045ca:	f04f 32ff 	mov.w	r2, #4294967295
 80045ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045d0:	e008      	b.n	80045e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d2:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <prvResetNextTaskUnblockTime+0x38>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a04      	ldr	r2, [pc, #16]	; (80045f4 <prvResetNextTaskUnblockTime+0x3c>)
 80045e2:	6013      	str	r3, [r2, #0]
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	20003d60 	.word	0x20003d60
 80045f4:	20003dc8 	.word	0x20003dc8

080045f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <xTaskGetSchedulerState+0x34>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004606:	2301      	movs	r3, #1
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	e008      	b.n	800461e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800460c:	4b08      	ldr	r3, [pc, #32]	; (8004630 <xTaskGetSchedulerState+0x38>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d102      	bne.n	800461a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004614:	2302      	movs	r3, #2
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	e001      	b.n	800461e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800461e:	687b      	ldr	r3, [r7, #4]
	}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	20003db4 	.word	0x20003db4
 8004630:	20003dd0 	.word	0x20003dd0

08004634 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d046      	beq.n	80046d8 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800464a:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <xTaskPriorityDisinherit+0xb0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	429a      	cmp	r2, r3
 8004652:	d002      	beq.n	800465a <xTaskPriorityDisinherit+0x26>
 8004654:	f7fe fcd0 	bl	8002ff8 <ulSetInterruptMask>
 8004658:	e7fe      	b.n	8004658 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <xTaskPriorityDisinherit+0x34>
 8004662:	f7fe fcc9 	bl	8002ff8 <ulSetInterruptMask>
 8004666:	e7fe      	b.n	8004666 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466c:	1e5a      	subs	r2, r3, #1
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467a:	429a      	cmp	r2, r3
 800467c:	d02c      	beq.n	80046d8 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004682:	2b00      	cmp	r3, #0
 8004684:	d128      	bne.n	80046d8 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	3304      	adds	r3, #4
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe faee 	bl	8002c6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a8:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <xTaskPriorityDisinherit+0xb4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d903      	bls.n	80046b8 <xTaskPriorityDisinherit+0x84>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	4a0c      	ldr	r2, [pc, #48]	; (80046e8 <xTaskPriorityDisinherit+0xb4>)
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4a09      	ldr	r2, [pc, #36]	; (80046ec <xTaskPriorityDisinherit+0xb8>)
 80046c6:	441a      	add	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f7fe fa6f 	bl	8002bb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046d4:	2301      	movs	r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046d8:	68fb      	ldr	r3, [r7, #12]
	}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200038d4 	.word	0x200038d4
 80046e8:	20003db0 	.word	0x20003db0
 80046ec:	200038d8 	.word	0x200038d8

080046f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046fa:	4b21      	ldr	r3, [pc, #132]	; (8004780 <prvAddCurrentTaskToDelayedList+0x90>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004700:	4b20      	ldr	r3, [pc, #128]	; (8004784 <prvAddCurrentTaskToDelayedList+0x94>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3304      	adds	r3, #4
 8004706:	4618      	mov	r0, r3
 8004708:	f7fe fab0 	bl	8002c6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004712:	d10a      	bne.n	800472a <prvAddCurrentTaskToDelayedList+0x3a>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800471a:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <prvAddCurrentTaskToDelayedList+0x94>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3304      	adds	r3, #4
 8004720:	4619      	mov	r1, r3
 8004722:	4819      	ldr	r0, [pc, #100]	; (8004788 <prvAddCurrentTaskToDelayedList+0x98>)
 8004724:	f7fe fa45 	bl	8002bb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004728:	e026      	b.n	8004778 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004732:	4b14      	ldr	r3, [pc, #80]	; (8004784 <prvAddCurrentTaskToDelayedList+0x94>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	429a      	cmp	r2, r3
 8004740:	d209      	bcs.n	8004756 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004742:	4b12      	ldr	r3, [pc, #72]	; (800478c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <prvAddCurrentTaskToDelayedList+0x94>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7fe fa53 	bl	8002bfa <vListInsert>
}
 8004754:	e010      	b.n	8004778 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004756:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <prvAddCurrentTaskToDelayedList+0x94>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f7fe fa49 	bl	8002bfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <prvAddCurrentTaskToDelayedList+0xa4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	d202      	bcs.n	8004778 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004772:	4a08      	ldr	r2, [pc, #32]	; (8004794 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	6013      	str	r3, [r2, #0]
}
 8004778:	bf00      	nop
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20003dac 	.word	0x20003dac
 8004784:	200038d4 	.word	0x200038d4
 8004788:	20003d94 	.word	0x20003d94
 800478c:	20003d64 	.word	0x20003d64
 8004790:	20003d60 	.word	0x20003d60
 8004794:	20003dc8 	.word	0x20003dc8

08004798 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80047a2:	f000 fac7 	bl	8004d34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80047a6:	4b18      	ldr	r3, [pc, #96]	; (8004808 <xTimerCreateTimerTask+0x70>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d020      	beq.n	80047f0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047b6:	463a      	mov	r2, r7
 80047b8:	1d39      	adds	r1, r7, #4
 80047ba:	f107 0308 	add.w	r3, r7, #8
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fd ffee 	bl	80027a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047c4:	6839      	ldr	r1, [r7, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	9202      	str	r2, [sp, #8]
 80047cc:	9301      	str	r3, [sp, #4]
 80047ce:	2302      	movs	r3, #2
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	2300      	movs	r3, #0
 80047d4:	460a      	mov	r2, r1
 80047d6:	490d      	ldr	r1, [pc, #52]	; (800480c <xTimerCreateTimerTask+0x74>)
 80047d8:	480d      	ldr	r0, [pc, #52]	; (8004810 <xTimerCreateTimerTask+0x78>)
 80047da:	f7ff f8a1 	bl	8003920 <xTaskCreateStatic>
 80047de:	4603      	mov	r3, r0
 80047e0:	4a0c      	ldr	r2, [pc, #48]	; (8004814 <xTimerCreateTimerTask+0x7c>)
 80047e2:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <xTimerCreateTimerTask+0x7c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80047ec:	2301      	movs	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <xTimerCreateTimerTask+0x64>
 80047f6:	f7fe fbff 	bl	8002ff8 <ulSetInterruptMask>
 80047fa:	e7fe      	b.n	80047fa <xTimerCreateTimerTask+0x62>
	return xReturn;
 80047fc:	68fb      	ldr	r3, [r7, #12]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20003e04 	.word	0x20003e04
 800480c:	08004e98 	.word	0x08004e98
 8004810:	0800492d 	.word	0x0800492d
 8004814:	20003e08 	.word	0x20003e08

08004818 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004826:	2300      	movs	r3, #0
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <xTimerGenericCommand+0x1e>
 8004830:	f7fe fbe2 	bl	8002ff8 <ulSetInterruptMask>
 8004834:	e7fe      	b.n	8004834 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004836:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <xTimerGenericCommand+0x88>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d02a      	beq.n	8004894 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b05      	cmp	r3, #5
 800484e:	dc18      	bgt.n	8004882 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004850:	f7ff fed2 	bl	80045f8 <xTaskGetSchedulerState>
 8004854:	4603      	mov	r3, r0
 8004856:	2b02      	cmp	r3, #2
 8004858:	d109      	bne.n	800486e <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800485a:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <xTimerGenericCommand+0x88>)
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	f107 0114 	add.w	r1, r7, #20
 8004862:	2300      	movs	r3, #0
 8004864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004866:	f7fe fcfa 	bl	800325e <xQueueGenericSend>
 800486a:	6278      	str	r0, [r7, #36]	; 0x24
 800486c:	e012      	b.n	8004894 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <xTimerGenericCommand+0x88>)
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	f107 0114 	add.w	r1, r7, #20
 8004876:	2300      	movs	r3, #0
 8004878:	2200      	movs	r2, #0
 800487a:	f7fe fcf0 	bl	800325e <xQueueGenericSend>
 800487e:	6278      	str	r0, [r7, #36]	; 0x24
 8004880:	e008      	b.n	8004894 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004882:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <xTimerGenericCommand+0x88>)
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	f107 0114 	add.w	r1, r7, #20
 800488a:	2300      	movs	r3, #0
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	f7fe fdaf 	bl	80033f0 <xQueueGenericSendFromISR>
 8004892:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004896:	4618      	mov	r0, r3
 8004898:	3728      	adds	r7, #40	; 0x28
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20003e04 	.word	0x20003e04

080048a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ae:	4b1e      	ldr	r3, [pc, #120]	; (8004928 <prvProcessExpiredTimer+0x84>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe f9d5 	bl	8002c6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01a      	beq.n	8004906 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	699a      	ldr	r2, [r3, #24]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	18d1      	adds	r1, r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f8c1 	bl	8004a64 <prvInsertTimerInActiveList>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d017      	beq.n	8004918 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048e8:	2300      	movs	r3, #0
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	2300      	movs	r3, #0
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	2100      	movs	r1, #0
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7ff ff90 	bl	8004818 <xTimerGenericCommand>
 80048f8:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <prvProcessExpiredTimer+0x74>
 8004900:	f7fe fb7a 	bl	8002ff8 <ulSetInterruptMask>
 8004904:	e7fe      	b.n	8004904 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	b2da      	uxtb	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	4798      	blx	r3
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20003dfc 	.word	0x20003dfc

0800492c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004934:	f107 0308 	add.w	r3, r7, #8
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f84f 	bl	80049dc <prvGetNextExpireTime>
 800493e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4619      	mov	r1, r3
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f803 	bl	8004950 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800494a:	f000 f8cd 	bl	8004ae8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800494e:	e7f1      	b.n	8004934 <prvTimerTask+0x8>

08004950 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800495a:	f7ff fab3 	bl	8003ec4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800495e:	f107 0308 	add.w	r3, r7, #8
 8004962:	4618      	mov	r0, r3
 8004964:	f000 f85e 	bl	8004a24 <prvSampleTimeNow>
 8004968:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d12a      	bne.n	80049c6 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10a      	bne.n	800498c <prvProcessTimerOrBlockTask+0x3c>
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	429a      	cmp	r2, r3
 800497c:	d806      	bhi.n	800498c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800497e:	f7ff faaf 	bl	8003ee0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff ff8d 	bl	80048a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800498a:	e01e      	b.n	80049ca <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <prvProcessTimerOrBlockTask+0x84>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <prvProcessTimerOrBlockTask+0x50>
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <prvProcessTimerOrBlockTask+0x52>
 80049a0:	2300      	movs	r3, #0
 80049a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049a4:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <prvProcessTimerOrBlockTask+0x88>)
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	4619      	mov	r1, r3
 80049b2:	f7fe ff81 	bl	80038b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049b6:	f7ff fa93 	bl	8003ee0 <xTaskResumeAll>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d104      	bne.n	80049ca <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80049c0:	f7fe f9d4 	bl	8002d6c <vPortYield>
}
 80049c4:	e001      	b.n	80049ca <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80049c6:	f7ff fa8b 	bl	8003ee0 <xTaskResumeAll>
}
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20003e00 	.word	0x20003e00
 80049d8:	20003e04 	.word	0x20003e04

080049dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049e4:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <prvGetNextExpireTime+0x44>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <prvGetNextExpireTime+0x16>
 80049ee:	2201      	movs	r2, #1
 80049f0:	e000      	b.n	80049f4 <prvGetNextExpireTime+0x18>
 80049f2:	2200      	movs	r2, #0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d105      	bne.n	8004a0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <prvGetNextExpireTime+0x44>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	e001      	b.n	8004a10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a10:	68fb      	ldr	r3, [r7, #12]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20003dfc 	.word	0x20003dfc

08004a24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a2c:	f7ff fae6 	bl	8003ffc <xTaskGetTickCount>
 8004a30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a32:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <prvSampleTimeNow+0x3c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d205      	bcs.n	8004a48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a3c:	f000 f91e 	bl	8004c7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e002      	b.n	8004a4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a4e:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <prvSampleTimeNow+0x3c>)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a54:	68fb      	ldr	r3, [r7, #12]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20003e0c 	.word	0x20003e0c

08004a64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d812      	bhi.n	8004ab0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	1ad2      	subs	r2, r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d302      	bcc.n	8004a9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e01b      	b.n	8004ad6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a9e:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <prvInsertTimerInActiveList+0x7c>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	f7fe f8a6 	bl	8002bfa <vListInsert>
 8004aae:	e012      	b.n	8004ad6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d206      	bcs.n	8004ac6 <prvInsertTimerInActiveList+0x62>
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d302      	bcc.n	8004ac6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e007      	b.n	8004ad6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <prvInsertTimerInActiveList+0x80>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f7fe f892 	bl	8002bfa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ad6:	697b      	ldr	r3, [r7, #20]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20003e00 	.word	0x20003e00
 8004ae4:	20003dfc 	.word	0x20003dfc

08004ae8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08c      	sub	sp, #48	; 0x30
 8004aec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004aee:	e0b2      	b.n	8004c56 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	da11      	bge.n	8004b1a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004af6:	f107 0308 	add.w	r3, r7, #8
 8004afa:	3304      	adds	r3, #4
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <prvProcessReceivedCommands+0x22>
 8004b04:	f7fe fa78 	bl	8002ff8 <ulSetInterruptMask>
 8004b08:	e7fe      	b.n	8004b08 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b10:	6850      	ldr	r0, [r2, #4]
 8004b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b14:	6892      	ldr	r2, [r2, #8]
 8004b16:	4611      	mov	r1, r2
 8004b18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f2c0 8099 	blt.w	8004c54 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d004      	beq.n	8004b38 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	3304      	adds	r3, #4
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe f89a 	bl	8002c6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b38:	1d3b      	adds	r3, r7, #4
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff ff72 	bl	8004a24 <prvSampleTimeNow>
 8004b40:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b09      	cmp	r3, #9
 8004b46:	f200 8086 	bhi.w	8004c56 <prvProcessReceivedCommands+0x16e>
 8004b4a:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <prvProcessReceivedCommands+0x68>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004b79 	.word	0x08004b79
 8004b54:	08004b79 	.word	0x08004b79
 8004b58:	08004b79 	.word	0x08004b79
 8004b5c:	08004bdd 	.word	0x08004bdd
 8004b60:	08004bf1 	.word	0x08004bf1
 8004b64:	08004c2b 	.word	0x08004c2b
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08004b79 	.word	0x08004b79
 8004b70:	08004bdd 	.word	0x08004bdd
 8004b74:	08004bf1 	.word	0x08004bf1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	18d1      	adds	r1, r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	6a38      	ldr	r0, [r7, #32]
 8004b98:	f7ff ff64 	bl	8004a64 <prvInsertTimerInActiveList>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d059      	beq.n	8004c56 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	6a38      	ldr	r0, [r7, #32]
 8004ba8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d04e      	beq.n	8004c56 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	441a      	add	r2, r3
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	6a38      	ldr	r0, [r7, #32]
 8004bca:	f7ff fe25 	bl	8004818 <xTimerGenericCommand>
 8004bce:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d13f      	bne.n	8004c56 <prvProcessReceivedCommands+0x16e>
 8004bd6:	f7fe fa0f 	bl	8002ff8 <ulSetInterruptMask>
 8004bda:	e7fe      	b.n	8004bda <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004bee:	e032      	b.n	8004c56 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d102      	bne.n	8004c16 <prvProcessReceivedCommands+0x12e>
 8004c10:	f7fe f9f2 	bl	8002ff8 <ulSetInterruptMask>
 8004c14:	e7fe      	b.n	8004c14 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	18d1      	adds	r1, r2, r3
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	69fa      	ldr	r2, [r7, #28]
 8004c22:	6a38      	ldr	r0, [r7, #32]
 8004c24:	f7ff ff1e 	bl	8004a64 <prvInsertTimerInActiveList>
					break;
 8004c28:	e015      	b.n	8004c56 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d103      	bne.n	8004c40 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8004c38:	6a38      	ldr	r0, [r7, #32]
 8004c3a:	f7fd fe7f 	bl	800293c <vPortFree>
 8004c3e:	e00a      	b.n	8004c56 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c52:	e000      	b.n	8004c56 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c56:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <prvProcessReceivedCommands+0x190>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f107 0108 	add.w	r1, r7, #8
 8004c5e:	2200      	movs	r2, #0
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fe fc36 	bl	80034d2 <xQueueReceive>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f47f af41 	bne.w	8004af0 <prvProcessReceivedCommands+0x8>
	}
}
 8004c6e:	bf00      	nop
 8004c70:	bf00      	nop
 8004c72:	3728      	adds	r7, #40	; 0x28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20003e04 	.word	0x20003e04

08004c7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c82:	e040      	b.n	8004d06 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c84:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <prvSwitchTimerLists+0xb0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c8e:	4b27      	ldr	r3, [pc, #156]	; (8004d2c <prvSwitchTimerLists+0xb0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fd ffe5 	bl	8002c6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d026      	beq.n	8004d06 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d90e      	bls.n	8004ce8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cd6:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <prvSwitchTimerLists+0xb0>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f7fd ff8a 	bl	8002bfa <vListInsert>
 8004ce6:	e00e      	b.n	8004d06 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ce8:	2300      	movs	r3, #0
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	2300      	movs	r3, #0
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7ff fd90 	bl	8004818 <xTimerGenericCommand>
 8004cf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d102      	bne.n	8004d06 <prvSwitchTimerLists+0x8a>
 8004d00:	f7fe f97a 	bl	8002ff8 <ulSetInterruptMask>
 8004d04:	e7fe      	b.n	8004d04 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d06:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <prvSwitchTimerLists+0xb0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1b9      	bne.n	8004c84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <prvSwitchTimerLists+0xb0>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d16:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <prvSwitchTimerLists+0xb4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <prvSwitchTimerLists+0xb0>)
 8004d1c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d1e:	4a04      	ldr	r2, [pc, #16]	; (8004d30 <prvSwitchTimerLists+0xb4>)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	6013      	str	r3, [r2, #0]
}
 8004d24:	bf00      	nop
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20003dfc 	.word	0x20003dfc
 8004d30:	20003e00 	.word	0x20003e00

08004d34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d3a:	f7fe f829 	bl	8002d90 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d3e:	4b15      	ldr	r3, [pc, #84]	; (8004d94 <prvCheckForValidListAndQueue+0x60>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d120      	bne.n	8004d88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d46:	4814      	ldr	r0, [pc, #80]	; (8004d98 <prvCheckForValidListAndQueue+0x64>)
 8004d48:	f7fd ff06 	bl	8002b58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d4c:	4813      	ldr	r0, [pc, #76]	; (8004d9c <prvCheckForValidListAndQueue+0x68>)
 8004d4e:	f7fd ff03 	bl	8002b58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d52:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <prvCheckForValidListAndQueue+0x6c>)
 8004d54:	4a10      	ldr	r2, [pc, #64]	; (8004d98 <prvCheckForValidListAndQueue+0x64>)
 8004d56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d58:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <prvCheckForValidListAndQueue+0x70>)
 8004d5a:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <prvCheckForValidListAndQueue+0x68>)
 8004d5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d5e:	2300      	movs	r3, #0
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	4b11      	ldr	r3, [pc, #68]	; (8004da8 <prvCheckForValidListAndQueue+0x74>)
 8004d64:	4a11      	ldr	r2, [pc, #68]	; (8004dac <prvCheckForValidListAndQueue+0x78>)
 8004d66:	2110      	movs	r1, #16
 8004d68:	200a      	movs	r0, #10
 8004d6a:	f7fe fa05 	bl	8003178 <xQueueGenericCreateStatic>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <prvCheckForValidListAndQueue+0x60>)
 8004d72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d74:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <prvCheckForValidListAndQueue+0x60>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <prvCheckForValidListAndQueue+0x60>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	490b      	ldr	r1, [pc, #44]	; (8004db0 <prvCheckForValidListAndQueue+0x7c>)
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe fd6e 	bl	8003864 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d88:	f7fe f814 	bl	8002db4 <vPortExitCritical>
}
 8004d8c:	bf00      	nop
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20003e04 	.word	0x20003e04
 8004d98:	20003dd4 	.word	0x20003dd4
 8004d9c:	20003de8 	.word	0x20003de8
 8004da0:	20003dfc 	.word	0x20003dfc
 8004da4:	20003e00 	.word	0x20003e00
 8004da8:	20003eb0 	.word	0x20003eb0
 8004dac:	20003e10 	.word	0x20003e10
 8004db0:	08004ea0 	.word	0x08004ea0

08004db4 <__libc_init_array>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	4d0d      	ldr	r5, [pc, #52]	; (8004dec <__libc_init_array+0x38>)
 8004db8:	2600      	movs	r6, #0
 8004dba:	4c0d      	ldr	r4, [pc, #52]	; (8004df0 <__libc_init_array+0x3c>)
 8004dbc:	1b64      	subs	r4, r4, r5
 8004dbe:	10a4      	asrs	r4, r4, #2
 8004dc0:	42a6      	cmp	r6, r4
 8004dc2:	d109      	bne.n	8004dd8 <__libc_init_array+0x24>
 8004dc4:	4d0b      	ldr	r5, [pc, #44]	; (8004df4 <__libc_init_array+0x40>)
 8004dc6:	2600      	movs	r6, #0
 8004dc8:	4c0b      	ldr	r4, [pc, #44]	; (8004df8 <__libc_init_array+0x44>)
 8004dca:	f000 f82d 	bl	8004e28 <_init>
 8004dce:	1b64      	subs	r4, r4, r5
 8004dd0:	10a4      	asrs	r4, r4, #2
 8004dd2:	42a6      	cmp	r6, r4
 8004dd4:	d105      	bne.n	8004de2 <__libc_init_array+0x2e>
 8004dd6:	bd70      	pop	{r4, r5, r6, pc}
 8004dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ddc:	3601      	adds	r6, #1
 8004dde:	4798      	blx	r3
 8004de0:	e7ee      	b.n	8004dc0 <__libc_init_array+0xc>
 8004de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de6:	3601      	adds	r6, #1
 8004de8:	4798      	blx	r3
 8004dea:	e7f2      	b.n	8004dd2 <__libc_init_array+0x1e>
 8004dec:	08004f00 	.word	0x08004f00
 8004df0:	08004f00 	.word	0x08004f00
 8004df4:	08004f00 	.word	0x08004f00
 8004df8:	08004f04 	.word	0x08004f04

08004dfc <memcpy>:
 8004dfc:	440a      	add	r2, r1
 8004dfe:	1e43      	subs	r3, r0, #1
 8004e00:	4291      	cmp	r1, r2
 8004e02:	d100      	bne.n	8004e06 <memcpy+0xa>
 8004e04:	4770      	bx	lr
 8004e06:	b510      	push	{r4, lr}
 8004e08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e0c:	4291      	cmp	r1, r2
 8004e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e12:	d1f9      	bne.n	8004e08 <memcpy+0xc>
 8004e14:	bd10      	pop	{r4, pc}

08004e16 <memset>:
 8004e16:	4402      	add	r2, r0
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d100      	bne.n	8004e20 <memset+0xa>
 8004e1e:	4770      	bx	lr
 8004e20:	f803 1b01 	strb.w	r1, [r3], #1
 8004e24:	e7f9      	b.n	8004e1a <memset+0x4>
	...

08004e28 <_init>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	bf00      	nop
 8004e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2e:	bc08      	pop	{r3}
 8004e30:	469e      	mov	lr, r3
 8004e32:	4770      	bx	lr

08004e34 <_fini>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	bf00      	nop
 8004e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3a:	bc08      	pop	{r3}
 8004e3c:	469e      	mov	lr, r3
 8004e3e:	4770      	bx	lr
